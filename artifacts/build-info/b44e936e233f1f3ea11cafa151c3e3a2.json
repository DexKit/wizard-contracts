{"id":"b44e936e233f1f3ea11cafa151c3e3a2","_format":"hh-sol-build-info-1","solcVersion":"0.8.9","solcLongVersion":"0.8.9+commit.e5eed63a","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/cryptography/EIP712.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\n\n        if (batchSize > 1) {\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\n            revert(\"ERC721Enumerable: consecutive transfers not supported\");\n        }\n\n        uint256 tokenId = firstTokenId;\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\n     * the storage mapping.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/Counters.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/EIP712.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"contracts/ERC20_BASE_PERMIT.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\n\ncontract Token is ERC20, ERC20Burnable, ERC20Permit {\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 max_supply\n    ) ERC20(name, symbol) ERC20Permit(name) {\n        _mint(msg.sender, max_supply * 10**decimals());\n    }\n}\n"},"contracts/ERC20_BASE.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\n\ncontract Token is ERC20, ERC20Burnable {\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 max_supply\n    ) ERC20(name, symbol) {\n        _mint(msg.sender, max_supply * 10**decimals());\n    }\n}\n"},"contracts/ERC721_BASE.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\ncontract MyToken is ERC721, ERC721Enumerable, ERC721URIStorage, Ownable {\n    using Counters for Counters.Counter;\n\n    Counters.Counter private _tokenIdCounter;\n\n    string private _contractURI;\n\n    struct ItemParam {\n        address to;\n        string tokenURI;\n    }\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        string memory contractURI_\n    ) ERC721(name_, symbol_) {\n        _contractURI = contractURI_;\n    }\n\n    function _baseURI() internal pure override returns (string memory) {\n        return \"ipfs://\";\n    }\n\n    function contractURI() public view returns (string memory) {\n        return string(abi.encodePacked(\"ipfs://\", _contractURI));\n    }\n\n    function safeMint(address to, string memory uri) public onlyOwner {\n        uint256 tokenId = _tokenIdCounter.current();\n        _tokenIdCounter.increment();\n        _safeMint(to, tokenId);\n        _setTokenURI(tokenId, uri);\n    }\n\n    function multiSafeMint(ItemParam[] memory items) public onlyOwner {\n        for (uint256 i = 0; i < items.length; i++) {\n            safeMint(items[i].to, items[i].tokenURI);\n        }\n    }\n\n    // The following functions are overrides required by Solidity.\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256 batchSize\n    ) internal override(ERC721, ERC721Enumerable) {\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\n    }\n\n    function _burn(uint256 tokenId)\n        internal\n        override(ERC721, ERC721URIStorage)\n    {\n        super._burn(tokenId);\n    }\n\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        override(ERC721, ERC721URIStorage)\n        returns (string memory)\n    {\n        return super.tokenURI(tokenId);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(ERC721, ERC721Enumerable)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n}\n"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[3022],"Ownable":[112]},"id":113,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":113,"sourceUnit":3023,"src":"127:30:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4,"name":"Context","nodeType":"IdentifierPath","referencedDeclaration":3022,"src":"683:7:0"},"id":5,"nodeType":"InheritanceSpecifier","src":"683:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"159:494:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":112,"linearizedBaseContracts":[112,3022],"name":"Ownable","nameLocation":"672:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":7,"mutability":"mutable","name":"_owner","nameLocation":"713:6:0","nodeType":"VariableDeclaration","scope":112,"src":"697:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"id":13,"name":"OwnershipTransferred","nameLocation":"732:20:0","nodeType":"EventDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"769:13:0","nodeType":"VariableDeclaration","scope":13,"src":"753:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":11,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"800:8:0","nodeType":"VariableDeclaration","scope":13,"src":"784:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"784:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:57:0"},"src":"726:84:0"},{"body":{"id":22,"nodeType":"Block","src":"926:49:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":18,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3012,"src":"955:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":19,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"955:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":17,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"936:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":20,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"936:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":21,"nodeType":"ExpressionStatement","src":"936:32:0"}]},"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"816:91:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":23,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"923:2:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"926:0:0"},"scope":112,"src":"912:63:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":30,"nodeType":"Block","src":"1084:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":26,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1094:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":27,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1094:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":28,"nodeType":"ExpressionStatement","src":"1094:13:0"},{"id":29,"nodeType":"PlaceholderStatement","src":"1117:1:0"}]},"documentation":{"id":24,"nodeType":"StructuredDocumentation","src":"981:77:0","text":" @dev Throws if called by any account other than the owner."},"id":31,"name":"onlyOwner","nameLocation":"1072:9:0","nodeType":"ModifierDefinition","parameters":{"id":25,"nodeType":"ParameterList","parameters":[],"src":"1081:2:0"},"src":"1063:62:0","virtual":false,"visibility":"internal"},{"body":{"id":39,"nodeType":"Block","src":"1256:30:0","statements":[{"expression":{"id":37,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"1273:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":36,"id":38,"nodeType":"Return","src":"1266:13:0"}]},"documentation":{"id":32,"nodeType":"StructuredDocumentation","src":"1131:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":40,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1210:5:0","nodeType":"FunctionDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"1215:2:0"},"returnParameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":35,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":40,"src":"1247:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":34,"name":"address","nodeType":"ElementaryTypeName","src":"1247:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1246:9:0"},"scope":112,"src":"1201:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":53,"nodeType":"Block","src":"1404:85:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":45,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"1422:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1422:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":47,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3012,"src":"1433:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1433:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1422:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":50,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1447:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":44,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1414:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1414:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52,"nodeType":"ExpressionStatement","src":"1414:68:0"}]},"documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"1292:62:0","text":" @dev Throws if the sender is not the owner."},"id":54,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1368:11:0","nodeType":"FunctionDefinition","parameters":{"id":42,"nodeType":"ParameterList","parameters":[],"src":"1379:2:0"},"returnParameters":{"id":43,"nodeType":"ParameterList","parameters":[],"src":"1404:0:0"},"scope":112,"src":"1359:130:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":67,"nodeType":"Block","src":"1885:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":63,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1922:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":62,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1914:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1914:7:0","typeDescriptions":{}}},"id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1914:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":60,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"1895:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1895:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":66,"nodeType":"ExpressionStatement","src":"1895:30:0"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1495:331:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."},"functionSelector":"715018a6","id":68,"implemented":true,"kind":"function","modifiers":[{"id":58,"kind":"modifierInvocation","modifierName":{"id":57,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1875:9:0"},"nodeType":"ModifierInvocation","src":"1875:9:0"}],"name":"renounceOwnership","nameLocation":"1840:17:0","nodeType":"FunctionDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"1857:2:0"},"returnParameters":{"id":59,"nodeType":"ParameterList","parameters":[],"src":"1885:0:0"},"scope":112,"src":"1831:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":90,"nodeType":"Block","src":"2151:128:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":77,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2169:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":80,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2189:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":79,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2181:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":78,"name":"address","nodeType":"ElementaryTypeName","src":"2181:7:0","typeDescriptions":{}}},"id":81,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2181:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2169:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":83,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2193:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":76,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2161:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":84,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2161:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":85,"nodeType":"ExpressionStatement","src":"2161:73:0"},{"expression":{"arguments":[{"id":87,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2263:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":86,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"2244:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2244:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":89,"nodeType":"ExpressionStatement","src":"2244:28:0"}]},"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"1938:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":91,"implemented":true,"kind":"function","modifiers":[{"id":74,"kind":"modifierInvocation","modifierName":{"id":73,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2141:9:0"},"nodeType":"ModifierInvocation","src":"2141:9:0"}],"name":"transferOwnership","nameLocation":"2090:17:0","nodeType":"FunctionDefinition","parameters":{"id":72,"nodeType":"ParameterList","parameters":[{"constant":false,"id":71,"mutability":"mutable","name":"newOwner","nameLocation":"2116:8:0","nodeType":"VariableDeclaration","scope":91,"src":"2108:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":70,"name":"address","nodeType":"ElementaryTypeName","src":"2108:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2107:18:0"},"returnParameters":{"id":75,"nodeType":"ParameterList","parameters":[],"src":"2151:0:0"},"scope":112,"src":"2081:198:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":110,"nodeType":"Block","src":"2496:124:0","statements":[{"assignments":[98],"declarations":[{"constant":false,"id":98,"mutability":"mutable","name":"oldOwner","nameLocation":"2514:8:0","nodeType":"VariableDeclaration","scope":110,"src":"2506:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":97,"name":"address","nodeType":"ElementaryTypeName","src":"2506:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":100,"initialValue":{"id":99,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2525:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2506:25:0"},{"expression":{"id":103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":101,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2541:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":102,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2550:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2541:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":104,"nodeType":"ExpressionStatement","src":"2541:17:0"},{"eventCall":{"arguments":[{"id":106,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"2594:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":107,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2604:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":105,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"2573:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2573:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":109,"nodeType":"EmitStatement","src":"2568:45:0"}]},"documentation":{"id":92,"nodeType":"StructuredDocumentation","src":"2285:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":111,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2442:18:0","nodeType":"FunctionDefinition","parameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":94,"mutability":"mutable","name":"newOwner","nameLocation":"2469:8:0","nodeType":"VariableDeclaration","scope":111,"src":"2461:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":93,"name":"address","nodeType":"ElementaryTypeName","src":"2461:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2460:18:0"},"returnParameters":{"id":96,"nodeType":"ParameterList","parameters":[],"src":"2496:0:0"},"scope":112,"src":"2433:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":113,"src":"654:1968:0","usedErrors":[]}],"src":"102:2521:0"},"id":0},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","exportedSymbols":{"Context":[3022],"ERC20":[699],"IERC20":[777],"IERC20Metadata":[846]},"id":700,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":114,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:1"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"./IERC20.sol","id":115,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":700,"sourceUnit":778,"src":"130:22:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","file":"./extensions/IERC20Metadata.sol","id":116,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":700,"sourceUnit":847,"src":"153:41:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":117,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":700,"sourceUnit":3023,"src":"195:33:1","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":119,"name":"Context","nodeType":"IdentifierPath","referencedDeclaration":3022,"src":"1419:7:1"},"id":120,"nodeType":"InheritanceSpecifier","src":"1419:7:1"},{"baseName":{"id":121,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":777,"src":"1428:6:1"},"id":122,"nodeType":"InheritanceSpecifier","src":"1428:6:1"},{"baseName":{"id":123,"name":"IERC20Metadata","nodeType":"IdentifierPath","referencedDeclaration":846,"src":"1436:14:1"},"id":124,"nodeType":"InheritanceSpecifier","src":"1436:14:1"}],"canonicalName":"ERC20","contractDependencies":[],"contractKind":"contract","documentation":{"id":118,"nodeType":"StructuredDocumentation","src":"230:1170:1","text":" @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."},"fullyImplemented":true,"id":699,"linearizedBaseContracts":[699,846,777,3022],"name":"ERC20","nameLocation":"1410:5:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":128,"mutability":"mutable","name":"_balances","nameLocation":"1493:9:1","nodeType":"VariableDeclaration","scope":699,"src":"1457:45:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":127,"keyType":{"id":125,"name":"address","nodeType":"ElementaryTypeName","src":"1465:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1457:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":126,"name":"uint256","nodeType":"ElementaryTypeName","src":"1476:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":134,"mutability":"mutable","name":"_allowances","nameLocation":"1565:11:1","nodeType":"VariableDeclaration","scope":699,"src":"1509:67:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":133,"keyType":{"id":129,"name":"address","nodeType":"ElementaryTypeName","src":"1517:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1509:47:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueType":{"id":132,"keyType":{"id":130,"name":"address","nodeType":"ElementaryTypeName","src":"1536:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1528:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":131,"name":"uint256","nodeType":"ElementaryTypeName","src":"1547:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":136,"mutability":"mutable","name":"_totalSupply","nameLocation":"1599:12:1","nodeType":"VariableDeclaration","scope":699,"src":"1583:28:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":135,"name":"uint256","nodeType":"ElementaryTypeName","src":"1583:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":138,"mutability":"mutable","name":"_name","nameLocation":"1633:5:1","nodeType":"VariableDeclaration","scope":699,"src":"1618:20:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":137,"name":"string","nodeType":"ElementaryTypeName","src":"1618:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":140,"mutability":"mutable","name":"_symbol","nameLocation":"1659:7:1","nodeType":"VariableDeclaration","scope":699,"src":"1644:22:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":139,"name":"string","nodeType":"ElementaryTypeName","src":"1644:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":156,"nodeType":"Block","src":"2032:57:1","statements":[{"expression":{"id":150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":148,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"2042:5:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":149,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":143,"src":"2050:5:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2042:13:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":151,"nodeType":"ExpressionStatement","src":"2042:13:1"},{"expression":{"id":154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":152,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":140,"src":"2065:7:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":153,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":145,"src":"2075:7:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2065:17:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":155,"nodeType":"ExpressionStatement","src":"2065:17:1"}]},"documentation":{"id":141,"nodeType":"StructuredDocumentation","src":"1673:298:1","text":" @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."},"id":157,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":143,"mutability":"mutable","name":"name_","nameLocation":"2002:5:1","nodeType":"VariableDeclaration","scope":157,"src":"1988:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":142,"name":"string","nodeType":"ElementaryTypeName","src":"1988:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":145,"mutability":"mutable","name":"symbol_","nameLocation":"2023:7:1","nodeType":"VariableDeclaration","scope":157,"src":"2009:21:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":144,"name":"string","nodeType":"ElementaryTypeName","src":"2009:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1987:44:1"},"returnParameters":{"id":147,"nodeType":"ParameterList","parameters":[],"src":"2032:0:1"},"scope":699,"src":"1976:113:1","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[833],"body":{"id":166,"nodeType":"Block","src":"2223:29:1","statements":[{"expression":{"id":164,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"2240:5:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":163,"id":165,"nodeType":"Return","src":"2233:12:1"}]},"documentation":{"id":158,"nodeType":"StructuredDocumentation","src":"2095:54:1","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":167,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2163:4:1","nodeType":"FunctionDefinition","overrides":{"id":160,"nodeType":"OverrideSpecifier","overrides":[],"src":"2190:8:1"},"parameters":{"id":159,"nodeType":"ParameterList","parameters":[],"src":"2167:2:1"},"returnParameters":{"id":163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":162,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":167,"src":"2208:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":161,"name":"string","nodeType":"ElementaryTypeName","src":"2208:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2207:15:1"},"scope":699,"src":"2154:98:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[839],"body":{"id":176,"nodeType":"Block","src":"2436:31:1","statements":[{"expression":{"id":174,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":140,"src":"2453:7:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":173,"id":175,"nodeType":"Return","src":"2446:14:1"}]},"documentation":{"id":168,"nodeType":"StructuredDocumentation","src":"2258:102:1","text":" @dev Returns the symbol of the token, usually a shorter version of the\n name."},"functionSelector":"95d89b41","id":177,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2374:6:1","nodeType":"FunctionDefinition","overrides":{"id":170,"nodeType":"OverrideSpecifier","overrides":[],"src":"2403:8:1"},"parameters":{"id":169,"nodeType":"ParameterList","parameters":[],"src":"2380:2:1"},"returnParameters":{"id":173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":172,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":177,"src":"2421:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":171,"name":"string","nodeType":"ElementaryTypeName","src":"2421:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2420:15:1"},"scope":699,"src":"2365:102:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[845],"body":{"id":186,"nodeType":"Block","src":"3156:26:1","statements":[{"expression":{"hexValue":"3138","id":184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3173:2:1","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"functionReturnParameters":183,"id":185,"nodeType":"Return","src":"3166:9:1"}]},"documentation":{"id":178,"nodeType":"StructuredDocumentation","src":"2473:613:1","text":" @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."},"functionSelector":"313ce567","id":187,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"3100:8:1","nodeType":"FunctionDefinition","overrides":{"id":180,"nodeType":"OverrideSpecifier","overrides":[],"src":"3131:8:1"},"parameters":{"id":179,"nodeType":"ParameterList","parameters":[],"src":"3108:2:1"},"returnParameters":{"id":183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":182,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":187,"src":"3149:5:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":181,"name":"uint8","nodeType":"ElementaryTypeName","src":"3149:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"3148:7:1"},"scope":699,"src":"3091:91:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[726],"body":{"id":196,"nodeType":"Block","src":"3312:36:1","statements":[{"expression":{"id":194,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":136,"src":"3329:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":193,"id":195,"nodeType":"Return","src":"3322:19:1"}]},"documentation":{"id":188,"nodeType":"StructuredDocumentation","src":"3188:49:1","text":" @dev See {IERC20-totalSupply}."},"functionSelector":"18160ddd","id":197,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"3251:11:1","nodeType":"FunctionDefinition","overrides":{"id":190,"nodeType":"OverrideSpecifier","overrides":[],"src":"3285:8:1"},"parameters":{"id":189,"nodeType":"ParameterList","parameters":[],"src":"3262:2:1"},"returnParameters":{"id":193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":192,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":197,"src":"3303:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":191,"name":"uint256","nodeType":"ElementaryTypeName","src":"3303:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3302:9:1"},"scope":699,"src":"3242:106:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[734],"body":{"id":210,"nodeType":"Block","src":"3489:42:1","statements":[{"expression":{"baseExpression":{"id":206,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"3506:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":208,"indexExpression":{"id":207,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":200,"src":"3516:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3506:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":205,"id":209,"nodeType":"Return","src":"3499:25:1"}]},"documentation":{"id":198,"nodeType":"StructuredDocumentation","src":"3354:47:1","text":" @dev See {IERC20-balanceOf}."},"functionSelector":"70a08231","id":211,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"3415:9:1","nodeType":"FunctionDefinition","overrides":{"id":202,"nodeType":"OverrideSpecifier","overrides":[],"src":"3462:8:1"},"parameters":{"id":201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":200,"mutability":"mutable","name":"account","nameLocation":"3433:7:1","nodeType":"VariableDeclaration","scope":211,"src":"3425:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":199,"name":"address","nodeType":"ElementaryTypeName","src":"3425:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3424:17:1"},"returnParameters":{"id":205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":204,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":211,"src":"3480:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":203,"name":"uint256","nodeType":"ElementaryTypeName","src":"3480:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3479:9:1"},"scope":699,"src":"3406:125:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[744],"body":{"id":235,"nodeType":"Block","src":"3812:104:1","statements":[{"assignments":[223],"declarations":[{"constant":false,"id":223,"mutability":"mutable","name":"owner","nameLocation":"3830:5:1","nodeType":"VariableDeclaration","scope":235,"src":"3822:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":222,"name":"address","nodeType":"ElementaryTypeName","src":"3822:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":226,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":224,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3012,"src":"3838:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3838:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3822:28:1"},{"expression":{"arguments":[{"id":228,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":223,"src":"3870:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":229,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"3877:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":230,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"3881:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":227,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":459,"src":"3860:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3860:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":232,"nodeType":"ExpressionStatement","src":"3860:28:1"},{"expression":{"hexValue":"74727565","id":233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3905:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":221,"id":234,"nodeType":"Return","src":"3898:11:1"}]},"documentation":{"id":212,"nodeType":"StructuredDocumentation","src":"3537:185:1","text":" @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."},"functionSelector":"a9059cbb","id":236,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"3736:8:1","nodeType":"FunctionDefinition","overrides":{"id":218,"nodeType":"OverrideSpecifier","overrides":[],"src":"3788:8:1"},"parameters":{"id":217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":214,"mutability":"mutable","name":"to","nameLocation":"3753:2:1","nodeType":"VariableDeclaration","scope":236,"src":"3745:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":213,"name":"address","nodeType":"ElementaryTypeName","src":"3745:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":216,"mutability":"mutable","name":"amount","nameLocation":"3765:6:1","nodeType":"VariableDeclaration","scope":236,"src":"3757:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":215,"name":"uint256","nodeType":"ElementaryTypeName","src":"3757:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3744:28:1"},"returnParameters":{"id":221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":220,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":236,"src":"3806:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":219,"name":"bool","nodeType":"ElementaryTypeName","src":"3806:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3805:6:1"},"scope":699,"src":"3727:189:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[754],"body":{"id":253,"nodeType":"Block","src":"4072:51:1","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":247,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":134,"src":"4089:11:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":249,"indexExpression":{"id":248,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"4101:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4089:18:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":251,"indexExpression":{"id":250,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"4108:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4089:27:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":246,"id":252,"nodeType":"Return","src":"4082:34:1"}]},"documentation":{"id":237,"nodeType":"StructuredDocumentation","src":"3922:47:1","text":" @dev See {IERC20-allowance}."},"functionSelector":"dd62ed3e","id":254,"implemented":true,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"3983:9:1","nodeType":"FunctionDefinition","overrides":{"id":243,"nodeType":"OverrideSpecifier","overrides":[],"src":"4045:8:1"},"parameters":{"id":242,"nodeType":"ParameterList","parameters":[{"constant":false,"id":239,"mutability":"mutable","name":"owner","nameLocation":"4001:5:1","nodeType":"VariableDeclaration","scope":254,"src":"3993:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":238,"name":"address","nodeType":"ElementaryTypeName","src":"3993:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":241,"mutability":"mutable","name":"spender","nameLocation":"4016:7:1","nodeType":"VariableDeclaration","scope":254,"src":"4008:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":240,"name":"address","nodeType":"ElementaryTypeName","src":"4008:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3992:32:1"},"returnParameters":{"id":246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":245,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":254,"src":"4063:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":244,"name":"uint256","nodeType":"ElementaryTypeName","src":"4063:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4062:9:1"},"scope":699,"src":"3974:149:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[764],"body":{"id":278,"nodeType":"Block","src":"4520:108:1","statements":[{"assignments":[266],"declarations":[{"constant":false,"id":266,"mutability":"mutable","name":"owner","nameLocation":"4538:5:1","nodeType":"VariableDeclaration","scope":278,"src":"4530:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":265,"name":"address","nodeType":"ElementaryTypeName","src":"4530:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":269,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":267,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3012,"src":"4546:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4546:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4530:28:1"},{"expression":{"arguments":[{"id":271,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"4577:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":272,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":257,"src":"4584:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":273,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":259,"src":"4593:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":270,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"4568:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4568:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":275,"nodeType":"ExpressionStatement","src":"4568:32:1"},{"expression":{"hexValue":"74727565","id":276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4617:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":264,"id":277,"nodeType":"Return","src":"4610:11:1"}]},"documentation":{"id":255,"nodeType":"StructuredDocumentation","src":"4129:297:1","text":" @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"095ea7b3","id":279,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4440:7:1","nodeType":"FunctionDefinition","overrides":{"id":261,"nodeType":"OverrideSpecifier","overrides":[],"src":"4496:8:1"},"parameters":{"id":260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":257,"mutability":"mutable","name":"spender","nameLocation":"4456:7:1","nodeType":"VariableDeclaration","scope":279,"src":"4448:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":256,"name":"address","nodeType":"ElementaryTypeName","src":"4448:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":259,"mutability":"mutable","name":"amount","nameLocation":"4473:6:1","nodeType":"VariableDeclaration","scope":279,"src":"4465:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":258,"name":"uint256","nodeType":"ElementaryTypeName","src":"4465:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4447:33:1"},"returnParameters":{"id":264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":263,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":279,"src":"4514:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":262,"name":"bool","nodeType":"ElementaryTypeName","src":"4514:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4513:6:1"},"scope":699,"src":"4431:197:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[776],"body":{"id":311,"nodeType":"Block","src":"5323:153:1","statements":[{"assignments":[293],"declarations":[{"constant":false,"id":293,"mutability":"mutable","name":"spender","nameLocation":"5341:7:1","nodeType":"VariableDeclaration","scope":311,"src":"5333:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":292,"name":"address","nodeType":"ElementaryTypeName","src":"5333:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":296,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":294,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3012,"src":"5351:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5351:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5333:30:1"},{"expression":{"arguments":[{"id":298,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"5389:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":299,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":293,"src":"5395:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":300,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"5404:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":297,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":676,"src":"5373:15:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5373:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":302,"nodeType":"ExpressionStatement","src":"5373:38:1"},{"expression":{"arguments":[{"id":304,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"5431:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":305,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":284,"src":"5437:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":306,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"5441:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":303,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":459,"src":"5421:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5421:27:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":308,"nodeType":"ExpressionStatement","src":"5421:27:1"},{"expression":{"hexValue":"74727565","id":309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5465:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":291,"id":310,"nodeType":"Return","src":"5458:11:1"}]},"documentation":{"id":280,"nodeType":"StructuredDocumentation","src":"4634:551:1","text":" @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."},"functionSelector":"23b872dd","id":312,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"5199:12:1","nodeType":"FunctionDefinition","overrides":{"id":288,"nodeType":"OverrideSpecifier","overrides":[],"src":"5299:8:1"},"parameters":{"id":287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":282,"mutability":"mutable","name":"from","nameLocation":"5229:4:1","nodeType":"VariableDeclaration","scope":312,"src":"5221:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":281,"name":"address","nodeType":"ElementaryTypeName","src":"5221:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":284,"mutability":"mutable","name":"to","nameLocation":"5251:2:1","nodeType":"VariableDeclaration","scope":312,"src":"5243:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":283,"name":"address","nodeType":"ElementaryTypeName","src":"5243:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":286,"mutability":"mutable","name":"amount","nameLocation":"5271:6:1","nodeType":"VariableDeclaration","scope":312,"src":"5263:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":285,"name":"uint256","nodeType":"ElementaryTypeName","src":"5263:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5211:72:1"},"returnParameters":{"id":291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":290,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":312,"src":"5317:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":289,"name":"bool","nodeType":"ElementaryTypeName","src":"5317:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5316:6:1"},"scope":699,"src":"5190:286:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":340,"nodeType":"Block","src":"5965:140:1","statements":[{"assignments":[323],"declarations":[{"constant":false,"id":323,"mutability":"mutable","name":"owner","nameLocation":"5983:5:1","nodeType":"VariableDeclaration","scope":340,"src":"5975:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":322,"name":"address","nodeType":"ElementaryTypeName","src":"5975:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":326,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":324,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3012,"src":"5991:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5991:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5975:28:1"},{"expression":{"arguments":[{"id":328,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":323,"src":"6022:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":329,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"6029:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":331,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":323,"src":"6048:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":332,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"6055:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":330,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"6038:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6038:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":334,"name":"addedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":317,"src":"6066:10:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6038:38:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":327,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"6013:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":336,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6013:64:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":337,"nodeType":"ExpressionStatement","src":"6013:64:1"},{"expression":{"hexValue":"74727565","id":338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6094:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":321,"id":339,"nodeType":"Return","src":"6087:11:1"}]},"documentation":{"id":313,"nodeType":"StructuredDocumentation","src":"5482:384:1","text":" @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"39509351","id":341,"implemented":true,"kind":"function","modifiers":[],"name":"increaseAllowance","nameLocation":"5880:17:1","nodeType":"FunctionDefinition","parameters":{"id":318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":315,"mutability":"mutable","name":"spender","nameLocation":"5906:7:1","nodeType":"VariableDeclaration","scope":341,"src":"5898:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":314,"name":"address","nodeType":"ElementaryTypeName","src":"5898:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":317,"mutability":"mutable","name":"addedValue","nameLocation":"5923:10:1","nodeType":"VariableDeclaration","scope":341,"src":"5915:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":316,"name":"uint256","nodeType":"ElementaryTypeName","src":"5915:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5897:37:1"},"returnParameters":{"id":321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":320,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":341,"src":"5959:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":319,"name":"bool","nodeType":"ElementaryTypeName","src":"5959:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5958:6:1"},"scope":699,"src":"5871:234:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":381,"nodeType":"Block","src":"6691:328:1","statements":[{"assignments":[352],"declarations":[{"constant":false,"id":352,"mutability":"mutable","name":"owner","nameLocation":"6709:5:1","nodeType":"VariableDeclaration","scope":381,"src":"6701:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":351,"name":"address","nodeType":"ElementaryTypeName","src":"6701:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":355,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":353,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3012,"src":"6717:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":354,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6717:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6701:28:1"},{"assignments":[357],"declarations":[{"constant":false,"id":357,"mutability":"mutable","name":"currentAllowance","nameLocation":"6747:16:1","nodeType":"VariableDeclaration","scope":381,"src":"6739:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":356,"name":"uint256","nodeType":"ElementaryTypeName","src":"6739:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":362,"initialValue":{"arguments":[{"id":359,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":352,"src":"6776:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":360,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":344,"src":"6783:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":358,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"6766:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6766:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6739:52:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":364,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":357,"src":"6809:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":365,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"6829:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6809:35:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6846:39:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""},"value":"ERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""}],"id":363,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6801:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6801:85:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":369,"nodeType":"ExpressionStatement","src":"6801:85:1"},{"id":378,"nodeType":"UncheckedBlock","src":"6896:95:1","statements":[{"expression":{"arguments":[{"id":371,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":352,"src":"6929:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":372,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":344,"src":"6936:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":373,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":357,"src":"6945:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":374,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"6964:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6945:34:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":370,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"6920:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6920:60:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":377,"nodeType":"ExpressionStatement","src":"6920:60:1"}]},{"expression":{"hexValue":"74727565","id":379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7008:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":350,"id":380,"nodeType":"Return","src":"7001:11:1"}]},"documentation":{"id":342,"nodeType":"StructuredDocumentation","src":"6111:476:1","text":" @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."},"functionSelector":"a457c2d7","id":382,"implemented":true,"kind":"function","modifiers":[],"name":"decreaseAllowance","nameLocation":"6601:17:1","nodeType":"FunctionDefinition","parameters":{"id":347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":344,"mutability":"mutable","name":"spender","nameLocation":"6627:7:1","nodeType":"VariableDeclaration","scope":382,"src":"6619:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":343,"name":"address","nodeType":"ElementaryTypeName","src":"6619:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":346,"mutability":"mutable","name":"subtractedValue","nameLocation":"6644:15:1","nodeType":"VariableDeclaration","scope":382,"src":"6636:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":345,"name":"uint256","nodeType":"ElementaryTypeName","src":"6636:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6618:42:1"},"returnParameters":{"id":350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":349,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":382,"src":"6685:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":348,"name":"bool","nodeType":"ElementaryTypeName","src":"6685:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6684:6:1"},"scope":699,"src":"6592:427:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":458,"nodeType":"Block","src":"7581:710:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":393,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":385,"src":"7599:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7615:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":395,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7607:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":394,"name":"address","nodeType":"ElementaryTypeName","src":"7607:7:1","typeDescriptions":{}}},"id":397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7607:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7599:18:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373","id":399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7619:39:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""},"value":"ERC20: transfer from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""}],"id":392,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7591:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":400,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7591:68:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":401,"nodeType":"ExpressionStatement","src":"7591:68:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":403,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"7677:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7691:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":405,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7683:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":404,"name":"address","nodeType":"ElementaryTypeName","src":"7683:7:1","typeDescriptions":{}}},"id":407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7683:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7677:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472657373","id":409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7695:37:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""},"value":"ERC20: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""}],"id":402,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7669:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7669:64:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":411,"nodeType":"ExpressionStatement","src":"7669:64:1"},{"expression":{"arguments":[{"id":413,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":385,"src":"7765:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":414,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"7771:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":415,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":389,"src":"7775:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":412,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":687,"src":"7744:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7744:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":417,"nodeType":"ExpressionStatement","src":"7744:38:1"},{"assignments":[419],"declarations":[{"constant":false,"id":419,"mutability":"mutable","name":"fromBalance","nameLocation":"7801:11:1","nodeType":"VariableDeclaration","scope":458,"src":"7793:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":418,"name":"uint256","nodeType":"ElementaryTypeName","src":"7793:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":423,"initialValue":{"baseExpression":{"id":420,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"7815:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":422,"indexExpression":{"id":421,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":385,"src":"7825:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7815:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7793:37:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":425,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":419,"src":"7848:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":426,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":389,"src":"7863:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7848:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365","id":428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7871:40:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""},"value":"ERC20: transfer amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""}],"id":424,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7840:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7840:72:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":430,"nodeType":"ExpressionStatement","src":"7840:72:1"},{"id":445,"nodeType":"UncheckedBlock","src":"7922:273:1","statements":[{"expression":{"id":437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":431,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"7946:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":433,"indexExpression":{"id":432,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":385,"src":"7956:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7946:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":434,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":419,"src":"7964:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":435,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":389,"src":"7978:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7964:20:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7946:38:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":438,"nodeType":"ExpressionStatement","src":"7946:38:1"},{"expression":{"id":443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":439,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"8161:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":441,"indexExpression":{"id":440,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"8171:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8161:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":442,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":389,"src":"8178:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8161:23:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":444,"nodeType":"ExpressionStatement","src":"8161:23:1"}]},{"eventCall":{"arguments":[{"id":447,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":385,"src":"8219:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":448,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"8225:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":449,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":389,"src":"8229:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":446,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":711,"src":"8210:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8210:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":451,"nodeType":"EmitStatement","src":"8205:31:1"},{"expression":{"arguments":[{"id":453,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":385,"src":"8267:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":454,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"8273:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":455,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":389,"src":"8277:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":452,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"8247:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8247:37:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":457,"nodeType":"ExpressionStatement","src":"8247:37:1"}]},"documentation":{"id":383,"nodeType":"StructuredDocumentation","src":"7025:443:1","text":" @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."},"id":459,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"7482:9:1","nodeType":"FunctionDefinition","parameters":{"id":390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":385,"mutability":"mutable","name":"from","nameLocation":"7509:4:1","nodeType":"VariableDeclaration","scope":459,"src":"7501:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":384,"name":"address","nodeType":"ElementaryTypeName","src":"7501:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":387,"mutability":"mutable","name":"to","nameLocation":"7531:2:1","nodeType":"VariableDeclaration","scope":459,"src":"7523:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":386,"name":"address","nodeType":"ElementaryTypeName","src":"7523:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":389,"mutability":"mutable","name":"amount","nameLocation":"7551:6:1","nodeType":"VariableDeclaration","scope":459,"src":"7543:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":388,"name":"uint256","nodeType":"ElementaryTypeName","src":"7543:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7491:72:1"},"returnParameters":{"id":391,"nodeType":"ParameterList","parameters":[],"src":"7581:0:1"},"scope":699,"src":"7473:818:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":515,"nodeType":"Block","src":"8632:470:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":468,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"8650:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8669:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":470,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8661:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":469,"name":"address","nodeType":"ElementaryTypeName","src":"8661:7:1","typeDescriptions":{}}},"id":472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8661:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8650:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","id":474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8673:33:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""},"value":"ERC20: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""}],"id":467,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8642:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8642:65:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":476,"nodeType":"ExpressionStatement","src":"8642:65:1"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8747:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":479,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8739:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":478,"name":"address","nodeType":"ElementaryTypeName","src":"8739:7:1","typeDescriptions":{}}},"id":481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8739:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":482,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"8751:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":483,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"8760:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":477,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":687,"src":"8718:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8718:49:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":485,"nodeType":"ExpressionStatement","src":"8718:49:1"},{"expression":{"id":488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":486,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":136,"src":"8778:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":487,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"8794:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8778:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":489,"nodeType":"ExpressionStatement","src":"8778:22:1"},{"id":496,"nodeType":"UncheckedBlock","src":"8810:175:1","statements":[{"expression":{"id":494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":490,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"8946:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":492,"indexExpression":{"id":491,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"8956:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8946:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":493,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"8968:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8946:28:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":495,"nodeType":"ExpressionStatement","src":"8946:28:1"}]},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9016:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":499,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9008:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":498,"name":"address","nodeType":"ElementaryTypeName","src":"9008:7:1","typeDescriptions":{}}},"id":501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9008:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":502,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"9020:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":503,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"9029:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":497,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":711,"src":"8999:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8999:37:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":505,"nodeType":"EmitStatement","src":"8994:42:1"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9075:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":508,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9067:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":507,"name":"address","nodeType":"ElementaryTypeName","src":"9067:7:1","typeDescriptions":{}}},"id":510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9067:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":511,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"9079:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":512,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"9088:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":506,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"9047:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9047:48:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":514,"nodeType":"ExpressionStatement","src":"9047:48:1"}]},"documentation":{"id":460,"nodeType":"StructuredDocumentation","src":"8297:265:1","text":"@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."},"id":516,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"8576:5:1","nodeType":"FunctionDefinition","parameters":{"id":465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":462,"mutability":"mutable","name":"account","nameLocation":"8590:7:1","nodeType":"VariableDeclaration","scope":516,"src":"8582:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":461,"name":"address","nodeType":"ElementaryTypeName","src":"8582:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":464,"mutability":"mutable","name":"amount","nameLocation":"8607:6:1","nodeType":"VariableDeclaration","scope":516,"src":"8599:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":463,"name":"uint256","nodeType":"ElementaryTypeName","src":"8599:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8581:33:1"},"returnParameters":{"id":466,"nodeType":"ParameterList","parameters":[],"src":"8632:0:1"},"scope":699,"src":"8567:535:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":587,"nodeType":"Block","src":"9487:594:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":525,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"9505:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9524:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":527,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9516:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":526,"name":"address","nodeType":"ElementaryTypeName","src":"9516:7:1","typeDescriptions":{}}},"id":529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9516:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9505:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e2066726f6d20746865207a65726f2061646472657373","id":531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9528:35:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""},"value":"ERC20: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""}],"id":524,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9497:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":532,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9497:67:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":533,"nodeType":"ExpressionStatement","src":"9497:67:1"},{"expression":{"arguments":[{"id":535,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"9596:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9613:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":537,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9605:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":536,"name":"address","nodeType":"ElementaryTypeName","src":"9605:7:1","typeDescriptions":{}}},"id":539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9605:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":540,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":521,"src":"9617:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":534,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":687,"src":"9575:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":541,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9575:49:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":542,"nodeType":"ExpressionStatement","src":"9575:49:1"},{"assignments":[544],"declarations":[{"constant":false,"id":544,"mutability":"mutable","name":"accountBalance","nameLocation":"9643:14:1","nodeType":"VariableDeclaration","scope":587,"src":"9635:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":543,"name":"uint256","nodeType":"ElementaryTypeName","src":"9635:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":548,"initialValue":{"baseExpression":{"id":545,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"9660:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":547,"indexExpression":{"id":546,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"9670:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9660:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9635:43:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":550,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":544,"src":"9696:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":551,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":521,"src":"9714:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9696:24:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365","id":553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9722:36:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""},"value":"ERC20: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""}],"id":549,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9688:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9688:71:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":555,"nodeType":"ExpressionStatement","src":"9688:71:1"},{"id":568,"nodeType":"UncheckedBlock","src":"9769:194:1","statements":[{"expression":{"id":562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":556,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"9793:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":558,"indexExpression":{"id":557,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"9803:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9793:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":559,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":544,"src":"9814:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":560,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":521,"src":"9831:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9814:23:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9793:44:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":563,"nodeType":"ExpressionStatement","src":"9793:44:1"},{"expression":{"id":566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":564,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":136,"src":"9930:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":565,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":521,"src":"9946:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9930:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":567,"nodeType":"ExpressionStatement","src":"9930:22:1"}]},{"eventCall":{"arguments":[{"id":570,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"9987:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10004:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":572,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9996:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":571,"name":"address","nodeType":"ElementaryTypeName","src":"9996:7:1","typeDescriptions":{}}},"id":574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9996:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":575,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":521,"src":"10008:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":569,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":711,"src":"9978:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9978:37:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":577,"nodeType":"EmitStatement","src":"9973:42:1"},{"expression":{"arguments":[{"id":579,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"10046:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10063:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":581,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10055:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":580,"name":"address","nodeType":"ElementaryTypeName","src":"10055:7:1","typeDescriptions":{}}},"id":583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10055:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":584,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":521,"src":"10067:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":578,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"10026:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10026:48:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":586,"nodeType":"ExpressionStatement","src":"10026:48:1"}]},"documentation":{"id":517,"nodeType":"StructuredDocumentation","src":"9108:309:1","text":" @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."},"id":588,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"9431:5:1","nodeType":"FunctionDefinition","parameters":{"id":522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":519,"mutability":"mutable","name":"account","nameLocation":"9445:7:1","nodeType":"VariableDeclaration","scope":588,"src":"9437:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":518,"name":"address","nodeType":"ElementaryTypeName","src":"9437:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":521,"mutability":"mutable","name":"amount","nameLocation":"9462:6:1","nodeType":"VariableDeclaration","scope":588,"src":"9454:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":520,"name":"uint256","nodeType":"ElementaryTypeName","src":"9454:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9436:33:1"},"returnParameters":{"id":523,"nodeType":"ParameterList","parameters":[],"src":"9487:0:1"},"scope":699,"src":"9422:659:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":632,"nodeType":"Block","src":"10617:257:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":599,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"10635:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10652:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":601,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10644:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":600,"name":"address","nodeType":"ElementaryTypeName","src":"10644:7:1","typeDescriptions":{}}},"id":603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10644:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10635:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373","id":605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10656:38:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""},"value":"ERC20: approve from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""}],"id":598,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10627:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10627:68:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":607,"nodeType":"ExpressionStatement","src":"10627:68:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":609,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"10713:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10732:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":611,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10724:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":610,"name":"address","nodeType":"ElementaryTypeName","src":"10724:7:1","typeDescriptions":{}}},"id":613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10724:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10713:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f2061646472657373","id":615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10736:36:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""},"value":"ERC20: approve to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""}],"id":608,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10705:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10705:68:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":617,"nodeType":"ExpressionStatement","src":"10705:68:1"},{"expression":{"id":624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":618,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":134,"src":"10784:11:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":621,"indexExpression":{"id":619,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"10796:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10784:18:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":622,"indexExpression":{"id":620,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"10803:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10784:27:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":623,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":595,"src":"10814:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10784:36:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":625,"nodeType":"ExpressionStatement","src":"10784:36:1"},{"eventCall":{"arguments":[{"id":627,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"10844:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":628,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"10851:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":629,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":595,"src":"10860:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":626,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"10835:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10835:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":631,"nodeType":"EmitStatement","src":"10830:37:1"}]},"documentation":{"id":589,"nodeType":"StructuredDocumentation","src":"10087:412:1","text":" @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."},"id":633,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"10513:8:1","nodeType":"FunctionDefinition","parameters":{"id":596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":591,"mutability":"mutable","name":"owner","nameLocation":"10539:5:1","nodeType":"VariableDeclaration","scope":633,"src":"10531:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":590,"name":"address","nodeType":"ElementaryTypeName","src":"10531:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":593,"mutability":"mutable","name":"spender","nameLocation":"10562:7:1","nodeType":"VariableDeclaration","scope":633,"src":"10554:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":592,"name":"address","nodeType":"ElementaryTypeName","src":"10554:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":595,"mutability":"mutable","name":"amount","nameLocation":"10587:6:1","nodeType":"VariableDeclaration","scope":633,"src":"10579:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":594,"name":"uint256","nodeType":"ElementaryTypeName","src":"10579:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10521:78:1"},"returnParameters":{"id":597,"nodeType":"ParameterList","parameters":[],"src":"10617:0:1"},"scope":699,"src":"10504:370:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":675,"nodeType":"Block","src":"11275:321:1","statements":[{"assignments":[644],"declarations":[{"constant":false,"id":644,"mutability":"mutable","name":"currentAllowance","nameLocation":"11293:16:1","nodeType":"VariableDeclaration","scope":675,"src":"11285:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":643,"name":"uint256","nodeType":"ElementaryTypeName","src":"11285:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":649,"initialValue":{"arguments":[{"id":646,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"11322:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":647,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":638,"src":"11329:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":645,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"11312:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":648,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11312:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11285:52:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":650,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":644,"src":"11351:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":653,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11376:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":652,"name":"uint256","nodeType":"ElementaryTypeName","src":"11376:7:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":651,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11371:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11371:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":655,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"11371:17:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11351:37:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":674,"nodeType":"IfStatement","src":"11347:243:1","trueBody":{"id":673,"nodeType":"Block","src":"11390:200:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":658,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":644,"src":"11412:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":659,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"11432:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11412:26:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","id":661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11440:31:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""},"value":"ERC20: insufficient allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""}],"id":657,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11404:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11404:68:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":663,"nodeType":"ExpressionStatement","src":"11404:68:1"},{"id":672,"nodeType":"UncheckedBlock","src":"11486:94:1","statements":[{"expression":{"arguments":[{"id":665,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"11523:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":666,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":638,"src":"11530:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":667,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":644,"src":"11539:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":668,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"11558:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11539:25:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":664,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"11514:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11514:51:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":671,"nodeType":"ExpressionStatement","src":"11514:51:1"}]}]}}]},"documentation":{"id":634,"nodeType":"StructuredDocumentation","src":"10880:270:1","text":" @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."},"id":676,"implemented":true,"kind":"function","modifiers":[],"name":"_spendAllowance","nameLocation":"11164:15:1","nodeType":"FunctionDefinition","parameters":{"id":641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":636,"mutability":"mutable","name":"owner","nameLocation":"11197:5:1","nodeType":"VariableDeclaration","scope":676,"src":"11189:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":635,"name":"address","nodeType":"ElementaryTypeName","src":"11189:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":638,"mutability":"mutable","name":"spender","nameLocation":"11220:7:1","nodeType":"VariableDeclaration","scope":676,"src":"11212:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":637,"name":"address","nodeType":"ElementaryTypeName","src":"11212:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":640,"mutability":"mutable","name":"amount","nameLocation":"11245:6:1","nodeType":"VariableDeclaration","scope":676,"src":"11237:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":639,"name":"uint256","nodeType":"ElementaryTypeName","src":"11237:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11179:78:1"},"returnParameters":{"id":642,"nodeType":"ParameterList","parameters":[],"src":"11275:0:1"},"scope":699,"src":"11155:441:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":686,"nodeType":"Block","src":"12299:2:1","statements":[]},"documentation":{"id":677,"nodeType":"StructuredDocumentation","src":"11602:573:1","text":" @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":687,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"12189:20:1","nodeType":"FunctionDefinition","parameters":{"id":684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":679,"mutability":"mutable","name":"from","nameLocation":"12227:4:1","nodeType":"VariableDeclaration","scope":687,"src":"12219:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":678,"name":"address","nodeType":"ElementaryTypeName","src":"12219:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":681,"mutability":"mutable","name":"to","nameLocation":"12249:2:1","nodeType":"VariableDeclaration","scope":687,"src":"12241:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":680,"name":"address","nodeType":"ElementaryTypeName","src":"12241:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":683,"mutability":"mutable","name":"amount","nameLocation":"12269:6:1","nodeType":"VariableDeclaration","scope":687,"src":"12261:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":682,"name":"uint256","nodeType":"ElementaryTypeName","src":"12261:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12209:72:1"},"returnParameters":{"id":685,"nodeType":"ParameterList","parameters":[],"src":"12299:0:1"},"scope":699,"src":"12180:121:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":697,"nodeType":"Block","src":"13007:2:1","statements":[]},"documentation":{"id":688,"nodeType":"StructuredDocumentation","src":"12307:577:1","text":" @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":698,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"12898:19:1","nodeType":"FunctionDefinition","parameters":{"id":695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":690,"mutability":"mutable","name":"from","nameLocation":"12935:4:1","nodeType":"VariableDeclaration","scope":698,"src":"12927:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":689,"name":"address","nodeType":"ElementaryTypeName","src":"12927:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":692,"mutability":"mutable","name":"to","nameLocation":"12957:2:1","nodeType":"VariableDeclaration","scope":698,"src":"12949:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":691,"name":"address","nodeType":"ElementaryTypeName","src":"12949:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":694,"mutability":"mutable","name":"amount","nameLocation":"12977:6:1","nodeType":"VariableDeclaration","scope":698,"src":"12969:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":693,"name":"uint256","nodeType":"ElementaryTypeName","src":"12969:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12917:72:1"},"returnParameters":{"id":696,"nodeType":"ParameterList","parameters":[],"src":"13007:0:1"},"scope":699,"src":"12889:120:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":700,"src":"1401:11610:1","usedErrors":[]}],"src":"105:12907:1"},"id":1},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[777]},"id":778,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":701,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":702,"nodeType":"StructuredDocumentation","src":"131:70:2","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":777,"linearizedBaseContracts":[777],"name":"IERC20","nameLocation":"212:6:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":703,"nodeType":"StructuredDocumentation","src":"225:158:2","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"id":711,"name":"Transfer","nameLocation":"394:8:2","nodeType":"EventDefinition","parameters":{"id":710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":705,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:2","nodeType":"VariableDeclaration","scope":711,"src":"403:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":704,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":707,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:2","nodeType":"VariableDeclaration","scope":711,"src":"425:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":706,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":709,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:2","nodeType":"VariableDeclaration","scope":711,"src":"445:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":708,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:2"},"src":"388:72:2"},{"anonymous":false,"documentation":{"id":712,"nodeType":"StructuredDocumentation","src":"466:148:2","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"id":720,"name":"Approval","nameLocation":"625:8:2","nodeType":"EventDefinition","parameters":{"id":719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":714,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:2","nodeType":"VariableDeclaration","scope":720,"src":"634:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":713,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":716,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:2","nodeType":"VariableDeclaration","scope":720,"src":"657:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":715,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":718,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:2","nodeType":"VariableDeclaration","scope":720,"src":"682:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":717,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:2"},"src":"619:78:2"},{"documentation":{"id":721,"nodeType":"StructuredDocumentation","src":"703:66:2","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":726,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:2","nodeType":"FunctionDefinition","parameters":{"id":722,"nodeType":"ParameterList","parameters":[],"src":"794:2:2"},"returnParameters":{"id":725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":724,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":726,"src":"820:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":723,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:2"},"scope":777,"src":"774:55:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":727,"nodeType":"StructuredDocumentation","src":"835:72:2","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":734,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:2","nodeType":"FunctionDefinition","parameters":{"id":730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":729,"mutability":"mutable","name":"account","nameLocation":"939:7:2","nodeType":"VariableDeclaration","scope":734,"src":"931:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":728,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:2"},"returnParameters":{"id":733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":732,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":734,"src":"971:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":731,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:2"},"scope":777,"src":"912:68:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":735,"nodeType":"StructuredDocumentation","src":"986:202:2","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":744,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:2","nodeType":"FunctionDefinition","parameters":{"id":740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":737,"mutability":"mutable","name":"to","nameLocation":"1219:2:2","nodeType":"VariableDeclaration","scope":744,"src":"1211:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":736,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":739,"mutability":"mutable","name":"amount","nameLocation":"1231:6:2","nodeType":"VariableDeclaration","scope":744,"src":"1223:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":738,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:2"},"returnParameters":{"id":743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":742,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":744,"src":"1257:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":741,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:2"},"scope":777,"src":"1193:70:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":745,"nodeType":"StructuredDocumentation","src":"1269:264:2","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":754,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:2","nodeType":"FunctionDefinition","parameters":{"id":750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":747,"mutability":"mutable","name":"owner","nameLocation":"1565:5:2","nodeType":"VariableDeclaration","scope":754,"src":"1557:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":746,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":749,"mutability":"mutable","name":"spender","nameLocation":"1580:7:2","nodeType":"VariableDeclaration","scope":754,"src":"1572:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":748,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:2"},"returnParameters":{"id":753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":752,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":754,"src":"1612:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":751,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:2"},"scope":777,"src":"1538:83:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":755,"nodeType":"StructuredDocumentation","src":"1627:642:2","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":764,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:2","nodeType":"FunctionDefinition","parameters":{"id":760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":757,"mutability":"mutable","name":"spender","nameLocation":"2299:7:2","nodeType":"VariableDeclaration","scope":764,"src":"2291:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":756,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":759,"mutability":"mutable","name":"amount","nameLocation":"2316:6:2","nodeType":"VariableDeclaration","scope":764,"src":"2308:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":758,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:2"},"returnParameters":{"id":763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":762,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":764,"src":"2342:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":761,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:2"},"scope":777,"src":"2274:74:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":765,"nodeType":"StructuredDocumentation","src":"2354:287:2","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":776,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:2","nodeType":"FunctionDefinition","parameters":{"id":772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":767,"mutability":"mutable","name":"from","nameLocation":"2685:4:2","nodeType":"VariableDeclaration","scope":776,"src":"2677:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":766,"name":"address","nodeType":"ElementaryTypeName","src":"2677:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":769,"mutability":"mutable","name":"to","nameLocation":"2707:2:2","nodeType":"VariableDeclaration","scope":776,"src":"2699:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":768,"name":"address","nodeType":"ElementaryTypeName","src":"2699:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":771,"mutability":"mutable","name":"amount","nameLocation":"2727:6:2","nodeType":"VariableDeclaration","scope":776,"src":"2719:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":770,"name":"uint256","nodeType":"ElementaryTypeName","src":"2719:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:72:2"},"returnParameters":{"id":775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":774,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":776,"src":"2758:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":773,"name":"bool","nodeType":"ElementaryTypeName","src":"2758:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2757:6:2"},"scope":777,"src":"2646:118:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":778,"src":"202:2564:2","usedErrors":[]}],"src":"106:2661:2"},"id":2},"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol","exportedSymbols":{"Context":[3022],"ERC20":[699],"ERC20Burnable":[821],"IERC20":[777],"IERC20Metadata":[846]},"id":822,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":779,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"124:23:3"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","file":"../ERC20.sol","id":780,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":822,"sourceUnit":700,"src":"149:22:3","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../../utils/Context.sol","id":781,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":822,"sourceUnit":3023,"src":"172:36:3","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":783,"name":"Context","nodeType":"IdentifierPath","referencedDeclaration":3022,"src":"454:7:3"},"id":784,"nodeType":"InheritanceSpecifier","src":"454:7:3"},{"baseName":{"id":785,"name":"ERC20","nodeType":"IdentifierPath","referencedDeclaration":699,"src":"463:5:3"},"id":786,"nodeType":"InheritanceSpecifier","src":"463:5:3"}],"canonicalName":"ERC20Burnable","contractDependencies":[],"contractKind":"contract","documentation":{"id":782,"nodeType":"StructuredDocumentation","src":"210:208:3","text":" @dev Extension of {ERC20} that allows token holders to destroy both their own\n tokens and those that they have an allowance for, in a way that can be\n recognized off-chain (via event analysis)."},"fullyImplemented":false,"id":821,"linearizedBaseContracts":[821,699,846,777,3022],"name":"ERC20Burnable","nameLocation":"437:13:3","nodeType":"ContractDefinition","nodes":[{"body":{"id":798,"nodeType":"Block","src":"623:44:3","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":793,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3012,"src":"639:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"639:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":795,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":789,"src":"653:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":792,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":588,"src":"633:5:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"633:27:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":797,"nodeType":"ExpressionStatement","src":"633:27:3"}]},"documentation":{"id":787,"nodeType":"StructuredDocumentation","src":"475:98:3","text":" @dev Destroys `amount` tokens from the caller.\n See {ERC20-_burn}."},"functionSelector":"42966c68","id":799,"implemented":true,"kind":"function","modifiers":[],"name":"burn","nameLocation":"587:4:3","nodeType":"FunctionDefinition","parameters":{"id":790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":789,"mutability":"mutable","name":"amount","nameLocation":"600:6:3","nodeType":"VariableDeclaration","scope":799,"src":"592:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":788,"name":"uint256","nodeType":"ElementaryTypeName","src":"592:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"591:16:3"},"returnParameters":{"id":791,"nodeType":"ParameterList","parameters":[],"src":"623:0:3"},"scope":821,"src":"578:89:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":819,"nodeType":"Block","src":"1039:95:3","statements":[{"expression":{"arguments":[{"id":808,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":802,"src":"1065:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":809,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3012,"src":"1074:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1074:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":811,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"1088:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":807,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":676,"src":"1049:15:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":812,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1049:46:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":813,"nodeType":"ExpressionStatement","src":"1049:46:3"},{"expression":{"arguments":[{"id":815,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":802,"src":"1111:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":816,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"1120:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":814,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":588,"src":"1105:5:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":817,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1105:22:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":818,"nodeType":"ExpressionStatement","src":"1105:22:3"}]},"documentation":{"id":800,"nodeType":"StructuredDocumentation","src":"673:295:3","text":" @dev Destroys `amount` tokens from `account`, deducting from the caller's\n allowance.\n See {ERC20-_burn} and {ERC20-allowance}.\n Requirements:\n - the caller must have allowance for ``accounts``'s tokens of at least\n `amount`."},"functionSelector":"79cc6790","id":820,"implemented":true,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"982:8:3","nodeType":"FunctionDefinition","parameters":{"id":805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":802,"mutability":"mutable","name":"account","nameLocation":"999:7:3","nodeType":"VariableDeclaration","scope":820,"src":"991:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":801,"name":"address","nodeType":"ElementaryTypeName","src":"991:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":804,"mutability":"mutable","name":"amount","nameLocation":"1016:6:3","nodeType":"VariableDeclaration","scope":820,"src":"1008:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":803,"name":"uint256","nodeType":"ElementaryTypeName","src":"1008:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"990:33:3"},"returnParameters":{"id":806,"nodeType":"ParameterList","parameters":[],"src":"1039:0:3"},"scope":821,"src":"973:161:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":822,"src":"419:717:3","usedErrors":[]}],"src":"124:1013:3"},"id":3},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","exportedSymbols":{"IERC20":[777],"IERC20Metadata":[846]},"id":847,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":823,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"110:23:4"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":824,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":847,"sourceUnit":778,"src":"135:23:4","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":826,"name":"IERC20","nodeType":"IdentifierPath","referencedDeclaration":777,"src":"305:6:4"},"id":827,"nodeType":"InheritanceSpecifier","src":"305:6:4"}],"canonicalName":"IERC20Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":825,"nodeType":"StructuredDocumentation","src":"160:116:4","text":" @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"},"fullyImplemented":false,"id":846,"linearizedBaseContracts":[846,777],"name":"IERC20Metadata","nameLocation":"287:14:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":828,"nodeType":"StructuredDocumentation","src":"318:54:4","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":833,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"386:4:4","nodeType":"FunctionDefinition","parameters":{"id":829,"nodeType":"ParameterList","parameters":[],"src":"390:2:4"},"returnParameters":{"id":832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":831,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":833,"src":"416:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":830,"name":"string","nodeType":"ElementaryTypeName","src":"416:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"415:15:4"},"scope":846,"src":"377:54:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":834,"nodeType":"StructuredDocumentation","src":"437:56:4","text":" @dev Returns the symbol of the token."},"functionSelector":"95d89b41","id":839,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"507:6:4","nodeType":"FunctionDefinition","parameters":{"id":835,"nodeType":"ParameterList","parameters":[],"src":"513:2:4"},"returnParameters":{"id":838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":837,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":839,"src":"539:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":836,"name":"string","nodeType":"ElementaryTypeName","src":"539:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"538:15:4"},"scope":846,"src":"498:56:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":840,"nodeType":"StructuredDocumentation","src":"560:65:4","text":" @dev Returns the decimals places of the token."},"functionSelector":"313ce567","id":845,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"639:8:4","nodeType":"FunctionDefinition","parameters":{"id":841,"nodeType":"ParameterList","parameters":[],"src":"647:2:4"},"returnParameters":{"id":844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":843,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":845,"src":"673:5:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":842,"name":"uint8","nodeType":"ElementaryTypeName","src":"673:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"672:7:4"},"scope":846,"src":"630:50:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":847,"src":"277:405:4","usedErrors":[]}],"src":"110:573:4"},"id":4},"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol","exportedSymbols":{"Context":[3022],"Counters":[3096],"ECDSA":[3632],"EIP712":[3786],"ERC20":[699],"ERC20Permit":[1018],"IERC20":[777],"IERC20Metadata":[846],"IERC20Permit":[1054],"Math":[4687],"Strings":[3271]},"id":1019,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":848,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"128:23:5"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol","file":"./draft-IERC20Permit.sol","id":849,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1019,"sourceUnit":1055,"src":"153:34:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","file":"../ERC20.sol","id":850,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1019,"sourceUnit":700,"src":"188:22:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","file":"../../../utils/cryptography/ECDSA.sol","id":851,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1019,"sourceUnit":3633,"src":"211:47:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/EIP712.sol","file":"../../../utils/cryptography/EIP712.sol","id":852,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1019,"sourceUnit":3787,"src":"259:48:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Counters.sol","file":"../../../utils/Counters.sol","id":853,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1019,"sourceUnit":3097,"src":"308:37:5","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":855,"name":"ERC20","nodeType":"IdentifierPath","referencedDeclaration":699,"src":"898:5:5"},"id":856,"nodeType":"InheritanceSpecifier","src":"898:5:5"},{"baseName":{"id":857,"name":"IERC20Permit","nodeType":"IdentifierPath","referencedDeclaration":1054,"src":"905:12:5"},"id":858,"nodeType":"InheritanceSpecifier","src":"905:12:5"},{"baseName":{"id":859,"name":"EIP712","nodeType":"IdentifierPath","referencedDeclaration":3786,"src":"919:6:5"},"id":860,"nodeType":"InheritanceSpecifier","src":"919:6:5"}],"canonicalName":"ERC20Permit","contractDependencies":[],"contractKind":"contract","documentation":{"id":854,"nodeType":"StructuredDocumentation","src":"347:517:5","text":" @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n _Available since v3.4._"},"fullyImplemented":false,"id":1018,"linearizedBaseContracts":[1018,3786,1054,699,846,777,3022],"name":"ERC20Permit","nameLocation":"883:11:5","nodeType":"ContractDefinition","nodes":[{"id":864,"libraryName":{"id":861,"name":"Counters","nodeType":"IdentifierPath","referencedDeclaration":3096,"src":"938:8:5"},"nodeType":"UsingForDirective","src":"932:36:5","typeName":{"id":863,"nodeType":"UserDefinedTypeName","pathNode":{"id":862,"name":"Counters.Counter","nodeType":"IdentifierPath","referencedDeclaration":3028,"src":"951:16:5"},"referencedDeclaration":3028,"src":"951:16:5","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3028_storage_ptr","typeString":"struct Counters.Counter"}}},{"constant":false,"id":869,"mutability":"mutable","name":"_nonces","nameLocation":"1019:7:5","nodeType":"VariableDeclaration","scope":1018,"src":"974:52:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Counter_$3028_storage_$","typeString":"mapping(address => struct Counters.Counter)"},"typeName":{"id":868,"keyType":{"id":865,"name":"address","nodeType":"ElementaryTypeName","src":"982:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"974:36:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Counter_$3028_storage_$","typeString":"mapping(address => struct Counters.Counter)"},"valueType":{"id":867,"nodeType":"UserDefinedTypeName","pathNode":{"id":866,"name":"Counters.Counter","nodeType":"IdentifierPath","referencedDeclaration":3028,"src":"993:16:5"},"referencedDeclaration":3028,"src":"993:16:5","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3028_storage_ptr","typeString":"struct Counters.Counter"}}},"visibility":"private"},{"constant":true,"id":874,"mutability":"constant","name":"_PERMIT_TYPEHASH","nameLocation":"1110:16:5","nodeType":"VariableDeclaration","scope":1018,"src":"1085:147:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":870,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1085:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"5065726d69742861646472657373206f776e65722c61646472657373207370656e6465722c75696e743235362076616c75652c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529","id":872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1147:84:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9","typeString":"literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""},"value":"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9","typeString":"literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""}],"id":871,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1137:9:5","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1137:95:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"documentation":{"id":875,"nodeType":"StructuredDocumentation","src":"1238:254:5","text":" @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n However, to ensure consistency with the upgradeable transpiler, we will continue\n to reserve a slot.\n @custom:oz-renamed-from _PERMIT_TYPEHASH"},"id":877,"mutability":"mutable","name":"_PERMIT_TYPEHASH_DEPRECATED_SLOT","nameLocation":"1565:32:5","nodeType":"VariableDeclaration","scope":1018,"src":"1549:48:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":876,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1549:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"body":{"id":887,"nodeType":"Block","src":"1879:2:5","statements":[]},"documentation":{"id":878,"nodeType":"StructuredDocumentation","src":"1604:220:5","text":" @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n It's a good idea to use the same `name` that is defined as the ERC20 token name."},"id":888,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":883,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":880,"src":"1868:4:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"31","id":884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1874:3:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6","typeString":"literal_string \"1\""},"value":"1"}],"id":885,"kind":"baseConstructorSpecifier","modifierName":{"id":882,"name":"EIP712","nodeType":"IdentifierPath","referencedDeclaration":3786,"src":"1861:6:5"},"nodeType":"ModifierInvocation","src":"1861:17:5"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":880,"mutability":"mutable","name":"name","nameLocation":"1855:4:5","nodeType":"VariableDeclaration","scope":888,"src":"1841:18:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":879,"name":"string","nodeType":"ElementaryTypeName","src":"1841:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1840:20:5"},"returnParameters":{"id":886,"nodeType":"ParameterList","parameters":[],"src":"1879:0:5"},"scope":1018,"src":"1829:52:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1039],"body":{"id":960,"nodeType":"Block","src":"2140:428:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":908,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2158:5:5","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"2158:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":910,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"2177:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2158:27:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332305065726d69743a206578706972656420646561646c696e65","id":912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2187:31:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd","typeString":"literal_string \"ERC20Permit: expired deadline\""},"value":"ERC20Permit: expired deadline"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd","typeString":"literal_string \"ERC20Permit: expired deadline\""}],"id":907,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2150:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":913,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2150:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":914,"nodeType":"ExpressionStatement","src":"2150:69:5"},{"assignments":[916],"declarations":[{"constant":false,"id":916,"mutability":"mutable","name":"structHash","nameLocation":"2238:10:5","nodeType":"VariableDeclaration","scope":960,"src":"2230:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":915,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2230:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":930,"initialValue":{"arguments":[{"arguments":[{"id":920,"name":"_PERMIT_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"2272:16:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":921,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":891,"src":"2290:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":922,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":893,"src":"2297:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":923,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":895,"src":"2306:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":925,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":891,"src":"2323:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":924,"name":"_useNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1017,"src":"2313:9:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$","typeString":"function (address) returns (uint256)"}},"id":926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2313:16:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":927,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":897,"src":"2331:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":918,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2261:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":919,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"2261:10:5","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":928,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2261:79:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":917,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2251:9:5","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2251:90:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2230:111:5"},{"assignments":[932],"declarations":[{"constant":false,"id":932,"mutability":"mutable","name":"hash","nameLocation":"2360:4:5","nodeType":"VariableDeclaration","scope":960,"src":"2352:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":931,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2352:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":936,"initialValue":{"arguments":[{"id":934,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"2384:10:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":933,"name":"_hashTypedDataV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3785,"src":"2367:16:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":935,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2367:28:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2352:43:5"},{"assignments":[938],"declarations":[{"constant":false,"id":938,"mutability":"mutable","name":"signer","nameLocation":"2414:6:5","nodeType":"VariableDeclaration","scope":960,"src":"2406:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":937,"name":"address","nodeType":"ElementaryTypeName","src":"2406:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":946,"initialValue":{"arguments":[{"id":941,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":932,"src":"2437:4:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":942,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":899,"src":"2443:1:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":943,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":901,"src":"2446:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":944,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":903,"src":"2449:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":939,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3632,"src":"2423:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSA_$3632_$","typeString":"type(library ECDSA)"}},"id":940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"recover","nodeType":"MemberAccess","referencedDeclaration":3572,"src":"2423:13:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2423:28:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2406:45:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":948,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"2469:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":949,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":891,"src":"2479:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2469:15:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332305065726d69743a20696e76616c6964207369676e6174757265","id":951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2486:32:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124","typeString":"literal_string \"ERC20Permit: invalid signature\""},"value":"ERC20Permit: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124","typeString":"literal_string \"ERC20Permit: invalid signature\""}],"id":947,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2461:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2461:58:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":953,"nodeType":"ExpressionStatement","src":"2461:58:5"},{"expression":{"arguments":[{"id":955,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":891,"src":"2539:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":956,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":893,"src":"2546:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":957,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":895,"src":"2555:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":954,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"2530:8:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":958,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2530:31:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":959,"nodeType":"ExpressionStatement","src":"2530:31:5"}]},"documentation":{"id":889,"nodeType":"StructuredDocumentation","src":"1887:50:5","text":" @dev See {IERC20Permit-permit}."},"functionSelector":"d505accf","id":961,"implemented":true,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1951:6:5","nodeType":"FunctionDefinition","overrides":{"id":905,"nodeType":"OverrideSpecifier","overrides":[],"src":"2131:8:5"},"parameters":{"id":904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":891,"mutability":"mutable","name":"owner","nameLocation":"1975:5:5","nodeType":"VariableDeclaration","scope":961,"src":"1967:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":890,"name":"address","nodeType":"ElementaryTypeName","src":"1967:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":893,"mutability":"mutable","name":"spender","nameLocation":"1998:7:5","nodeType":"VariableDeclaration","scope":961,"src":"1990:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":892,"name":"address","nodeType":"ElementaryTypeName","src":"1990:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":895,"mutability":"mutable","name":"value","nameLocation":"2023:5:5","nodeType":"VariableDeclaration","scope":961,"src":"2015:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":894,"name":"uint256","nodeType":"ElementaryTypeName","src":"2015:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":897,"mutability":"mutable","name":"deadline","nameLocation":"2046:8:5","nodeType":"VariableDeclaration","scope":961,"src":"2038:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":896,"name":"uint256","nodeType":"ElementaryTypeName","src":"2038:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":899,"mutability":"mutable","name":"v","nameLocation":"2070:1:5","nodeType":"VariableDeclaration","scope":961,"src":"2064:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":898,"name":"uint8","nodeType":"ElementaryTypeName","src":"2064:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":901,"mutability":"mutable","name":"r","nameLocation":"2089:1:5","nodeType":"VariableDeclaration","scope":961,"src":"2081:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":900,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2081:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":903,"mutability":"mutable","name":"s","nameLocation":"2108:1:5","nodeType":"VariableDeclaration","scope":961,"src":"2100:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":902,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2100:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1957:158:5"},"returnParameters":{"id":906,"nodeType":"ParameterList","parameters":[],"src":"2140:0:5"},"scope":1018,"src":"1942:626:5","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1047],"body":{"id":976,"nodeType":"Block","src":"2707:48:5","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":970,"name":"_nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":869,"src":"2724:7:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Counter_$3028_storage_$","typeString":"mapping(address => struct Counters.Counter storage ref)"}},"id":972,"indexExpression":{"id":971,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":964,"src":"2732:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2724:14:5","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3028_storage","typeString":"struct Counters.Counter storage ref"}},"id":973,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"current","nodeType":"MemberAccess","referencedDeclaration":3040,"src":"2724:22:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$3028_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$3028_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer) view returns (uint256)"}},"id":974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2724:24:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":969,"id":975,"nodeType":"Return","src":"2717:31:5"}]},"documentation":{"id":962,"nodeType":"StructuredDocumentation","src":"2574:50:5","text":" @dev See {IERC20Permit-nonces}."},"functionSelector":"7ecebe00","id":977,"implemented":true,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"2638:6:5","nodeType":"FunctionDefinition","overrides":{"id":966,"nodeType":"OverrideSpecifier","overrides":[],"src":"2680:8:5"},"parameters":{"id":965,"nodeType":"ParameterList","parameters":[{"constant":false,"id":964,"mutability":"mutable","name":"owner","nameLocation":"2653:5:5","nodeType":"VariableDeclaration","scope":977,"src":"2645:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":963,"name":"address","nodeType":"ElementaryTypeName","src":"2645:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2644:15:5"},"returnParameters":{"id":969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":968,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":977,"src":"2698:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":967,"name":"uint256","nodeType":"ElementaryTypeName","src":"2698:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2697:9:5"},"scope":1018,"src":"2629:126:5","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1053],"body":{"id":987,"nodeType":"Block","src":"2948:44:5","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":984,"name":"_domainSeparatorV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3742,"src":"2965:18:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2965:20:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":983,"id":986,"nodeType":"Return","src":"2958:27:5"}]},"documentation":{"id":978,"nodeType":"StructuredDocumentation","src":"2761:60:5","text":" @dev See {IERC20Permit-DOMAIN_SEPARATOR}."},"functionSelector":"3644e515","id":988,"implemented":true,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"2888:16:5","nodeType":"FunctionDefinition","overrides":{"id":980,"nodeType":"OverrideSpecifier","overrides":[],"src":"2921:8:5"},"parameters":{"id":979,"nodeType":"ParameterList","parameters":[],"src":"2904:2:5"},"returnParameters":{"id":983,"nodeType":"ParameterList","parameters":[{"constant":false,"id":982,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":988,"src":"2939:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":981,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2939:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2938:9:5"},"scope":1018,"src":"2879:113:5","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":1016,"nodeType":"Block","src":"3200:126:5","statements":[{"assignments":[1000],"declarations":[{"constant":false,"id":1000,"mutability":"mutable","name":"nonce","nameLocation":"3235:5:5","nodeType":"VariableDeclaration","scope":1016,"src":"3210:30:5","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3028_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":999,"nodeType":"UserDefinedTypeName","pathNode":{"id":998,"name":"Counters.Counter","nodeType":"IdentifierPath","referencedDeclaration":3028,"src":"3210:16:5"},"referencedDeclaration":3028,"src":"3210:16:5","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3028_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"id":1004,"initialValue":{"baseExpression":{"id":1001,"name":"_nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":869,"src":"3243:7:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Counter_$3028_storage_$","typeString":"mapping(address => struct Counters.Counter storage ref)"}},"id":1003,"indexExpression":{"id":1002,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"3251:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3243:14:5","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3028_storage","typeString":"struct Counters.Counter storage ref"}},"nodeType":"VariableDeclarationStatement","src":"3210:47:5"},{"expression":{"id":1009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1005,"name":"current","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"3267:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1006,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"3277:5:5","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3028_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":1007,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"current","nodeType":"MemberAccess","referencedDeclaration":3040,"src":"3277:13:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$3028_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$3028_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer) view returns (uint256)"}},"id":1008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3277:15:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3267:25:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1010,"nodeType":"ExpressionStatement","src":"3267:25:5"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1011,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"3302:5:5","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3028_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":1013,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":3054,"src":"3302:15:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$3028_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$3028_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer)"}},"id":1014,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3302:17:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1015,"nodeType":"ExpressionStatement","src":"3302:17:5"}]},"documentation":{"id":989,"nodeType":"StructuredDocumentation","src":"2998:120:5","text":" @dev \"Consume a nonce\": return the current value and increment.\n _Available since v4.1._"},"id":1017,"implemented":true,"kind":"function","modifiers":[],"name":"_useNonce","nameLocation":"3132:9:5","nodeType":"FunctionDefinition","parameters":{"id":992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":991,"mutability":"mutable","name":"owner","nameLocation":"3150:5:5","nodeType":"VariableDeclaration","scope":1017,"src":"3142:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":990,"name":"address","nodeType":"ElementaryTypeName","src":"3142:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3141:15:5"},"returnParameters":{"id":995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":994,"mutability":"mutable","name":"current","nameLocation":"3191:7:5","nodeType":"VariableDeclaration","scope":1017,"src":"3183:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":993,"name":"uint256","nodeType":"ElementaryTypeName","src":"3183:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3182:17:5"},"scope":1018,"src":"3123:203:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1019,"src":"865:2463:5","usedErrors":[]}],"src":"128:3201:5"},"id":5},"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol","exportedSymbols":{"IERC20Permit":[1054]},"id":1055,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1020,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"114:23:6"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Permit","contractDependencies":[],"contractKind":"interface","documentation":{"id":1021,"nodeType":"StructuredDocumentation","src":"139:480:6","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."},"fullyImplemented":false,"id":1054,"linearizedBaseContracts":[1054],"name":"IERC20Permit","nameLocation":"630:12:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1022,"nodeType":"StructuredDocumentation","src":"649:792:6","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."},"functionSelector":"d505accf","id":1039,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1455:6:6","nodeType":"FunctionDefinition","parameters":{"id":1037,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1024,"mutability":"mutable","name":"owner","nameLocation":"1479:5:6","nodeType":"VariableDeclaration","scope":1039,"src":"1471:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1023,"name":"address","nodeType":"ElementaryTypeName","src":"1471:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1026,"mutability":"mutable","name":"spender","nameLocation":"1502:7:6","nodeType":"VariableDeclaration","scope":1039,"src":"1494:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1025,"name":"address","nodeType":"ElementaryTypeName","src":"1494:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1028,"mutability":"mutable","name":"value","nameLocation":"1527:5:6","nodeType":"VariableDeclaration","scope":1039,"src":"1519:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1027,"name":"uint256","nodeType":"ElementaryTypeName","src":"1519:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1030,"mutability":"mutable","name":"deadline","nameLocation":"1550:8:6","nodeType":"VariableDeclaration","scope":1039,"src":"1542:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1029,"name":"uint256","nodeType":"ElementaryTypeName","src":"1542:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1032,"mutability":"mutable","name":"v","nameLocation":"1574:1:6","nodeType":"VariableDeclaration","scope":1039,"src":"1568:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1031,"name":"uint8","nodeType":"ElementaryTypeName","src":"1568:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1034,"mutability":"mutable","name":"r","nameLocation":"1593:1:6","nodeType":"VariableDeclaration","scope":1039,"src":"1585:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1033,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1585:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1036,"mutability":"mutable","name":"s","nameLocation":"1612:1:6","nodeType":"VariableDeclaration","scope":1039,"src":"1604:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1035,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1604:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1461:158:6"},"returnParameters":{"id":1038,"nodeType":"ParameterList","parameters":[],"src":"1628:0:6"},"scope":1054,"src":"1446:183:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1040,"nodeType":"StructuredDocumentation","src":"1635:294:6","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":1047,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1943:6:6","nodeType":"FunctionDefinition","parameters":{"id":1043,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1042,"mutability":"mutable","name":"owner","nameLocation":"1958:5:6","nodeType":"VariableDeclaration","scope":1047,"src":"1950:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1041,"name":"address","nodeType":"ElementaryTypeName","src":"1950:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1949:15:6"},"returnParameters":{"id":1046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1045,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1047,"src":"1988:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1044,"name":"uint256","nodeType":"ElementaryTypeName","src":"1988:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1987:9:6"},"scope":1054,"src":"1934:63:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1048,"nodeType":"StructuredDocumentation","src":"2003:128:6","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":1053,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"2198:16:6","nodeType":"FunctionDefinition","parameters":{"id":1049,"nodeType":"ParameterList","parameters":[],"src":"2214:2:6"},"returnParameters":{"id":1052,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1051,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1053,"src":"2240:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1050,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2240:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2239:9:6"},"scope":1054,"src":"2189:60:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1055,"src":"620:1631:6","usedErrors":[]}],"src":"114:2138:6"},"id":6},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","exportedSymbols":{"Address":[3000],"Context":[3022],"ERC165":[3810],"ERC721":[1999],"IERC165":[3822],"IERC721":[2115],"IERC721Metadata":[2670],"IERC721Receiver":[2133],"Math":[4687],"Strings":[3271]},"id":2000,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1056,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:7"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"./IERC721.sol","id":1057,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2000,"sourceUnit":2116,"src":"132:23:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"./IERC721Receiver.sol","id":1058,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2000,"sourceUnit":2134,"src":"156:31:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","file":"./extensions/IERC721Metadata.sol","id":1059,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2000,"sourceUnit":2671,"src":"188:42:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../utils/Address.sol","id":1060,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2000,"sourceUnit":3001,"src":"231:33:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":1061,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2000,"sourceUnit":3023,"src":"265:33:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../../utils/Strings.sol","id":1062,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2000,"sourceUnit":3272,"src":"299:33:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":1063,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2000,"sourceUnit":3811,"src":"333:46:7","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1065,"name":"Context","nodeType":"IdentifierPath","referencedDeclaration":3022,"src":"647:7:7"},"id":1066,"nodeType":"InheritanceSpecifier","src":"647:7:7"},{"baseName":{"id":1067,"name":"ERC165","nodeType":"IdentifierPath","referencedDeclaration":3810,"src":"656:6:7"},"id":1068,"nodeType":"InheritanceSpecifier","src":"656:6:7"},{"baseName":{"id":1069,"name":"IERC721","nodeType":"IdentifierPath","referencedDeclaration":2115,"src":"664:7:7"},"id":1070,"nodeType":"InheritanceSpecifier","src":"664:7:7"},{"baseName":{"id":1071,"name":"IERC721Metadata","nodeType":"IdentifierPath","referencedDeclaration":2670,"src":"673:15:7"},"id":1072,"nodeType":"InheritanceSpecifier","src":"673:15:7"}],"canonicalName":"ERC721","contractDependencies":[],"contractKind":"contract","documentation":{"id":1064,"nodeType":"StructuredDocumentation","src":"381:246:7","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."},"fullyImplemented":true,"id":1999,"linearizedBaseContracts":[1999,2670,2115,3810,3822,3022],"name":"ERC721","nameLocation":"637:6:7","nodeType":"ContractDefinition","nodes":[{"id":1075,"libraryName":{"id":1073,"name":"Address","nodeType":"IdentifierPath","referencedDeclaration":3000,"src":"701:7:7"},"nodeType":"UsingForDirective","src":"695:26:7","typeName":{"id":1074,"name":"address","nodeType":"ElementaryTypeName","src":"713:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"id":1078,"libraryName":{"id":1076,"name":"Strings","nodeType":"IdentifierPath","referencedDeclaration":3271,"src":"732:7:7"},"nodeType":"UsingForDirective","src":"726:26:7","typeName":{"id":1077,"name":"uint256","nodeType":"ElementaryTypeName","src":"744:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":1080,"mutability":"mutable","name":"_name","nameLocation":"791:5:7","nodeType":"VariableDeclaration","scope":1999,"src":"776:20:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1079,"name":"string","nodeType":"ElementaryTypeName","src":"776:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":1082,"mutability":"mutable","name":"_symbol","nameLocation":"838:7:7","nodeType":"VariableDeclaration","scope":1999,"src":"823:22:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1081,"name":"string","nodeType":"ElementaryTypeName","src":"823:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":1086,"mutability":"mutable","name":"_owners","nameLocation":"934:7:7","nodeType":"VariableDeclaration","scope":1999,"src":"898:43:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":1085,"keyType":{"id":1083,"name":"uint256","nodeType":"ElementaryTypeName","src":"906:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"898:27:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":1084,"name":"address","nodeType":"ElementaryTypeName","src":"917:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":1090,"mutability":"mutable","name":"_balances","nameLocation":"1028:9:7","nodeType":"VariableDeclaration","scope":1999,"src":"992:45:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1089,"keyType":{"id":1087,"name":"address","nodeType":"ElementaryTypeName","src":"1000:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"992:27:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":1088,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":1094,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1129:15:7","nodeType":"VariableDeclaration","scope":1999,"src":"1093:51:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":1093,"keyType":{"id":1091,"name":"uint256","nodeType":"ElementaryTypeName","src":"1101:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1093:27:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":1092,"name":"address","nodeType":"ElementaryTypeName","src":"1112:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":1100,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1252:18:7","nodeType":"VariableDeclaration","scope":1999,"src":"1199:71:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":1099,"keyType":{"id":1095,"name":"address","nodeType":"ElementaryTypeName","src":"1207:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1199:44:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueType":{"id":1098,"keyType":{"id":1096,"name":"address","nodeType":"ElementaryTypeName","src":"1226:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1218:24:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":1097,"name":"bool","nodeType":"ElementaryTypeName","src":"1237:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":1116,"nodeType":"Block","src":"1446:57:7","statements":[{"expression":{"id":1110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1108,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1080,"src":"1456:5:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1109,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"1464:5:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1456:13:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1111,"nodeType":"ExpressionStatement","src":"1456:13:7"},{"expression":{"id":1114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1112,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1082,"src":"1479:7:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1113,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1105,"src":"1489:7:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1479:17:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1115,"nodeType":"ExpressionStatement","src":"1479:17:7"}]},"documentation":{"id":1101,"nodeType":"StructuredDocumentation","src":"1277:108:7","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":1117,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1103,"mutability":"mutable","name":"name_","nameLocation":"1416:5:7","nodeType":"VariableDeclaration","scope":1117,"src":"1402:19:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1102,"name":"string","nodeType":"ElementaryTypeName","src":"1402:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1105,"mutability":"mutable","name":"symbol_","nameLocation":"1437:7:7","nodeType":"VariableDeclaration","scope":1117,"src":"1423:21:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1104,"name":"string","nodeType":"ElementaryTypeName","src":"1423:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1401:44:7"},"returnParameters":{"id":1107,"nodeType":"ParameterList","parameters":[],"src":"1446:0:7"},"scope":1999,"src":"1390:113:7","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[3809,3821],"body":{"id":1147,"nodeType":"Block","src":"1678:192:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1128,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"1707:11:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1130,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2115,"src":"1727:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$2115_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$2115_$","typeString":"type(contract IERC721)"}],"id":1129,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1722:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1722:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$2115","typeString":"type(contract IERC721)"}},"id":1132,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"1722:25:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1707:40:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1134,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"1763:11:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1136,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"1783:15:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$2670_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$2670_$","typeString":"type(contract IERC721Metadata)"}],"id":1135,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1778:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1778:21:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$2670","typeString":"type(contract IERC721Metadata)"}},"id":1138,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"1778:33:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1763:48:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:104:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1143,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"1851:11:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":1141,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1827:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721_$1999_$","typeString":"type(contract super ERC721)"}},"id":1142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3809,"src":"1827:23:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":1144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1827:36:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:156:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1127,"id":1146,"nodeType":"Return","src":"1688:175:7"}]},"documentation":{"id":1118,"nodeType":"StructuredDocumentation","src":"1509:56:7","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1148,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1579:17:7","nodeType":"FunctionDefinition","overrides":{"id":1124,"nodeType":"OverrideSpecifier","overrides":[{"id":1122,"name":"ERC165","nodeType":"IdentifierPath","referencedDeclaration":3810,"src":"1646:6:7"},{"id":1123,"name":"IERC165","nodeType":"IdentifierPath","referencedDeclaration":3822,"src":"1654:7:7"}],"src":"1637:25:7"},"parameters":{"id":1121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1120,"mutability":"mutable","name":"interfaceId","nameLocation":"1604:11:7","nodeType":"VariableDeclaration","scope":1148,"src":"1597:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1119,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1597:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1596:20:7"},"returnParameters":{"id":1127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1126,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1148,"src":"1672:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1125,"name":"bool","nodeType":"ElementaryTypeName","src":"1672:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1671:6:7"},"scope":1999,"src":"1570:300:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2040],"body":{"id":1171,"nodeType":"Block","src":"2010:123:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1158,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"2028:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2045:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1160,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2037:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1159,"name":"address","nodeType":"ElementaryTypeName","src":"2037:7:7","typeDescriptions":{}}},"id":1162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2037:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2028:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572","id":1164,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2049:43:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""},"value":"ERC721: address zero is not a valid owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""}],"id":1157,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2020:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1165,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2020:73:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1166,"nodeType":"ExpressionStatement","src":"2020:73:7"},{"expression":{"baseExpression":{"id":1167,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"2110:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1169,"indexExpression":{"id":1168,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"2120:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2110:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1156,"id":1170,"nodeType":"Return","src":"2103:23:7"}]},"documentation":{"id":1149,"nodeType":"StructuredDocumentation","src":"1876:48:7","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":1172,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1938:9:7","nodeType":"FunctionDefinition","overrides":{"id":1153,"nodeType":"OverrideSpecifier","overrides":[],"src":"1983:8:7"},"parameters":{"id":1152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1151,"mutability":"mutable","name":"owner","nameLocation":"1956:5:7","nodeType":"VariableDeclaration","scope":1172,"src":"1948:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1150,"name":"address","nodeType":"ElementaryTypeName","src":"1948:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1947:15:7"},"returnParameters":{"id":1156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1155,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1172,"src":"2001:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1154,"name":"uint256","nodeType":"ElementaryTypeName","src":"2001:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2000:9:7"},"scope":1999,"src":"1929:204:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2048],"body":{"id":1199,"nodeType":"Block","src":"2271:138:7","statements":[{"assignments":[1182],"declarations":[{"constant":false,"id":1182,"mutability":"mutable","name":"owner","nameLocation":"2289:5:7","nodeType":"VariableDeclaration","scope":1199,"src":"2281:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1181,"name":"address","nodeType":"ElementaryTypeName","src":"2281:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1186,"initialValue":{"arguments":[{"id":1184,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1175,"src":"2306:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1183,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1482,"src":"2297:8:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1185,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2297:17:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2281:33:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1188,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"2332:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2349:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1190,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2341:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1189,"name":"address","nodeType":"ElementaryTypeName","src":"2341:7:7","typeDescriptions":{}}},"id":1192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2341:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2332:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":1194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2353:26:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":1187,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2324:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2324:56:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1196,"nodeType":"ExpressionStatement","src":"2324:56:7"},{"expression":{"id":1197,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"2397:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1180,"id":1198,"nodeType":"Return","src":"2390:12:7"}]},"documentation":{"id":1173,"nodeType":"StructuredDocumentation","src":"2139:46:7","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":1200,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"2199:7:7","nodeType":"FunctionDefinition","overrides":{"id":1177,"nodeType":"OverrideSpecifier","overrides":[],"src":"2244:8:7"},"parameters":{"id":1176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1175,"mutability":"mutable","name":"tokenId","nameLocation":"2215:7:7","nodeType":"VariableDeclaration","scope":1200,"src":"2207:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1174,"name":"uint256","nodeType":"ElementaryTypeName","src":"2207:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2206:17:7"},"returnParameters":{"id":1180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1179,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1200,"src":"2262:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1178,"name":"address","nodeType":"ElementaryTypeName","src":"2262:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2261:9:7"},"scope":1999,"src":"2190:219:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2655],"body":{"id":1209,"nodeType":"Block","src":"2540:29:7","statements":[{"expression":{"id":1207,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1080,"src":"2557:5:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":1206,"id":1208,"nodeType":"Return","src":"2550:12:7"}]},"documentation":{"id":1201,"nodeType":"StructuredDocumentation","src":"2415:51:7","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":1210,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2480:4:7","nodeType":"FunctionDefinition","overrides":{"id":1203,"nodeType":"OverrideSpecifier","overrides":[],"src":"2507:8:7"},"parameters":{"id":1202,"nodeType":"ParameterList","parameters":[],"src":"2484:2:7"},"returnParameters":{"id":1206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1205,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1210,"src":"2525:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1204,"name":"string","nodeType":"ElementaryTypeName","src":"2525:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2524:15:7"},"scope":1999,"src":"2471:98:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2661],"body":{"id":1219,"nodeType":"Block","src":"2704:31:7","statements":[{"expression":{"id":1217,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1082,"src":"2721:7:7","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":1216,"id":1218,"nodeType":"Return","src":"2714:14:7"}]},"documentation":{"id":1211,"nodeType":"StructuredDocumentation","src":"2575:53:7","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":1220,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2642:6:7","nodeType":"FunctionDefinition","overrides":{"id":1213,"nodeType":"OverrideSpecifier","overrides":[],"src":"2671:8:7"},"parameters":{"id":1212,"nodeType":"ParameterList","parameters":[],"src":"2648:2:7"},"returnParameters":{"id":1216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1215,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1220,"src":"2689:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1214,"name":"string","nodeType":"ElementaryTypeName","src":"2689:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2688:15:7"},"scope":1999,"src":"2633:102:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2669],"body":{"id":1258,"nodeType":"Block","src":"2889:188:7","statements":[{"expression":{"arguments":[{"id":1230,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1223,"src":"2914:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1229,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1877,"src":"2899:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":1231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2899:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1232,"nodeType":"ExpressionStatement","src":"2899:23:7"},{"assignments":[1234],"declarations":[{"constant":false,"id":1234,"mutability":"mutable","name":"baseURI","nameLocation":"2947:7:7","nodeType":"VariableDeclaration","scope":1258,"src":"2933:21:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1233,"name":"string","nodeType":"ElementaryTypeName","src":"2933:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1237,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1235,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1268,"src":"2957:8:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":1236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2957:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2933:34:7"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1240,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1234,"src":"2990:7:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1239,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2984:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1238,"name":"bytes","nodeType":"ElementaryTypeName","src":"2984:5:7","typeDescriptions":{}}},"id":1241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2984:14:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2984:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3008:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2984:25:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":1255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3068:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":1256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2984:86:7","trueExpression":{"arguments":[{"arguments":[{"id":1249,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1234,"src":"3036:7:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1250,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1223,"src":"3045:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":3154,"src":"3045:16:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3045:18:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1247,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3019:3:7","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1248,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"3019:16:7","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3019:45:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1246,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3012:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1245,"name":"string","nodeType":"ElementaryTypeName","src":"3012:6:7","typeDescriptions":{}}},"id":1254,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3012:53:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1228,"id":1257,"nodeType":"Return","src":"2977:93:7"}]},"documentation":{"id":1221,"nodeType":"StructuredDocumentation","src":"2741:55:7","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":1259,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"2810:8:7","nodeType":"FunctionDefinition","overrides":{"id":1225,"nodeType":"OverrideSpecifier","overrides":[],"src":"2856:8:7"},"parameters":{"id":1224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1223,"mutability":"mutable","name":"tokenId","nameLocation":"2827:7:7","nodeType":"VariableDeclaration","scope":1259,"src":"2819:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1222,"name":"uint256","nodeType":"ElementaryTypeName","src":"2819:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2818:17:7"},"returnParameters":{"id":1228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1227,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1259,"src":"2874:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1226,"name":"string","nodeType":"ElementaryTypeName","src":"2874:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2873:15:7"},"scope":1999,"src":"2801:276:7","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1267,"nodeType":"Block","src":"3385:26:7","statements":[{"expression":{"hexValue":"","id":1265,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3402:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":1264,"id":1266,"nodeType":"Return","src":"3395:9:7"}]},"documentation":{"id":1260,"nodeType":"StructuredDocumentation","src":"3083:231:7","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":1268,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"3328:8:7","nodeType":"FunctionDefinition","parameters":{"id":1261,"nodeType":"ParameterList","parameters":[],"src":"3336:2:7"},"returnParameters":{"id":1264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1263,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1268,"src":"3370:13:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1262,"name":"string","nodeType":"ElementaryTypeName","src":"3370:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3369:15:7"},"scope":1999,"src":"3319:92:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[2088],"body":{"id":1310,"nodeType":"Block","src":"3538:336:7","statements":[{"assignments":[1278],"declarations":[{"constant":false,"id":1278,"mutability":"mutable","name":"owner","nameLocation":"3556:5:7","nodeType":"VariableDeclaration","scope":1310,"src":"3548:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1277,"name":"address","nodeType":"ElementaryTypeName","src":"3548:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1283,"initialValue":{"arguments":[{"id":1281,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1273,"src":"3579:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1279,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"3564:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1999_$","typeString":"type(contract ERC721)"}},"id":1280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1200,"src":"3564:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1282,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3564:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3548:39:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1285,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1271,"src":"3605:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1286,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1278,"src":"3611:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3605:11:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572","id":1288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3618:35:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""},"value":"ERC721: approval to current owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""}],"id":1284,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3597:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3597:57:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1290,"nodeType":"ExpressionStatement","src":"3597:57:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1292,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3012,"src":"3686:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3686:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1294,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1278,"src":"3702:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3686:21:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1297,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1278,"src":"3728:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1298,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3012,"src":"3735:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3735:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1296,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"3711:16:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":1300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3711:37:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3686:62:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","id":1302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3762:63:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""},"value":"ERC721: approve caller is not token owner or approved for all"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""}],"id":1291,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3665:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3665:170:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1304,"nodeType":"ExpressionStatement","src":"3665:170:7"},{"expression":{"arguments":[{"id":1306,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1271,"src":"3855:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1307,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1273,"src":"3859:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1305,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1831,"src":"3846:8:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3846:21:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1309,"nodeType":"ExpressionStatement","src":"3846:21:7"}]},"documentation":{"id":1269,"nodeType":"StructuredDocumentation","src":"3417:46:7","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":1311,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3477:7:7","nodeType":"FunctionDefinition","overrides":{"id":1275,"nodeType":"OverrideSpecifier","overrides":[],"src":"3529:8:7"},"parameters":{"id":1274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1271,"mutability":"mutable","name":"to","nameLocation":"3493:2:7","nodeType":"VariableDeclaration","scope":1311,"src":"3485:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1270,"name":"address","nodeType":"ElementaryTypeName","src":"3485:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1273,"mutability":"mutable","name":"tokenId","nameLocation":"3505:7:7","nodeType":"VariableDeclaration","scope":1311,"src":"3497:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1272,"name":"uint256","nodeType":"ElementaryTypeName","src":"3497:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3484:29:7"},"returnParameters":{"id":1276,"nodeType":"ParameterList","parameters":[],"src":"3538:0:7"},"scope":1999,"src":"3468:406:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2104],"body":{"id":1328,"nodeType":"Block","src":"4020:82:7","statements":[{"expression":{"arguments":[{"id":1321,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"4045:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1320,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1877,"src":"4030:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":1322,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4030:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1323,"nodeType":"ExpressionStatement","src":"4030:23:7"},{"expression":{"baseExpression":{"id":1324,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1094,"src":"4071:15:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1326,"indexExpression":{"id":1325,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"4087:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4071:24:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1319,"id":1327,"nodeType":"Return","src":"4064:31:7"}]},"documentation":{"id":1312,"nodeType":"StructuredDocumentation","src":"3880:50:7","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":1329,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"3944:11:7","nodeType":"FunctionDefinition","overrides":{"id":1316,"nodeType":"OverrideSpecifier","overrides":[],"src":"3993:8:7"},"parameters":{"id":1315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1314,"mutability":"mutable","name":"tokenId","nameLocation":"3964:7:7","nodeType":"VariableDeclaration","scope":1329,"src":"3956:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1313,"name":"uint256","nodeType":"ElementaryTypeName","src":"3956:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3955:17:7"},"returnParameters":{"id":1319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1318,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1329,"src":"4011:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1317,"name":"address","nodeType":"ElementaryTypeName","src":"4011:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4010:9:7"},"scope":1999,"src":"3935:167:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2096],"body":{"id":1345,"nodeType":"Block","src":"4253:69:7","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1339,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3012,"src":"4282:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4282:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1341,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"4296:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1342,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1334,"src":"4306:8:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1338,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1863,"src":"4263:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4263:52:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1344,"nodeType":"ExpressionStatement","src":"4263:52:7"}]},"documentation":{"id":1330,"nodeType":"StructuredDocumentation","src":"4108:56:7","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":1346,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4178:17:7","nodeType":"FunctionDefinition","overrides":{"id":1336,"nodeType":"OverrideSpecifier","overrides":[],"src":"4244:8:7"},"parameters":{"id":1335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1332,"mutability":"mutable","name":"operator","nameLocation":"4204:8:7","nodeType":"VariableDeclaration","scope":1346,"src":"4196:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1331,"name":"address","nodeType":"ElementaryTypeName","src":"4196:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1334,"mutability":"mutable","name":"approved","nameLocation":"4219:8:7","nodeType":"VariableDeclaration","scope":1346,"src":"4214:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1333,"name":"bool","nodeType":"ElementaryTypeName","src":"4214:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4195:33:7"},"returnParameters":{"id":1337,"nodeType":"ParameterList","parameters":[],"src":"4253:0:7"},"scope":1999,"src":"4169:153:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2114],"body":{"id":1363,"nodeType":"Block","src":"4491:59:7","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":1357,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1100,"src":"4508:18:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1359,"indexExpression":{"id":1358,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1349,"src":"4527:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:25:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1361,"indexExpression":{"id":1360,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1351,"src":"4534:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:35:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1356,"id":1362,"nodeType":"Return","src":"4501:42:7"}]},"documentation":{"id":1347,"nodeType":"StructuredDocumentation","src":"4328:55:7","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":1364,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4397:16:7","nodeType":"FunctionDefinition","overrides":{"id":1353,"nodeType":"OverrideSpecifier","overrides":[],"src":"4467:8:7"},"parameters":{"id":1352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1349,"mutability":"mutable","name":"owner","nameLocation":"4422:5:7","nodeType":"VariableDeclaration","scope":1364,"src":"4414:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1348,"name":"address","nodeType":"ElementaryTypeName","src":"4414:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1351,"mutability":"mutable","name":"operator","nameLocation":"4437:8:7","nodeType":"VariableDeclaration","scope":1364,"src":"4429:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1350,"name":"address","nodeType":"ElementaryTypeName","src":"4429:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4413:33:7"},"returnParameters":{"id":1356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1355,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1364,"src":"4485:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1354,"name":"bool","nodeType":"ElementaryTypeName","src":"4485:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4484:6:7"},"scope":1999,"src":"4388:162:7","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2080],"body":{"id":1390,"nodeType":"Block","src":"4731:207:7","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1377,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3012,"src":"4820:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1378,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4820:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1379,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1371,"src":"4834:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1376,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1534,"src":"4801:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":1380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4801:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":1381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4844:47:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":1375,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4793:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4793:99:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1383,"nodeType":"ExpressionStatement","src":"4793:99:7"},{"expression":{"arguments":[{"id":1385,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1367,"src":"4913:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1386,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1369,"src":"4919:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1387,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1371,"src":"4923:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1384,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1807,"src":"4903:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4903:28:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1389,"nodeType":"ExpressionStatement","src":"4903:28:7"}]},"documentation":{"id":1365,"nodeType":"StructuredDocumentation","src":"4556:51:7","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":1391,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"4621:12:7","nodeType":"FunctionDefinition","overrides":{"id":1373,"nodeType":"OverrideSpecifier","overrides":[],"src":"4722:8:7"},"parameters":{"id":1372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1367,"mutability":"mutable","name":"from","nameLocation":"4651:4:7","nodeType":"VariableDeclaration","scope":1391,"src":"4643:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1366,"name":"address","nodeType":"ElementaryTypeName","src":"4643:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1369,"mutability":"mutable","name":"to","nameLocation":"4673:2:7","nodeType":"VariableDeclaration","scope":1391,"src":"4665:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1368,"name":"address","nodeType":"ElementaryTypeName","src":"4665:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1371,"mutability":"mutable","name":"tokenId","nameLocation":"4693:7:7","nodeType":"VariableDeclaration","scope":1391,"src":"4685:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1370,"name":"uint256","nodeType":"ElementaryTypeName","src":"4685:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4633:73:7"},"returnParameters":{"id":1374,"nodeType":"ParameterList","parameters":[],"src":"4731:0:7"},"scope":1999,"src":"4612:326:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2070],"body":{"id":1409,"nodeType":"Block","src":"5127:56:7","statements":[{"expression":{"arguments":[{"id":1403,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1394,"src":"5154:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1404,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1396,"src":"5160:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1405,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1398,"src":"5164:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":1406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5173:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1402,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[1410,1440],"referencedDeclaration":1440,"src":"5137:16:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":1407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5137:39:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1408,"nodeType":"ExpressionStatement","src":"5137:39:7"}]},"documentation":{"id":1392,"nodeType":"StructuredDocumentation","src":"4944:55:7","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":1410,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5013:16:7","nodeType":"FunctionDefinition","overrides":{"id":1400,"nodeType":"OverrideSpecifier","overrides":[],"src":"5118:8:7"},"parameters":{"id":1399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1394,"mutability":"mutable","name":"from","nameLocation":"5047:4:7","nodeType":"VariableDeclaration","scope":1410,"src":"5039:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1393,"name":"address","nodeType":"ElementaryTypeName","src":"5039:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1396,"mutability":"mutable","name":"to","nameLocation":"5069:2:7","nodeType":"VariableDeclaration","scope":1410,"src":"5061:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1395,"name":"address","nodeType":"ElementaryTypeName","src":"5061:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1398,"mutability":"mutable","name":"tokenId","nameLocation":"5089:7:7","nodeType":"VariableDeclaration","scope":1410,"src":"5081:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1397,"name":"uint256","nodeType":"ElementaryTypeName","src":"5081:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5029:73:7"},"returnParameters":{"id":1401,"nodeType":"ParameterList","parameters":[],"src":"5127:0:7"},"scope":1999,"src":"5004:179:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2060],"body":{"id":1439,"nodeType":"Block","src":"5399:164:7","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1425,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3012,"src":"5436:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5436:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1427,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"5450:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1424,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1534,"src":"5417:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":1428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5417:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":1429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5460:47:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":1423,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5409:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5409:99:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1431,"nodeType":"ExpressionStatement","src":"5409:99:7"},{"expression":{"arguments":[{"id":1433,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1413,"src":"5532:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1434,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1415,"src":"5538:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1435,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"5542:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1436,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1419,"src":"5551:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1432,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1469,"src":"5518:13:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":1437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5518:38:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1438,"nodeType":"ExpressionStatement","src":"5518:38:7"}]},"documentation":{"id":1411,"nodeType":"StructuredDocumentation","src":"5189:55:7","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":1440,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5258:16:7","nodeType":"FunctionDefinition","overrides":{"id":1421,"nodeType":"OverrideSpecifier","overrides":[],"src":"5390:8:7"},"parameters":{"id":1420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1413,"mutability":"mutable","name":"from","nameLocation":"5292:4:7","nodeType":"VariableDeclaration","scope":1440,"src":"5284:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1412,"name":"address","nodeType":"ElementaryTypeName","src":"5284:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1415,"mutability":"mutable","name":"to","nameLocation":"5314:2:7","nodeType":"VariableDeclaration","scope":1440,"src":"5306:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1414,"name":"address","nodeType":"ElementaryTypeName","src":"5306:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1417,"mutability":"mutable","name":"tokenId","nameLocation":"5334:7:7","nodeType":"VariableDeclaration","scope":1440,"src":"5326:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1416,"name":"uint256","nodeType":"ElementaryTypeName","src":"5326:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1419,"mutability":"mutable","name":"data","nameLocation":"5364:4:7","nodeType":"VariableDeclaration","scope":1440,"src":"5351:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1418,"name":"bytes","nodeType":"ElementaryTypeName","src":"5351:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5274:100:7"},"returnParameters":{"id":1422,"nodeType":"ParameterList","parameters":[],"src":"5399:0:7"},"scope":1999,"src":"5249:314:7","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1468,"nodeType":"Block","src":"6564:165:7","statements":[{"expression":{"arguments":[{"id":1453,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1443,"src":"6584:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1454,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"6590:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1455,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1447,"src":"6594:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1452,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1807,"src":"6574:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6574:28:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1457,"nodeType":"ExpressionStatement","src":"6574:28:7"},{"expression":{"arguments":[{"arguments":[{"id":1460,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1443,"src":"6643:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1461,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1445,"src":"6649:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1462,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1447,"src":"6653:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1463,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1449,"src":"6662:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1459,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"6620:22:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":1464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6620:47:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":1465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6669:52:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":1458,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6612:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6612:110:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1467,"nodeType":"ExpressionStatement","src":"6612:110:7"}]},"documentation":{"id":1441,"nodeType":"StructuredDocumentation","src":"5569:850:7","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":1469,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"6433:13:7","nodeType":"FunctionDefinition","parameters":{"id":1450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1443,"mutability":"mutable","name":"from","nameLocation":"6464:4:7","nodeType":"VariableDeclaration","scope":1469,"src":"6456:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1442,"name":"address","nodeType":"ElementaryTypeName","src":"6456:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1445,"mutability":"mutable","name":"to","nameLocation":"6486:2:7","nodeType":"VariableDeclaration","scope":1469,"src":"6478:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1444,"name":"address","nodeType":"ElementaryTypeName","src":"6478:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1447,"mutability":"mutable","name":"tokenId","nameLocation":"6506:7:7","nodeType":"VariableDeclaration","scope":1469,"src":"6498:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1446,"name":"uint256","nodeType":"ElementaryTypeName","src":"6498:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1449,"mutability":"mutable","name":"data","nameLocation":"6536:4:7","nodeType":"VariableDeclaration","scope":1469,"src":"6523:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1448,"name":"bytes","nodeType":"ElementaryTypeName","src":"6523:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6446:100:7"},"returnParameters":{"id":1451,"nodeType":"ParameterList","parameters":[],"src":"6564:0:7"},"scope":1999,"src":"6424:305:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1481,"nodeType":"Block","src":"6913:40:7","statements":[{"expression":{"baseExpression":{"id":1477,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1086,"src":"6930:7:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1479,"indexExpression":{"id":1478,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1472,"src":"6938:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6930:16:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1476,"id":1480,"nodeType":"Return","src":"6923:23:7"}]},"documentation":{"id":1470,"nodeType":"StructuredDocumentation","src":"6735:98:7","text":" @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist"},"id":1482,"implemented":true,"kind":"function","modifiers":[],"name":"_ownerOf","nameLocation":"6847:8:7","nodeType":"FunctionDefinition","parameters":{"id":1473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1472,"mutability":"mutable","name":"tokenId","nameLocation":"6864:7:7","nodeType":"VariableDeclaration","scope":1482,"src":"6856:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1471,"name":"uint256","nodeType":"ElementaryTypeName","src":"6856:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6855:17:7"},"returnParameters":{"id":1476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1475,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1482,"src":"6904:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1474,"name":"address","nodeType":"ElementaryTypeName","src":"6904:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6903:9:7"},"scope":1999,"src":"6838:115:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1499,"nodeType":"Block","src":"7327:55:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1491,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"7353:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1490,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1482,"src":"7344:8:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7344:17:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7373:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1494,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7365:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1493,"name":"address","nodeType":"ElementaryTypeName","src":"7365:7:7","typeDescriptions":{}}},"id":1496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7365:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7344:31:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1489,"id":1498,"nodeType":"Return","src":"7337:38:7"}]},"documentation":{"id":1483,"nodeType":"StructuredDocumentation","src":"6959:292:7","text":" @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),\n and stop existing when they are burned (`_burn`)."},"id":1500,"implemented":true,"kind":"function","modifiers":[],"name":"_exists","nameLocation":"7265:7:7","nodeType":"FunctionDefinition","parameters":{"id":1486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1485,"mutability":"mutable","name":"tokenId","nameLocation":"7281:7:7","nodeType":"VariableDeclaration","scope":1500,"src":"7273:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1484,"name":"uint256","nodeType":"ElementaryTypeName","src":"7273:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7272:17:7"},"returnParameters":{"id":1489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1488,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1500,"src":"7321:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1487,"name":"bool","nodeType":"ElementaryTypeName","src":"7321:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7320:6:7"},"scope":1999,"src":"7256:126:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1533,"nodeType":"Block","src":"7639:162:7","statements":[{"assignments":[1511],"declarations":[{"constant":false,"id":1511,"mutability":"mutable","name":"owner","nameLocation":"7657:5:7","nodeType":"VariableDeclaration","scope":1533,"src":"7649:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1510,"name":"address","nodeType":"ElementaryTypeName","src":"7649:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1516,"initialValue":{"arguments":[{"id":1514,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1505,"src":"7680:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1512,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"7665:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1999_$","typeString":"type(contract ERC721)"}},"id":1513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1200,"src":"7665:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7665:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7649:39:7"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1517,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1503,"src":"7706:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1518,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1511,"src":"7717:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7706:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1521,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1511,"src":"7743:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1522,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1503,"src":"7750:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1520,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"7726:16:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":1523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7726:32:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7706:52:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1526,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1505,"src":"7774:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1525,"name":"getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"7762:11:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7762:20:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1528,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1503,"src":"7786:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7762:31:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7706:87:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1531,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7705:89:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1509,"id":1532,"nodeType":"Return","src":"7698:96:7"}]},"documentation":{"id":1501,"nodeType":"StructuredDocumentation","src":"7388:147:7","text":" @dev Returns whether `spender` is allowed to manage `tokenId`.\n Requirements:\n - `tokenId` must exist."},"id":1534,"implemented":true,"kind":"function","modifiers":[],"name":"_isApprovedOrOwner","nameLocation":"7549:18:7","nodeType":"FunctionDefinition","parameters":{"id":1506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1503,"mutability":"mutable","name":"spender","nameLocation":"7576:7:7","nodeType":"VariableDeclaration","scope":1534,"src":"7568:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1502,"name":"address","nodeType":"ElementaryTypeName","src":"7568:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1505,"mutability":"mutable","name":"tokenId","nameLocation":"7593:7:7","nodeType":"VariableDeclaration","scope":1534,"src":"7585:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1504,"name":"uint256","nodeType":"ElementaryTypeName","src":"7585:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7567:34:7"},"returnParameters":{"id":1509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1508,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1534,"src":"7633:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1507,"name":"bool","nodeType":"ElementaryTypeName","src":"7633:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7632:6:7"},"scope":1999,"src":"7540:261:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1548,"nodeType":"Block","src":"8196:43:7","statements":[{"expression":{"arguments":[{"id":1543,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1537,"src":"8216:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1544,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1539,"src":"8220:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":1545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8229:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1542,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[1549,1578],"referencedDeclaration":1578,"src":"8206:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":1546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8206:26:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1547,"nodeType":"ExpressionStatement","src":"8206:26:7"}]},"documentation":{"id":1535,"nodeType":"StructuredDocumentation","src":"7807:319:7","text":" @dev Safely mints `tokenId` and transfers it to `to`.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":1549,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8140:9:7","nodeType":"FunctionDefinition","parameters":{"id":1540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1537,"mutability":"mutable","name":"to","nameLocation":"8158:2:7","nodeType":"VariableDeclaration","scope":1549,"src":"8150:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1536,"name":"address","nodeType":"ElementaryTypeName","src":"8150:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1539,"mutability":"mutable","name":"tokenId","nameLocation":"8170:7:7","nodeType":"VariableDeclaration","scope":1549,"src":"8162:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1538,"name":"uint256","nodeType":"ElementaryTypeName","src":"8162:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8149:29:7"},"returnParameters":{"id":1541,"nodeType":"ParameterList","parameters":[],"src":"8196:0:7"},"scope":1999,"src":"8131:108:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1577,"nodeType":"Block","src":"8574:195:7","statements":[{"expression":{"arguments":[{"id":1560,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1552,"src":"8590:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1561,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1554,"src":"8594:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1559,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1655,"src":"8584:5:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1562,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8584:18:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1563,"nodeType":"ExpressionStatement","src":"8584:18:7"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"30","id":1568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8664:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1567,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8656:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1566,"name":"address","nodeType":"ElementaryTypeName","src":"8656:7:7","typeDescriptions":{}}},"id":1569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8656:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1570,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1552,"src":"8668:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1571,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1554,"src":"8672:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1572,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1556,"src":"8681:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1565,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1939,"src":"8633:22:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":1573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8633:53:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":1574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8700:52:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":1564,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8612:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8612:150:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1576,"nodeType":"ExpressionStatement","src":"8612:150:7"}]},"documentation":{"id":1550,"nodeType":"StructuredDocumentation","src":"8245:210:7","text":" @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":1578,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8469:9:7","nodeType":"FunctionDefinition","parameters":{"id":1557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1552,"mutability":"mutable","name":"to","nameLocation":"8496:2:7","nodeType":"VariableDeclaration","scope":1578,"src":"8488:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1551,"name":"address","nodeType":"ElementaryTypeName","src":"8488:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1554,"mutability":"mutable","name":"tokenId","nameLocation":"8516:7:7","nodeType":"VariableDeclaration","scope":1578,"src":"8508:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1553,"name":"uint256","nodeType":"ElementaryTypeName","src":"8508:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1556,"mutability":"mutable","name":"data","nameLocation":"8546:4:7","nodeType":"VariableDeclaration","scope":1578,"src":"8533:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1555,"name":"bytes","nodeType":"ElementaryTypeName","src":"8533:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8478:78:7"},"returnParameters":{"id":1558,"nodeType":"ParameterList","parameters":[],"src":"8574:0:7"},"scope":1999,"src":"8460:309:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1654,"nodeType":"Block","src":"9152:859:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1587,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1581,"src":"9170:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9184:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1589,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9176:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1588,"name":"address","nodeType":"ElementaryTypeName","src":"9176:7:7","typeDescriptions":{}}},"id":1591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9176:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9170:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","id":1593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9188:34:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""},"value":"ERC721: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""}],"id":1586,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9162:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9162:61:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1595,"nodeType":"ExpressionStatement","src":"9162:61:7"},{"expression":{"arguments":[{"id":1600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9241:17:7","subExpression":{"arguments":[{"id":1598,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1583,"src":"9250:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1597,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1500,"src":"9242:7:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":1599,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9242:16:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":1601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9260:30:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":1596,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9233:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9233:58:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1603,"nodeType":"ExpressionStatement","src":"9233:58:7"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9331:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1606,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9323:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1605,"name":"address","nodeType":"ElementaryTypeName","src":"9323:7:7","typeDescriptions":{}}},"id":1608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9323:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1609,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1581,"src":"9335:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1610,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1583,"src":"9339:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":1611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9348:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1604,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"9302:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":1612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9302:48:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1613,"nodeType":"ExpressionStatement","src":"9302:48:7"},{"expression":{"arguments":[{"id":1618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9445:17:7","subExpression":{"arguments":[{"id":1616,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1583,"src":"9454:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1615,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1500,"src":"9446:7:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":1617,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9446:16:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":1619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9464:30:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":1614,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9437:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9437:58:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1621,"nodeType":"ExpressionStatement","src":"9437:58:7"},{"id":1628,"nodeType":"UncheckedBlock","src":"9506:360:7","statements":[{"expression":{"id":1626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1622,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"9837:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1624,"indexExpression":{"id":1623,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1581,"src":"9847:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9837:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9854:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9837:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1627,"nodeType":"ExpressionStatement","src":"9837:18:7"}]},{"expression":{"id":1633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1629,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1086,"src":"9876:7:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1631,"indexExpression":{"id":1630,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1583,"src":"9884:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9876:16:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1632,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1581,"src":"9895:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9876:21:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1634,"nodeType":"ExpressionStatement","src":"9876:21:7"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9930:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1637,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9922:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1636,"name":"address","nodeType":"ElementaryTypeName","src":"9922:7:7","typeDescriptions":{}}},"id":1639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9922:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1640,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1581,"src":"9934:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1641,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1583,"src":"9938:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1635,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2014,"src":"9913:8:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9913:33:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1643,"nodeType":"EmitStatement","src":"9908:38:7"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9985:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1646,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9977:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1645,"name":"address","nodeType":"ElementaryTypeName","src":"9977:7:7","typeDescriptions":{}}},"id":1648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9977:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1649,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1581,"src":"9989:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1650,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1583,"src":"9993:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":1651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10002:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1644,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1998,"src":"9957:19:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":1652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9957:47:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1653,"nodeType":"ExpressionStatement","src":"9957:47:7"}]},"documentation":{"id":1579,"nodeType":"StructuredDocumentation","src":"8775:311:7","text":" @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":1655,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"9100:5:7","nodeType":"FunctionDefinition","parameters":{"id":1584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1581,"mutability":"mutable","name":"to","nameLocation":"9114:2:7","nodeType":"VariableDeclaration","scope":1655,"src":"9106:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1580,"name":"address","nodeType":"ElementaryTypeName","src":"9106:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1583,"mutability":"mutable","name":"tokenId","nameLocation":"9126:7:7","nodeType":"VariableDeclaration","scope":1655,"src":"9118:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1582,"name":"uint256","nodeType":"ElementaryTypeName","src":"9118:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9105:29:7"},"returnParameters":{"id":1585,"nodeType":"ParameterList","parameters":[],"src":"9152:0:7"},"scope":1999,"src":"9091:920:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1721,"nodeType":"Block","src":"10386:713:7","statements":[{"assignments":[1662],"declarations":[{"constant":false,"id":1662,"mutability":"mutable","name":"owner","nameLocation":"10404:5:7","nodeType":"VariableDeclaration","scope":1721,"src":"10396:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1661,"name":"address","nodeType":"ElementaryTypeName","src":"10396:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1667,"initialValue":{"arguments":[{"id":1665,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1658,"src":"10427:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1663,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"10412:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1999_$","typeString":"type(contract ERC721)"}},"id":1664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1200,"src":"10412:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10412:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10396:39:7"},{"expression":{"arguments":[{"id":1669,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1662,"src":"10467:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10482:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1671,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10474:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1670,"name":"address","nodeType":"ElementaryTypeName","src":"10474:7:7","typeDescriptions":{}}},"id":1673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10474:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1674,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1658,"src":"10486:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":1675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10495:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1668,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"10446:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":1676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10446:51:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1677,"nodeType":"ExpressionStatement","src":"10446:51:7"},{"expression":{"id":1683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1678,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1662,"src":"10599:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1681,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1658,"src":"10622:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1679,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"10607:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1999_$","typeString":"type(contract ERC721)"}},"id":1680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1200,"src":"10607:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10607:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10599:31:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1684,"nodeType":"ExpressionStatement","src":"10599:31:7"},{"expression":{"id":1688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10668:31:7","subExpression":{"baseExpression":{"id":1685,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1094,"src":"10675:15:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1687,"indexExpression":{"id":1686,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1658,"src":"10691:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10675:24:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1689,"nodeType":"ExpressionStatement","src":"10668:31:7"},{"id":1696,"nodeType":"UncheckedBlock","src":"10710:237:7","statements":[{"expression":{"id":1694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1690,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"10915:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1692,"indexExpression":{"id":1691,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1662,"src":"10925:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10915:16:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":1693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10935:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10915:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1695,"nodeType":"ExpressionStatement","src":"10915:21:7"}]},{"expression":{"id":1700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10956:23:7","subExpression":{"baseExpression":{"id":1697,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1086,"src":"10963:7:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1699,"indexExpression":{"id":1698,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1658,"src":"10971:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10963:16:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1701,"nodeType":"ExpressionStatement","src":"10956:23:7"},{"eventCall":{"arguments":[{"id":1703,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1662,"src":"11004:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11019:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1705,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11011:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1704,"name":"address","nodeType":"ElementaryTypeName","src":"11011:7:7","typeDescriptions":{}}},"id":1707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11011:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1708,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1658,"src":"11023:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1702,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2014,"src":"10995:8:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10995:36:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1710,"nodeType":"EmitStatement","src":"10990:41:7"},{"expression":{"arguments":[{"id":1712,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1662,"src":"11062:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11077:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1714,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11069:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1713,"name":"address","nodeType":"ElementaryTypeName","src":"11069:7:7","typeDescriptions":{}}},"id":1716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11069:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1717,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1658,"src":"11081:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":1718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11090:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1711,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1998,"src":"11042:19:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":1719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11042:50:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1720,"nodeType":"ExpressionStatement","src":"11042:50:7"}]},"documentation":{"id":1656,"nodeType":"StructuredDocumentation","src":"10017:315:7","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":1722,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"10346:5:7","nodeType":"FunctionDefinition","parameters":{"id":1659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1658,"mutability":"mutable","name":"tokenId","nameLocation":"10360:7:7","nodeType":"VariableDeclaration","scope":1722,"src":"10352:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1657,"name":"uint256","nodeType":"ElementaryTypeName","src":"10352:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10351:17:7"},"returnParameters":{"id":1660,"nodeType":"ParameterList","parameters":[],"src":"10386:0:7"},"scope":1999,"src":"10337:762:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1806,"nodeType":"Block","src":"11532:1124:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1735,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"11565:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1733,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"11550:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1999_$","typeString":"type(contract ERC721)"}},"id":1734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1200,"src":"11550:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11550:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1737,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1725,"src":"11577:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11550:31:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":1739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11583:39:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":1732,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11542:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11542:81:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1741,"nodeType":"ExpressionStatement","src":"11542:81:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1743,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1727,"src":"11641:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11655:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1745,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11647:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1744,"name":"address","nodeType":"ElementaryTypeName","src":"11647:7:7","typeDescriptions":{}}},"id":1747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11647:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11641:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373","id":1749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11659:38:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""},"value":"ERC721: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""}],"id":1742,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11633:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11633:65:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1751,"nodeType":"ExpressionStatement","src":"11633:65:7"},{"expression":{"arguments":[{"id":1753,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1725,"src":"11730:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1754,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1727,"src":"11736:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1755,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"11740:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":1756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11749:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1752,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"11709:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":1757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11709:42:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1758,"nodeType":"ExpressionStatement","src":"11709:42:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1762,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"11866:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1760,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"11851:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1999_$","typeString":"type(contract ERC721)"}},"id":1761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1200,"src":"11851:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1763,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11851:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1764,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1725,"src":"11878:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11851:31:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":1766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11884:39:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":1759,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11843:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11843:81:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1768,"nodeType":"ExpressionStatement","src":"11843:81:7"},{"expression":{"id":1772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"11986:31:7","subExpression":{"baseExpression":{"id":1769,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1094,"src":"11993:15:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1771,"indexExpression":{"id":1770,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"12009:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11993:24:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1773,"nodeType":"ExpressionStatement","src":"11986:31:7"},{"id":1786,"nodeType":"UncheckedBlock","src":"12028:496:7","statements":[{"expression":{"id":1778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1774,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"12461:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1776,"indexExpression":{"id":1775,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1725,"src":"12471:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12461:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":1777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12480:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12461:20:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1779,"nodeType":"ExpressionStatement","src":"12461:20:7"},{"expression":{"id":1784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1780,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"12495:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1782,"indexExpression":{"id":1781,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1727,"src":"12505:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12495:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12512:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12495:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1785,"nodeType":"ExpressionStatement","src":"12495:18:7"}]},{"expression":{"id":1791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1787,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1086,"src":"12533:7:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1789,"indexExpression":{"id":1788,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"12541:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12533:16:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1790,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1727,"src":"12552:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12533:21:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1792,"nodeType":"ExpressionStatement","src":"12533:21:7"},{"eventCall":{"arguments":[{"id":1794,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1725,"src":"12579:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1795,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1727,"src":"12585:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1796,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"12589:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1793,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2014,"src":"12570:8:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1797,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12570:27:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1798,"nodeType":"EmitStatement","src":"12565:32:7"},{"expression":{"arguments":[{"id":1800,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1725,"src":"12628:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1801,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1727,"src":"12634:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1802,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"12638:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":1803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12647:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1799,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1998,"src":"12608:19:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":1804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12608:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1805,"nodeType":"ExpressionStatement","src":"12608:41:7"}]},"documentation":{"id":1723,"nodeType":"StructuredDocumentation","src":"11105:313:7","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":1807,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"11432:9:7","nodeType":"FunctionDefinition","parameters":{"id":1730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1725,"mutability":"mutable","name":"from","nameLocation":"11459:4:7","nodeType":"VariableDeclaration","scope":1807,"src":"11451:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1724,"name":"address","nodeType":"ElementaryTypeName","src":"11451:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1727,"mutability":"mutable","name":"to","nameLocation":"11481:2:7","nodeType":"VariableDeclaration","scope":1807,"src":"11473:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1726,"name":"address","nodeType":"ElementaryTypeName","src":"11473:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1729,"mutability":"mutable","name":"tokenId","nameLocation":"11501:7:7","nodeType":"VariableDeclaration","scope":1807,"src":"11493:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1728,"name":"uint256","nodeType":"ElementaryTypeName","src":"11493:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11441:73:7"},"returnParameters":{"id":1731,"nodeType":"ParameterList","parameters":[],"src":"11532:0:7"},"scope":1999,"src":"11423:1233:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1830,"nodeType":"Block","src":"12832:107:7","statements":[{"expression":{"id":1819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1815,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1094,"src":"12842:15:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1817,"indexExpression":{"id":1816,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"12858:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12842:24:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1818,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1810,"src":"12869:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12842:29:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1820,"nodeType":"ExpressionStatement","src":"12842:29:7"},{"eventCall":{"arguments":[{"arguments":[{"id":1824,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"12910:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1822,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"12895:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1999_$","typeString":"type(contract ERC721)"}},"id":1823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1200,"src":"12895:14:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12895:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1826,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1810,"src":"12920:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1827,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"12924:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1821,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2023,"src":"12886:8:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1828,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12886:46:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1829,"nodeType":"EmitStatement","src":"12881:51:7"}]},"documentation":{"id":1808,"nodeType":"StructuredDocumentation","src":"12662:101:7","text":" @dev Approve `to` to operate on `tokenId`\n Emits an {Approval} event."},"id":1831,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"12777:8:7","nodeType":"FunctionDefinition","parameters":{"id":1813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1810,"mutability":"mutable","name":"to","nameLocation":"12794:2:7","nodeType":"VariableDeclaration","scope":1831,"src":"12786:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1809,"name":"address","nodeType":"ElementaryTypeName","src":"12786:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1812,"mutability":"mutable","name":"tokenId","nameLocation":"12806:7:7","nodeType":"VariableDeclaration","scope":1831,"src":"12798:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1811,"name":"uint256","nodeType":"ElementaryTypeName","src":"12798:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12785:29:7"},"returnParameters":{"id":1814,"nodeType":"ParameterList","parameters":[],"src":"12832:0:7"},"scope":1999,"src":"12768:171:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1862,"nodeType":"Block","src":"13198:184:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1842,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1834,"src":"13216:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1843,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1836,"src":"13225:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13216:17:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","id":1845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13235:27:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""},"value":"ERC721: approve to caller"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""}],"id":1841,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13208:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13208:55:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1847,"nodeType":"ExpressionStatement","src":"13208:55:7"},{"expression":{"id":1854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1848,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1100,"src":"13273:18:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1851,"indexExpression":{"id":1849,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1834,"src":"13292:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13273:25:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1852,"indexExpression":{"id":1850,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1836,"src":"13299:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13273:35:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1853,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1838,"src":"13311:8:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13273:46:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1855,"nodeType":"ExpressionStatement","src":"13273:46:7"},{"eventCall":{"arguments":[{"id":1857,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1834,"src":"13349:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1858,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1836,"src":"13356:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1859,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1838,"src":"13366:8:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1856,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"13334:14:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13334:41:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1861,"nodeType":"EmitStatement","src":"13329:46:7"}]},"documentation":{"id":1832,"nodeType":"StructuredDocumentation","src":"12945:125:7","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."},"id":1863,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"13084:18:7","nodeType":"FunctionDefinition","parameters":{"id":1839,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1834,"mutability":"mutable","name":"owner","nameLocation":"13120:5:7","nodeType":"VariableDeclaration","scope":1863,"src":"13112:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1833,"name":"address","nodeType":"ElementaryTypeName","src":"13112:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1836,"mutability":"mutable","name":"operator","nameLocation":"13143:8:7","nodeType":"VariableDeclaration","scope":1863,"src":"13135:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1835,"name":"address","nodeType":"ElementaryTypeName","src":"13135:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1838,"mutability":"mutable","name":"approved","nameLocation":"13166:8:7","nodeType":"VariableDeclaration","scope":1863,"src":"13161:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1837,"name":"bool","nodeType":"ElementaryTypeName","src":"13161:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13102:78:7"},"returnParameters":{"id":1840,"nodeType":"ParameterList","parameters":[],"src":"13198:0:7"},"scope":1999,"src":"13075:307:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1876,"nodeType":"Block","src":"13529:70:7","statements":[{"expression":{"arguments":[{"arguments":[{"id":1871,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1866,"src":"13555:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1870,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1500,"src":"13547:7:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":1872,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13547:16:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":1873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13565:26:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":1869,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13539:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13539:53:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1875,"nodeType":"ExpressionStatement","src":"13539:53:7"}]},"documentation":{"id":1864,"nodeType":"StructuredDocumentation","src":"13388:73:7","text":" @dev Reverts if the `tokenId` has not been minted yet."},"id":1877,"implemented":true,"kind":"function","modifiers":[],"name":"_requireMinted","nameLocation":"13475:14:7","nodeType":"FunctionDefinition","parameters":{"id":1867,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1866,"mutability":"mutable","name":"tokenId","nameLocation":"13498:7:7","nodeType":"VariableDeclaration","scope":1877,"src":"13490:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1865,"name":"uint256","nodeType":"ElementaryTypeName","src":"13490:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13489:17:7"},"returnParameters":{"id":1868,"nodeType":"ParameterList","parameters":[],"src":"13529:0:7"},"scope":1999,"src":"13466:133:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1938,"nodeType":"Block","src":"14306:676:7","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1891,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1882,"src":"14320:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2688,"src":"14320:13:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":1893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14320:15:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1936,"nodeType":"Block","src":"14940:36:7","statements":[{"expression":{"hexValue":"74727565","id":1934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14961:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1890,"id":1935,"nodeType":"Return","src":"14954:11:7"}]},"id":1937,"nodeType":"IfStatement","src":"14316:660:7","trueBody":{"id":1933,"nodeType":"Block","src":"14337:597:7","statements":[{"clauses":[{"block":{"id":1913,"nodeType":"Block","src":"14451:91:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1907,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"14476:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":1908,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2133,"src":"14486:15:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$2133_$","typeString":"type(contract IERC721Receiver)"}},"id":1909,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":2132,"src":"14486:32:7","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":1910,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"14486:41:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"14476:51:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1890,"id":1912,"nodeType":"Return","src":"14469:58:7"}]},"errorName":"","id":1914,"nodeType":"TryCatchClause","parameters":{"id":1906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1905,"mutability":"mutable","name":"retval","nameLocation":"14443:6:7","nodeType":"VariableDeclaration","scope":1914,"src":"14436:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1904,"name":"bytes4","nodeType":"ElementaryTypeName","src":"14436:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"14435:15:7"},"src":"14427:115:7"},{"block":{"id":1930,"nodeType":"Block","src":"14571:353:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1918,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1916,"src":"14593:6:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"14593:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14610:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14593:18:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1928,"nodeType":"Block","src":"14720:190:7","statements":[{"AST":{"nodeType":"YulBlock","src":"14806:86:7","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14843:2:7","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"14847:6:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14839:3:7"},"nodeType":"YulFunctionCall","src":"14839:15:7"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"14862:6:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14856:5:7"},"nodeType":"YulFunctionCall","src":"14856:13:7"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14832:6:7"},"nodeType":"YulFunctionCall","src":"14832:38:7"},"nodeType":"YulExpressionStatement","src":"14832:38:7"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1916,"isOffset":false,"isSlot":false,"src":"14847:6:7","valueSize":1},{"declaration":1916,"isOffset":false,"isSlot":false,"src":"14862:6:7","valueSize":1}],"id":1927,"nodeType":"InlineAssembly","src":"14797:95:7"}]},"id":1929,"nodeType":"IfStatement","src":"14589:321:7","trueBody":{"id":1926,"nodeType":"Block","src":"14613:101:7","statements":[{"expression":{"arguments":[{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":1923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14642:52:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":1922,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"14635:6:7","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14635:60:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1925,"nodeType":"ExpressionStatement","src":"14635:60:7"}]}}]},"errorName":"","id":1931,"nodeType":"TryCatchClause","parameters":{"id":1917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1916,"mutability":"mutable","name":"reason","nameLocation":"14563:6:7","nodeType":"VariableDeclaration","scope":1931,"src":"14550:19:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1915,"name":"bytes","nodeType":"ElementaryTypeName","src":"14550:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14549:21:7"},"src":"14543:381:7"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1898,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3012,"src":"14392:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14392:12:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1900,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1880,"src":"14406:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1901,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1884,"src":"14412:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1902,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"14421:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1895,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1882,"src":"14371:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1894,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2133,"src":"14355:15:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$2133_$","typeString":"type(contract IERC721Receiver)"}},"id":1896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14355:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$2133","typeString":"contract IERC721Receiver"}},"id":1897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":2132,"src":"14355:36:7","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":1903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14355:71:7","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":1932,"nodeType":"TryStatement","src":"14351:573:7"}]}}]},"documentation":{"id":1878,"nodeType":"StructuredDocumentation","src":"13605:541:7","text":" @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"},"id":1939,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"14160:22:7","nodeType":"FunctionDefinition","parameters":{"id":1887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1880,"mutability":"mutable","name":"from","nameLocation":"14200:4:7","nodeType":"VariableDeclaration","scope":1939,"src":"14192:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1879,"name":"address","nodeType":"ElementaryTypeName","src":"14192:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1882,"mutability":"mutable","name":"to","nameLocation":"14222:2:7","nodeType":"VariableDeclaration","scope":1939,"src":"14214:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1881,"name":"address","nodeType":"ElementaryTypeName","src":"14214:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1884,"mutability":"mutable","name":"tokenId","nameLocation":"14242:7:7","nodeType":"VariableDeclaration","scope":1939,"src":"14234:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1883,"name":"uint256","nodeType":"ElementaryTypeName","src":"14234:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1886,"mutability":"mutable","name":"data","nameLocation":"14272:4:7","nodeType":"VariableDeclaration","scope":1939,"src":"14259:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1885,"name":"bytes","nodeType":"ElementaryTypeName","src":"14259:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14182:100:7"},"returnParameters":{"id":1890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1889,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1939,"src":"14300:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1888,"name":"bool","nodeType":"ElementaryTypeName","src":"14300:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14299:6:7"},"scope":1999,"src":"14151:831:7","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1984,"nodeType":"Block","src":"15856:238:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1951,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"15870:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1952,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15882:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15870:13:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1983,"nodeType":"IfStatement","src":"15866:222:7","trueBody":{"id":1982,"nodeType":"Block","src":"15885:203:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1954,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1942,"src":"15903:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15919:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1956,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15911:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1955,"name":"address","nodeType":"ElementaryTypeName","src":"15911:7:7","typeDescriptions":{}}},"id":1958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15911:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15903:18:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1967,"nodeType":"IfStatement","src":"15899:85:7","trueBody":{"id":1966,"nodeType":"Block","src":"15923:61:7","statements":[{"expression":{"id":1964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1960,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"15941:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1962,"indexExpression":{"id":1961,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1942,"src":"15951:4:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15941:15:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":1963,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"15960:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15941:28:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1965,"nodeType":"ExpressionStatement","src":"15941:28:7"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1968,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1944,"src":"16001:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16015:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1970,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16007:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1969,"name":"address","nodeType":"ElementaryTypeName","src":"16007:7:7","typeDescriptions":{}}},"id":1972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16007:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16001:16:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1981,"nodeType":"IfStatement","src":"15997:81:7","trueBody":{"id":1980,"nodeType":"Block","src":"16019:59:7","statements":[{"expression":{"id":1978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1974,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"16037:9:7","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1976,"indexExpression":{"id":1975,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1944,"src":"16047:2:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16037:13:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1977,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"16054:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16037:26:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1979,"nodeType":"ExpressionStatement","src":"16037:26:7"}]}}]}}]},"documentation":{"id":1940,"nodeType":"StructuredDocumentation","src":"14988:705:7","text":" @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n - When `from` is zero, the tokens will be minted for `to`.\n - When `to` is zero, ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1985,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"15707:20:7","nodeType":"FunctionDefinition","parameters":{"id":1949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1942,"mutability":"mutable","name":"from","nameLocation":"15745:4:7","nodeType":"VariableDeclaration","scope":1985,"src":"15737:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1941,"name":"address","nodeType":"ElementaryTypeName","src":"15737:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1944,"mutability":"mutable","name":"to","nameLocation":"15767:2:7","nodeType":"VariableDeclaration","scope":1985,"src":"15759:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1943,"name":"address","nodeType":"ElementaryTypeName","src":"15759:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1946,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1985,"src":"15779:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1945,"name":"uint256","nodeType":"ElementaryTypeName","src":"15779:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1948,"mutability":"mutable","name":"batchSize","nameLocation":"15823:9:7","nodeType":"VariableDeclaration","scope":1985,"src":"15815:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1947,"name":"uint256","nodeType":"ElementaryTypeName","src":"15815:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15727:111:7"},"returnParameters":{"id":1950,"nodeType":"ParameterList","parameters":[],"src":"15856:0:7"},"scope":1999,"src":"15698:396:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1997,"nodeType":"Block","src":"16951:2:7","statements":[]},"documentation":{"id":1986,"nodeType":"StructuredDocumentation","src":"16100:695:7","text":" @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n - When `from` is zero, the tokens were minted for `to`.\n - When `to` is zero, ``from``'s tokens were burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1998,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"16809:19:7","nodeType":"FunctionDefinition","parameters":{"id":1995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1988,"mutability":"mutable","name":"from","nameLocation":"16846:4:7","nodeType":"VariableDeclaration","scope":1998,"src":"16838:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1987,"name":"address","nodeType":"ElementaryTypeName","src":"16838:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1990,"mutability":"mutable","name":"to","nameLocation":"16868:2:7","nodeType":"VariableDeclaration","scope":1998,"src":"16860:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1989,"name":"address","nodeType":"ElementaryTypeName","src":"16860:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1992,"mutability":"mutable","name":"firstTokenId","nameLocation":"16888:12:7","nodeType":"VariableDeclaration","scope":1998,"src":"16880:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1991,"name":"uint256","nodeType":"ElementaryTypeName","src":"16880:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1994,"mutability":"mutable","name":"batchSize","nameLocation":"16918:9:7","nodeType":"VariableDeclaration","scope":1998,"src":"16910:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1993,"name":"uint256","nodeType":"ElementaryTypeName","src":"16910:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16828:105:7"},"returnParameters":{"id":1996,"nodeType":"ParameterList","parameters":[],"src":"16951:0:7"},"scope":1999,"src":"16800:153:7","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":2000,"src":"628:16327:7","usedErrors":[]}],"src":"107:16849:7"},"id":7},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[3822],"IERC721":[2115]},"id":2116,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2001,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:8"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":2002,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2116,"sourceUnit":3823,"src":"133:47:8","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2004,"name":"IERC165","nodeType":"IdentifierPath","referencedDeclaration":3822,"src":"271:7:8"},"id":2005,"nodeType":"InheritanceSpecifier","src":"271:7:8"}],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":2003,"nodeType":"StructuredDocumentation","src":"182:67:8","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":2115,"linearizedBaseContracts":[2115,3822],"name":"IERC721","nameLocation":"260:7:8","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2006,"nodeType":"StructuredDocumentation","src":"285:88:8","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"id":2014,"name":"Transfer","nameLocation":"384:8:8","nodeType":"EventDefinition","parameters":{"id":2013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2008,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"409:4:8","nodeType":"VariableDeclaration","scope":2014,"src":"393:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2007,"name":"address","nodeType":"ElementaryTypeName","src":"393:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2010,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"431:2:8","nodeType":"VariableDeclaration","scope":2014,"src":"415:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2009,"name":"address","nodeType":"ElementaryTypeName","src":"415:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2012,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"451:7:8","nodeType":"VariableDeclaration","scope":2014,"src":"435:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2011,"name":"uint256","nodeType":"ElementaryTypeName","src":"435:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"392:67:8"},"src":"378:82:8"},{"anonymous":false,"documentation":{"id":2015,"nodeType":"StructuredDocumentation","src":"466:94:8","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"id":2023,"name":"Approval","nameLocation":"571:8:8","nodeType":"EventDefinition","parameters":{"id":2022,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2017,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"596:5:8","nodeType":"VariableDeclaration","scope":2023,"src":"580:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2016,"name":"address","nodeType":"ElementaryTypeName","src":"580:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2019,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"619:8:8","nodeType":"VariableDeclaration","scope":2023,"src":"603:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2018,"name":"address","nodeType":"ElementaryTypeName","src":"603:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2021,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"645:7:8","nodeType":"VariableDeclaration","scope":2023,"src":"629:23:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2020,"name":"uint256","nodeType":"ElementaryTypeName","src":"629:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"579:74:8"},"src":"565:89:8"},{"anonymous":false,"documentation":{"id":2024,"nodeType":"StructuredDocumentation","src":"660:117:8","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"id":2032,"name":"ApprovalForAll","nameLocation":"788:14:8","nodeType":"EventDefinition","parameters":{"id":2031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2026,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"819:5:8","nodeType":"VariableDeclaration","scope":2032,"src":"803:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2025,"name":"address","nodeType":"ElementaryTypeName","src":"803:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2028,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"842:8:8","nodeType":"VariableDeclaration","scope":2032,"src":"826:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2027,"name":"address","nodeType":"ElementaryTypeName","src":"826:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2030,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"857:8:8","nodeType":"VariableDeclaration","scope":2032,"src":"852:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2029,"name":"bool","nodeType":"ElementaryTypeName","src":"852:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"802:64:8"},"src":"782:85:8"},{"documentation":{"id":2033,"nodeType":"StructuredDocumentation","src":"873:76:8","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":2040,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"963:9:8","nodeType":"FunctionDefinition","parameters":{"id":2036,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2035,"mutability":"mutable","name":"owner","nameLocation":"981:5:8","nodeType":"VariableDeclaration","scope":2040,"src":"973:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2034,"name":"address","nodeType":"ElementaryTypeName","src":"973:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"972:15:8"},"returnParameters":{"id":2039,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2038,"mutability":"mutable","name":"balance","nameLocation":"1019:7:8","nodeType":"VariableDeclaration","scope":2040,"src":"1011:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2037,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1010:17:8"},"scope":2115,"src":"954:74:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2041,"nodeType":"StructuredDocumentation","src":"1034:131:8","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":2048,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1179:7:8","nodeType":"FunctionDefinition","parameters":{"id":2044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2043,"mutability":"mutable","name":"tokenId","nameLocation":"1195:7:8","nodeType":"VariableDeclaration","scope":2048,"src":"1187:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2042,"name":"uint256","nodeType":"ElementaryTypeName","src":"1187:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1186:17:8"},"returnParameters":{"id":2047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2046,"mutability":"mutable","name":"owner","nameLocation":"1235:5:8","nodeType":"VariableDeclaration","scope":2048,"src":"1227:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2045,"name":"address","nodeType":"ElementaryTypeName","src":"1227:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1226:15:8"},"scope":2115,"src":"1170:72:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2049,"nodeType":"StructuredDocumentation","src":"1248:556:8","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":2060,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1818:16:8","nodeType":"FunctionDefinition","parameters":{"id":2058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2051,"mutability":"mutable","name":"from","nameLocation":"1852:4:8","nodeType":"VariableDeclaration","scope":2060,"src":"1844:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2050,"name":"address","nodeType":"ElementaryTypeName","src":"1844:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2053,"mutability":"mutable","name":"to","nameLocation":"1874:2:8","nodeType":"VariableDeclaration","scope":2060,"src":"1866:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2052,"name":"address","nodeType":"ElementaryTypeName","src":"1866:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2055,"mutability":"mutable","name":"tokenId","nameLocation":"1894:7:8","nodeType":"VariableDeclaration","scope":2060,"src":"1886:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2054,"name":"uint256","nodeType":"ElementaryTypeName","src":"1886:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2057,"mutability":"mutable","name":"data","nameLocation":"1926:4:8","nodeType":"VariableDeclaration","scope":2060,"src":"1911:19:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2056,"name":"bytes","nodeType":"ElementaryTypeName","src":"1911:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1834:102:8"},"returnParameters":{"id":2059,"nodeType":"ParameterList","parameters":[],"src":"1945:0:8"},"scope":2115,"src":"1809:137:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2061,"nodeType":"StructuredDocumentation","src":"1952:687:8","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":2070,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2653:16:8","nodeType":"FunctionDefinition","parameters":{"id":2068,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2063,"mutability":"mutable","name":"from","nameLocation":"2687:4:8","nodeType":"VariableDeclaration","scope":2070,"src":"2679:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2062,"name":"address","nodeType":"ElementaryTypeName","src":"2679:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2065,"mutability":"mutable","name":"to","nameLocation":"2709:2:8","nodeType":"VariableDeclaration","scope":2070,"src":"2701:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2064,"name":"address","nodeType":"ElementaryTypeName","src":"2701:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2067,"mutability":"mutable","name":"tokenId","nameLocation":"2729:7:8","nodeType":"VariableDeclaration","scope":2070,"src":"2721:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2066,"name":"uint256","nodeType":"ElementaryTypeName","src":"2721:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2669:73:8"},"returnParameters":{"id":2069,"nodeType":"ParameterList","parameters":[],"src":"2751:0:8"},"scope":2115,"src":"2644:108:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2071,"nodeType":"StructuredDocumentation","src":"2758:732:8","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":2080,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3504:12:8","nodeType":"FunctionDefinition","parameters":{"id":2078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2073,"mutability":"mutable","name":"from","nameLocation":"3534:4:8","nodeType":"VariableDeclaration","scope":2080,"src":"3526:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2072,"name":"address","nodeType":"ElementaryTypeName","src":"3526:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2075,"mutability":"mutable","name":"to","nameLocation":"3556:2:8","nodeType":"VariableDeclaration","scope":2080,"src":"3548:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2074,"name":"address","nodeType":"ElementaryTypeName","src":"3548:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2077,"mutability":"mutable","name":"tokenId","nameLocation":"3576:7:8","nodeType":"VariableDeclaration","scope":2080,"src":"3568:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2076,"name":"uint256","nodeType":"ElementaryTypeName","src":"3568:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3516:73:8"},"returnParameters":{"id":2079,"nodeType":"ParameterList","parameters":[],"src":"3598:0:8"},"scope":2115,"src":"3495:104:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2081,"nodeType":"StructuredDocumentation","src":"3605:452:8","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":2088,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4071:7:8","nodeType":"FunctionDefinition","parameters":{"id":2086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2083,"mutability":"mutable","name":"to","nameLocation":"4087:2:8","nodeType":"VariableDeclaration","scope":2088,"src":"4079:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2082,"name":"address","nodeType":"ElementaryTypeName","src":"4079:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2085,"mutability":"mutable","name":"tokenId","nameLocation":"4099:7:8","nodeType":"VariableDeclaration","scope":2088,"src":"4091:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2084,"name":"uint256","nodeType":"ElementaryTypeName","src":"4091:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4078:29:8"},"returnParameters":{"id":2087,"nodeType":"ParameterList","parameters":[],"src":"4116:0:8"},"scope":2115,"src":"4062:55:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2089,"nodeType":"StructuredDocumentation","src":"4123:309:8","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":2096,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4446:17:8","nodeType":"FunctionDefinition","parameters":{"id":2094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2091,"mutability":"mutable","name":"operator","nameLocation":"4472:8:8","nodeType":"VariableDeclaration","scope":2096,"src":"4464:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2090,"name":"address","nodeType":"ElementaryTypeName","src":"4464:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2093,"mutability":"mutable","name":"_approved","nameLocation":"4487:9:8","nodeType":"VariableDeclaration","scope":2096,"src":"4482:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2092,"name":"bool","nodeType":"ElementaryTypeName","src":"4482:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4463:34:8"},"returnParameters":{"id":2095,"nodeType":"ParameterList","parameters":[],"src":"4506:0:8"},"scope":2115,"src":"4437:70:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2097,"nodeType":"StructuredDocumentation","src":"4513:139:8","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":2104,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4666:11:8","nodeType":"FunctionDefinition","parameters":{"id":2100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2099,"mutability":"mutable","name":"tokenId","nameLocation":"4686:7:8","nodeType":"VariableDeclaration","scope":2104,"src":"4678:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2098,"name":"uint256","nodeType":"ElementaryTypeName","src":"4678:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4677:17:8"},"returnParameters":{"id":2103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2102,"mutability":"mutable","name":"operator","nameLocation":"4726:8:8","nodeType":"VariableDeclaration","scope":2104,"src":"4718:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2101,"name":"address","nodeType":"ElementaryTypeName","src":"4718:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4717:18:8"},"scope":2115,"src":"4657:79:8","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2105,"nodeType":"StructuredDocumentation","src":"4742:138:8","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":2114,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4894:16:8","nodeType":"FunctionDefinition","parameters":{"id":2110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2107,"mutability":"mutable","name":"owner","nameLocation":"4919:5:8","nodeType":"VariableDeclaration","scope":2114,"src":"4911:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2106,"name":"address","nodeType":"ElementaryTypeName","src":"4911:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2109,"mutability":"mutable","name":"operator","nameLocation":"4934:8:8","nodeType":"VariableDeclaration","scope":2114,"src":"4926:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2108,"name":"address","nodeType":"ElementaryTypeName","src":"4926:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4910:33:8"},"returnParameters":{"id":2113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2112,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2114,"src":"4967:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2111,"name":"bool","nodeType":"ElementaryTypeName","src":"4967:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4966:6:8"},"scope":2115,"src":"4885:88:8","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2116,"src":"250:4725:8","usedErrors":[]}],"src":"108:4868:8"},"id":8},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[2133]},"id":2134,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2117,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"116:23:9"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":2118,"nodeType":"StructuredDocumentation","src":"141:152:9","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":2133,"linearizedBaseContracts":[2133],"name":"IERC721Receiver","nameLocation":"304:15:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2119,"nodeType":"StructuredDocumentation","src":"326:493:9","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":2132,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"833:16:9","nodeType":"FunctionDefinition","parameters":{"id":2128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2121,"mutability":"mutable","name":"operator","nameLocation":"867:8:9","nodeType":"VariableDeclaration","scope":2132,"src":"859:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2120,"name":"address","nodeType":"ElementaryTypeName","src":"859:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2123,"mutability":"mutable","name":"from","nameLocation":"893:4:9","nodeType":"VariableDeclaration","scope":2132,"src":"885:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2122,"name":"address","nodeType":"ElementaryTypeName","src":"885:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2125,"mutability":"mutable","name":"tokenId","nameLocation":"915:7:9","nodeType":"VariableDeclaration","scope":2132,"src":"907:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2124,"name":"uint256","nodeType":"ElementaryTypeName","src":"907:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2127,"mutability":"mutable","name":"data","nameLocation":"947:4:9","nodeType":"VariableDeclaration","scope":2132,"src":"932:19:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2126,"name":"bytes","nodeType":"ElementaryTypeName","src":"932:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"849:108:9"},"returnParameters":{"id":2131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2130,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2132,"src":"976:6:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2129,"name":"bytes4","nodeType":"ElementaryTypeName","src":"976:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"975:8:9"},"scope":2133,"src":"824:160:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2134,"src":"294:692:9","usedErrors":[]}],"src":"116:871:9"},"id":9},"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol","exportedSymbols":{"Address":[3000],"Context":[3022],"ERC165":[3810],"ERC721":[1999],"ERC721Enumerable":[2487],"IERC165":[3822],"IERC721":[2115],"IERC721Enumerable":[2643],"IERC721Metadata":[2670],"IERC721Receiver":[2133],"Math":[4687],"Strings":[3271]},"id":2488,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2135,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"128:23:10"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"../ERC721.sol","id":2136,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2488,"sourceUnit":2000,"src":"153:23:10","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol","file":"./IERC721Enumerable.sol","id":2137,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2488,"sourceUnit":2644,"src":"177:33:10","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2139,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":1999,"src":"450:6:10"},"id":2140,"nodeType":"InheritanceSpecifier","src":"450:6:10"},{"baseName":{"id":2141,"name":"IERC721Enumerable","nodeType":"IdentifierPath","referencedDeclaration":2643,"src":"458:17:10"},"id":2142,"nodeType":"InheritanceSpecifier","src":"458:17:10"}],"canonicalName":"ERC721Enumerable","contractDependencies":[],"contractKind":"contract","documentation":{"id":2138,"nodeType":"StructuredDocumentation","src":"212:199:10","text":" @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n enumerability of all the token ids in the contract as well as all token ids owned by each\n account."},"fullyImplemented":false,"id":2487,"linearizedBaseContracts":[2487,2643,1999,2670,2115,3810,3822,3022],"name":"ERC721Enumerable","nameLocation":"430:16:10","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":2148,"mutability":"mutable","name":"_ownedTokens","nameLocation":"591:12:10","nodeType":"VariableDeclaration","scope":2487,"src":"535:68:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"},"typeName":{"id":2147,"keyType":{"id":2143,"name":"address","nodeType":"ElementaryTypeName","src":"543:7:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"535:47:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"},"valueType":{"id":2146,"keyType":{"id":2144,"name":"uint256","nodeType":"ElementaryTypeName","src":"562:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"554:27:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueType":{"id":2145,"name":"uint256","nodeType":"ElementaryTypeName","src":"573:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":2152,"mutability":"mutable","name":"_ownedTokensIndex","nameLocation":"709:17:10","nodeType":"VariableDeclaration","scope":2487,"src":"673:53:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":2151,"keyType":{"id":2149,"name":"uint256","nodeType":"ElementaryTypeName","src":"681:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"673:27:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueType":{"id":2150,"name":"uint256","nodeType":"ElementaryTypeName","src":"692:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":2155,"mutability":"mutable","name":"_allTokens","nameLocation":"805:10:10","nodeType":"VariableDeclaration","scope":2487,"src":"787:28:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[]"},"typeName":{"baseType":{"id":2153,"name":"uint256","nodeType":"ElementaryTypeName","src":"787:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2154,"nodeType":"ArrayTypeName","src":"787:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"private"},{"constant":false,"id":2159,"mutability":"mutable","name":"_allTokensIndex","nameLocation":"922:15:10","nodeType":"VariableDeclaration","scope":2487,"src":"886:51:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":2158,"keyType":{"id":2156,"name":"uint256","nodeType":"ElementaryTypeName","src":"894:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"886:27:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueType":{"id":2157,"name":"uint256","nodeType":"ElementaryTypeName","src":"905:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"baseFunctions":[1148,3821],"body":{"id":2182,"nodeType":"Block","src":"1113:114:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2170,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2162,"src":"1130:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2172,"name":"IERC721Enumerable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2643,"src":"1150:17:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Enumerable_$2643_$","typeString":"type(contract IERC721Enumerable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Enumerable_$2643_$","typeString":"type(contract IERC721Enumerable)"}],"id":2171,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1145:4:10","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1145:23:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Enumerable_$2643","typeString":"type(contract IERC721Enumerable)"}},"id":2174,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"1145:35:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1130:50:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2178,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2162,"src":"1208:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":2176,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1184:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721Enumerable_$2487_$","typeString":"type(contract super ERC721Enumerable)"}},"id":2177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1148,"src":"1184:23:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":2179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1184:36:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1130:90:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2169,"id":2181,"nodeType":"Return","src":"1123:97:10"}]},"documentation":{"id":2160,"nodeType":"StructuredDocumentation","src":"944:56:10","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":2183,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1014:17:10","nodeType":"FunctionDefinition","overrides":{"id":2166,"nodeType":"OverrideSpecifier","overrides":[{"id":2164,"name":"IERC165","nodeType":"IdentifierPath","referencedDeclaration":3822,"src":"1081:7:10"},{"id":2165,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":1999,"src":"1090:6:10"}],"src":"1072:25:10"},"parameters":{"id":2163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2162,"mutability":"mutable","name":"interfaceId","nameLocation":"1039:11:10","nodeType":"VariableDeclaration","scope":2183,"src":"1032:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2161,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1032:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1031:20:10"},"returnParameters":{"id":2169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2168,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2183,"src":"1107:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2167,"name":"bool","nodeType":"ElementaryTypeName","src":"1107:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1106:6:10"},"scope":2487,"src":"1005:222:10","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2634],"body":{"id":2210,"nodeType":"Block","src":"1412:147:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2195,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2188,"src":"1430:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"arguments":[{"id":2198,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2186,"src":"1455:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2196,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"1438:6:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1999_$","typeString":"type(contract ERC721)"}},"id":2197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":1172,"src":"1438:16:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":2199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1438:23:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1430:31:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243373231456e756d657261626c653a206f776e657220696e646578206f7574206f6620626f756e6473","id":2201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1463:45:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c","typeString":"literal_string \"ERC721Enumerable: owner index out of bounds\""},"value":"ERC721Enumerable: owner index out of bounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c","typeString":"literal_string \"ERC721Enumerable: owner index out of bounds\""}],"id":2194,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1422:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1422:87:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2203,"nodeType":"ExpressionStatement","src":"1422:87:10"},{"expression":{"baseExpression":{"baseExpression":{"id":2204,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2148,"src":"1526:12:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":2206,"indexExpression":{"id":2205,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2186,"src":"1539:5:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1526:19:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2208,"indexExpression":{"id":2207,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2188,"src":"1546:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1526:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2193,"id":2209,"nodeType":"Return","src":"1519:33:10"}]},"documentation":{"id":2184,"nodeType":"StructuredDocumentation","src":"1233:68:10","text":" @dev See {IERC721Enumerable-tokenOfOwnerByIndex}."},"functionSelector":"2f745c59","id":2211,"implemented":true,"kind":"function","modifiers":[],"name":"tokenOfOwnerByIndex","nameLocation":"1315:19:10","nodeType":"FunctionDefinition","overrides":{"id":2190,"nodeType":"OverrideSpecifier","overrides":[],"src":"1385:8:10"},"parameters":{"id":2189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2186,"mutability":"mutable","name":"owner","nameLocation":"1343:5:10","nodeType":"VariableDeclaration","scope":2211,"src":"1335:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2185,"name":"address","nodeType":"ElementaryTypeName","src":"1335:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2188,"mutability":"mutable","name":"index","nameLocation":"1358:5:10","nodeType":"VariableDeclaration","scope":2211,"src":"1350:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2187,"name":"uint256","nodeType":"ElementaryTypeName","src":"1350:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1334:30:10"},"returnParameters":{"id":2193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2192,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2211,"src":"1403:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2191,"name":"uint256","nodeType":"ElementaryTypeName","src":"1403:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1402:9:10"},"scope":2487,"src":"1306:253:10","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2624],"body":{"id":2221,"nodeType":"Block","src":"1700:41:10","statements":[{"expression":{"expression":{"id":2218,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2155,"src":"1717:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1717:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2217,"id":2220,"nodeType":"Return","src":"1710:24:10"}]},"documentation":{"id":2212,"nodeType":"StructuredDocumentation","src":"1565:60:10","text":" @dev See {IERC721Enumerable-totalSupply}."},"functionSelector":"18160ddd","id":2222,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"1639:11:10","nodeType":"FunctionDefinition","overrides":{"id":2214,"nodeType":"OverrideSpecifier","overrides":[],"src":"1673:8:10"},"parameters":{"id":2213,"nodeType":"ParameterList","parameters":[],"src":"1650:2:10"},"returnParameters":{"id":2217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2216,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2222,"src":"1691:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2215,"name":"uint256","nodeType":"ElementaryTypeName","src":"1691:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1690:9:10"},"scope":2487,"src":"1630:111:10","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2642],"body":{"id":2244,"nodeType":"Block","src":"1897:146:10","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2232,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2225,"src":"1915:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2233,"name":"ERC721Enumerable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2487,"src":"1923:16:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Enumerable_$2487_$","typeString":"type(contract ERC721Enumerable)"}},"id":2234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"totalSupply","nodeType":"MemberAccess","referencedDeclaration":2222,"src":"1923:28:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":2235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1923:30:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1915:38:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243373231456e756d657261626c653a20676c6f62616c20696e646578206f7574206f6620626f756e6473","id":2237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1955:46:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc","typeString":"literal_string \"ERC721Enumerable: global index out of bounds\""},"value":"ERC721Enumerable: global index out of bounds"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc","typeString":"literal_string \"ERC721Enumerable: global index out of bounds\""}],"id":2231,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1907:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1907:95:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2239,"nodeType":"ExpressionStatement","src":"1907:95:10"},{"expression":{"baseExpression":{"id":2240,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2155,"src":"2019:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2242,"indexExpression":{"id":2241,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2225,"src":"2030:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2019:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2230,"id":2243,"nodeType":"Return","src":"2012:24:10"}]},"documentation":{"id":2223,"nodeType":"StructuredDocumentation","src":"1747:61:10","text":" @dev See {IERC721Enumerable-tokenByIndex}."},"functionSelector":"4f6ccce7","id":2245,"implemented":true,"kind":"function","modifiers":[],"name":"tokenByIndex","nameLocation":"1822:12:10","nodeType":"FunctionDefinition","overrides":{"id":2227,"nodeType":"OverrideSpecifier","overrides":[],"src":"1870:8:10"},"parameters":{"id":2226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2225,"mutability":"mutable","name":"index","nameLocation":"1843:5:10","nodeType":"VariableDeclaration","scope":2245,"src":"1835:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2224,"name":"uint256","nodeType":"ElementaryTypeName","src":"1835:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1834:15:10"},"returnParameters":{"id":2230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2229,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2245,"src":"1888:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2228,"name":"uint256","nodeType":"ElementaryTypeName","src":"1888:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1887:9:10"},"scope":2487,"src":"1813:230:10","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1985],"body":{"id":2324,"nodeType":"Block","src":"2273:729:10","statements":[{"expression":{"arguments":[{"id":2261,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2248,"src":"2310:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2262,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"2316:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2263,"name":"firstTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2252,"src":"2320:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2264,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"2334:9:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2258,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2283:5:10","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721Enumerable_$2487_$","typeString":"type(contract super ERC721Enumerable)"}},"id":2260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"_beforeTokenTransfer","nodeType":"MemberAccess","referencedDeclaration":1985,"src":"2283:26:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":2265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2283:61:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2266,"nodeType":"ExpressionStatement","src":"2283:61:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2267,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2254,"src":"2359:9:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":2268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2371:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2359:13:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2275,"nodeType":"IfStatement","src":"2355:219:10","trueBody":{"id":2274,"nodeType":"Block","src":"2374:200:10","statements":[{"expression":{"arguments":[{"hexValue":"455243373231456e756d657261626c653a20636f6e7365637574697665207472616e7366657273206e6f7420737570706f72746564","id":2271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2507:55:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314","typeString":"literal_string \"ERC721Enumerable: consecutive transfers not supported\""},"value":"ERC721Enumerable: consecutive transfers not supported"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314","typeString":"literal_string \"ERC721Enumerable: consecutive transfers not supported\""}],"id":2270,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"2500:6:10","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2500:63:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2273,"nodeType":"ExpressionStatement","src":"2500:63:10"}]}},{"assignments":[2277],"declarations":[{"constant":false,"id":2277,"mutability":"mutable","name":"tokenId","nameLocation":"2592:7:10","nodeType":"VariableDeclaration","scope":2324,"src":"2584:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2276,"name":"uint256","nodeType":"ElementaryTypeName","src":"2584:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2279,"initialValue":{"id":2278,"name":"firstTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2252,"src":"2602:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2584:30:10"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2280,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2248,"src":"2629:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2645:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2282,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2637:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2281,"name":"address","nodeType":"ElementaryTypeName","src":"2637:7:10","typeDescriptions":{}}},"id":2284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2637:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2629:18:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2291,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2248,"src":"2724:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2292,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"2732:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2724:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2300,"nodeType":"IfStatement","src":"2720:88:10","trueBody":{"id":2299,"nodeType":"Block","src":"2736:72:10","statements":[{"expression":{"arguments":[{"id":2295,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2248,"src":"2783:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2296,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2277,"src":"2789:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2294,"name":"_removeTokenFromOwnerEnumeration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2438,"src":"2750:32:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2297,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2750:47:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2298,"nodeType":"ExpressionStatement","src":"2750:47:10"}]}},"id":2301,"nodeType":"IfStatement","src":"2625:183:10","trueBody":{"id":2290,"nodeType":"Block","src":"2649:65:10","statements":[{"expression":{"arguments":[{"id":2287,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2277,"src":"2695:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2286,"name":"_addTokenToAllTokensEnumeration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2375,"src":"2663:31:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2663:40:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2289,"nodeType":"ExpressionStatement","src":"2663:40:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2302,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"2821:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2835:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2304,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2827:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2303,"name":"address","nodeType":"ElementaryTypeName","src":"2827:7:10","typeDescriptions":{}}},"id":2306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2827:10:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2821:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2313,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"2919:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2314,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2248,"src":"2925:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2919:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2322,"nodeType":"IfStatement","src":"2915:81:10","trueBody":{"id":2321,"nodeType":"Block","src":"2931:65:10","statements":[{"expression":{"arguments":[{"id":2317,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"2973:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2318,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2277,"src":"2977:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2316,"name":"_addTokenToOwnerEnumeration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2355,"src":"2945:27:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2945:40:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2320,"nodeType":"ExpressionStatement","src":"2945:40:10"}]}},"id":2323,"nodeType":"IfStatement","src":"2817:179:10","trueBody":{"id":2312,"nodeType":"Block","src":"2839:70:10","statements":[{"expression":{"arguments":[{"id":2309,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2277,"src":"2890:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2308,"name":"_removeTokenFromAllTokensEnumeration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2486,"src":"2853:36:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2853:45:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2311,"nodeType":"ExpressionStatement","src":"2853:45:10"}]}}]},"documentation":{"id":2246,"nodeType":"StructuredDocumentation","src":"2049:58:10","text":" @dev See {ERC721-_beforeTokenTransfer}."},"id":2325,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"2121:20:10","nodeType":"FunctionDefinition","overrides":{"id":2256,"nodeType":"OverrideSpecifier","overrides":[],"src":"2264:8:10"},"parameters":{"id":2255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2248,"mutability":"mutable","name":"from","nameLocation":"2159:4:10","nodeType":"VariableDeclaration","scope":2325,"src":"2151:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2247,"name":"address","nodeType":"ElementaryTypeName","src":"2151:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2250,"mutability":"mutable","name":"to","nameLocation":"2181:2:10","nodeType":"VariableDeclaration","scope":2325,"src":"2173:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2249,"name":"address","nodeType":"ElementaryTypeName","src":"2173:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2252,"mutability":"mutable","name":"firstTokenId","nameLocation":"2201:12:10","nodeType":"VariableDeclaration","scope":2325,"src":"2193:20:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2251,"name":"uint256","nodeType":"ElementaryTypeName","src":"2193:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2254,"mutability":"mutable","name":"batchSize","nameLocation":"2231:9:10","nodeType":"VariableDeclaration","scope":2325,"src":"2223:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2253,"name":"uint256","nodeType":"ElementaryTypeName","src":"2223:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2141:105:10"},"returnParameters":{"id":2257,"nodeType":"ParameterList","parameters":[],"src":"2273:0:10"},"scope":2487,"src":"2112:890:10","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2354,"nodeType":"Block","src":"3370:143:10","statements":[{"assignments":[2334],"declarations":[{"constant":false,"id":2334,"mutability":"mutable","name":"length","nameLocation":"3388:6:10","nodeType":"VariableDeclaration","scope":2354,"src":"3380:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2333,"name":"uint256","nodeType":"ElementaryTypeName","src":"3380:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2339,"initialValue":{"arguments":[{"id":2337,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2328,"src":"3414:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2335,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"3397:6:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1999_$","typeString":"type(contract ERC721)"}},"id":2336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":1172,"src":"3397:16:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":2338,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3397:20:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3380:37:10"},{"expression":{"id":2346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":2340,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2148,"src":"3427:12:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":2343,"indexExpression":{"id":2341,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2328,"src":"3440:2:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3427:16:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2344,"indexExpression":{"id":2342,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"3444:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3427:24:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2345,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2330,"src":"3454:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3427:34:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2347,"nodeType":"ExpressionStatement","src":"3427:34:10"},{"expression":{"id":2352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2348,"name":"_ownedTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2152,"src":"3471:17:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2350,"indexExpression":{"id":2349,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2330,"src":"3489:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3471:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2351,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"3500:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3471:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2353,"nodeType":"ExpressionStatement","src":"3471:35:10"}]},"documentation":{"id":2326,"nodeType":"StructuredDocumentation","src":"3008:283:10","text":" @dev Private function to add a token to this extension's ownership-tracking data structures.\n @param to address representing the new owner of the given token ID\n @param tokenId uint256 ID of the token to be added to the tokens list of the given address"},"id":2355,"implemented":true,"kind":"function","modifiers":[],"name":"_addTokenToOwnerEnumeration","nameLocation":"3305:27:10","nodeType":"FunctionDefinition","parameters":{"id":2331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2328,"mutability":"mutable","name":"to","nameLocation":"3341:2:10","nodeType":"VariableDeclaration","scope":2355,"src":"3333:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2327,"name":"address","nodeType":"ElementaryTypeName","src":"3333:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2330,"mutability":"mutable","name":"tokenId","nameLocation":"3353:7:10","nodeType":"VariableDeclaration","scope":2355,"src":"3345:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2329,"name":"uint256","nodeType":"ElementaryTypeName","src":"3345:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3332:29:10"},"returnParameters":{"id":2332,"nodeType":"ParameterList","parameters":[],"src":"3370:0:10"},"scope":2487,"src":"3296:217:10","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2374,"nodeType":"Block","src":"3774:95:10","statements":[{"expression":{"id":2366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2361,"name":"_allTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2159,"src":"3784:15:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2363,"indexExpression":{"id":2362,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"3800:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3784:24:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2364,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2155,"src":"3811:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3811:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3784:44:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2367,"nodeType":"ExpressionStatement","src":"3784:44:10"},{"expression":{"arguments":[{"id":2371,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"3854:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2368,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2155,"src":"3838:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"3838:15:10","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer,uint256)"}},"id":2372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3838:24:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2373,"nodeType":"ExpressionStatement","src":"3838:24:10"}]},"documentation":{"id":2356,"nodeType":"StructuredDocumentation","src":"3519:184:10","text":" @dev Private function to add a token to this extension's token tracking data structures.\n @param tokenId uint256 ID of the token to be added to the tokens list"},"id":2375,"implemented":true,"kind":"function","modifiers":[],"name":"_addTokenToAllTokensEnumeration","nameLocation":"3717:31:10","nodeType":"FunctionDefinition","parameters":{"id":2359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2358,"mutability":"mutable","name":"tokenId","nameLocation":"3757:7:10","nodeType":"VariableDeclaration","scope":2375,"src":"3749:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2357,"name":"uint256","nodeType":"ElementaryTypeName","src":"3749:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3748:17:10"},"returnParameters":{"id":2360,"nodeType":"ParameterList","parameters":[],"src":"3774:0:10"},"scope":2487,"src":"3708:161:10","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2437,"nodeType":"Block","src":"4567:889:10","statements":[{"assignments":[2384],"declarations":[{"constant":false,"id":2384,"mutability":"mutable","name":"lastTokenIndex","nameLocation":"4756:14:10","nodeType":"VariableDeclaration","scope":2437,"src":"4748:22:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2383,"name":"uint256","nodeType":"ElementaryTypeName","src":"4748:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2391,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2387,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"4790:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2385,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1999,"src":"4773:6:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1999_$","typeString":"type(contract ERC721)"}},"id":2386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":1172,"src":"4773:16:10","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":2388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4773:22:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4798:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4773:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4748:51:10"},{"assignments":[2393],"declarations":[{"constant":false,"id":2393,"mutability":"mutable","name":"tokenIndex","nameLocation":"4817:10:10","nodeType":"VariableDeclaration","scope":2437,"src":"4809:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2392,"name":"uint256","nodeType":"ElementaryTypeName","src":"4809:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2397,"initialValue":{"baseExpression":{"id":2394,"name":"_ownedTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2152,"src":"4830:17:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2396,"indexExpression":{"id":2395,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2380,"src":"4848:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4830:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4809:47:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2398,"name":"tokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2393,"src":"4960:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2399,"name":"lastTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2384,"src":"4974:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4960:28:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2424,"nodeType":"IfStatement","src":"4956:323:10","trueBody":{"id":2423,"nodeType":"Block","src":"4990:289:10","statements":[{"assignments":[2402],"declarations":[{"constant":false,"id":2402,"mutability":"mutable","name":"lastTokenId","nameLocation":"5012:11:10","nodeType":"VariableDeclaration","scope":2423,"src":"5004:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2401,"name":"uint256","nodeType":"ElementaryTypeName","src":"5004:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2408,"initialValue":{"baseExpression":{"baseExpression":{"id":2403,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2148,"src":"5026:12:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":2405,"indexExpression":{"id":2404,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"5039:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5026:18:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2407,"indexExpression":{"id":2406,"name":"lastTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2384,"src":"5045:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5026:34:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5004:56:10"},{"expression":{"id":2415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":2409,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2148,"src":"5075:12:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":2412,"indexExpression":{"id":2410,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"5088:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5075:18:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2413,"indexExpression":{"id":2411,"name":"tokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2393,"src":"5094:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5075:30:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2414,"name":"lastTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2402,"src":"5108:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5075:44:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2416,"nodeType":"ExpressionStatement","src":"5075:44:10"},{"expression":{"id":2421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2417,"name":"_ownedTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2152,"src":"5191:17:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2419,"indexExpression":{"id":2418,"name":"lastTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2402,"src":"5209:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5191:30:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2420,"name":"tokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2393,"src":"5224:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5191:43:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2422,"nodeType":"ExpressionStatement","src":"5191:43:10"}]}},{"expression":{"id":2428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"5365:33:10","subExpression":{"baseExpression":{"id":2425,"name":"_ownedTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2152,"src":"5372:17:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2427,"indexExpression":{"id":2426,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2380,"src":"5390:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5372:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2429,"nodeType":"ExpressionStatement","src":"5365:33:10"},{"expression":{"id":2435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"5408:41:10","subExpression":{"baseExpression":{"baseExpression":{"id":2430,"name":"_ownedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2148,"src":"5415:12:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":2432,"indexExpression":{"id":2431,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"5428:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5415:18:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2434,"indexExpression":{"id":2433,"name":"lastTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2384,"src":"5434:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5415:34:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2436,"nodeType":"ExpressionStatement","src":"5408:41:10"}]},"documentation":{"id":2376,"nodeType":"StructuredDocumentation","src":"3875:606:10","text":" @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n This has O(1) time complexity, but alters the order of the _ownedTokens array.\n @param from address representing the previous owner of the given token ID\n @param tokenId uint256 ID of the token to be removed from the tokens list of the given address"},"id":2438,"implemented":true,"kind":"function","modifiers":[],"name":"_removeTokenFromOwnerEnumeration","nameLocation":"4495:32:10","nodeType":"FunctionDefinition","parameters":{"id":2381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2378,"mutability":"mutable","name":"from","nameLocation":"4536:4:10","nodeType":"VariableDeclaration","scope":2438,"src":"4528:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2377,"name":"address","nodeType":"ElementaryTypeName","src":"4528:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2380,"mutability":"mutable","name":"tokenId","nameLocation":"4550:7:10","nodeType":"VariableDeclaration","scope":2438,"src":"4542:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2379,"name":"uint256","nodeType":"ElementaryTypeName","src":"4542:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4527:31:10"},"returnParameters":{"id":2382,"nodeType":"ParameterList","parameters":[],"src":"4567:0:10"},"scope":2487,"src":"4486:970:10","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2485,"nodeType":"Block","src":"5815:990:10","statements":[{"assignments":[2445],"declarations":[{"constant":false,"id":2445,"mutability":"mutable","name":"lastTokenIndex","nameLocation":"6001:14:10","nodeType":"VariableDeclaration","scope":2485,"src":"5993:22:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2444,"name":"uint256","nodeType":"ElementaryTypeName","src":"5993:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2450,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2446,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2155,"src":"6018:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"6018:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6038:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6018:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5993:46:10"},{"assignments":[2452],"declarations":[{"constant":false,"id":2452,"mutability":"mutable","name":"tokenIndex","nameLocation":"6057:10:10","nodeType":"VariableDeclaration","scope":2485,"src":"6049:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2451,"name":"uint256","nodeType":"ElementaryTypeName","src":"6049:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2456,"initialValue":{"baseExpression":{"id":2453,"name":"_allTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2159,"src":"6070:15:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2455,"indexExpression":{"id":2454,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"6086:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6070:24:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6049:45:10"},{"assignments":[2458],"declarations":[{"constant":false,"id":2458,"mutability":"mutable","name":"lastTokenId","nameLocation":"6424:11:10","nodeType":"VariableDeclaration","scope":2485,"src":"6416:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2457,"name":"uint256","nodeType":"ElementaryTypeName","src":"6416:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2462,"initialValue":{"baseExpression":{"id":2459,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2155,"src":"6438:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2461,"indexExpression":{"id":2460,"name":"lastTokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2445,"src":"6449:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6438:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6416:48:10"},{"expression":{"id":2467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2463,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2155,"src":"6475:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2465,"indexExpression":{"id":2464,"name":"tokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2452,"src":"6486:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6475:22:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2466,"name":"lastTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2458,"src":"6500:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6475:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2468,"nodeType":"ExpressionStatement","src":"6475:36:10"},{"expression":{"id":2473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2469,"name":"_allTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2159,"src":"6579:15:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2471,"indexExpression":{"id":2470,"name":"lastTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2458,"src":"6595:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6579:28:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2472,"name":"tokenIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2452,"src":"6610:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6579:41:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2474,"nodeType":"ExpressionStatement","src":"6579:41:10"},{"expression":{"id":2478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"6741:31:10","subExpression":{"baseExpression":{"id":2475,"name":"_allTokensIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2159,"src":"6748:15:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2477,"indexExpression":{"id":2476,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"6764:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6748:24:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2479,"nodeType":"ExpressionStatement","src":"6741:31:10"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2480,"name":"_allTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2155,"src":"6782:10:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"pop","nodeType":"MemberAccess","src":"6782:14:10","typeDescriptions":{"typeIdentifier":"t_function_arraypop_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$","typeString":"function (uint256[] storage pointer)"}},"id":2483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6782:16:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2484,"nodeType":"ExpressionStatement","src":"6782:16:10"}]},"documentation":{"id":2439,"nodeType":"StructuredDocumentation","src":"5462:277:10","text":" @dev Private function to remove a token from this extension's token tracking data structures.\n This has O(1) time complexity, but alters the order of the _allTokens array.\n @param tokenId uint256 ID of the token to be removed from the tokens list"},"id":2486,"implemented":true,"kind":"function","modifiers":[],"name":"_removeTokenFromAllTokensEnumeration","nameLocation":"5753:36:10","nodeType":"FunctionDefinition","parameters":{"id":2442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2441,"mutability":"mutable","name":"tokenId","nameLocation":"5798:7:10","nodeType":"VariableDeclaration","scope":2486,"src":"5790:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2440,"name":"uint256","nodeType":"ElementaryTypeName","src":"5790:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5789:17:10"},"returnParameters":{"id":2443,"nodeType":"ParameterList","parameters":[],"src":"5815:0:10"},"scope":2487,"src":"5744:1061:10","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":2488,"src":"412:6395:10","usedErrors":[]}],"src":"128:6680:10"},"id":10},"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","exportedSymbols":{"Address":[3000],"Context":[3022],"ERC165":[3810],"ERC721":[1999],"ERC721URIStorage":[2612],"IERC165":[3822],"IERC721":[2115],"IERC721Metadata":[2670],"IERC721Receiver":[2133],"Math":[4687],"Strings":[3271]},"id":2613,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2489,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"128:23:11"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"../ERC721.sol","id":2490,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2613,"sourceUnit":2000,"src":"153:23:11","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2492,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":1999,"src":"286:6:11"},"id":2493,"nodeType":"InheritanceSpecifier","src":"286:6:11"}],"canonicalName":"ERC721URIStorage","contractDependencies":[],"contractKind":"contract","documentation":{"id":2491,"nodeType":"StructuredDocumentation","src":"178:69:11","text":" @dev ERC721 token with storage based token URI management."},"fullyImplemented":false,"id":2612,"linearizedBaseContracts":[2612,1999,2670,2115,3810,3822,3022],"name":"ERC721URIStorage","nameLocation":"266:16:11","nodeType":"ContractDefinition","nodes":[{"id":2496,"libraryName":{"id":2494,"name":"Strings","nodeType":"IdentifierPath","referencedDeclaration":3271,"src":"305:7:11"},"nodeType":"UsingForDirective","src":"299:26:11","typeName":{"id":2495,"name":"uint256","nodeType":"ElementaryTypeName","src":"317:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":2500,"mutability":"mutable","name":"_tokenURIs","nameLocation":"405:10:11","nodeType":"VariableDeclaration","scope":2612,"src":"370:45:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"typeName":{"id":2499,"keyType":{"id":2497,"name":"uint256","nodeType":"ElementaryTypeName","src":"378:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"370:26:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"valueType":{"id":2498,"name":"string","nodeType":"ElementaryTypeName","src":"389:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"visibility":"private"},{"baseFunctions":[1259],"body":{"id":2558,"nodeType":"Block","src":"570:520:11","statements":[{"expression":{"arguments":[{"id":2510,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2503,"src":"595:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2509,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1877,"src":"580:14:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":2511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"580:23:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2512,"nodeType":"ExpressionStatement","src":"580:23:11"},{"assignments":[2514],"declarations":[{"constant":false,"id":2514,"mutability":"mutable","name":"_tokenURI","nameLocation":"628:9:11","nodeType":"VariableDeclaration","scope":2558,"src":"614:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2513,"name":"string","nodeType":"ElementaryTypeName","src":"614:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2518,"initialValue":{"baseExpression":{"id":2515,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2500,"src":"640:10:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":2517,"indexExpression":{"id":2516,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2503,"src":"651:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"640:19:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"VariableDeclarationStatement","src":"614:45:11"},{"assignments":[2520],"declarations":[{"constant":false,"id":2520,"mutability":"mutable","name":"base","nameLocation":"683:4:11","nodeType":"VariableDeclaration","scope":2558,"src":"669:18:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2519,"name":"string","nodeType":"ElementaryTypeName","src":"669:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2523,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2521,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1268,"src":"690:8:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":2522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"690:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"669:31:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2526,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2520,"src":"779:4:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2525,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"773:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2524,"name":"bytes","nodeType":"ElementaryTypeName","src":"773:5:11","typeDescriptions":{}}},"id":2527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"773:11:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"773:18:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"795:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"773:23:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2534,"nodeType":"IfStatement","src":"769:70:11","trueBody":{"id":2533,"nodeType":"Block","src":"798:41:11","statements":[{"expression":{"id":2531,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2514,"src":"819:9:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2508,"id":2532,"nodeType":"Return","src":"812:16:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2537,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2514,"src":"947:9:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2536,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"941:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2535,"name":"bytes","nodeType":"ElementaryTypeName","src":"941:5:11","typeDescriptions":{}}},"id":2538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"941:16:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"941:23:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"967:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"941:27:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2552,"nodeType":"IfStatement","src":"937:106:11","trueBody":{"id":2551,"nodeType":"Block","src":"970:73:11","statements":[{"expression":{"arguments":[{"arguments":[{"id":2546,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2520,"src":"1015:4:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2547,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2514,"src":"1021:9:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":2544,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"998:3:11","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2545,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"998:16:11","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2548,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"998:33:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2543,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"991:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2542,"name":"string","nodeType":"ElementaryTypeName","src":"991:6:11","typeDescriptions":{}}},"id":2549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"991:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2508,"id":2550,"nodeType":"Return","src":"984:48:11"}]}},{"expression":{"arguments":[{"id":2555,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2503,"src":"1075:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2553,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1060:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721URIStorage_$2612_$","typeString":"type(contract super ERC721URIStorage)"}},"id":2554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"tokenURI","nodeType":"MemberAccess","referencedDeclaration":1259,"src":"1060:14:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) view returns (string memory)"}},"id":2556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1060:23:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2508,"id":2557,"nodeType":"Return","src":"1053:30:11"}]},"documentation":{"id":2501,"nodeType":"StructuredDocumentation","src":"422:55:11","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":2559,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"491:8:11","nodeType":"FunctionDefinition","overrides":{"id":2505,"nodeType":"OverrideSpecifier","overrides":[],"src":"537:8:11"},"parameters":{"id":2504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2503,"mutability":"mutable","name":"tokenId","nameLocation":"508:7:11","nodeType":"VariableDeclaration","scope":2559,"src":"500:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2502,"name":"uint256","nodeType":"ElementaryTypeName","src":"500:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"499:17:11"},"returnParameters":{"id":2508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2507,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2559,"src":"555:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2506,"name":"string","nodeType":"ElementaryTypeName","src":"555:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"554:15:11"},"scope":2612,"src":"482:608:11","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2580,"nodeType":"Block","src":"1318:133:11","statements":[{"expression":{"arguments":[{"arguments":[{"id":2569,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"1344:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2568,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1500,"src":"1336:7:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":2570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1336:16:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524337323155524953746f726167653a2055524920736574206f66206e6f6e6578697374656e7420746f6b656e","id":2571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1354:48:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4","typeString":"literal_string \"ERC721URIStorage: URI set of nonexistent token\""},"value":"ERC721URIStorage: URI set of nonexistent token"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4","typeString":"literal_string \"ERC721URIStorage: URI set of nonexistent token\""}],"id":2567,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1328:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1328:75:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2573,"nodeType":"ExpressionStatement","src":"1328:75:11"},{"expression":{"id":2578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2574,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2500,"src":"1413:10:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":2576,"indexExpression":{"id":2575,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2562,"src":"1424:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1413:19:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2577,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2564,"src":"1435:9:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1413:31:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2579,"nodeType":"ExpressionStatement","src":"1413:31:11"}]},"documentation":{"id":2560,"nodeType":"StructuredDocumentation","src":"1096:136:11","text":" @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n Requirements:\n - `tokenId` must exist."},"id":2581,"implemented":true,"kind":"function","modifiers":[],"name":"_setTokenURI","nameLocation":"1246:12:11","nodeType":"FunctionDefinition","parameters":{"id":2565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2562,"mutability":"mutable","name":"tokenId","nameLocation":"1267:7:11","nodeType":"VariableDeclaration","scope":2581,"src":"1259:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2561,"name":"uint256","nodeType":"ElementaryTypeName","src":"1259:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2564,"mutability":"mutable","name":"_tokenURI","nameLocation":"1290:9:11","nodeType":"VariableDeclaration","scope":2581,"src":"1276:23:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2563,"name":"string","nodeType":"ElementaryTypeName","src":"1276:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1258:42:11"},"returnParameters":{"id":2566,"nodeType":"ParameterList","parameters":[],"src":"1318:0:11"},"scope":2612,"src":"1237:214:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[1722],"body":{"id":2610,"nodeType":"Block","src":"1727:142:11","statements":[{"expression":{"arguments":[{"id":2591,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2584,"src":"1749:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2588,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1737:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721URIStorage_$2612_$","typeString":"type(contract super ERC721URIStorage)"}},"id":2590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"_burn","nodeType":"MemberAccess","referencedDeclaration":1722,"src":"1737:11:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1737:20:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2593,"nodeType":"ExpressionStatement","src":"1737:20:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"baseExpression":{"id":2596,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2500,"src":"1778:10:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":2598,"indexExpression":{"id":2597,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2584,"src":"1789:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1778:19:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":2595,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1772:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2594,"name":"bytes","nodeType":"ElementaryTypeName","src":"1772:5:11","typeDescriptions":{}}},"id":2599,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1772:26:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes storage pointer"}},"id":2600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1772:33:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1809:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1772:38:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2609,"nodeType":"IfStatement","src":"1768:95:11","trueBody":{"id":2608,"nodeType":"Block","src":"1812:51:11","statements":[{"expression":{"id":2606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"1826:26:11","subExpression":{"baseExpression":{"id":2603,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2500,"src":"1833:10:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":2605,"indexExpression":{"id":2604,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2584,"src":"1844:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1833:19:11","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2607,"nodeType":"ExpressionStatement","src":"1826:26:11"}]}}]},"documentation":{"id":2582,"nodeType":"StructuredDocumentation","src":"1457:207:11","text":" @dev See {ERC721-_burn}. This override additionally checks to see if a\n token-specific URI was set for the token, and if so, it deletes the token URI from\n the storage mapping."},"id":2611,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"1678:5:11","nodeType":"FunctionDefinition","overrides":{"id":2586,"nodeType":"OverrideSpecifier","overrides":[],"src":"1718:8:11"},"parameters":{"id":2585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2584,"mutability":"mutable","name":"tokenId","nameLocation":"1692:7:11","nodeType":"VariableDeclaration","scope":2611,"src":"1684:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2583,"name":"uint256","nodeType":"ElementaryTypeName","src":"1684:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1683:17:11"},"returnParameters":{"id":2587,"nodeType":"ParameterList","parameters":[],"src":"1727:0:11"},"scope":2612,"src":"1669:200:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":2613,"src":"248:1623:11","usedErrors":[]}],"src":"128:1744:11"},"id":11},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol","exportedSymbols":{"IERC165":[3822],"IERC721":[2115],"IERC721Enumerable":[2643]},"id":2644,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2614,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"129:23:12"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":2615,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2644,"sourceUnit":2116,"src":"154:24:12","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2617,"name":"IERC721","nodeType":"IdentifierPath","referencedDeclaration":2115,"src":"348:7:12"},"id":2618,"nodeType":"InheritanceSpecifier","src":"348:7:12"}],"canonicalName":"IERC721Enumerable","contractDependencies":[],"contractKind":"interface","documentation":{"id":2616,"nodeType":"StructuredDocumentation","src":"180:136:12","text":" @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":2643,"linearizedBaseContracts":[2643,2115,3822],"name":"IERC721Enumerable","nameLocation":"327:17:12","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2619,"nodeType":"StructuredDocumentation","src":"362:82:12","text":" @dev Returns the total amount of tokens stored by the contract."},"functionSelector":"18160ddd","id":2624,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"458:11:12","nodeType":"FunctionDefinition","parameters":{"id":2620,"nodeType":"ParameterList","parameters":[],"src":"469:2:12"},"returnParameters":{"id":2623,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2622,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2624,"src":"495:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2621,"name":"uint256","nodeType":"ElementaryTypeName","src":"495:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"494:9:12"},"scope":2643,"src":"449:55:12","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2625,"nodeType":"StructuredDocumentation","src":"510:171:12","text":" @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n Use along with {balanceOf} to enumerate all of ``owner``'s tokens."},"functionSelector":"2f745c59","id":2634,"implemented":false,"kind":"function","modifiers":[],"name":"tokenOfOwnerByIndex","nameLocation":"695:19:12","nodeType":"FunctionDefinition","parameters":{"id":2630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2627,"mutability":"mutable","name":"owner","nameLocation":"723:5:12","nodeType":"VariableDeclaration","scope":2634,"src":"715:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2626,"name":"address","nodeType":"ElementaryTypeName","src":"715:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2629,"mutability":"mutable","name":"index","nameLocation":"738:5:12","nodeType":"VariableDeclaration","scope":2634,"src":"730:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2628,"name":"uint256","nodeType":"ElementaryTypeName","src":"730:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"714:30:12"},"returnParameters":{"id":2633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2632,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2634,"src":"768:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2631,"name":"uint256","nodeType":"ElementaryTypeName","src":"768:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"767:9:12"},"scope":2643,"src":"686:91:12","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2635,"nodeType":"StructuredDocumentation","src":"783:164:12","text":" @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n Use along with {totalSupply} to enumerate all tokens."},"functionSelector":"4f6ccce7","id":2642,"implemented":false,"kind":"function","modifiers":[],"name":"tokenByIndex","nameLocation":"961:12:12","nodeType":"FunctionDefinition","parameters":{"id":2638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2637,"mutability":"mutable","name":"index","nameLocation":"982:5:12","nodeType":"VariableDeclaration","scope":2642,"src":"974:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2636,"name":"uint256","nodeType":"ElementaryTypeName","src":"974:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"973:15:12"},"returnParameters":{"id":2641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2640,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2642,"src":"1012:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2639,"name":"uint256","nodeType":"ElementaryTypeName","src":"1012:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1011:9:12"},"scope":2643,"src":"952:69:12","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2644,"src":"317:706:12","usedErrors":[]}],"src":"129:895:12"},"id":12},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","exportedSymbols":{"IERC165":[3822],"IERC721":[2115],"IERC721Metadata":[2670]},"id":2671,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2645,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:13"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":2646,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2671,"sourceUnit":2116,"src":"137:24:13","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2648,"name":"IERC721","nodeType":"IdentifierPath","referencedDeclaration":2115,"src":"326:7:13"},"id":2649,"nodeType":"InheritanceSpecifier","src":"326:7:13"}],"canonicalName":"IERC721Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":2647,"nodeType":"StructuredDocumentation","src":"163:133:13","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":2670,"linearizedBaseContracts":[2670,2115,3822],"name":"IERC721Metadata","nameLocation":"307:15:13","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2650,"nodeType":"StructuredDocumentation","src":"340:58:13","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":2655,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"412:4:13","nodeType":"FunctionDefinition","parameters":{"id":2651,"nodeType":"ParameterList","parameters":[],"src":"416:2:13"},"returnParameters":{"id":2654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2653,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2655,"src":"442:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2652,"name":"string","nodeType":"ElementaryTypeName","src":"442:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"441:15:13"},"scope":2670,"src":"403:54:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2656,"nodeType":"StructuredDocumentation","src":"463:60:13","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":2661,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"537:6:13","nodeType":"FunctionDefinition","parameters":{"id":2657,"nodeType":"ParameterList","parameters":[],"src":"543:2:13"},"returnParameters":{"id":2660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2659,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2661,"src":"569:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2658,"name":"string","nodeType":"ElementaryTypeName","src":"569:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"568:15:13"},"scope":2670,"src":"528:56:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2662,"nodeType":"StructuredDocumentation","src":"590:90:13","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":2669,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"694:8:13","nodeType":"FunctionDefinition","parameters":{"id":2665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2664,"mutability":"mutable","name":"tokenId","nameLocation":"711:7:13","nodeType":"VariableDeclaration","scope":2669,"src":"703:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2663,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"702:17:13"},"returnParameters":{"id":2668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2667,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2669,"src":"743:13:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2666,"name":"string","nodeType":"ElementaryTypeName","src":"743:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"742:15:13"},"scope":2670,"src":"685:73:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2671,"src":"297:463:13","usedErrors":[]}],"src":"112:649:13"},"id":13},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[3000]},"id":3001,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2672,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:14"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":2673,"nodeType":"StructuredDocumentation","src":"126:67:14","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":3000,"linearizedBaseContracts":[3000],"name":"Address","nameLocation":"202:7:14","nodeType":"ContractDefinition","nodes":[{"body":{"id":2687,"nodeType":"Block","src":"1241:254:14","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2681,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2676,"src":"1465:7:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"code","nodeType":"MemberAccess","src":"1465:12:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1465:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2684,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1487:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1465:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2680,"id":2686,"nodeType":"Return","src":"1458:30:14"}]},"documentation":{"id":2674,"nodeType":"StructuredDocumentation","src":"216:954:14","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":2688,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1184:10:14","nodeType":"FunctionDefinition","parameters":{"id":2677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2676,"mutability":"mutable","name":"account","nameLocation":"1203:7:14","nodeType":"VariableDeclaration","scope":2688,"src":"1195:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2675,"name":"address","nodeType":"ElementaryTypeName","src":"1195:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1194:17:14"},"returnParameters":{"id":2680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2679,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2688,"src":"1235:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2678,"name":"bool","nodeType":"ElementaryTypeName","src":"1235:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1234:6:14"},"scope":3000,"src":"1175:320:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2721,"nodeType":"Block","src":"2483:241:14","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2699,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2509:4:14","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$3000","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$3000","typeString":"library Address"}],"id":2698,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2501:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2697,"name":"address","nodeType":"ElementaryTypeName","src":"2501:7:14","typeDescriptions":{}}},"id":2700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2501:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"2501:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2702,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2693,"src":"2526:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2501:31:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":2704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2534:31:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":2696,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2493:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2493:73:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2706,"nodeType":"ExpressionStatement","src":"2493:73:14"},{"assignments":[2708,null],"declarations":[{"constant":false,"id":2708,"mutability":"mutable","name":"success","nameLocation":"2583:7:14","nodeType":"VariableDeclaration","scope":2721,"src":"2578:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2707,"name":"bool","nodeType":"ElementaryTypeName","src":"2578:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":2715,"initialValue":{"arguments":[{"hexValue":"","id":2713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2626:2:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":2709,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2691,"src":"2596:9:14","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"2596:14:14","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2711,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2693,"src":"2618:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2596:29:14","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2596:33:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2577:52:14"},{"expression":{"arguments":[{"id":2717,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2708,"src":"2647:7:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":2718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2656:60:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":2716,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2639:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2639:78:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2720,"nodeType":"ExpressionStatement","src":"2639:78:14"}]},"documentation":{"id":2689,"nodeType":"StructuredDocumentation","src":"1501:906:14","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":2722,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2421:9:14","nodeType":"FunctionDefinition","parameters":{"id":2694,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2691,"mutability":"mutable","name":"recipient","nameLocation":"2447:9:14","nodeType":"VariableDeclaration","scope":2722,"src":"2431:25:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2690,"name":"address","nodeType":"ElementaryTypeName","src":"2431:15:14","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":2693,"mutability":"mutable","name":"amount","nameLocation":"2466:6:14","nodeType":"VariableDeclaration","scope":2722,"src":"2458:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2692,"name":"uint256","nodeType":"ElementaryTypeName","src":"2458:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:43:14"},"returnParameters":{"id":2695,"nodeType":"ParameterList","parameters":[],"src":"2483:0:14"},"scope":3000,"src":"2412:312:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2739,"nodeType":"Block","src":"3555:96:14","statements":[{"expression":{"arguments":[{"id":2733,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2725,"src":"3594:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2734,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2727,"src":"3602:4:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3608:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":2736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3611:32:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":2732,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2780,2824],"referencedDeclaration":2824,"src":"3572:21:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3572:72:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2731,"id":2738,"nodeType":"Return","src":"3565:79:14"}]},"documentation":{"id":2723,"nodeType":"StructuredDocumentation","src":"2730:731:14","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":2740,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3475:12:14","nodeType":"FunctionDefinition","parameters":{"id":2728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2725,"mutability":"mutable","name":"target","nameLocation":"3496:6:14","nodeType":"VariableDeclaration","scope":2740,"src":"3488:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2724,"name":"address","nodeType":"ElementaryTypeName","src":"3488:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2727,"mutability":"mutable","name":"data","nameLocation":"3517:4:14","nodeType":"VariableDeclaration","scope":2740,"src":"3504:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2726,"name":"bytes","nodeType":"ElementaryTypeName","src":"3504:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3487:35:14"},"returnParameters":{"id":2731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2730,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2740,"src":"3541:12:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2729,"name":"bytes","nodeType":"ElementaryTypeName","src":"3541:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3540:14:14"},"scope":3000,"src":"3466:185:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2759,"nodeType":"Block","src":"4020:76:14","statements":[{"expression":{"arguments":[{"id":2753,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"4059:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2754,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2745,"src":"4067:4:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4073:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":2756,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2747,"src":"4076:12:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2752,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2780,2824],"referencedDeclaration":2824,"src":"4037:21:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4037:52:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2751,"id":2758,"nodeType":"Return","src":"4030:59:14"}]},"documentation":{"id":2741,"nodeType":"StructuredDocumentation","src":"3657:211:14","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2760,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3882:12:14","nodeType":"FunctionDefinition","parameters":{"id":2748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2743,"mutability":"mutable","name":"target","nameLocation":"3912:6:14","nodeType":"VariableDeclaration","scope":2760,"src":"3904:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2742,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2745,"mutability":"mutable","name":"data","nameLocation":"3941:4:14","nodeType":"VariableDeclaration","scope":2760,"src":"3928:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2744,"name":"bytes","nodeType":"ElementaryTypeName","src":"3928:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2747,"mutability":"mutable","name":"errorMessage","nameLocation":"3969:12:14","nodeType":"VariableDeclaration","scope":2760,"src":"3955:26:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2746,"name":"string","nodeType":"ElementaryTypeName","src":"3955:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3894:93:14"},"returnParameters":{"id":2751,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2750,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2760,"src":"4006:12:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2749,"name":"bytes","nodeType":"ElementaryTypeName","src":"4006:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4005:14:14"},"scope":3000,"src":"3873:223:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2779,"nodeType":"Block","src":"4601:111:14","statements":[{"expression":{"arguments":[{"id":2773,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2763,"src":"4640:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2774,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2765,"src":"4648:4:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2775,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2767,"src":"4654:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":2776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4661:43:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":2772,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2780,2824],"referencedDeclaration":2824,"src":"4618:21:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4618:87:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2771,"id":2778,"nodeType":"Return","src":"4611:94:14"}]},"documentation":{"id":2761,"nodeType":"StructuredDocumentation","src":"4102:351:14","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":2780,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4467:21:14","nodeType":"FunctionDefinition","parameters":{"id":2768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2763,"mutability":"mutable","name":"target","nameLocation":"4506:6:14","nodeType":"VariableDeclaration","scope":2780,"src":"4498:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2762,"name":"address","nodeType":"ElementaryTypeName","src":"4498:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2765,"mutability":"mutable","name":"data","nameLocation":"4535:4:14","nodeType":"VariableDeclaration","scope":2780,"src":"4522:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2764,"name":"bytes","nodeType":"ElementaryTypeName","src":"4522:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2767,"mutability":"mutable","name":"value","nameLocation":"4557:5:14","nodeType":"VariableDeclaration","scope":2780,"src":"4549:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2766,"name":"uint256","nodeType":"ElementaryTypeName","src":"4549:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4488:80:14"},"returnParameters":{"id":2771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2770,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2780,"src":"4587:12:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2769,"name":"bytes","nodeType":"ElementaryTypeName","src":"4587:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4586:14:14"},"scope":3000,"src":"4458:254:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2823,"nodeType":"Block","src":"5139:267:14","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2797,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5165:4:14","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$3000","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$3000","typeString":"library Address"}],"id":2796,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5157:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2795,"name":"address","nodeType":"ElementaryTypeName","src":"5157:7:14","typeDescriptions":{}}},"id":2798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5157:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"5157:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2800,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2787,"src":"5182:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:30:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":2802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5189:40:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":2794,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5149:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5149:81:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2804,"nodeType":"ExpressionStatement","src":"5149:81:14"},{"assignments":[2806,2808],"declarations":[{"constant":false,"id":2806,"mutability":"mutable","name":"success","nameLocation":"5246:7:14","nodeType":"VariableDeclaration","scope":2823,"src":"5241:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2805,"name":"bool","nodeType":"ElementaryTypeName","src":"5241:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2808,"mutability":"mutable","name":"returndata","nameLocation":"5268:10:14","nodeType":"VariableDeclaration","scope":2823,"src":"5255:23:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2807,"name":"bytes","nodeType":"ElementaryTypeName","src":"5255:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2815,"initialValue":{"arguments":[{"id":2813,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"5308:4:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2809,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2783,"src":"5282:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"5282:11:14","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2811,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2787,"src":"5301:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5282:25:14","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2814,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5282:31:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5240:73:14"},{"expression":{"arguments":[{"id":2817,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2783,"src":"5357:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2818,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2806,"src":"5365:7:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2819,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2808,"src":"5374:10:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2820,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2789,"src":"5386:12:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2816,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2955,"src":"5330:26:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5330:69:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2793,"id":2822,"nodeType":"Return","src":"5323:76:14"}]},"documentation":{"id":2781,"nodeType":"StructuredDocumentation","src":"4718:237:14","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2824,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4969:21:14","nodeType":"FunctionDefinition","parameters":{"id":2790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2783,"mutability":"mutable","name":"target","nameLocation":"5008:6:14","nodeType":"VariableDeclaration","scope":2824,"src":"5000:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2782,"name":"address","nodeType":"ElementaryTypeName","src":"5000:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2785,"mutability":"mutable","name":"data","nameLocation":"5037:4:14","nodeType":"VariableDeclaration","scope":2824,"src":"5024:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2784,"name":"bytes","nodeType":"ElementaryTypeName","src":"5024:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2787,"mutability":"mutable","name":"value","nameLocation":"5059:5:14","nodeType":"VariableDeclaration","scope":2824,"src":"5051:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2786,"name":"uint256","nodeType":"ElementaryTypeName","src":"5051:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2789,"mutability":"mutable","name":"errorMessage","nameLocation":"5088:12:14","nodeType":"VariableDeclaration","scope":2824,"src":"5074:26:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2788,"name":"string","nodeType":"ElementaryTypeName","src":"5074:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4990:116:14"},"returnParameters":{"id":2793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2792,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2824,"src":"5125:12:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2791,"name":"bytes","nodeType":"ElementaryTypeName","src":"5125:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5124:14:14"},"scope":3000,"src":"4960:446:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2840,"nodeType":"Block","src":"5683:97:14","statements":[{"expression":{"arguments":[{"id":2835,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"5719:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2836,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2829,"src":"5727:4:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":2837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5733:39:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":2834,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[2841,2870],"referencedDeclaration":2870,"src":"5700:18:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":2838,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5700:73:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2833,"id":2839,"nodeType":"Return","src":"5693:80:14"}]},"documentation":{"id":2825,"nodeType":"StructuredDocumentation","src":"5412:166:14","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2841,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5592:18:14","nodeType":"FunctionDefinition","parameters":{"id":2830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2827,"mutability":"mutable","name":"target","nameLocation":"5619:6:14","nodeType":"VariableDeclaration","scope":2841,"src":"5611:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2826,"name":"address","nodeType":"ElementaryTypeName","src":"5611:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2829,"mutability":"mutable","name":"data","nameLocation":"5640:4:14","nodeType":"VariableDeclaration","scope":2841,"src":"5627:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2828,"name":"bytes","nodeType":"ElementaryTypeName","src":"5627:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5610:35:14"},"returnParameters":{"id":2833,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2832,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2841,"src":"5669:12:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2831,"name":"bytes","nodeType":"ElementaryTypeName","src":"5669:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5668:14:14"},"scope":3000,"src":"5583:197:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2869,"nodeType":"Block","src":"6122:168:14","statements":[{"assignments":[2854,2856],"declarations":[{"constant":false,"id":2854,"mutability":"mutable","name":"success","nameLocation":"6138:7:14","nodeType":"VariableDeclaration","scope":2869,"src":"6133:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2853,"name":"bool","nodeType":"ElementaryTypeName","src":"6133:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2856,"mutability":"mutable","name":"returndata","nameLocation":"6160:10:14","nodeType":"VariableDeclaration","scope":2869,"src":"6147:23:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2855,"name":"bytes","nodeType":"ElementaryTypeName","src":"6147:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2861,"initialValue":{"arguments":[{"id":2859,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2846,"src":"6192:4:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2857,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2844,"src":"6174:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"staticcall","nodeType":"MemberAccess","src":"6174:17:14","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":2860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6174:23:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6132:65:14"},{"expression":{"arguments":[{"id":2863,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2844,"src":"6241:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2864,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2854,"src":"6249:7:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2865,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"6258:10:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2866,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2848,"src":"6270:12:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2862,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2955,"src":"6214:26:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6214:69:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2852,"id":2868,"nodeType":"Return","src":"6207:76:14"}]},"documentation":{"id":2842,"nodeType":"StructuredDocumentation","src":"5786:173:14","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2870,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5973:18:14","nodeType":"FunctionDefinition","parameters":{"id":2849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2844,"mutability":"mutable","name":"target","nameLocation":"6009:6:14","nodeType":"VariableDeclaration","scope":2870,"src":"6001:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2843,"name":"address","nodeType":"ElementaryTypeName","src":"6001:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2846,"mutability":"mutable","name":"data","nameLocation":"6038:4:14","nodeType":"VariableDeclaration","scope":2870,"src":"6025:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2845,"name":"bytes","nodeType":"ElementaryTypeName","src":"6025:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2848,"mutability":"mutable","name":"errorMessage","nameLocation":"6066:12:14","nodeType":"VariableDeclaration","scope":2870,"src":"6052:26:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2847,"name":"string","nodeType":"ElementaryTypeName","src":"6052:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5991:93:14"},"returnParameters":{"id":2852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2851,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2870,"src":"6108:12:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2850,"name":"bytes","nodeType":"ElementaryTypeName","src":"6108:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6107:14:14"},"scope":3000,"src":"5964:326:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2886,"nodeType":"Block","src":"6566:101:14","statements":[{"expression":{"arguments":[{"id":2881,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2873,"src":"6604:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2882,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"6612:4:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":2883,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6618:41:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":2880,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[2887,2916],"referencedDeclaration":2916,"src":"6583:20:14","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":2884,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6583:77:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2879,"id":2885,"nodeType":"Return","src":"6576:84:14"}]},"documentation":{"id":2871,"nodeType":"StructuredDocumentation","src":"6296:168:14","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":2887,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6478:20:14","nodeType":"FunctionDefinition","parameters":{"id":2876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2873,"mutability":"mutable","name":"target","nameLocation":"6507:6:14","nodeType":"VariableDeclaration","scope":2887,"src":"6499:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2872,"name":"address","nodeType":"ElementaryTypeName","src":"6499:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2875,"mutability":"mutable","name":"data","nameLocation":"6528:4:14","nodeType":"VariableDeclaration","scope":2887,"src":"6515:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2874,"name":"bytes","nodeType":"ElementaryTypeName","src":"6515:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6498:35:14"},"returnParameters":{"id":2879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2878,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2887,"src":"6552:12:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2877,"name":"bytes","nodeType":"ElementaryTypeName","src":"6552:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6551:14:14"},"scope":3000,"src":"6469:198:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2915,"nodeType":"Block","src":"7008:170:14","statements":[{"assignments":[2900,2902],"declarations":[{"constant":false,"id":2900,"mutability":"mutable","name":"success","nameLocation":"7024:7:14","nodeType":"VariableDeclaration","scope":2915,"src":"7019:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2899,"name":"bool","nodeType":"ElementaryTypeName","src":"7019:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2902,"mutability":"mutable","name":"returndata","nameLocation":"7046:10:14","nodeType":"VariableDeclaration","scope":2915,"src":"7033:23:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2901,"name":"bytes","nodeType":"ElementaryTypeName","src":"7033:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2907,"initialValue":{"arguments":[{"id":2905,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2892,"src":"7080:4:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2903,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2890,"src":"7060:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"delegatecall","nodeType":"MemberAccess","src":"7060:19:14","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":2906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7060:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7018:67:14"},{"expression":{"arguments":[{"id":2909,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2890,"src":"7129:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2910,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2900,"src":"7137:7:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2911,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2902,"src":"7146:10:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2912,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2894,"src":"7158:12:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2908,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2955,"src":"7102:26:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2913,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7102:69:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2898,"id":2914,"nodeType":"Return","src":"7095:76:14"}]},"documentation":{"id":2888,"nodeType":"StructuredDocumentation","src":"6673:175:14","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":2916,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6862:20:14","nodeType":"FunctionDefinition","parameters":{"id":2895,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2890,"mutability":"mutable","name":"target","nameLocation":"6900:6:14","nodeType":"VariableDeclaration","scope":2916,"src":"6892:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2889,"name":"address","nodeType":"ElementaryTypeName","src":"6892:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2892,"mutability":"mutable","name":"data","nameLocation":"6929:4:14","nodeType":"VariableDeclaration","scope":2916,"src":"6916:17:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2891,"name":"bytes","nodeType":"ElementaryTypeName","src":"6916:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2894,"mutability":"mutable","name":"errorMessage","nameLocation":"6957:12:14","nodeType":"VariableDeclaration","scope":2916,"src":"6943:26:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2893,"name":"string","nodeType":"ElementaryTypeName","src":"6943:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6882:93:14"},"returnParameters":{"id":2898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2897,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2916,"src":"6994:12:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2896,"name":"bytes","nodeType":"ElementaryTypeName","src":"6994:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6993:14:14"},"scope":3000,"src":"6853:325:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2954,"nodeType":"Block","src":"7660:434:14","statements":[{"condition":{"id":2930,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2921,"src":"7674:7:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2952,"nodeType":"Block","src":"8030:58:14","statements":[{"expression":{"arguments":[{"id":2948,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2923,"src":"8052:10:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2949,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2925,"src":"8064:12:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2947,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2999,"src":"8044:7:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":2950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8044:33:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2951,"nodeType":"ExpressionStatement","src":"8044:33:14"}]},"id":2953,"nodeType":"IfStatement","src":"7670:418:14","trueBody":{"id":2946,"nodeType":"Block","src":"7683:341:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2931,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2923,"src":"7701:10:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"7701:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7722:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7701:22:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2943,"nodeType":"IfStatement","src":"7697:286:14","trueBody":{"id":2942,"nodeType":"Block","src":"7725:258:14","statements":[{"expression":{"arguments":[{"arguments":[{"id":2937,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2919,"src":"7927:6:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2936,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2688,"src":"7916:10:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":2938,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7916:18:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":2939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7936:31:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":2935,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7908:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7908:60:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2941,"nodeType":"ExpressionStatement","src":"7908:60:14"}]}},{"expression":{"id":2944,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2923,"src":"8003:10:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2929,"id":2945,"nodeType":"Return","src":"7996:17:14"}]}}]},"documentation":{"id":2917,"nodeType":"StructuredDocumentation","src":"7184:277:14","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":2955,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7475:26:14","nodeType":"FunctionDefinition","parameters":{"id":2926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2919,"mutability":"mutable","name":"target","nameLocation":"7519:6:14","nodeType":"VariableDeclaration","scope":2955,"src":"7511:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2918,"name":"address","nodeType":"ElementaryTypeName","src":"7511:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2921,"mutability":"mutable","name":"success","nameLocation":"7540:7:14","nodeType":"VariableDeclaration","scope":2955,"src":"7535:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2920,"name":"bool","nodeType":"ElementaryTypeName","src":"7535:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2923,"mutability":"mutable","name":"returndata","nameLocation":"7570:10:14","nodeType":"VariableDeclaration","scope":2955,"src":"7557:23:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2922,"name":"bytes","nodeType":"ElementaryTypeName","src":"7557:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2925,"mutability":"mutable","name":"errorMessage","nameLocation":"7604:12:14","nodeType":"VariableDeclaration","scope":2955,"src":"7590:26:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2924,"name":"string","nodeType":"ElementaryTypeName","src":"7590:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7501:121:14"},"returnParameters":{"id":2929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2928,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2955,"src":"7646:12:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2927,"name":"bytes","nodeType":"ElementaryTypeName","src":"7646:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7645:14:14"},"scope":3000,"src":"7466:628:14","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2978,"nodeType":"Block","src":"8475:135:14","statements":[{"condition":{"id":2967,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2958,"src":"8489:7:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2976,"nodeType":"Block","src":"8546:58:14","statements":[{"expression":{"arguments":[{"id":2972,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"8568:10:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2973,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2962,"src":"8580:12:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2971,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2999,"src":"8560:7:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":2974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8560:33:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2975,"nodeType":"ExpressionStatement","src":"8560:33:14"}]},"id":2977,"nodeType":"IfStatement","src":"8485:119:14","trueBody":{"id":2970,"nodeType":"Block","src":"8498:42:14","statements":[{"expression":{"id":2968,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"8519:10:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2966,"id":2969,"nodeType":"Return","src":"8512:17:14"}]}}]},"documentation":{"id":2956,"nodeType":"StructuredDocumentation","src":"8100:210:14","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":2979,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8324:16:14","nodeType":"FunctionDefinition","parameters":{"id":2963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2958,"mutability":"mutable","name":"success","nameLocation":"8355:7:14","nodeType":"VariableDeclaration","scope":2979,"src":"8350:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2957,"name":"bool","nodeType":"ElementaryTypeName","src":"8350:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2960,"mutability":"mutable","name":"returndata","nameLocation":"8385:10:14","nodeType":"VariableDeclaration","scope":2979,"src":"8372:23:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2959,"name":"bytes","nodeType":"ElementaryTypeName","src":"8372:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2962,"mutability":"mutable","name":"errorMessage","nameLocation":"8419:12:14","nodeType":"VariableDeclaration","scope":2979,"src":"8405:26:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2961,"name":"string","nodeType":"ElementaryTypeName","src":"8405:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8340:97:14"},"returnParameters":{"id":2966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2965,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2979,"src":"8461:12:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2964,"name":"bytes","nodeType":"ElementaryTypeName","src":"8461:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8460:14:14"},"scope":3000,"src":"8315:295:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2998,"nodeType":"Block","src":"8699:457:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2986,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2981,"src":"8775:10:14","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"8775:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8795:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8775:21:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2996,"nodeType":"Block","src":"9105:45:14","statements":[{"expression":{"arguments":[{"id":2993,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2983,"src":"9126:12:14","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2992,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9119:6:14","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9119:20:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2995,"nodeType":"ExpressionStatement","src":"9119:20:14"}]},"id":2997,"nodeType":"IfStatement","src":"8771:379:14","trueBody":{"id":2991,"nodeType":"Block","src":"8798:301:14","statements":[{"AST":{"nodeType":"YulBlock","src":"8956:133:14","statements":[{"nodeType":"YulVariableDeclaration","src":"8974:40:14","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9003:10:14"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8997:5:14"},"nodeType":"YulFunctionCall","src":"8997:17:14"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8978:15:14","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9042:2:14","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9046:10:14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9038:3:14"},"nodeType":"YulFunctionCall","src":"9038:19:14"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9059:15:14"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9031:6:14"},"nodeType":"YulFunctionCall","src":"9031:44:14"},"nodeType":"YulExpressionStatement","src":"9031:44:14"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2981,"isOffset":false,"isSlot":false,"src":"9003:10:14","valueSize":1},{"declaration":2981,"isOffset":false,"isSlot":false,"src":"9046:10:14","valueSize":1}],"id":2990,"nodeType":"InlineAssembly","src":"8947:142:14"}]}}]},"id":2999,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8625:7:14","nodeType":"FunctionDefinition","parameters":{"id":2984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2981,"mutability":"mutable","name":"returndata","nameLocation":"8646:10:14","nodeType":"VariableDeclaration","scope":2999,"src":"8633:23:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2980,"name":"bytes","nodeType":"ElementaryTypeName","src":"8633:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2983,"mutability":"mutable","name":"errorMessage","nameLocation":"8672:12:14","nodeType":"VariableDeclaration","scope":2999,"src":"8658:26:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2982,"name":"string","nodeType":"ElementaryTypeName","src":"8658:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8632:53:14"},"returnParameters":{"id":2985,"nodeType":"ParameterList","parameters":[],"src":"8699:0:14"},"scope":3000,"src":"8616:540:14","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":3001,"src":"194:8964:14","usedErrors":[]}],"src":"101:9058:14"},"id":14},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[3022]},"id":3023,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3002,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:15"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":3003,"nodeType":"StructuredDocumentation","src":"111:496:15","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":3022,"linearizedBaseContracts":[3022],"name":"Context","nameLocation":"626:7:15","nodeType":"ContractDefinition","nodes":[{"body":{"id":3011,"nodeType":"Block","src":"702:34:15","statements":[{"expression":{"expression":{"id":3008,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"719:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3007,"id":3010,"nodeType":"Return","src":"712:17:15"}]},"id":3012,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:15","nodeType":"FunctionDefinition","parameters":{"id":3004,"nodeType":"ParameterList","parameters":[],"src":"659:2:15"},"returnParameters":{"id":3007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3006,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3012,"src":"693:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3005,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:15"},"scope":3022,"src":"640:96:15","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3020,"nodeType":"Block","src":"809:32:15","statements":[{"expression":{"expression":{"id":3017,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","src":"826:8:15","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":3016,"id":3019,"nodeType":"Return","src":"819:15:15"}]},"id":3021,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:15","nodeType":"FunctionDefinition","parameters":{"id":3013,"nodeType":"ParameterList","parameters":[],"src":"759:2:15"},"returnParameters":{"id":3016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3015,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3021,"src":"793:14:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3014,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:15"},"scope":3022,"src":"742:99:15","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":3023,"src":"608:235:15","usedErrors":[]}],"src":"86:758:15"},"id":15},"@openzeppelin/contracts/utils/Counters.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Counters.sol","exportedSymbols":{"Counters":[3096]},"id":3097,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3024,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"87:23:16"},{"abstract":false,"baseContracts":[],"canonicalName":"Counters","contractDependencies":[],"contractKind":"library","documentation":{"id":3025,"nodeType":"StructuredDocumentation","src":"112:311:16","text":" @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"},"fullyImplemented":true,"id":3096,"linearizedBaseContracts":[3096],"name":"Counters","nameLocation":"432:8:16","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Counters.Counter","id":3028,"members":[{"constant":false,"id":3027,"mutability":"mutable","name":"_value","nameLocation":"794:6:16","nodeType":"VariableDeclaration","scope":3028,"src":"786:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3026,"name":"uint256","nodeType":"ElementaryTypeName","src":"786:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Counter","nameLocation":"454:7:16","nodeType":"StructDefinition","scope":3096,"src":"447:374:16","visibility":"public"},{"body":{"id":3039,"nodeType":"Block","src":"901:38:16","statements":[{"expression":{"expression":{"id":3036,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"918:7:16","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3028_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":3037,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":3027,"src":"918:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3035,"id":3038,"nodeType":"Return","src":"911:21:16"}]},"id":3040,"implemented":true,"kind":"function","modifiers":[],"name":"current","nameLocation":"836:7:16","nodeType":"FunctionDefinition","parameters":{"id":3032,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3031,"mutability":"mutable","name":"counter","nameLocation":"860:7:16","nodeType":"VariableDeclaration","scope":3040,"src":"844:23:16","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3028_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":3030,"nodeType":"UserDefinedTypeName","pathNode":{"id":3029,"name":"Counter","nodeType":"IdentifierPath","referencedDeclaration":3028,"src":"844:7:16"},"referencedDeclaration":3028,"src":"844:7:16","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3028_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"843:25:16"},"returnParameters":{"id":3035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3034,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3040,"src":"892:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3033,"name":"uint256","nodeType":"ElementaryTypeName","src":"892:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"891:9:16"},"scope":3096,"src":"827:112:16","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3053,"nodeType":"Block","src":"998:70:16","statements":[{"id":3052,"nodeType":"UncheckedBlock","src":"1008:54:16","statements":[{"expression":{"id":3050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3046,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3043,"src":"1032:7:16","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3028_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":3048,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":3027,"src":"1032:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1050:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1032:19:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3051,"nodeType":"ExpressionStatement","src":"1032:19:16"}]}]},"id":3054,"implemented":true,"kind":"function","modifiers":[],"name":"increment","nameLocation":"954:9:16","nodeType":"FunctionDefinition","parameters":{"id":3044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3043,"mutability":"mutable","name":"counter","nameLocation":"980:7:16","nodeType":"VariableDeclaration","scope":3054,"src":"964:23:16","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3028_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":3042,"nodeType":"UserDefinedTypeName","pathNode":{"id":3041,"name":"Counter","nodeType":"IdentifierPath","referencedDeclaration":3028,"src":"964:7:16"},"referencedDeclaration":3028,"src":"964:7:16","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3028_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"963:25:16"},"returnParameters":{"id":3045,"nodeType":"ParameterList","parameters":[],"src":"998:0:16"},"scope":3096,"src":"945:123:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3081,"nodeType":"Block","src":"1127:176:16","statements":[{"assignments":[3061],"declarations":[{"constant":false,"id":3061,"mutability":"mutable","name":"value","nameLocation":"1145:5:16","nodeType":"VariableDeclaration","scope":3081,"src":"1137:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3060,"name":"uint256","nodeType":"ElementaryTypeName","src":"1137:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3064,"initialValue":{"expression":{"id":3062,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"1153:7:16","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3028_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":3063,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":3027,"src":"1153:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1137:30:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3066,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3061,"src":"1185:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1193:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1185:9:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f756e7465723a2064656372656d656e74206f766572666c6f77","id":3069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1196:29:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""},"value":"Counter: decrement overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""}],"id":3065,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1177:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1177:49:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3071,"nodeType":"ExpressionStatement","src":"1177:49:16"},{"id":3080,"nodeType":"UncheckedBlock","src":"1236:61:16","statements":[{"expression":{"id":3078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3072,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3057,"src":"1260:7:16","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3028_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":3074,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":3027,"src":"1260:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3075,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3061,"src":"1277:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3076,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1285:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1277:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1260:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3079,"nodeType":"ExpressionStatement","src":"1260:26:16"}]}]},"id":3082,"implemented":true,"kind":"function","modifiers":[],"name":"decrement","nameLocation":"1083:9:16","nodeType":"FunctionDefinition","parameters":{"id":3058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3057,"mutability":"mutable","name":"counter","nameLocation":"1109:7:16","nodeType":"VariableDeclaration","scope":3082,"src":"1093:23:16","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3028_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":3056,"nodeType":"UserDefinedTypeName","pathNode":{"id":3055,"name":"Counter","nodeType":"IdentifierPath","referencedDeclaration":3028,"src":"1093:7:16"},"referencedDeclaration":3028,"src":"1093:7:16","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3028_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"1092:25:16"},"returnParameters":{"id":3059,"nodeType":"ParameterList","parameters":[],"src":"1127:0:16"},"scope":3096,"src":"1074:229:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3094,"nodeType":"Block","src":"1358:35:16","statements":[{"expression":{"id":3092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3088,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3085,"src":"1368:7:16","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3028_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":3090,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":3027,"src":"1368:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1385:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1368:18:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3093,"nodeType":"ExpressionStatement","src":"1368:18:16"}]},"id":3095,"implemented":true,"kind":"function","modifiers":[],"name":"reset","nameLocation":"1318:5:16","nodeType":"FunctionDefinition","parameters":{"id":3086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3085,"mutability":"mutable","name":"counter","nameLocation":"1340:7:16","nodeType":"VariableDeclaration","scope":3095,"src":"1324:23:16","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3028_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":3084,"nodeType":"UserDefinedTypeName","pathNode":{"id":3083,"name":"Counter","nodeType":"IdentifierPath","referencedDeclaration":3028,"src":"1324:7:16"},"referencedDeclaration":3028,"src":"1324:7:16","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3028_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"1323:25:16"},"returnParameters":{"id":3087,"nodeType":"ParameterList","parameters":[],"src":"1358:0:16"},"scope":3096,"src":"1309:84:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":3097,"src":"424:971:16","usedErrors":[]}],"src":"87:1309:16"},"id":16},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[4687],"Strings":[3271]},"id":3272,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3098,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:17"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":3099,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3272,"sourceUnit":4688,"src":"126:25:17","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":3100,"nodeType":"StructuredDocumentation","src":"153:34:17","text":" @dev String operations."},"fullyImplemented":true,"id":3271,"linearizedBaseContracts":[3271],"name":"Strings","nameLocation":"196:7:17","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":3103,"mutability":"constant","name":"_SYMBOLS","nameLocation":"235:8:17","nodeType":"VariableDeclaration","scope":3271,"src":"210:54:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":3101,"name":"bytes16","nodeType":"ElementaryTypeName","src":"210:7:17","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":3102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"246:18:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":3106,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"293:15:17","nodeType":"VariableDeclaration","scope":3271,"src":"270:43:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3104,"name":"uint8","nodeType":"ElementaryTypeName","src":"270:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":3105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"311:2:17","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":3153,"nodeType":"Block","src":"486:625:17","statements":[{"id":3152,"nodeType":"UncheckedBlock","src":"496:609:17","statements":[{"assignments":[3115],"declarations":[{"constant":false,"id":3115,"mutability":"mutable","name":"length","nameLocation":"528:6:17","nodeType":"VariableDeclaration","scope":3152,"src":"520:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3114,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3122,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3118,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3109,"src":"548:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3116,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4687,"src":"537:4:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$4687_$","typeString":"type(library Math)"}},"id":3117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":4524,"src":"537:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"537:17:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"557:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"537:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"520:38:17"},{"assignments":[3124],"declarations":[{"constant":false,"id":3124,"mutability":"mutable","name":"buffer","nameLocation":"586:6:17","nodeType":"VariableDeclaration","scope":3152,"src":"572:20:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3123,"name":"string","nodeType":"ElementaryTypeName","src":"572:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":3129,"initialValue":{"arguments":[{"id":3127,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3115,"src":"606:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3126,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"595:10:17","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":3125,"name":"string","nodeType":"ElementaryTypeName","src":"599:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":3128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"595:18:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"572:41:17"},{"assignments":[3131],"declarations":[{"constant":false,"id":3131,"mutability":"mutable","name":"ptr","nameLocation":"635:3:17","nodeType":"VariableDeclaration","scope":3152,"src":"627:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3130,"name":"uint256","nodeType":"ElementaryTypeName","src":"627:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3132,"nodeType":"VariableDeclarationStatement","src":"627:11:17"},{"AST":{"nodeType":"YulBlock","src":"708:67:17","statements":[{"nodeType":"YulAssignment","src":"726:35:17","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"737:6:17"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"749:2:17","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"753:6:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"745:3:17"},"nodeType":"YulFunctionCall","src":"745:15:17"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"733:3:17"},"nodeType":"YulFunctionCall","src":"733:28:17"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"726:3:17"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3124,"isOffset":false,"isSlot":false,"src":"737:6:17","valueSize":1},{"declaration":3115,"isOffset":false,"isSlot":false,"src":"753:6:17","valueSize":1},{"declaration":3131,"isOffset":false,"isSlot":false,"src":"726:3:17","valueSize":1}],"id":3133,"nodeType":"InlineAssembly","src":"699:76:17"},{"body":{"id":3148,"nodeType":"Block","src":"801:267:17","statements":[{"expression":{"id":3136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"819:5:17","subExpression":{"id":3135,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3131,"src":"819:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3137,"nodeType":"ExpressionStatement","src":"819:5:17"},{"AST":{"nodeType":"YulBlock","src":"902:84:17","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"932:3:17"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"946:5:17"},{"kind":"number","nodeType":"YulLiteral","src":"953:2:17","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"942:3:17"},"nodeType":"YulFunctionCall","src":"942:14:17"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"958:8:17"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"937:4:17"},"nodeType":"YulFunctionCall","src":"937:30:17"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"924:7:17"},"nodeType":"YulFunctionCall","src":"924:44:17"},"nodeType":"YulExpressionStatement","src":"924:44:17"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3103,"isOffset":false,"isSlot":false,"src":"958:8:17","valueSize":1},{"declaration":3131,"isOffset":false,"isSlot":false,"src":"932:3:17","valueSize":1},{"declaration":3109,"isOffset":false,"isSlot":false,"src":"946:5:17","valueSize":1}],"id":3138,"nodeType":"InlineAssembly","src":"893:93:17"},{"expression":{"id":3141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3139,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3109,"src":"1003:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":3140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1012:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1003:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3142,"nodeType":"ExpressionStatement","src":"1003:11:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3143,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3109,"src":"1036:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1036:10:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3147,"nodeType":"IfStatement","src":"1032:21:17","trueBody":{"id":3146,"nodeType":"Break","src":"1048:5:17"}}]},"condition":{"hexValue":"74727565","id":3134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"795:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":3149,"nodeType":"WhileStatement","src":"788:280:17"},{"expression":{"id":3150,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3124,"src":"1088:6:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3113,"id":3151,"nodeType":"Return","src":"1081:13:17"}]}]},"documentation":{"id":3107,"nodeType":"StructuredDocumentation","src":"320:90:17","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":3154,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"424:8:17","nodeType":"FunctionDefinition","parameters":{"id":3110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3109,"mutability":"mutable","name":"value","nameLocation":"441:5:17","nodeType":"VariableDeclaration","scope":3154,"src":"433:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3108,"name":"uint256","nodeType":"ElementaryTypeName","src":"433:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"432:15:17"},"returnParameters":{"id":3113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3112,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3154,"src":"471:13:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3111,"name":"string","nodeType":"ElementaryTypeName","src":"471:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"470:15:17"},"scope":3271,"src":"415:696:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3173,"nodeType":"Block","src":"1290:100:17","statements":[{"id":3172,"nodeType":"UncheckedBlock","src":"1300:84:17","statements":[{"expression":{"arguments":[{"id":3163,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3157,"src":"1343:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3166,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3157,"src":"1362:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3164,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4687,"src":"1350:4:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$4687_$","typeString":"type(library Math)"}},"id":3165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":4647,"src":"1350:11:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1350:18:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1371:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1350:22:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3162,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[3174,3250,3270],"referencedDeclaration":3250,"src":"1331:11:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":3170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1331:42:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3161,"id":3171,"nodeType":"Return","src":"1324:49:17"}]}]},"documentation":{"id":3155,"nodeType":"StructuredDocumentation","src":"1117:94:17","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":3174,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1225:11:17","nodeType":"FunctionDefinition","parameters":{"id":3158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3157,"mutability":"mutable","name":"value","nameLocation":"1245:5:17","nodeType":"VariableDeclaration","scope":3174,"src":"1237:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3156,"name":"uint256","nodeType":"ElementaryTypeName","src":"1237:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1236:15:17"},"returnParameters":{"id":3161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3160,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3174,"src":"1275:13:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3159,"name":"string","nodeType":"ElementaryTypeName","src":"1275:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1274:15:17"},"scope":3271,"src":"1216:174:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3249,"nodeType":"Block","src":"1603:347:17","statements":[{"assignments":[3185],"declarations":[{"constant":false,"id":3185,"mutability":"mutable","name":"buffer","nameLocation":"1626:6:17","nodeType":"VariableDeclaration","scope":3249,"src":"1613:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3184,"name":"bytes","nodeType":"ElementaryTypeName","src":"1613:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3194,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1645:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3189,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3179,"src":"1649:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1645:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":3191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1658:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1645:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3187,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1635:9:17","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":3186,"name":"bytes","nodeType":"ElementaryTypeName","src":"1639:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":3193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1635:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1613:47:17"},{"expression":{"id":3199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3195,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3185,"src":"1670:6:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3197,"indexExpression":{"hexValue":"30","id":3196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1677:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1670:9:17","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1682:3:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1670:15:17","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3200,"nodeType":"ExpressionStatement","src":"1670:15:17"},{"expression":{"id":3205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3201,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3185,"src":"1695:6:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3203,"indexExpression":{"hexValue":"31","id":3202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1695:9:17","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":3204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1707:3:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1695:15:17","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3206,"nodeType":"ExpressionStatement","src":"1695:15:17"},{"body":{"id":3235,"nodeType":"Block","src":"1765:83:17","statements":[{"expression":{"id":3229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3221,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3185,"src":"1779:6:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3223,"indexExpression":{"id":3222,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"1786:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1779:9:17","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3224,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3103,"src":"1791:8:17","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":3228,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3225,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3177,"src":"1800:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":3226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1808:3:17","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1800:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1791:21:17","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1779:33:17","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3230,"nodeType":"ExpressionStatement","src":"1779:33:17"},{"expression":{"id":3233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3231,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3177,"src":"1826:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1836:1:17","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1826:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3234,"nodeType":"ExpressionStatement","src":"1826:11:17"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3215,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"1753:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":3216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1757:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1753:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3236,"initializationExpression":{"assignments":[3208],"declarations":[{"constant":false,"id":3208,"mutability":"mutable","name":"i","nameLocation":"1733:1:17","nodeType":"VariableDeclaration","scope":3236,"src":"1725:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3207,"name":"uint256","nodeType":"ElementaryTypeName","src":"1725:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3214,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1737:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3210,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3179,"src":"1741:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1737:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1750:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1737:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1725:26:17"},"loopExpression":{"expression":{"id":3219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1760:3:17","subExpression":{"id":3218,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"1762:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3220,"nodeType":"ExpressionStatement","src":"1760:3:17"},"nodeType":"ForStatement","src":"1720:128:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3238,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3177,"src":"1865:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1874:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1865:10:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":3241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1877:34:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":3237,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1857:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1857:55:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3243,"nodeType":"ExpressionStatement","src":"1857:55:17"},{"expression":{"arguments":[{"id":3246,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3185,"src":"1936:6:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3245,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1929:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3244,"name":"string","nodeType":"ElementaryTypeName","src":"1929:6:17","typeDescriptions":{}}},"id":3247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1929:14:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3183,"id":3248,"nodeType":"Return","src":"1922:21:17"}]},"documentation":{"id":3175,"nodeType":"StructuredDocumentation","src":"1396:112:17","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":3250,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1522:11:17","nodeType":"FunctionDefinition","parameters":{"id":3180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3177,"mutability":"mutable","name":"value","nameLocation":"1542:5:17","nodeType":"VariableDeclaration","scope":3250,"src":"1534:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3176,"name":"uint256","nodeType":"ElementaryTypeName","src":"1534:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3179,"mutability":"mutable","name":"length","nameLocation":"1557:6:17","nodeType":"VariableDeclaration","scope":3250,"src":"1549:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3178,"name":"uint256","nodeType":"ElementaryTypeName","src":"1549:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1533:31:17"},"returnParameters":{"id":3183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3182,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3250,"src":"1588:13:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3181,"name":"string","nodeType":"ElementaryTypeName","src":"1588:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1587:15:17"},"scope":3271,"src":"1513:437:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3269,"nodeType":"Block","src":"2175:76:17","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":3263,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3253,"src":"2220:4:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3262,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2212:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3261,"name":"uint160","nodeType":"ElementaryTypeName","src":"2212:7:17","typeDescriptions":{}}},"id":3264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2212:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3260,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2204:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3259,"name":"uint256","nodeType":"ElementaryTypeName","src":"2204:7:17","typeDescriptions":{}}},"id":3265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2204:22:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3266,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3106,"src":"2228:15:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":3258,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[3174,3250,3270],"referencedDeclaration":3250,"src":"2192:11:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":3267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2192:52:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3257,"id":3268,"nodeType":"Return","src":"2185:59:17"}]},"documentation":{"id":3251,"nodeType":"StructuredDocumentation","src":"1956:141:17","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":3270,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2111:11:17","nodeType":"FunctionDefinition","parameters":{"id":3254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3253,"mutability":"mutable","name":"addr","nameLocation":"2131:4:17","nodeType":"VariableDeclaration","scope":3270,"src":"2123:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3252,"name":"address","nodeType":"ElementaryTypeName","src":"2123:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2122:14:17"},"returnParameters":{"id":3257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3256,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3270,"src":"2160:13:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3255,"name":"string","nodeType":"ElementaryTypeName","src":"2160:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2159:15:17"},"scope":3271,"src":"2102:149:17","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3272,"src":"188:2065:17","usedErrors":[]}],"src":"101:2153:17"},"id":17},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","exportedSymbols":{"ECDSA":[3632],"Math":[4687],"Strings":[3271]},"id":3633,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3273,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:18"},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../Strings.sol","id":3274,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3633,"sourceUnit":3272,"src":"137:24:18","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSA","contractDependencies":[],"contractKind":"library","documentation":{"id":3275,"nodeType":"StructuredDocumentation","src":"163:205:18","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":3632,"linearizedBaseContracts":[3632],"name":"ECDSA","nameLocation":"377:5:18","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSA.RecoverError","id":3281,"members":[{"id":3276,"name":"NoError","nameLocation":"417:7:18","nodeType":"EnumValue","src":"417:7:18"},{"id":3277,"name":"InvalidSignature","nameLocation":"434:16:18","nodeType":"EnumValue","src":"434:16:18"},{"id":3278,"name":"InvalidSignatureLength","nameLocation":"460:22:18","nodeType":"EnumValue","src":"460:22:18"},{"id":3279,"name":"InvalidSignatureS","nameLocation":"492:17:18","nodeType":"EnumValue","src":"492:17:18"},{"id":3280,"name":"InvalidSignatureV","nameLocation":"519:17:18","nodeType":"EnumValue","src":"519:17:18"}],"name":"RecoverError","nameLocation":"394:12:18","nodeType":"EnumDefinition","src":"389:175:18"},{"body":{"id":3324,"nodeType":"Block","src":"624:457:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"},"id":3290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3287,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3284,"src":"638:5:18","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3288,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3281,"src":"647:12:18","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3281_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3289,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":3276,"src":"647:20:18","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"}},"src":"638:29:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"},"id":3296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3293,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3284,"src":"734:5:18","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3294,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3281,"src":"743:12:18","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3281_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3295,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":3277,"src":"743:29:18","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"}},"src":"734:38:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"},"id":3305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3302,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3284,"src":"843:5:18","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3303,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3281,"src":"852:12:18","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3281_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3304,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":3278,"src":"852:35:18","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"}},"src":"843:44:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"},"id":3314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3311,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3284,"src":"965:5:18","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3312,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3281,"src":"974:12:18","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3281_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3313,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":3279,"src":"974:30:18","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"}},"src":"965:39:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3320,"nodeType":"IfStatement","src":"961:114:18","trueBody":{"id":3319,"nodeType":"Block","src":"1006:69:18","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":3316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1027:36:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":3315,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1020:6:18","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1020:44:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3318,"nodeType":"ExpressionStatement","src":"1020:44:18"}]}},"id":3321,"nodeType":"IfStatement","src":"839:236:18","trueBody":{"id":3310,"nodeType":"Block","src":"889:66:18","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":3307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"910:33:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":3306,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"903:6:18","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"903:41:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3309,"nodeType":"ExpressionStatement","src":"903:41:18"}]}},"id":3322,"nodeType":"IfStatement","src":"730:345:18","trueBody":{"id":3301,"nodeType":"Block","src":"774:59:18","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":3298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"795:26:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":3297,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"788:6:18","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"788:34:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3300,"nodeType":"ExpressionStatement","src":"788:34:18"}]}},"id":3323,"nodeType":"IfStatement","src":"634:441:18","trueBody":{"id":3292,"nodeType":"Block","src":"669:55:18","statements":[{"functionReturnParameters":3286,"id":3291,"nodeType":"Return","src":"683:7:18"}]}}]},"id":3325,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"579:11:18","nodeType":"FunctionDefinition","parameters":{"id":3285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3284,"mutability":"mutable","name":"error","nameLocation":"604:5:18","nodeType":"VariableDeclaration","scope":3325,"src":"591:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3283,"nodeType":"UserDefinedTypeName","pathNode":{"id":3282,"name":"RecoverError","nodeType":"IdentifierPath","referencedDeclaration":3281,"src":"591:12:18"},"referencedDeclaration":3281,"src":"591:12:18","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"590:20:18"},"returnParameters":{"id":3286,"nodeType":"ParameterList","parameters":[],"src":"624:0:18"},"scope":3632,"src":"570:511:18","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":3370,"nodeType":"Block","src":"2249:626:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3338,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3330,"src":"2263:9:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2263:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":3340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2283:2:18","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2263:22:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3368,"nodeType":"Block","src":"2788:81:18","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":3362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2818:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3361,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2810:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3360,"name":"address","nodeType":"ElementaryTypeName","src":"2810:7:18","typeDescriptions":{}}},"id":3363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2810:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3364,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3281,"src":"2822:12:18","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3281_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3365,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":3278,"src":"2822:35:18","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"}}],"id":3366,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2809:49:18","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3281_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":3337,"id":3367,"nodeType":"Return","src":"2802:56:18"}]},"id":3369,"nodeType":"IfStatement","src":"2259:610:18","trueBody":{"id":3359,"nodeType":"Block","src":"2287:495:18","statements":[{"assignments":[3343],"declarations":[{"constant":false,"id":3343,"mutability":"mutable","name":"r","nameLocation":"2309:1:18","nodeType":"VariableDeclaration","scope":3359,"src":"2301:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3342,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2301:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3344,"nodeType":"VariableDeclarationStatement","src":"2301:9:18"},{"assignments":[3346],"declarations":[{"constant":false,"id":3346,"mutability":"mutable","name":"s","nameLocation":"2332:1:18","nodeType":"VariableDeclaration","scope":3359,"src":"2324:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3345,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2324:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3347,"nodeType":"VariableDeclarationStatement","src":"2324:9:18"},{"assignments":[3349],"declarations":[{"constant":false,"id":3349,"mutability":"mutable","name":"v","nameLocation":"2353:1:18","nodeType":"VariableDeclaration","scope":3359,"src":"2347:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3348,"name":"uint8","nodeType":"ElementaryTypeName","src":"2347:5:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":3350,"nodeType":"VariableDeclarationStatement","src":"2347:7:18"},{"AST":{"nodeType":"YulBlock","src":"2555:171:18","statements":[{"nodeType":"YulAssignment","src":"2573:32:18","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2588:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"2599:4:18","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2584:3:18"},"nodeType":"YulFunctionCall","src":"2584:20:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2578:5:18"},"nodeType":"YulFunctionCall","src":"2578:27:18"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2573:1:18"}]},{"nodeType":"YulAssignment","src":"2622:32:18","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2637:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"2648:4:18","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2633:3:18"},"nodeType":"YulFunctionCall","src":"2633:20:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2627:5:18"},"nodeType":"YulFunctionCall","src":"2627:27:18"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2622:1:18"}]},{"nodeType":"YulAssignment","src":"2671:41:18","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2681:1:18","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2694:9:18"},{"kind":"number","nodeType":"YulLiteral","src":"2705:4:18","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2690:3:18"},"nodeType":"YulFunctionCall","src":"2690:20:18"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2684:5:18"},"nodeType":"YulFunctionCall","src":"2684:27:18"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"2676:4:18"},"nodeType":"YulFunctionCall","src":"2676:36:18"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"2671:1:18"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":3343,"isOffset":false,"isSlot":false,"src":"2573:1:18","valueSize":1},{"declaration":3346,"isOffset":false,"isSlot":false,"src":"2622:1:18","valueSize":1},{"declaration":3330,"isOffset":false,"isSlot":false,"src":"2588:9:18","valueSize":1},{"declaration":3330,"isOffset":false,"isSlot":false,"src":"2637:9:18","valueSize":1},{"declaration":3330,"isOffset":false,"isSlot":false,"src":"2694:9:18","valueSize":1},{"declaration":3349,"isOffset":false,"isSlot":false,"src":"2671:1:18","valueSize":1}],"id":3351,"nodeType":"InlineAssembly","src":"2546:180:18"},{"expression":{"arguments":[{"id":3353,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3328,"src":"2757:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3354,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3349,"src":"2763:1:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3355,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3343,"src":"2766:1:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3356,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3346,"src":"2769:1:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3352,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3371,3445,3539],"referencedDeclaration":3539,"src":"2746:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3281_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":3357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2746:25:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3281_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":3337,"id":3358,"nodeType":"Return","src":"2739:32:18"}]}}]},"documentation":{"id":3326,"nodeType":"StructuredDocumentation","src":"1087:1053:18","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"id":3371,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2154:10:18","nodeType":"FunctionDefinition","parameters":{"id":3331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3328,"mutability":"mutable","name":"hash","nameLocation":"2173:4:18","nodeType":"VariableDeclaration","scope":3371,"src":"2165:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3327,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2165:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3330,"mutability":"mutable","name":"signature","nameLocation":"2192:9:18","nodeType":"VariableDeclaration","scope":3371,"src":"2179:22:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3329,"name":"bytes","nodeType":"ElementaryTypeName","src":"2179:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2164:38:18"},"returnParameters":{"id":3337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3333,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3371,"src":"2226:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3332,"name":"address","nodeType":"ElementaryTypeName","src":"2226:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3336,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3371,"src":"2235:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3335,"nodeType":"UserDefinedTypeName","pathNode":{"id":3334,"name":"RecoverError","nodeType":"IdentifierPath","referencedDeclaration":3281,"src":"2235:12:18"},"referencedDeclaration":3281,"src":"2235:12:18","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"2225:23:18"},"scope":3632,"src":"2145:730:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3397,"nodeType":"Block","src":"3748:140:18","statements":[{"assignments":[3382,3385],"declarations":[{"constant":false,"id":3382,"mutability":"mutable","name":"recovered","nameLocation":"3767:9:18","nodeType":"VariableDeclaration","scope":3397,"src":"3759:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3381,"name":"address","nodeType":"ElementaryTypeName","src":"3759:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3385,"mutability":"mutable","name":"error","nameLocation":"3791:5:18","nodeType":"VariableDeclaration","scope":3397,"src":"3778:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3384,"nodeType":"UserDefinedTypeName","pathNode":{"id":3383,"name":"RecoverError","nodeType":"IdentifierPath","referencedDeclaration":3281,"src":"3778:12:18"},"referencedDeclaration":3281,"src":"3778:12:18","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":3390,"initialValue":{"arguments":[{"id":3387,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3374,"src":"3811:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3388,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3376,"src":"3817:9:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3386,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3371,3445,3539],"referencedDeclaration":3371,"src":"3800:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$3281_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError)"}},"id":3389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3800:27:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3281_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"3758:69:18"},{"expression":{"arguments":[{"id":3392,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3385,"src":"3849:5:18","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"}],"id":3391,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3325,"src":"3837:11:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$3281_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":3393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3837:18:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3394,"nodeType":"ExpressionStatement","src":"3837:18:18"},{"expression":{"id":3395,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3382,"src":"3872:9:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3380,"id":3396,"nodeType":"Return","src":"3865:16:18"}]},"documentation":{"id":3372,"nodeType":"StructuredDocumentation","src":"2881:775:18","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"id":3398,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3670:7:18","nodeType":"FunctionDefinition","parameters":{"id":3377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3374,"mutability":"mutable","name":"hash","nameLocation":"3686:4:18","nodeType":"VariableDeclaration","scope":3398,"src":"3678:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3373,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3678:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3376,"mutability":"mutable","name":"signature","nameLocation":"3705:9:18","nodeType":"VariableDeclaration","scope":3398,"src":"3692:22:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3375,"name":"bytes","nodeType":"ElementaryTypeName","src":"3692:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3677:38:18"},"returnParameters":{"id":3380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3379,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3398,"src":"3739:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3378,"name":"address","nodeType":"ElementaryTypeName","src":"3739:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3738:9:18"},"scope":3632,"src":"3661:227:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3444,"nodeType":"Block","src":"4275:203:18","statements":[{"assignments":[3414],"declarations":[{"constant":false,"id":3414,"mutability":"mutable","name":"s","nameLocation":"4293:1:18","nodeType":"VariableDeclaration","scope":3444,"src":"4285:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3413,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4285:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3421,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3415,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3405,"src":"4297:2:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":3418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4310:66:18","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":3417,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4302:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3416,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4302:7:18","typeDescriptions":{}}},"id":3419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4302:75:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4297:80:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4285:92:18"},{"assignments":[3423],"declarations":[{"constant":false,"id":3423,"mutability":"mutable","name":"v","nameLocation":"4393:1:18","nodeType":"VariableDeclaration","scope":3444,"src":"4387:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3422,"name":"uint8","nodeType":"ElementaryTypeName","src":"4387:5:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":3436,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3428,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3405,"src":"4412:2:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3427,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4404:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3426,"name":"uint256","nodeType":"ElementaryTypeName","src":"4404:7:18","typeDescriptions":{}}},"id":3429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4404:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":3430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4419:3:18","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4404:18:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3432,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4403:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":3433,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4426:2:18","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4403:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3425,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4397:5:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3424,"name":"uint8","nodeType":"ElementaryTypeName","src":"4397:5:18","typeDescriptions":{}}},"id":3435,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4397:32:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4387:42:18"},{"expression":{"arguments":[{"id":3438,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3401,"src":"4457:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3439,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3423,"src":"4463:1:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3440,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3403,"src":"4466:1:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3441,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3414,"src":"4469:1:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3437,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3371,3445,3539],"referencedDeclaration":3539,"src":"4446:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3281_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":3442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4446:25:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3281_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":3412,"id":3443,"nodeType":"Return","src":"4439:32:18"}]},"documentation":{"id":3399,"nodeType":"StructuredDocumentation","src":"3894:243:18","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"id":3445,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4151:10:18","nodeType":"FunctionDefinition","parameters":{"id":3406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3401,"mutability":"mutable","name":"hash","nameLocation":"4179:4:18","nodeType":"VariableDeclaration","scope":3445,"src":"4171:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3400,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4171:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3403,"mutability":"mutable","name":"r","nameLocation":"4201:1:18","nodeType":"VariableDeclaration","scope":3445,"src":"4193:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3402,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4193:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3405,"mutability":"mutable","name":"vs","nameLocation":"4220:2:18","nodeType":"VariableDeclaration","scope":3445,"src":"4212:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3404,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4212:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4161:67:18"},"returnParameters":{"id":3412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3408,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3445,"src":"4252:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3407,"name":"address","nodeType":"ElementaryTypeName","src":"4252:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3411,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3445,"src":"4261:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3410,"nodeType":"UserDefinedTypeName","pathNode":{"id":3409,"name":"RecoverError","nodeType":"IdentifierPath","referencedDeclaration":3281,"src":"4261:12:18"},"referencedDeclaration":3281,"src":"4261:12:18","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"4251:23:18"},"scope":3632,"src":"4142:336:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3474,"nodeType":"Block","src":"4759:136:18","statements":[{"assignments":[3458,3461],"declarations":[{"constant":false,"id":3458,"mutability":"mutable","name":"recovered","nameLocation":"4778:9:18","nodeType":"VariableDeclaration","scope":3474,"src":"4770:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3457,"name":"address","nodeType":"ElementaryTypeName","src":"4770:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3461,"mutability":"mutable","name":"error","nameLocation":"4802:5:18","nodeType":"VariableDeclaration","scope":3474,"src":"4789:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3460,"nodeType":"UserDefinedTypeName","pathNode":{"id":3459,"name":"RecoverError","nodeType":"IdentifierPath","referencedDeclaration":3281,"src":"4789:12:18"},"referencedDeclaration":3281,"src":"4789:12:18","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":3467,"initialValue":{"arguments":[{"id":3463,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3448,"src":"4822:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3464,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3450,"src":"4828:1:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3465,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3452,"src":"4831:2:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3462,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3371,3445,3539],"referencedDeclaration":3445,"src":"4811:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3281_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":3466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4811:23:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3281_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4769:65:18"},{"expression":{"arguments":[{"id":3469,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3461,"src":"4856:5:18","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"}],"id":3468,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3325,"src":"4844:11:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$3281_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":3470,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4844:18:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3471,"nodeType":"ExpressionStatement","src":"4844:18:18"},{"expression":{"id":3472,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3458,"src":"4879:9:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3456,"id":3473,"nodeType":"Return","src":"4872:16:18"}]},"documentation":{"id":3446,"nodeType":"StructuredDocumentation","src":"4484:154:18","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"id":3475,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4652:7:18","nodeType":"FunctionDefinition","parameters":{"id":3453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3448,"mutability":"mutable","name":"hash","nameLocation":"4677:4:18","nodeType":"VariableDeclaration","scope":3475,"src":"4669:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3447,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4669:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3450,"mutability":"mutable","name":"r","nameLocation":"4699:1:18","nodeType":"VariableDeclaration","scope":3475,"src":"4691:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3449,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4691:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3452,"mutability":"mutable","name":"vs","nameLocation":"4718:2:18","nodeType":"VariableDeclaration","scope":3475,"src":"4710:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3451,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4710:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4659:67:18"},"returnParameters":{"id":3456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3455,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3475,"src":"4750:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3454,"name":"address","nodeType":"ElementaryTypeName","src":"4750:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4749:9:18"},"scope":3632,"src":"4643:252:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3538,"nodeType":"Block","src":"5218:1345:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3494,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3484,"src":"6114:1:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3493,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6106:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3492,"name":"uint256","nodeType":"ElementaryTypeName","src":"6106:7:18","typeDescriptions":{}}},"id":3495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6106:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":3496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6119:66:18","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6106:79:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3507,"nodeType":"IfStatement","src":"6102:161:18","trueBody":{"id":3506,"nodeType":"Block","src":"6187:76:18","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":3500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6217:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3499,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6209:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3498,"name":"address","nodeType":"ElementaryTypeName","src":"6209:7:18","typeDescriptions":{}}},"id":3501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6209:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3502,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3281,"src":"6221:12:18","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3281_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3503,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":3279,"src":"6221:30:18","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"}}],"id":3504,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6208:44:18","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3281_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":3491,"id":3505,"nodeType":"Return","src":"6201:51:18"}]}},{"assignments":[3509],"declarations":[{"constant":false,"id":3509,"mutability":"mutable","name":"signer","nameLocation":"6365:6:18","nodeType":"VariableDeclaration","scope":3538,"src":"6357:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3508,"name":"address","nodeType":"ElementaryTypeName","src":"6357:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3516,"initialValue":{"arguments":[{"id":3511,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3478,"src":"6384:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3512,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3480,"src":"6390:1:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3513,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3482,"src":"6393:1:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3514,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3484,"src":"6396:1:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3510,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6374:9:18","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":3515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6374:24:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6357:41:18"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3517,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3509,"src":"6412:6:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6430:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3519,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6422:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3518,"name":"address","nodeType":"ElementaryTypeName","src":"6422:7:18","typeDescriptions":{}}},"id":3521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6422:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6412:20:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3532,"nodeType":"IfStatement","src":"6408:101:18","trueBody":{"id":3531,"nodeType":"Block","src":"6434:75:18","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":3525,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6464:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3524,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6456:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3523,"name":"address","nodeType":"ElementaryTypeName","src":"6456:7:18","typeDescriptions":{}}},"id":3526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6456:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3527,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3281,"src":"6468:12:18","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3281_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3528,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":3277,"src":"6468:29:18","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"}}],"id":3529,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6455:43:18","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3281_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":3491,"id":3530,"nodeType":"Return","src":"6448:50:18"}]}},{"expression":{"components":[{"id":3533,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3509,"src":"6527:6:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3534,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3281,"src":"6535:12:18","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$3281_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":3535,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":3276,"src":"6535:20:18","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"}}],"id":3536,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6526:30:18","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3281_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":3491,"id":3537,"nodeType":"Return","src":"6519:37:18"}]},"documentation":{"id":3476,"nodeType":"StructuredDocumentation","src":"4901:163:18","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"id":3539,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5078:10:18","nodeType":"FunctionDefinition","parameters":{"id":3485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3478,"mutability":"mutable","name":"hash","nameLocation":"5106:4:18","nodeType":"VariableDeclaration","scope":3539,"src":"5098:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3477,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5098:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3480,"mutability":"mutable","name":"v","nameLocation":"5126:1:18","nodeType":"VariableDeclaration","scope":3539,"src":"5120:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3479,"name":"uint8","nodeType":"ElementaryTypeName","src":"5120:5:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3482,"mutability":"mutable","name":"r","nameLocation":"5145:1:18","nodeType":"VariableDeclaration","scope":3539,"src":"5137:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3481,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5137:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3484,"mutability":"mutable","name":"s","nameLocation":"5164:1:18","nodeType":"VariableDeclaration","scope":3539,"src":"5156:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3483,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5156:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5088:83:18"},"returnParameters":{"id":3491,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3487,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3539,"src":"5195:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3486,"name":"address","nodeType":"ElementaryTypeName","src":"5195:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3490,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3539,"src":"5204:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3489,"nodeType":"UserDefinedTypeName","pathNode":{"id":3488,"name":"RecoverError","nodeType":"IdentifierPath","referencedDeclaration":3281,"src":"5204:12:18"},"referencedDeclaration":3281,"src":"5204:12:18","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"5194:23:18"},"scope":3632,"src":"5069:1494:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3571,"nodeType":"Block","src":"6828:138:18","statements":[{"assignments":[3554,3557],"declarations":[{"constant":false,"id":3554,"mutability":"mutable","name":"recovered","nameLocation":"6847:9:18","nodeType":"VariableDeclaration","scope":3571,"src":"6839:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3553,"name":"address","nodeType":"ElementaryTypeName","src":"6839:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3557,"mutability":"mutable","name":"error","nameLocation":"6871:5:18","nodeType":"VariableDeclaration","scope":3571,"src":"6858:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":3556,"nodeType":"UserDefinedTypeName","pathNode":{"id":3555,"name":"RecoverError","nodeType":"IdentifierPath","referencedDeclaration":3281,"src":"6858:12:18"},"referencedDeclaration":3281,"src":"6858:12:18","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":3564,"initialValue":{"arguments":[{"id":3559,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"6891:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3560,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"6897:1:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":3561,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3546,"src":"6900:1:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3562,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"6903:1:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3558,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[3371,3445,3539],"referencedDeclaration":3539,"src":"6880:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$3281_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":3563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6880:25:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$3281_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"6838:67:18"},{"expression":{"arguments":[{"id":3566,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3557,"src":"6927:5:18","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$3281","typeString":"enum ECDSA.RecoverError"}],"id":3565,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3325,"src":"6915:11:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$3281_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":3567,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6915:18:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3568,"nodeType":"ExpressionStatement","src":"6915:18:18"},{"expression":{"id":3569,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3554,"src":"6950:9:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3552,"id":3570,"nodeType":"Return","src":"6943:16:18"}]},"documentation":{"id":3540,"nodeType":"StructuredDocumentation","src":"6569:122:18","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":3572,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6705:7:18","nodeType":"FunctionDefinition","parameters":{"id":3549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3542,"mutability":"mutable","name":"hash","nameLocation":"6730:4:18","nodeType":"VariableDeclaration","scope":3572,"src":"6722:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3541,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6722:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3544,"mutability":"mutable","name":"v","nameLocation":"6750:1:18","nodeType":"VariableDeclaration","scope":3572,"src":"6744:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3543,"name":"uint8","nodeType":"ElementaryTypeName","src":"6744:5:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3546,"mutability":"mutable","name":"r","nameLocation":"6769:1:18","nodeType":"VariableDeclaration","scope":3572,"src":"6761:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3545,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6761:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3548,"mutability":"mutable","name":"s","nameLocation":"6788:1:18","nodeType":"VariableDeclaration","scope":3572,"src":"6780:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3547,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6780:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6712:83:18"},"returnParameters":{"id":3552,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3551,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3572,"src":"6819:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3550,"name":"address","nodeType":"ElementaryTypeName","src":"6819:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6818:9:18"},"scope":3632,"src":"6696:270:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3588,"nodeType":"Block","src":"7334:187:18","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","id":3583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7472:34:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},"value":"\u0019Ethereum Signed Message:\n32"},{"id":3584,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3575,"src":"7508:4:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3581,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7455:3:18","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3582,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"7455:16:18","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7455:58:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3580,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7445:9:18","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7445:69:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3579,"id":3587,"nodeType":"Return","src":"7438:76:18"}]},"documentation":{"id":3573,"nodeType":"StructuredDocumentation","src":"6972:279:18","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":3589,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7265:22:18","nodeType":"FunctionDefinition","parameters":{"id":3576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3575,"mutability":"mutable","name":"hash","nameLocation":"7296:4:18","nodeType":"VariableDeclaration","scope":3589,"src":"7288:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3574,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7288:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7287:14:18"},"returnParameters":{"id":3579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3578,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3589,"src":"7325:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3577,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7325:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7324:9:18"},"scope":3632,"src":"7256:265:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3610,"nodeType":"Block","src":"7886:116:18","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":3600,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7930:32:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":3603,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3592,"src":"7981:1:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"7981:8:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3601,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3271,"src":"7964:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$3271_$","typeString":"type(library Strings)"}},"id":3602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":3154,"src":"7964:16:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":3605,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7964:26:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3606,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3592,"src":"7992:1:18","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3598,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7913:3:18","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3599,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"7913:16:18","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3607,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7913:81:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3597,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7903:9:18","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7903:92:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3596,"id":3609,"nodeType":"Return","src":"7896:99:18"}]},"documentation":{"id":3590,"nodeType":"StructuredDocumentation","src":"7527:274:18","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":3611,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7815:22:18","nodeType":"FunctionDefinition","parameters":{"id":3593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3592,"mutability":"mutable","name":"s","nameLocation":"7851:1:18","nodeType":"VariableDeclaration","scope":3611,"src":"7838:14:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3591,"name":"bytes","nodeType":"ElementaryTypeName","src":"7838:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7837:16:18"},"returnParameters":{"id":3596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3595,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3611,"src":"7877:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3594,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7877:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7876:9:18"},"scope":3632,"src":"7806:196:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3630,"nodeType":"Block","src":"8443:92:18","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1901","id":3624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8487:10:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},"value":"\u0019\u0001"},{"id":3625,"name":"domainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3614,"src":"8499:15:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3626,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3616,"src":"8516:10:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3622,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"8470:3:18","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3623,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"8470:16:18","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8470:57:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3621,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"8460:9:18","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8460:68:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3620,"id":3629,"nodeType":"Return","src":"8453:75:18"}]},"documentation":{"id":3612,"nodeType":"StructuredDocumentation","src":"8008:328:18","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":3631,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"8350:15:18","nodeType":"FunctionDefinition","parameters":{"id":3617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3614,"mutability":"mutable","name":"domainSeparator","nameLocation":"8374:15:18","nodeType":"VariableDeclaration","scope":3631,"src":"8366:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3613,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8366:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3616,"mutability":"mutable","name":"structHash","nameLocation":"8399:10:18","nodeType":"VariableDeclaration","scope":3631,"src":"8391:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3615,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8391:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8365:45:18"},"returnParameters":{"id":3620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3619,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3631,"src":"8434:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3618,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8434:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8433:9:18"},"scope":3632,"src":"8341:194:18","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3633,"src":"369:8168:18","usedErrors":[]}],"src":"112:8426:18"},"id":18},"@openzeppelin/contracts/utils/cryptography/EIP712.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/EIP712.sol","exportedSymbols":{"ECDSA":[3632],"EIP712":[3786],"Math":[4687],"Strings":[3271]},"id":3787,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3634,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"113:23:19"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","file":"./ECDSA.sol","id":3635,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3787,"sourceUnit":3633,"src":"138:21:19","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"EIP712","contractDependencies":[],"contractKind":"contract","documentation":{"id":3636,"nodeType":"StructuredDocumentation","src":"161:1142:19","text":" @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n they need in their contracts using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n _Available since v3.4._"},"fullyImplemented":true,"id":3786,"linearizedBaseContracts":[3786],"name":"EIP712","nameLocation":"1322:6:19","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":3638,"mutability":"immutable","name":"_CACHED_DOMAIN_SEPARATOR","nameLocation":"1598:24:19","nodeType":"VariableDeclaration","scope":3786,"src":"1572:50:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3637,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1572:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":3640,"mutability":"immutable","name":"_CACHED_CHAIN_ID","nameLocation":"1654:16:19","nodeType":"VariableDeclaration","scope":3786,"src":"1628:42:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3639,"name":"uint256","nodeType":"ElementaryTypeName","src":"1628:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":3642,"mutability":"immutable","name":"_CACHED_THIS","nameLocation":"1702:12:19","nodeType":"VariableDeclaration","scope":3786,"src":"1676:38:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3641,"name":"address","nodeType":"ElementaryTypeName","src":"1676:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":3644,"mutability":"immutable","name":"_HASHED_NAME","nameLocation":"1747:12:19","nodeType":"VariableDeclaration","scope":3786,"src":"1721:38:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3643,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1721:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":3646,"mutability":"immutable","name":"_HASHED_VERSION","nameLocation":"1791:15:19","nodeType":"VariableDeclaration","scope":3786,"src":"1765:41:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3645,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1765:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":3648,"mutability":"immutable","name":"_TYPE_HASH","nameLocation":"1838:10:19","nodeType":"VariableDeclaration","scope":3786,"src":"1812:36:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3647,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1812:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"body":{"id":3712,"nodeType":"Block","src":"2519:547:19","statements":[{"assignments":[3657],"declarations":[{"constant":false,"id":3657,"mutability":"mutable","name":"hashedName","nameLocation":"2537:10:19","nodeType":"VariableDeclaration","scope":3712,"src":"2529:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3656,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2529:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3664,"initialValue":{"arguments":[{"arguments":[{"id":3661,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3651,"src":"2566:4:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3660,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2560:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3659,"name":"bytes","nodeType":"ElementaryTypeName","src":"2560:5:19","typeDescriptions":{}}},"id":3662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2560:11:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3658,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2550:9:19","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3663,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2550:22:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2529:43:19"},{"assignments":[3666],"declarations":[{"constant":false,"id":3666,"mutability":"mutable","name":"hashedVersion","nameLocation":"2590:13:19","nodeType":"VariableDeclaration","scope":3712,"src":"2582:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3665,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2582:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3673,"initialValue":{"arguments":[{"arguments":[{"id":3670,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3653,"src":"2622:7:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3669,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2616:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3668,"name":"bytes","nodeType":"ElementaryTypeName","src":"2616:5:19","typeDescriptions":{}}},"id":3671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2616:14:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3667,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2606:9:19","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2606:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2582:49:19"},{"assignments":[3675],"declarations":[{"constant":false,"id":3675,"mutability":"mutable","name":"typeHash","nameLocation":"2649:8:19","nodeType":"VariableDeclaration","scope":3712,"src":"2641:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3674,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2641:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3679,"initialValue":{"arguments":[{"hexValue":"454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429","id":3677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2683:84:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""},"value":"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f","typeString":"literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""}],"id":3676,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2660:9:19","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3678,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2660:117:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2641:136:19"},{"expression":{"id":3682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3680,"name":"_HASHED_NAME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3644,"src":"2787:12:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3681,"name":"hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3657,"src":"2802:10:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2787:25:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3683,"nodeType":"ExpressionStatement","src":"2787:25:19"},{"expression":{"id":3686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3684,"name":"_HASHED_VERSION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3646,"src":"2822:15:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3685,"name":"hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3666,"src":"2840:13:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2822:31:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3687,"nodeType":"ExpressionStatement","src":"2822:31:19"},{"expression":{"id":3691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3688,"name":"_CACHED_CHAIN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"2863:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":3689,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2882:5:19","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"chainid","nodeType":"MemberAccess","src":"2882:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2863:32:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3692,"nodeType":"ExpressionStatement","src":"2863:32:19"},{"expression":{"id":3699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3693,"name":"_CACHED_DOMAIN_SEPARATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3638,"src":"2905:24:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3695,"name":"typeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3675,"src":"2954:8:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3696,"name":"hashedName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3657,"src":"2964:10:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3697,"name":"hashedVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3666,"src":"2976:13:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3694,"name":"_buildDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3769,"src":"2932:21:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32,bytes32) view returns (bytes32)"}},"id":3698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2932:58:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2905:85:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3700,"nodeType":"ExpressionStatement","src":"2905:85:19"},{"expression":{"id":3706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3701,"name":"_CACHED_THIS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3642,"src":"3000:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3704,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3023:4:19","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712_$3786","typeString":"contract EIP712"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712_$3786","typeString":"contract EIP712"}],"id":3703,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3015:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3702,"name":"address","nodeType":"ElementaryTypeName","src":"3015:7:19","typeDescriptions":{}}},"id":3705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3015:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3000:28:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3707,"nodeType":"ExpressionStatement","src":"3000:28:19"},{"expression":{"id":3710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3708,"name":"_TYPE_HASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3648,"src":"3038:10:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3709,"name":"typeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3675,"src":"3051:8:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3038:21:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3711,"nodeType":"ExpressionStatement","src":"3038:21:19"}]},"documentation":{"id":3649,"nodeType":"StructuredDocumentation","src":"1900:559:19","text":" @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."},"id":3713,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3651,"mutability":"mutable","name":"name","nameLocation":"2490:4:19","nodeType":"VariableDeclaration","scope":3713,"src":"2476:18:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3650,"name":"string","nodeType":"ElementaryTypeName","src":"2476:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3653,"mutability":"mutable","name":"version","nameLocation":"2510:7:19","nodeType":"VariableDeclaration","scope":3713,"src":"2496:21:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3652,"name":"string","nodeType":"ElementaryTypeName","src":"2496:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2475:43:19"},"returnParameters":{"id":3655,"nodeType":"ParameterList","parameters":[],"src":"2519:0:19"},"scope":3786,"src":"2464:602:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3741,"nodeType":"Block","src":"3214:246:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3721,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3236:4:19","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712_$3786","typeString":"contract EIP712"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712_$3786","typeString":"contract EIP712"}],"id":3720,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3228:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3719,"name":"address","nodeType":"ElementaryTypeName","src":"3228:7:19","typeDescriptions":{}}},"id":3722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3228:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3723,"name":"_CACHED_THIS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3642,"src":"3245:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3228:29:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3725,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3261:5:19","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"chainid","nodeType":"MemberAccess","src":"3261:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3727,"name":"_CACHED_CHAIN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3640,"src":"3278:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3261:33:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3228:66:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3739,"nodeType":"Block","src":"3358:96:19","statements":[{"expression":{"arguments":[{"id":3734,"name":"_TYPE_HASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3648,"src":"3401:10:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3735,"name":"_HASHED_NAME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3644,"src":"3413:12:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3736,"name":"_HASHED_VERSION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3646,"src":"3427:15:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3733,"name":"_buildDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3769,"src":"3379:21:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32,bytes32) view returns (bytes32)"}},"id":3737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3379:64:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3718,"id":3738,"nodeType":"Return","src":"3372:71:19"}]},"id":3740,"nodeType":"IfStatement","src":"3224:230:19","trueBody":{"id":3732,"nodeType":"Block","src":"3296:56:19","statements":[{"expression":{"id":3730,"name":"_CACHED_DOMAIN_SEPARATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3638,"src":"3317:24:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3718,"id":3731,"nodeType":"Return","src":"3310:31:19"}]}}]},"documentation":{"id":3714,"nodeType":"StructuredDocumentation","src":"3072:75:19","text":" @dev Returns the domain separator for the current chain."},"id":3742,"implemented":true,"kind":"function","modifiers":[],"name":"_domainSeparatorV4","nameLocation":"3161:18:19","nodeType":"FunctionDefinition","parameters":{"id":3715,"nodeType":"ParameterList","parameters":[],"src":"3179:2:19"},"returnParameters":{"id":3718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3717,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3742,"src":"3205:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3716,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3205:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3204:9:19"},"scope":3786,"src":"3152:308:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3768,"nodeType":"Block","src":"3615:108:19","statements":[{"expression":{"arguments":[{"arguments":[{"id":3756,"name":"typeHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3744,"src":"3653:8:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3757,"name":"nameHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3746,"src":"3663:8:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3758,"name":"versionHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3748,"src":"3673:11:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3759,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3686:5:19","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"chainid","nodeType":"MemberAccess","src":"3686:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":3763,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3709:4:19","typeDescriptions":{"typeIdentifier":"t_contract$_EIP712_$3786","typeString":"contract EIP712"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EIP712_$3786","typeString":"contract EIP712"}],"id":3762,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3701:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3761,"name":"address","nodeType":"ElementaryTypeName","src":"3701:7:19","typeDescriptions":{}}},"id":3764,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3701:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3754,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3642:3:19","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3755,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"3642:10:19","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3642:73:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3753,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3632:9:19","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3632:84:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3752,"id":3767,"nodeType":"Return","src":"3625:91:19"}]},"id":3769,"implemented":true,"kind":"function","modifiers":[],"name":"_buildDomainSeparator","nameLocation":"3475:21:19","nodeType":"FunctionDefinition","parameters":{"id":3749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3744,"mutability":"mutable","name":"typeHash","nameLocation":"3514:8:19","nodeType":"VariableDeclaration","scope":3769,"src":"3506:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3743,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3506:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3746,"mutability":"mutable","name":"nameHash","nameLocation":"3540:8:19","nodeType":"VariableDeclaration","scope":3769,"src":"3532:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3745,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3532:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3748,"mutability":"mutable","name":"versionHash","nameLocation":"3566:11:19","nodeType":"VariableDeclaration","scope":3769,"src":"3558:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3747,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3558:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3496:87:19"},"returnParameters":{"id":3752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3751,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3769,"src":"3606:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3750,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3606:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3605:9:19"},"scope":3786,"src":"3466:257:19","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":3784,"nodeType":"Block","src":"4434:79:19","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3779,"name":"_domainSeparatorV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3742,"src":"4473:18:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":3780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4473:20:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3781,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3772,"src":"4495:10:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3777,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3632,"src":"4451:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSA_$3632_$","typeString":"type(library ECDSA)"}},"id":3778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toTypedDataHash","nodeType":"MemberAccess","referencedDeclaration":3631,"src":"4451:21:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":3782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4451:55:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3776,"id":3783,"nodeType":"Return","src":"4444:62:19"}]},"documentation":{"id":3770,"nodeType":"StructuredDocumentation","src":"3729:614:19","text":" @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"},"id":3785,"implemented":true,"kind":"function","modifiers":[],"name":"_hashTypedDataV4","nameLocation":"4357:16:19","nodeType":"FunctionDefinition","parameters":{"id":3773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3772,"mutability":"mutable","name":"structHash","nameLocation":"4382:10:19","nodeType":"VariableDeclaration","scope":3785,"src":"4374:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3771,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4374:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4373:20:19"},"returnParameters":{"id":3776,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3775,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3785,"src":"4425:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3774,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4425:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4424:9:19"},"scope":3786,"src":"4348:165:19","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":3787,"src":"1304:3211:19","usedErrors":[]}],"src":"113:4403:19"},"id":19},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[3810],"IERC165":[3822]},"id":3811,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3788,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:20"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":3789,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3811,"sourceUnit":3823,"src":"124:23:20","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3791,"name":"IERC165","nodeType":"IdentifierPath","referencedDeclaration":3822,"src":"754:7:20"},"id":3792,"nodeType":"InheritanceSpecifier","src":"754:7:20"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":3790,"nodeType":"StructuredDocumentation","src":"149:576:20","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":3810,"linearizedBaseContracts":[3810,3822],"name":"ERC165","nameLocation":"744:6:20","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[3821],"body":{"id":3808,"nodeType":"Block","src":"920:64:20","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3801,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3795,"src":"937:11:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3803,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3822,"src":"957:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$3822_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$3822_$","typeString":"type(contract IERC165)"}],"id":3802,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"952:4:20","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"952:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$3822","typeString":"type(contract IERC165)"}},"id":3805,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"952:25:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"937:40:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3800,"id":3807,"nodeType":"Return","src":"930:47:20"}]},"documentation":{"id":3793,"nodeType":"StructuredDocumentation","src":"768:56:20","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":3809,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"838:17:20","nodeType":"FunctionDefinition","overrides":{"id":3797,"nodeType":"OverrideSpecifier","overrides":[],"src":"896:8:20"},"parameters":{"id":3796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3795,"mutability":"mutable","name":"interfaceId","nameLocation":"863:11:20","nodeType":"VariableDeclaration","scope":3809,"src":"856:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3794,"name":"bytes4","nodeType":"ElementaryTypeName","src":"856:6:20","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"855:20:20"},"returnParameters":{"id":3800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3799,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3809,"src":"914:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3798,"name":"bool","nodeType":"ElementaryTypeName","src":"914:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"913:6:20"},"scope":3810,"src":"829:155:20","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":3811,"src":"726:260:20","usedErrors":[]}],"src":"99:888:20"},"id":20},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[3822]},"id":3823,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3812,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:21"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":3813,"nodeType":"StructuredDocumentation","src":"125:279:21","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":3822,"linearizedBaseContracts":[3822],"name":"IERC165","nameLocation":"415:7:21","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3814,"nodeType":"StructuredDocumentation","src":"429:340:21","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":3821,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:21","nodeType":"FunctionDefinition","parameters":{"id":3817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3816,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:21","nodeType":"VariableDeclaration","scope":3821,"src":"801:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3815,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:21","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:21"},"returnParameters":{"id":3820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3819,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3821,"src":"844:4:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3818,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:21"},"scope":3822,"src":"774:76:21","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3823,"src":"405:447:21","usedErrors":[]}],"src":"100:753:21"},"id":21},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[4687]},"id":4688,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3824,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:22"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":3825,"nodeType":"StructuredDocumentation","src":"128:73:22","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":4687,"linearizedBaseContracts":[4687],"name":"Math","nameLocation":"210:4:22","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":3829,"members":[{"id":3826,"name":"Down","nameLocation":"245:4:22","nodeType":"EnumValue","src":"245:4:22"},{"id":3827,"name":"Up","nameLocation":"287:2:22","nodeType":"EnumValue","src":"287:2:22"},{"id":3828,"name":"Zero","nameLocation":"318:4:22","nodeType":"EnumValue","src":"318:4:22"}],"name":"Rounding","nameLocation":"226:8:22","nodeType":"EnumDefinition","src":"221:122:22"},{"body":{"id":3846,"nodeType":"Block","src":"480:37:22","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3839,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3832,"src":"497:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3840,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3834,"src":"501:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3843,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3834,"src":"509:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:22","trueExpression":{"id":3842,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3832,"src":"505:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3838,"id":3845,"nodeType":"Return","src":"490:20:22"}]},"documentation":{"id":3830,"nodeType":"StructuredDocumentation","src":"349:59:22","text":" @dev Returns the largest of two numbers."},"id":3847,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:22","nodeType":"FunctionDefinition","parameters":{"id":3835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3832,"mutability":"mutable","name":"a","nameLocation":"434:1:22","nodeType":"VariableDeclaration","scope":3847,"src":"426:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3831,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3834,"mutability":"mutable","name":"b","nameLocation":"445:1:22","nodeType":"VariableDeclaration","scope":3847,"src":"437:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3833,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:22"},"returnParameters":{"id":3838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3837,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3847,"src":"471:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3836,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:22"},"scope":4687,"src":"413:104:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3864,"nodeType":"Block","src":"655:37:22","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3857,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3850,"src":"672:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3858,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3852,"src":"676:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3861,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3852,"src":"684:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:22","trueExpression":{"id":3860,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3850,"src":"680:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3856,"id":3863,"nodeType":"Return","src":"665:20:22"}]},"documentation":{"id":3848,"nodeType":"StructuredDocumentation","src":"523:60:22","text":" @dev Returns the smallest of two numbers."},"id":3865,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:22","nodeType":"FunctionDefinition","parameters":{"id":3853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3850,"mutability":"mutable","name":"a","nameLocation":"609:1:22","nodeType":"VariableDeclaration","scope":3865,"src":"601:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3849,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3852,"mutability":"mutable","name":"b","nameLocation":"620:1:22","nodeType":"VariableDeclaration","scope":3865,"src":"612:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3851,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:22"},"returnParameters":{"id":3856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3855,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3865,"src":"646:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3854,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:22"},"scope":4687,"src":"588:104:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3887,"nodeType":"Block","src":"876:82:22","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3875,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3868,"src":"931:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3876,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3870,"src":"935:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3878,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3879,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3868,"src":"941:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3880,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3870,"src":"945:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3882,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":3883,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3874,"id":3886,"nodeType":"Return","src":"923:28:22"}]},"documentation":{"id":3866,"nodeType":"StructuredDocumentation","src":"698:102:22","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":3888,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:22","nodeType":"FunctionDefinition","parameters":{"id":3871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3868,"mutability":"mutable","name":"a","nameLocation":"830:1:22","nodeType":"VariableDeclaration","scope":3888,"src":"822:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3867,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3870,"mutability":"mutable","name":"b","nameLocation":"841:1:22","nodeType":"VariableDeclaration","scope":3888,"src":"833:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3869,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:22"},"returnParameters":{"id":3874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3873,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3888,"src":"867:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3872,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:22"},"scope":4687,"src":"805:153:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3912,"nodeType":"Block","src":"1228:123:22","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3898,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3891,"src":"1316:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3902,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3891,"src":"1330:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3905,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3906,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"1339:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3908,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:22","trueExpression":{"hexValue":"30","id":3901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3897,"id":3911,"nodeType":"Return","src":"1309:35:22"}]},"documentation":{"id":3889,"nodeType":"StructuredDocumentation","src":"964:188:22","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":3913,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:22","nodeType":"FunctionDefinition","parameters":{"id":3894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3891,"mutability":"mutable","name":"a","nameLocation":"1182:1:22","nodeType":"VariableDeclaration","scope":3913,"src":"1174:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3890,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3893,"mutability":"mutable","name":"b","nameLocation":"1193:1:22","nodeType":"VariableDeclaration","scope":3913,"src":"1185:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3892,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:22"},"returnParameters":{"id":3897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3896,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3913,"src":"1219:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3895,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:22"},"scope":4687,"src":"1157:194:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4034,"nodeType":"Block","src":"1795:3797:22","statements":[{"id":4033,"nodeType":"UncheckedBlock","src":"1805:3781:22","statements":[{"assignments":[3926],"declarations":[{"constant":false,"id":3926,"mutability":"mutable","name":"prod0","nameLocation":"2134:5:22","nodeType":"VariableDeclaration","scope":4033,"src":"2126:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3925,"name":"uint256","nodeType":"ElementaryTypeName","src":"2126:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3927,"nodeType":"VariableDeclarationStatement","src":"2126:13:22"},{"assignments":[3929],"declarations":[{"constant":false,"id":3929,"mutability":"mutable","name":"prod1","nameLocation":"2206:5:22","nodeType":"VariableDeclaration","scope":4033,"src":"2198:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3928,"name":"uint256","nodeType":"ElementaryTypeName","src":"2198:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3930,"nodeType":"VariableDeclarationStatement","src":"2198:13:22"},{"AST":{"nodeType":"YulBlock","src":"2278:157:22","statements":[{"nodeType":"YulVariableDeclaration","src":"2296:30:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2313:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"2316:1:22"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2323:1:22","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2319:3:22"},"nodeType":"YulFunctionCall","src":"2319:6:22"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2306:6:22"},"nodeType":"YulFunctionCall","src":"2306:20:22"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2300:2:22","type":""}]},{"nodeType":"YulAssignment","src":"2343:18:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2356:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"2359:1:22"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2352:3:22"},"nodeType":"YulFunctionCall","src":"2352:9:22"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2343:5:22"}]},{"nodeType":"YulAssignment","src":"2378:43:22","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2395:2:22"},{"name":"prod0","nodeType":"YulIdentifier","src":"2399:5:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2391:3:22"},"nodeType":"YulFunctionCall","src":"2391:14:22"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2410:2:22"},{"name":"prod0","nodeType":"YulIdentifier","src":"2414:5:22"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2407:2:22"},"nodeType":"YulFunctionCall","src":"2407:13:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2387:3:22"},"nodeType":"YulFunctionCall","src":"2387:34:22"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2378:5:22"}]}]},"evmVersion":"london","externalReferences":[{"declaration":3926,"isOffset":false,"isSlot":false,"src":"2343:5:22","valueSize":1},{"declaration":3926,"isOffset":false,"isSlot":false,"src":"2399:5:22","valueSize":1},{"declaration":3926,"isOffset":false,"isSlot":false,"src":"2414:5:22","valueSize":1},{"declaration":3929,"isOffset":false,"isSlot":false,"src":"2378:5:22","valueSize":1},{"declaration":3916,"isOffset":false,"isSlot":false,"src":"2313:1:22","valueSize":1},{"declaration":3916,"isOffset":false,"isSlot":false,"src":"2356:1:22","valueSize":1},{"declaration":3918,"isOffset":false,"isSlot":false,"src":"2316:1:22","valueSize":1},{"declaration":3918,"isOffset":false,"isSlot":false,"src":"2359:1:22","valueSize":1}],"id":3931,"nodeType":"InlineAssembly","src":"2269:166:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3932,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3929,"src":"2516:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2525:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2516:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3940,"nodeType":"IfStatement","src":"2512:75:22","trueBody":{"id":3939,"nodeType":"Block","src":"2528:59:22","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3935,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3926,"src":"2553:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3936,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3920,"src":"2561:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2553:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3924,"id":3938,"nodeType":"Return","src":"2546:26:22"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3942,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3920,"src":"2697:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3943,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3929,"src":"2711:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2697:19:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3941,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2689:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2689:28:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3946,"nodeType":"ExpressionStatement","src":"2689:28:22"},{"assignments":[3948],"declarations":[{"constant":false,"id":3948,"mutability":"mutable","name":"remainder","nameLocation":"2981:9:22","nodeType":"VariableDeclaration","scope":4033,"src":"2973:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3947,"name":"uint256","nodeType":"ElementaryTypeName","src":"2973:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3949,"nodeType":"VariableDeclarationStatement","src":"2973:17:22"},{"AST":{"nodeType":"YulBlock","src":"3013:291:22","statements":[{"nodeType":"YulAssignment","src":"3082:38:22","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3102:1:22"},{"name":"y","nodeType":"YulIdentifier","src":"3105:1:22"},{"name":"denominator","nodeType":"YulIdentifier","src":"3108:11:22"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3095:6:22"},"nodeType":"YulFunctionCall","src":"3095:25:22"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3082:9:22"}]},{"nodeType":"YulAssignment","src":"3202:41:22","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3215:5:22"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3225:9:22"},{"name":"prod0","nodeType":"YulIdentifier","src":"3236:5:22"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3222:2:22"},"nodeType":"YulFunctionCall","src":"3222:20:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3211:3:22"},"nodeType":"YulFunctionCall","src":"3211:32:22"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3202:5:22"}]},{"nodeType":"YulAssignment","src":"3260:30:22","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3273:5:22"},{"name":"remainder","nodeType":"YulIdentifier","src":"3280:9:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3269:3:22"},"nodeType":"YulFunctionCall","src":"3269:21:22"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3260:5:22"}]}]},"evmVersion":"london","externalReferences":[{"declaration":3920,"isOffset":false,"isSlot":false,"src":"3108:11:22","valueSize":1},{"declaration":3926,"isOffset":false,"isSlot":false,"src":"3236:5:22","valueSize":1},{"declaration":3926,"isOffset":false,"isSlot":false,"src":"3260:5:22","valueSize":1},{"declaration":3926,"isOffset":false,"isSlot":false,"src":"3273:5:22","valueSize":1},{"declaration":3929,"isOffset":false,"isSlot":false,"src":"3202:5:22","valueSize":1},{"declaration":3929,"isOffset":false,"isSlot":false,"src":"3215:5:22","valueSize":1},{"declaration":3948,"isOffset":false,"isSlot":false,"src":"3082:9:22","valueSize":1},{"declaration":3948,"isOffset":false,"isSlot":false,"src":"3225:9:22","valueSize":1},{"declaration":3948,"isOffset":false,"isSlot":false,"src":"3280:9:22","valueSize":1},{"declaration":3916,"isOffset":false,"isSlot":false,"src":"3102:1:22","valueSize":1},{"declaration":3918,"isOffset":false,"isSlot":false,"src":"3105:1:22","valueSize":1}],"id":3950,"nodeType":"InlineAssembly","src":"3004:300:22"},{"assignments":[3952],"declarations":[{"constant":false,"id":3952,"mutability":"mutable","name":"twos","nameLocation":"3619:4:22","nodeType":"VariableDeclaration","scope":4033,"src":"3611:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3951,"name":"uint256","nodeType":"ElementaryTypeName","src":"3611:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3960,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3953,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3920,"src":"3626:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3641:12:22","subExpression":{"id":3954,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3920,"src":"3642:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3656:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3641:16:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3958,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3640:18:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3626:32:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3611:47:22"},{"AST":{"nodeType":"YulBlock","src":"3681:362:22","statements":[{"nodeType":"YulAssignment","src":"3746:37:22","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"3765:11:22"},{"name":"twos","nodeType":"YulIdentifier","src":"3778:4:22"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3761:3:22"},"nodeType":"YulFunctionCall","src":"3761:22:22"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"3746:11:22"}]},{"nodeType":"YulAssignment","src":"3850:25:22","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3863:5:22"},{"name":"twos","nodeType":"YulIdentifier","src":"3870:4:22"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3859:3:22"},"nodeType":"YulFunctionCall","src":"3859:16:22"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3850:5:22"}]},{"nodeType":"YulAssignment","src":"3990:39:22","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4010:1:22","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4013:4:22"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4006:3:22"},"nodeType":"YulFunctionCall","src":"4006:12:22"},{"name":"twos","nodeType":"YulIdentifier","src":"4020:4:22"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4002:3:22"},"nodeType":"YulFunctionCall","src":"4002:23:22"},{"kind":"number","nodeType":"YulLiteral","src":"4027:1:22","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3998:3:22"},"nodeType":"YulFunctionCall","src":"3998:31:22"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"3990:4:22"}]}]},"evmVersion":"london","externalReferences":[{"declaration":3920,"isOffset":false,"isSlot":false,"src":"3746:11:22","valueSize":1},{"declaration":3920,"isOffset":false,"isSlot":false,"src":"3765:11:22","valueSize":1},{"declaration":3926,"isOffset":false,"isSlot":false,"src":"3850:5:22","valueSize":1},{"declaration":3926,"isOffset":false,"isSlot":false,"src":"3863:5:22","valueSize":1},{"declaration":3952,"isOffset":false,"isSlot":false,"src":"3778:4:22","valueSize":1},{"declaration":3952,"isOffset":false,"isSlot":false,"src":"3870:4:22","valueSize":1},{"declaration":3952,"isOffset":false,"isSlot":false,"src":"3990:4:22","valueSize":1},{"declaration":3952,"isOffset":false,"isSlot":false,"src":"4013:4:22","valueSize":1},{"declaration":3952,"isOffset":false,"isSlot":false,"src":"4020:4:22","valueSize":1}],"id":3961,"nodeType":"InlineAssembly","src":"3672:371:22"},{"expression":{"id":3966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3962,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3926,"src":"4109:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3963,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3929,"src":"4118:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3964,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3952,"src":"4126:4:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4118:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4109:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3967,"nodeType":"ExpressionStatement","src":"4109:21:22"},{"assignments":[3969],"declarations":[{"constant":false,"id":3969,"mutability":"mutable","name":"inverse","nameLocation":"4456:7:22","nodeType":"VariableDeclaration","scope":4033,"src":"4448:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3968,"name":"uint256","nodeType":"ElementaryTypeName","src":"4448:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3976,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":3970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4467:1:22","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3971,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3920,"src":"4471:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4467:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3973,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4466:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":3974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4486:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4466:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4448:39:22"},{"expression":{"id":3983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3977,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3969,"src":"4704:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4715:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3979,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3920,"src":"4719:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3980,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3969,"src":"4733:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4719:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4715:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4704:36:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3984,"nodeType":"ExpressionStatement","src":"4704:36:22"},{"expression":{"id":3991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3985,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3969,"src":"4773:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4784:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3987,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3920,"src":"4788:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3988,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3969,"src":"4802:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4788:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4784:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4773:36:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3992,"nodeType":"ExpressionStatement","src":"4773:36:22"},{"expression":{"id":3999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3993,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3969,"src":"4843:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4854:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3995,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3920,"src":"4858:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3996,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3969,"src":"4872:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4858:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4854:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4843:36:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4000,"nodeType":"ExpressionStatement","src":"4843:36:22"},{"expression":{"id":4007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4001,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3969,"src":"4913:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4924:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4003,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3920,"src":"4928:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4004,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3969,"src":"4942:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4928:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4924:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4913:36:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4008,"nodeType":"ExpressionStatement","src":"4913:36:22"},{"expression":{"id":4015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4009,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3969,"src":"4983:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4010,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4994:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4011,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3920,"src":"4998:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4012,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3969,"src":"5012:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4998:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4994:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4983:36:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4016,"nodeType":"ExpressionStatement","src":"4983:36:22"},{"expression":{"id":4023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4017,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3969,"src":"5054:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":4018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5065:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4019,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3920,"src":"5069:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4020,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3969,"src":"5083:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5069:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:25:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5054:36:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4024,"nodeType":"ExpressionStatement","src":"5054:36:22"},{"expression":{"id":4029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4025,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3923,"src":"5524:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4026,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3926,"src":"5533:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4027,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3969,"src":"5541:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5533:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5524:24:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4030,"nodeType":"ExpressionStatement","src":"5524:24:22"},{"expression":{"id":4031,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3923,"src":"5569:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3924,"id":4032,"nodeType":"Return","src":"5562:13:22"}]}]},"documentation":{"id":3914,"nodeType":"StructuredDocumentation","src":"1357:305:22","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":4035,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:22","nodeType":"FunctionDefinition","parameters":{"id":3921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3916,"mutability":"mutable","name":"x","nameLocation":"1700:1:22","nodeType":"VariableDeclaration","scope":4035,"src":"1692:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3915,"name":"uint256","nodeType":"ElementaryTypeName","src":"1692:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3918,"mutability":"mutable","name":"y","nameLocation":"1719:1:22","nodeType":"VariableDeclaration","scope":4035,"src":"1711:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3917,"name":"uint256","nodeType":"ElementaryTypeName","src":"1711:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3920,"mutability":"mutable","name":"denominator","nameLocation":"1738:11:22","nodeType":"VariableDeclaration","scope":4035,"src":"1730:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3919,"name":"uint256","nodeType":"ElementaryTypeName","src":"1730:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:73:22"},"returnParameters":{"id":3924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3923,"mutability":"mutable","name":"result","nameLocation":"1787:6:22","nodeType":"VariableDeclaration","scope":4035,"src":"1779:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3922,"name":"uint256","nodeType":"ElementaryTypeName","src":"1779:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1778:16:22"},"scope":4687,"src":"1667:3925:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4078,"nodeType":"Block","src":"5872:189:22","statements":[{"assignments":[4051],"declarations":[{"constant":false,"id":4051,"mutability":"mutable","name":"result","nameLocation":"5890:6:22","nodeType":"VariableDeclaration","scope":4078,"src":"5882:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4050,"name":"uint256","nodeType":"ElementaryTypeName","src":"5882:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4057,"initialValue":{"arguments":[{"id":4053,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4038,"src":"5906:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4054,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4040,"src":"5909:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4055,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4042,"src":"5912:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4052,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[4035,4079],"referencedDeclaration":4035,"src":"5899:6:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":4056,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5899:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5882:42:22"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3829","typeString":"enum Math.Rounding"},"id":4061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4058,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4045,"src":"5938:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3829","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4059,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3829,"src":"5950:8:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3829_$","typeString":"type(enum Math.Rounding)"}},"id":4060,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3827,"src":"5950:11:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3829","typeString":"enum Math.Rounding"}},"src":"5938:23:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4063,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4038,"src":"5972:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4064,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4040,"src":"5975:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4065,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4042,"src":"5978:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4062,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5965:6:22","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":4066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5965:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5993:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5965:29:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5938:56:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4075,"nodeType":"IfStatement","src":"5934:98:22","trueBody":{"id":4074,"nodeType":"Block","src":"5996:36:22","statements":[{"expression":{"id":4072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4070,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4051,"src":"6010:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6020:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6010:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4073,"nodeType":"ExpressionStatement","src":"6010:11:22"}]}},{"expression":{"id":4076,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4051,"src":"6048:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4049,"id":4077,"nodeType":"Return","src":"6041:13:22"}]},"documentation":{"id":4036,"nodeType":"StructuredDocumentation","src":"5598:121:22","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":4079,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5733:6:22","nodeType":"FunctionDefinition","parameters":{"id":4046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4038,"mutability":"mutable","name":"x","nameLocation":"5757:1:22","nodeType":"VariableDeclaration","scope":4079,"src":"5749:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4037,"name":"uint256","nodeType":"ElementaryTypeName","src":"5749:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4040,"mutability":"mutable","name":"y","nameLocation":"5776:1:22","nodeType":"VariableDeclaration","scope":4079,"src":"5768:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4039,"name":"uint256","nodeType":"ElementaryTypeName","src":"5768:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4042,"mutability":"mutable","name":"denominator","nameLocation":"5795:11:22","nodeType":"VariableDeclaration","scope":4079,"src":"5787:19:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4041,"name":"uint256","nodeType":"ElementaryTypeName","src":"5787:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4045,"mutability":"mutable","name":"rounding","nameLocation":"5825:8:22","nodeType":"VariableDeclaration","scope":4079,"src":"5816:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3829","typeString":"enum Math.Rounding"},"typeName":{"id":4044,"nodeType":"UserDefinedTypeName","pathNode":{"id":4043,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":3829,"src":"5816:8:22"},"referencedDeclaration":3829,"src":"5816:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3829","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"5739:100:22"},"returnParameters":{"id":4049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4048,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4079,"src":"5863:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4047,"name":"uint256","nodeType":"ElementaryTypeName","src":"5863:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5862:9:22"},"scope":4687,"src":"5724:337:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4190,"nodeType":"Block","src":"6337:1585:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4087,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"6351:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6356:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6351:6:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4093,"nodeType":"IfStatement","src":"6347:45:22","trueBody":{"id":4092,"nodeType":"Block","src":"6359:33:22","statements":[{"expression":{"hexValue":"30","id":4090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6380:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":4086,"id":4091,"nodeType":"Return","src":"6373:8:22"}]}},{"assignments":[4095],"declarations":[{"constant":false,"id":4095,"mutability":"mutable","name":"result","nameLocation":"7079:6:22","nodeType":"VariableDeclaration","scope":4190,"src":"7071:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4094,"name":"uint256","nodeType":"ElementaryTypeName","src":"7071:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4104,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7088:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4098,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"7099:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4097,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[4359,4395],"referencedDeclaration":4359,"src":"7094:4:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7094:7:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4100,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7105:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7094:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4102,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7093:14:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7088:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7071:36:22"},{"id":4189,"nodeType":"UncheckedBlock","src":"7508:408:22","statements":[{"expression":{"id":4114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4105,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4095,"src":"7532:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4106,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4095,"src":"7542:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4107,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"7551:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4108,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4095,"src":"7555:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7551:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7542:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4111,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7541:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7566:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7541:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7532:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4115,"nodeType":"ExpressionStatement","src":"7532:35:22"},{"expression":{"id":4125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4116,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4095,"src":"7581:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4117,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4095,"src":"7591:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4118,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"7600:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4119,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4095,"src":"7604:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7600:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7591:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4122,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7590:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7615:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7590:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7581:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4126,"nodeType":"ExpressionStatement","src":"7581:35:22"},{"expression":{"id":4136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4127,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4095,"src":"7630:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4128,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4095,"src":"7640:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4129,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"7649:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4130,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4095,"src":"7653:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7649:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7640:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4133,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7639:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7664:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7639:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7630:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4137,"nodeType":"ExpressionStatement","src":"7630:35:22"},{"expression":{"id":4147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4138,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4095,"src":"7679:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4139,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4095,"src":"7689:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4140,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"7698:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4141,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4095,"src":"7702:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7698:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7689:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4144,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7688:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7713:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7688:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7679:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4148,"nodeType":"ExpressionStatement","src":"7679:35:22"},{"expression":{"id":4158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4149,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4095,"src":"7728:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4150,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4095,"src":"7738:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4151,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"7747:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4152,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4095,"src":"7751:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7747:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7738:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4155,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7737:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7762:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7737:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7728:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4159,"nodeType":"ExpressionStatement","src":"7728:35:22"},{"expression":{"id":4169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4160,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4095,"src":"7777:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4161,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4095,"src":"7787:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4162,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"7796:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4163,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4095,"src":"7800:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7796:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7787:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4166,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7786:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7811:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7786:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7777:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4170,"nodeType":"ExpressionStatement","src":"7777:35:22"},{"expression":{"id":4180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4171,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4095,"src":"7826:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4172,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4095,"src":"7836:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4173,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"7845:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4174,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4095,"src":"7849:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7845:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7836:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4177,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7835:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7860:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7835:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7826:35:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4181,"nodeType":"ExpressionStatement","src":"7826:35:22"},{"expression":{"arguments":[{"id":4183,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4095,"src":"7886:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4184,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"7894:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4185,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4095,"src":"7898:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7894:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4182,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3865,"src":"7882:3:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7882:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4086,"id":4188,"nodeType":"Return","src":"7875:30:22"}]}]},"documentation":{"id":4080,"nodeType":"StructuredDocumentation","src":"6067:208:22","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":4191,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6289:4:22","nodeType":"FunctionDefinition","parameters":{"id":4083,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4082,"mutability":"mutable","name":"a","nameLocation":"6302:1:22","nodeType":"VariableDeclaration","scope":4191,"src":"6294:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4081,"name":"uint256","nodeType":"ElementaryTypeName","src":"6294:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6293:11:22"},"returnParameters":{"id":4086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4085,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4191,"src":"6328:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4084,"name":"uint256","nodeType":"ElementaryTypeName","src":"6328:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6327:9:22"},"scope":4687,"src":"6280:1642:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4226,"nodeType":"Block","src":"8098:161:22","statements":[{"id":4225,"nodeType":"UncheckedBlock","src":"8108:145:22","statements":[{"assignments":[4203],"declarations":[{"constant":false,"id":4203,"mutability":"mutable","name":"result","nameLocation":"8140:6:22","nodeType":"VariableDeclaration","scope":4225,"src":"8132:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4202,"name":"uint256","nodeType":"ElementaryTypeName","src":"8132:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4207,"initialValue":{"arguments":[{"id":4205,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4194,"src":"8154:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4204,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[4191,4227],"referencedDeclaration":4191,"src":"8149:4:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8149:7:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8132:24:22"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4208,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4203,"src":"8177:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3829","typeString":"enum Math.Rounding"},"id":4212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4209,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4197,"src":"8187:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3829","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4210,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3829,"src":"8199:8:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3829_$","typeString":"type(enum Math.Rounding)"}},"id":4211,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3827,"src":"8199:11:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3829","typeString":"enum Math.Rounding"}},"src":"8187:23:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4213,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4203,"src":"8214:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4214,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4203,"src":"8223:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4216,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4194,"src":"8232:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:19:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8187:46:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8240:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8187:54:22","trueExpression":{"hexValue":"31","id":4219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8236:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4222,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8186:56:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8177:65:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4201,"id":4224,"nodeType":"Return","src":"8170:72:22"}]}]},"documentation":{"id":4192,"nodeType":"StructuredDocumentation","src":"7928:89:22","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":4227,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8031:4:22","nodeType":"FunctionDefinition","parameters":{"id":4198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4194,"mutability":"mutable","name":"a","nameLocation":"8044:1:22","nodeType":"VariableDeclaration","scope":4227,"src":"8036:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4193,"name":"uint256","nodeType":"ElementaryTypeName","src":"8036:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4197,"mutability":"mutable","name":"rounding","nameLocation":"8056:8:22","nodeType":"VariableDeclaration","scope":4227,"src":"8047:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3829","typeString":"enum Math.Rounding"},"typeName":{"id":4196,"nodeType":"UserDefinedTypeName","pathNode":{"id":4195,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":3829,"src":"8047:8:22"},"referencedDeclaration":3829,"src":"8047:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3829","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8035:30:22"},"returnParameters":{"id":4201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4200,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4227,"src":"8089:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4199,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8088:9:22"},"scope":4687,"src":"8022:237:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4358,"nodeType":"Block","src":"8444:922:22","statements":[{"assignments":[4236],"declarations":[{"constant":false,"id":4236,"mutability":"mutable","name":"result","nameLocation":"8462:6:22","nodeType":"VariableDeclaration","scope":4358,"src":"8454:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4235,"name":"uint256","nodeType":"ElementaryTypeName","src":"8454:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4238,"initialValue":{"hexValue":"30","id":4237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8471:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8454:18:22"},{"id":4355,"nodeType":"UncheckedBlock","src":"8482:855:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4239,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4230,"src":"8510:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":4240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8519:3:22","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8510:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8525:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8510:16:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4253,"nodeType":"IfStatement","src":"8506:99:22","trueBody":{"id":4252,"nodeType":"Block","src":"8528:77:22","statements":[{"expression":{"id":4246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4244,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4230,"src":"8546:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":4245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8556:3:22","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8546:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4247,"nodeType":"ExpressionStatement","src":"8546:13:22"},{"expression":{"id":4250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4248,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4236,"src":"8577:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":4249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8587:3:22","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8577:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4251,"nodeType":"ExpressionStatement","src":"8577:13:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4254,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4230,"src":"8622:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":4255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8631:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8622:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8636:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8622:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4268,"nodeType":"IfStatement","src":"8618:96:22","trueBody":{"id":4267,"nodeType":"Block","src":"8639:75:22","statements":[{"expression":{"id":4261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4259,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4230,"src":"8657:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":4260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8667:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8657:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4262,"nodeType":"ExpressionStatement","src":"8657:12:22"},{"expression":{"id":4265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4263,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4236,"src":"8687:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":4264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8687:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4266,"nodeType":"ExpressionStatement","src":"8687:12:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4269,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4230,"src":"8731:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":4270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8740:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8731:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8745:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8731:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4283,"nodeType":"IfStatement","src":"8727:96:22","trueBody":{"id":4282,"nodeType":"Block","src":"8748:75:22","statements":[{"expression":{"id":4276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4274,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4230,"src":"8766:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":4275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8776:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8766:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4277,"nodeType":"ExpressionStatement","src":"8766:12:22"},{"expression":{"id":4280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4278,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4236,"src":"8796:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":4279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8796:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4281,"nodeType":"ExpressionStatement","src":"8796:12:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4284,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4230,"src":"8840:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":4285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8849:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8840:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8840:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4298,"nodeType":"IfStatement","src":"8836:96:22","trueBody":{"id":4297,"nodeType":"Block","src":"8857:75:22","statements":[{"expression":{"id":4291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4289,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4230,"src":"8875:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":4290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8885:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8875:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4292,"nodeType":"ExpressionStatement","src":"8875:12:22"},{"expression":{"id":4295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4293,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4236,"src":"8905:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8915:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8905:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4296,"nodeType":"ExpressionStatement","src":"8905:12:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4299,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4230,"src":"8949:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":4300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8949:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8962:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8949:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4313,"nodeType":"IfStatement","src":"8945:93:22","trueBody":{"id":4312,"nodeType":"Block","src":"8965:73:22","statements":[{"expression":{"id":4306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4304,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4230,"src":"8983:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":4305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8993:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8983:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4307,"nodeType":"ExpressionStatement","src":"8983:11:22"},{"expression":{"id":4310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4308,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4236,"src":"9012:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9022:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9012:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4311,"nodeType":"ExpressionStatement","src":"9012:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4314,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4230,"src":"9055:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":4315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9064:1:22","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9055:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9068:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9055:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4328,"nodeType":"IfStatement","src":"9051:93:22","trueBody":{"id":4327,"nodeType":"Block","src":"9071:73:22","statements":[{"expression":{"id":4321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4319,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4230,"src":"9089:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":4320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:1:22","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9089:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4322,"nodeType":"ExpressionStatement","src":"9089:11:22"},{"expression":{"id":4325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4323,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4236,"src":"9118:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9128:1:22","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9118:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4326,"nodeType":"ExpressionStatement","src":"9118:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4329,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4230,"src":"9161:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":4330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9170:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9161:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9174:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9161:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4343,"nodeType":"IfStatement","src":"9157:93:22","trueBody":{"id":4342,"nodeType":"Block","src":"9177:73:22","statements":[{"expression":{"id":4336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4334,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4230,"src":"9195:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":4335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9205:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9195:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4337,"nodeType":"ExpressionStatement","src":"9195:11:22"},{"expression":{"id":4340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4338,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4236,"src":"9224:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9234:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9224:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4341,"nodeType":"ExpressionStatement","src":"9224:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4344,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4230,"src":"9267:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9276:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9267:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9280:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9267:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4354,"nodeType":"IfStatement","src":"9263:64:22","trueBody":{"id":4353,"nodeType":"Block","src":"9283:44:22","statements":[{"expression":{"id":4351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4349,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4236,"src":"9301:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9311:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9301:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4352,"nodeType":"ExpressionStatement","src":"9301:11:22"}]}}]},{"expression":{"id":4356,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4236,"src":"9353:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4234,"id":4357,"nodeType":"Return","src":"9346:13:22"}]},"documentation":{"id":4228,"nodeType":"StructuredDocumentation","src":"8265:113:22","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":4359,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8392:4:22","nodeType":"FunctionDefinition","parameters":{"id":4231,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4230,"mutability":"mutable","name":"value","nameLocation":"8405:5:22","nodeType":"VariableDeclaration","scope":4359,"src":"8397:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4229,"name":"uint256","nodeType":"ElementaryTypeName","src":"8397:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8396:15:22"},"returnParameters":{"id":4234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4233,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4359,"src":"8435:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4232,"name":"uint256","nodeType":"ElementaryTypeName","src":"8435:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8434:9:22"},"scope":4687,"src":"8383:983:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4394,"nodeType":"Block","src":"9599:165:22","statements":[{"id":4393,"nodeType":"UncheckedBlock","src":"9609:149:22","statements":[{"assignments":[4371],"declarations":[{"constant":false,"id":4371,"mutability":"mutable","name":"result","nameLocation":"9641:6:22","nodeType":"VariableDeclaration","scope":4393,"src":"9633:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4370,"name":"uint256","nodeType":"ElementaryTypeName","src":"9633:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4375,"initialValue":{"arguments":[{"id":4373,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4362,"src":"9655:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4372,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[4359,4395],"referencedDeclaration":4359,"src":"9650:4:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4374,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9650:11:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9633:28:22"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4376,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4371,"src":"9682:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3829","typeString":"enum Math.Rounding"},"id":4380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4377,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4365,"src":"9692:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3829","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4378,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3829,"src":"9704:8:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3829_$","typeString":"type(enum Math.Rounding)"}},"id":4379,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3827,"src":"9704:11:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3829","typeString":"enum Math.Rounding"}},"src":"9692:23:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9719:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":4382,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4371,"src":"9724:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4384,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4362,"src":"9733:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:19:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9692:46:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9745:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9692:54:22","trueExpression":{"hexValue":"31","id":4387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9741:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4390,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9691:56:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9682:65:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4369,"id":4392,"nodeType":"Return","src":"9675:72:22"}]}]},"documentation":{"id":4360,"nodeType":"StructuredDocumentation","src":"9372:142:22","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4395,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9528:4:22","nodeType":"FunctionDefinition","parameters":{"id":4366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4362,"mutability":"mutable","name":"value","nameLocation":"9541:5:22","nodeType":"VariableDeclaration","scope":4395,"src":"9533:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4361,"name":"uint256","nodeType":"ElementaryTypeName","src":"9533:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4365,"mutability":"mutable","name":"rounding","nameLocation":"9557:8:22","nodeType":"VariableDeclaration","scope":4395,"src":"9548:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3829","typeString":"enum Math.Rounding"},"typeName":{"id":4364,"nodeType":"UserDefinedTypeName","pathNode":{"id":4363,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":3829,"src":"9548:8:22"},"referencedDeclaration":3829,"src":"9548:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3829","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9532:34:22"},"returnParameters":{"id":4369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4368,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4395,"src":"9590:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4367,"name":"uint256","nodeType":"ElementaryTypeName","src":"9590:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9589:9:22"},"scope":4687,"src":"9519:245:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4523,"nodeType":"Block","src":"9951:828:22","statements":[{"assignments":[4404],"declarations":[{"constant":false,"id":4404,"mutability":"mutable","name":"result","nameLocation":"9969:6:22","nodeType":"VariableDeclaration","scope":4523,"src":"9961:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4403,"name":"uint256","nodeType":"ElementaryTypeName","src":"9961:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4406,"initialValue":{"hexValue":"30","id":4405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9978:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9961:18:22"},{"id":4520,"nodeType":"UncheckedBlock","src":"9989:761:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4407,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4398,"src":"10017:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4410,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10026:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10030:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10026:6:22","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10017:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4423,"nodeType":"IfStatement","src":"10013:99:22","trueBody":{"id":4422,"nodeType":"Block","src":"10034:78:22","statements":[{"expression":{"id":4416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4412,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4398,"src":"10052:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":4415,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10061:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":4414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10065:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10061:6:22","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10052:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4417,"nodeType":"ExpressionStatement","src":"10052:15:22"},{"expression":{"id":4420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4418,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4404,"src":"10085:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":4419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10095:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10085:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4421,"nodeType":"ExpressionStatement","src":"10085:12:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4424,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4398,"src":"10129:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":4427,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10138:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10142:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10138:6:22","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10129:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4440,"nodeType":"IfStatement","src":"10125:99:22","trueBody":{"id":4439,"nodeType":"Block","src":"10146:78:22","statements":[{"expression":{"id":4433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4429,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4398,"src":"10164:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":4432,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10173:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":4431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10177:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10173:6:22","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10164:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4434,"nodeType":"ExpressionStatement","src":"10164:15:22"},{"expression":{"id":4437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4435,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4404,"src":"10197:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":4436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10207:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10197:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4438,"nodeType":"ExpressionStatement","src":"10197:12:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4441,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4398,"src":"10241:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":4444,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10250:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":4443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10254:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10250:6:22","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10241:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4457,"nodeType":"IfStatement","src":"10237:99:22","trueBody":{"id":4456,"nodeType":"Block","src":"10258:78:22","statements":[{"expression":{"id":4450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4446,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4398,"src":"10276:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":4449,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10285:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":4448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10289:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10285:6:22","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10276:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4451,"nodeType":"ExpressionStatement","src":"10276:15:22"},{"expression":{"id":4454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4452,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4404,"src":"10309:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10309:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4455,"nodeType":"ExpressionStatement","src":"10309:12:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4458,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4398,"src":"10353:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":4461,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10362:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":4460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10366:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10362:5:22","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10353:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4474,"nodeType":"IfStatement","src":"10349:96:22","trueBody":{"id":4473,"nodeType":"Block","src":"10369:76:22","statements":[{"expression":{"id":4467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4463,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4398,"src":"10387:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":4466,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10396:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":4465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10400:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10396:5:22","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10387:14:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4468,"nodeType":"ExpressionStatement","src":"10387:14:22"},{"expression":{"id":4471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4469,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4404,"src":"10419:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10419:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4472,"nodeType":"ExpressionStatement","src":"10419:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4475,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4398,"src":"10462:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":4478,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10471:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":4477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10475:1:22","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10471:5:22","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10462:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4491,"nodeType":"IfStatement","src":"10458:96:22","trueBody":{"id":4490,"nodeType":"Block","src":"10478:76:22","statements":[{"expression":{"id":4484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4480,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4398,"src":"10496:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":4483,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10505:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":4482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10509:1:22","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10505:5:22","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10496:14:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4485,"nodeType":"ExpressionStatement","src":"10496:14:22"},{"expression":{"id":4488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4486,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4404,"src":"10528:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10538:1:22","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10528:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4489,"nodeType":"ExpressionStatement","src":"10528:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4492,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4398,"src":"10571:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4495,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10580:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10584:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10580:5:22","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10571:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4508,"nodeType":"IfStatement","src":"10567:96:22","trueBody":{"id":4507,"nodeType":"Block","src":"10587:76:22","statements":[{"expression":{"id":4501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4497,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4398,"src":"10605:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4500,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4498,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10614:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10618:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10614:5:22","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10605:14:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4502,"nodeType":"ExpressionStatement","src":"10605:14:22"},{"expression":{"id":4505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4503,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4404,"src":"10637:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10647:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10637:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4506,"nodeType":"ExpressionStatement","src":"10637:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4509,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4398,"src":"10680:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":4512,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10689:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":4511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10693:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10689:5:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10680:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4519,"nodeType":"IfStatement","src":"10676:64:22","trueBody":{"id":4518,"nodeType":"Block","src":"10696:44:22","statements":[{"expression":{"id":4516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4514,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4404,"src":"10714:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10724:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10714:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4517,"nodeType":"ExpressionStatement","src":"10714:11:22"}]}}]},{"expression":{"id":4521,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4404,"src":"10766:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4402,"id":4522,"nodeType":"Return","src":"10759:13:22"}]},"documentation":{"id":4396,"nodeType":"StructuredDocumentation","src":"9770:114:22","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":4524,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9898:5:22","nodeType":"FunctionDefinition","parameters":{"id":4399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4398,"mutability":"mutable","name":"value","nameLocation":"9912:5:22","nodeType":"VariableDeclaration","scope":4524,"src":"9904:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4397,"name":"uint256","nodeType":"ElementaryTypeName","src":"9904:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9903:15:22"},"returnParameters":{"id":4402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4401,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4524,"src":"9942:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4400,"name":"uint256","nodeType":"ElementaryTypeName","src":"9942:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9941:9:22"},"scope":4687,"src":"9889:890:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4559,"nodeType":"Block","src":"11014:165:22","statements":[{"id":4558,"nodeType":"UncheckedBlock","src":"11024:149:22","statements":[{"assignments":[4536],"declarations":[{"constant":false,"id":4536,"mutability":"mutable","name":"result","nameLocation":"11056:6:22","nodeType":"VariableDeclaration","scope":4558,"src":"11048:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4535,"name":"uint256","nodeType":"ElementaryTypeName","src":"11048:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4540,"initialValue":{"arguments":[{"id":4538,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4527,"src":"11071:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4537,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[4524,4560],"referencedDeclaration":4524,"src":"11065:5:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11065:12:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11048:29:22"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4541,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4536,"src":"11098:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3829","typeString":"enum Math.Rounding"},"id":4545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4542,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4530,"src":"11108:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3829","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4543,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3829,"src":"11120:8:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3829_$","typeString":"type(enum Math.Rounding)"}},"id":4544,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3827,"src":"11120:11:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3829","typeString":"enum Math.Rounding"}},"src":"11108:23:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11135:2:22","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":4547,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4536,"src":"11139:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4549,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4527,"src":"11148:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:18:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11108:45:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11160:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11108:53:22","trueExpression":{"hexValue":"31","id":4552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11156:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4555,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11107:55:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11098:64:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4534,"id":4557,"nodeType":"Return","src":"11091:71:22"}]}]},"documentation":{"id":4525,"nodeType":"StructuredDocumentation","src":"10785:143:22","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4560,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10942:5:22","nodeType":"FunctionDefinition","parameters":{"id":4531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4527,"mutability":"mutable","name":"value","nameLocation":"10956:5:22","nodeType":"VariableDeclaration","scope":4560,"src":"10948:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4526,"name":"uint256","nodeType":"ElementaryTypeName","src":"10948:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4530,"mutability":"mutable","name":"rounding","nameLocation":"10972:8:22","nodeType":"VariableDeclaration","scope":4560,"src":"10963:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3829","typeString":"enum Math.Rounding"},"typeName":{"id":4529,"nodeType":"UserDefinedTypeName","pathNode":{"id":4528,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":3829,"src":"10963:8:22"},"referencedDeclaration":3829,"src":"10963:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3829","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10947:34:22"},"returnParameters":{"id":4534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4533,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4560,"src":"11005:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4532,"name":"uint256","nodeType":"ElementaryTypeName","src":"11005:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11004:9:22"},"scope":4687,"src":"10933:246:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4646,"nodeType":"Block","src":"11493:600:22","statements":[{"assignments":[4569],"declarations":[{"constant":false,"id":4569,"mutability":"mutable","name":"result","nameLocation":"11511:6:22","nodeType":"VariableDeclaration","scope":4646,"src":"11503:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4568,"name":"uint256","nodeType":"ElementaryTypeName","src":"11503:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4571,"initialValue":{"hexValue":"30","id":4570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11520:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11503:18:22"},{"id":4643,"nodeType":"UncheckedBlock","src":"11531:533:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4572,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4563,"src":"11559:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":4573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11568:3:22","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11559:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11559:16:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4586,"nodeType":"IfStatement","src":"11555:98:22","trueBody":{"id":4585,"nodeType":"Block","src":"11577:76:22","statements":[{"expression":{"id":4579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4577,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4563,"src":"11595:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":4578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11605:3:22","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11595:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4580,"nodeType":"ExpressionStatement","src":"11595:13:22"},{"expression":{"id":4583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4581,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4569,"src":"11626:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11636:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11626:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4584,"nodeType":"ExpressionStatement","src":"11626:12:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4587,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4563,"src":"11670:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":4588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11679:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11670:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11684:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11670:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4601,"nodeType":"IfStatement","src":"11666:95:22","trueBody":{"id":4600,"nodeType":"Block","src":"11687:74:22","statements":[{"expression":{"id":4594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4592,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4563,"src":"11705:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":4593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11715:2:22","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11705:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4595,"nodeType":"ExpressionStatement","src":"11705:12:22"},{"expression":{"id":4598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4596,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4569,"src":"11735:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11745:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11735:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4599,"nodeType":"ExpressionStatement","src":"11735:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4602,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4563,"src":"11778:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":4603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11787:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11778:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11792:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11778:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4616,"nodeType":"IfStatement","src":"11774:95:22","trueBody":{"id":4615,"nodeType":"Block","src":"11795:74:22","statements":[{"expression":{"id":4609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4607,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4563,"src":"11813:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":4608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11823:2:22","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11813:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4610,"nodeType":"ExpressionStatement","src":"11813:12:22"},{"expression":{"id":4613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4611,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4569,"src":"11843:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11853:1:22","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11843:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4614,"nodeType":"ExpressionStatement","src":"11843:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4617,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4563,"src":"11886:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":4618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11895:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11886:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11900:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11886:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4631,"nodeType":"IfStatement","src":"11882:95:22","trueBody":{"id":4630,"nodeType":"Block","src":"11903:74:22","statements":[{"expression":{"id":4624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4622,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4563,"src":"11921:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":4623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11931:2:22","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11921:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4625,"nodeType":"ExpressionStatement","src":"11921:12:22"},{"expression":{"id":4628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4626,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4569,"src":"11951:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11961:1:22","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11951:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4629,"nodeType":"ExpressionStatement","src":"11951:11:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4632,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4563,"src":"11994:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":4633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12003:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11994:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12007:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11994:14:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4642,"nodeType":"IfStatement","src":"11990:64:22","trueBody":{"id":4641,"nodeType":"Block","src":"12010:44:22","statements":[{"expression":{"id":4639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4637,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4569,"src":"12028:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12028:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4640,"nodeType":"ExpressionStatement","src":"12028:11:22"}]}}]},{"expression":{"id":4644,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4569,"src":"12080:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4567,"id":4645,"nodeType":"Return","src":"12073:13:22"}]},"documentation":{"id":4561,"nodeType":"StructuredDocumentation","src":"11185:240:22","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":4647,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11439:6:22","nodeType":"FunctionDefinition","parameters":{"id":4564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4563,"mutability":"mutable","name":"value","nameLocation":"11454:5:22","nodeType":"VariableDeclaration","scope":4647,"src":"11446:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4562,"name":"uint256","nodeType":"ElementaryTypeName","src":"11446:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11445:15:22"},"returnParameters":{"id":4567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4566,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4647,"src":"11484:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4565,"name":"uint256","nodeType":"ElementaryTypeName","src":"11484:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11483:9:22"},"scope":4687,"src":"11430:663:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4685,"nodeType":"Block","src":"12329:173:22","statements":[{"id":4684,"nodeType":"UncheckedBlock","src":"12339:157:22","statements":[{"assignments":[4659],"declarations":[{"constant":false,"id":4659,"mutability":"mutable","name":"result","nameLocation":"12371:6:22","nodeType":"VariableDeclaration","scope":4684,"src":"12363:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4658,"name":"uint256","nodeType":"ElementaryTypeName","src":"12363:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4663,"initialValue":{"arguments":[{"id":4661,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"12387:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4660,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[4647,4686],"referencedDeclaration":4647,"src":"12380:6:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12380:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12363:30:22"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4664,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4659,"src":"12414:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3829","typeString":"enum Math.Rounding"},"id":4668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4665,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4653,"src":"12424:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3829","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4666,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3829,"src":"12436:8:22","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3829_$","typeString":"type(enum Math.Rounding)"}},"id":4667,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3827,"src":"12436:11:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3829","typeString":"enum Math.Rounding"}},"src":"12424:23:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12451:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4670,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4659,"src":"12457:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":4671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12466:1:22","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12457:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4673,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12456:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4675,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4650,"src":"12471:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:25:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12424:52:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12483:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12424:60:22","trueExpression":{"hexValue":"31","id":4678,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12479:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4681,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12423:62:22","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12414:71:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4657,"id":4683,"nodeType":"Return","src":"12407:78:22"}]}]},"documentation":{"id":4648,"nodeType":"StructuredDocumentation","src":"12099:143:22","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4686,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12256:6:22","nodeType":"FunctionDefinition","parameters":{"id":4654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4650,"mutability":"mutable","name":"value","nameLocation":"12271:5:22","nodeType":"VariableDeclaration","scope":4686,"src":"12263:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4649,"name":"uint256","nodeType":"ElementaryTypeName","src":"12263:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4653,"mutability":"mutable","name":"rounding","nameLocation":"12287:8:22","nodeType":"VariableDeclaration","scope":4686,"src":"12278:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3829","typeString":"enum Math.Rounding"},"typeName":{"id":4652,"nodeType":"UserDefinedTypeName","pathNode":{"id":4651,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":3829,"src":"12278:8:22"},"referencedDeclaration":3829,"src":"12278:8:22","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3829","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12262:34:22"},"returnParameters":{"id":4657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4656,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4686,"src":"12320:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4655,"name":"uint256","nodeType":"ElementaryTypeName","src":"12320:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12319:9:22"},"scope":4687,"src":"12247:255:22","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4688,"src":"202:12302:22","usedErrors":[]}],"src":"103:12402:22"},"id":22},"contracts/ERC20_BASE.sol":{"ast":{"absolutePath":"contracts/ERC20_BASE.sol","exportedSymbols":{"Context":[3022],"ERC20":[699],"ERC20Burnable":[821],"IERC20":[777],"IERC20Metadata":[846],"Token":[4721]},"id":4722,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4689,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"32:23:23"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","file":"@openzeppelin/contracts/token/ERC20/ERC20.sol","id":4690,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4722,"sourceUnit":700,"src":"57:55:23","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol","file":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol","id":4691,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4722,"sourceUnit":822,"src":"113:74:23","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4692,"name":"ERC20","nodeType":"IdentifierPath","referencedDeclaration":699,"src":"207:5:23"},"id":4693,"nodeType":"InheritanceSpecifier","src":"207:5:23"},{"baseName":{"id":4694,"name":"ERC20Burnable","nodeType":"IdentifierPath","referencedDeclaration":821,"src":"214:13:23"},"id":4695,"nodeType":"InheritanceSpecifier","src":"214:13:23"}],"canonicalName":"Token","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4721,"linearizedBaseContracts":[4721,821,699,846,777,3022],"name":"Token","nameLocation":"198:5:23","nodeType":"ContractDefinition","nodes":[{"body":{"id":4719,"nodeType":"Block","src":"358:63:23","statements":[{"expression":{"arguments":[{"expression":{"id":4709,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"374:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"374:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4711,"name":"max_supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4701,"src":"386:10:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"399:2:23","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4713,"name":"decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"403:8:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint8_$","typeString":"function () view returns (uint8)"}},"id":4714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"403:10:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"399:14:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"386:27:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4708,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":516,"src":"368:5:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"368:46:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4718,"nodeType":"ExpressionStatement","src":"368:46:23"}]},"id":4720,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":4704,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4697,"src":"344:4:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":4705,"name":"symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4699,"src":"350:6:23","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"id":4706,"kind":"baseConstructorSpecifier","modifierName":{"id":4703,"name":"ERC20","nodeType":"IdentifierPath","referencedDeclaration":699,"src":"338:5:23"},"nodeType":"ModifierInvocation","src":"338:19:23"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4697,"mutability":"mutable","name":"name","nameLocation":"269:4:23","nodeType":"VariableDeclaration","scope":4720,"src":"255:18:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4696,"name":"string","nodeType":"ElementaryTypeName","src":"255:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4699,"mutability":"mutable","name":"symbol","nameLocation":"297:6:23","nodeType":"VariableDeclaration","scope":4720,"src":"283:20:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4698,"name":"string","nodeType":"ElementaryTypeName","src":"283:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4701,"mutability":"mutable","name":"max_supply","nameLocation":"321:10:23","nodeType":"VariableDeclaration","scope":4720,"src":"313:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4700,"name":"uint256","nodeType":"ElementaryTypeName","src":"313:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"245:92:23"},"returnParameters":{"id":4707,"nodeType":"ParameterList","parameters":[],"src":"358:0:23"},"scope":4721,"src":"234:187:23","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":4722,"src":"189:234:23","usedErrors":[]}],"src":"32:392:23"},"id":23},"contracts/ERC20_BASE_PERMIT.sol":{"ast":{"absolutePath":"contracts/ERC20_BASE_PERMIT.sol","exportedSymbols":{"Context":[3022],"Counters":[3096],"ECDSA":[3632],"EIP712":[3786],"ERC20":[699],"ERC20Burnable":[821],"ERC20Permit":[1018],"IERC20":[777],"IERC20Metadata":[846],"IERC20Permit":[1054],"Math":[4687],"Strings":[3271],"Token":[4761]},"id":4762,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4723,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"32:23:24"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","file":"@openzeppelin/contracts/token/ERC20/ERC20.sol","id":4724,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4762,"sourceUnit":700,"src":"57:55:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol","file":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol","id":4725,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4762,"sourceUnit":822,"src":"113:74:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol","file":"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol","id":4726,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4762,"sourceUnit":1019,"src":"188:78:24","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4727,"name":"ERC20","nodeType":"IdentifierPath","referencedDeclaration":699,"src":"286:5:24"},"id":4728,"nodeType":"InheritanceSpecifier","src":"286:5:24"},{"baseName":{"id":4729,"name":"ERC20Burnable","nodeType":"IdentifierPath","referencedDeclaration":821,"src":"293:13:24"},"id":4730,"nodeType":"InheritanceSpecifier","src":"293:13:24"},{"baseName":{"id":4731,"name":"ERC20Permit","nodeType":"IdentifierPath","referencedDeclaration":1018,"src":"308:11:24"},"id":4732,"nodeType":"InheritanceSpecifier","src":"308:11:24"}],"canonicalName":"Token","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4761,"linearizedBaseContracts":[4761,1018,3786,1054,821,699,846,777,3022],"name":"Token","nameLocation":"277:5:24","nodeType":"ContractDefinition","nodes":[{"body":{"id":4759,"nodeType":"Block","src":"468:63:24","statements":[{"expression":{"arguments":[{"expression":{"id":4749,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"484:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"484:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4751,"name":"max_supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4738,"src":"496:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"509:2:24","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4753,"name":"decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"513:8:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint8_$","typeString":"function () view returns (uint8)"}},"id":4754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"513:10:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"509:14:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"496:27:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4748,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":516,"src":"478:5:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"478:46:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4758,"nodeType":"ExpressionStatement","src":"478:46:24"}]},"id":4760,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":4741,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4734,"src":"436:4:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":4742,"name":"symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4736,"src":"442:6:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"id":4743,"kind":"baseConstructorSpecifier","modifierName":{"id":4740,"name":"ERC20","nodeType":"IdentifierPath","referencedDeclaration":699,"src":"430:5:24"},"nodeType":"ModifierInvocation","src":"430:19:24"},{"arguments":[{"id":4745,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4734,"src":"462:4:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"id":4746,"kind":"baseConstructorSpecifier","modifierName":{"id":4744,"name":"ERC20Permit","nodeType":"IdentifierPath","referencedDeclaration":1018,"src":"450:11:24"},"nodeType":"ModifierInvocation","src":"450:17:24"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4734,"mutability":"mutable","name":"name","nameLocation":"361:4:24","nodeType":"VariableDeclaration","scope":4760,"src":"347:18:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4733,"name":"string","nodeType":"ElementaryTypeName","src":"347:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4736,"mutability":"mutable","name":"symbol","nameLocation":"389:6:24","nodeType":"VariableDeclaration","scope":4760,"src":"375:20:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4735,"name":"string","nodeType":"ElementaryTypeName","src":"375:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4738,"mutability":"mutable","name":"max_supply","nameLocation":"413:10:24","nodeType":"VariableDeclaration","scope":4760,"src":"405:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4737,"name":"uint256","nodeType":"ElementaryTypeName","src":"405:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"337:92:24"},"returnParameters":{"id":4747,"nodeType":"ParameterList","parameters":[],"src":"468:0:24"},"scope":4761,"src":"326:205:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":4762,"src":"268:265:24","usedErrors":[]}],"src":"32:502:24"},"id":24},"contracts/ERC721_BASE.sol":{"ast":{"absolutePath":"contracts/ERC721_BASE.sol","exportedSymbols":{"Address":[3000],"Context":[3022],"Counters":[3096],"ERC165":[3810],"ERC721":[1999],"ERC721Enumerable":[2487],"ERC721URIStorage":[2612],"IERC165":[3822],"IERC721":[2115],"IERC721Enumerable":[2643],"IERC721Metadata":[2670],"IERC721Receiver":[2133],"Math":[4687],"MyToken":[4969],"Ownable":[112],"Strings":[3271]},"id":4970,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4763,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"32:23:25"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","id":4764,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4970,"sourceUnit":2000,"src":"57:57:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol","file":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol","id":4765,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4970,"sourceUnit":2488,"src":"115:78:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","file":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","id":4766,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4970,"sourceUnit":2613,"src":"194:78:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":4767,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4970,"sourceUnit":113,"src":"273:52:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Counters.sol","file":"@openzeppelin/contracts/utils/Counters.sol","id":4768,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4970,"sourceUnit":3097,"src":"326:52:25","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4769,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":1999,"src":"400:6:25"},"id":4770,"nodeType":"InheritanceSpecifier","src":"400:6:25"},{"baseName":{"id":4771,"name":"ERC721Enumerable","nodeType":"IdentifierPath","referencedDeclaration":2487,"src":"408:16:25"},"id":4772,"nodeType":"InheritanceSpecifier","src":"408:16:25"},{"baseName":{"id":4773,"name":"ERC721URIStorage","nodeType":"IdentifierPath","referencedDeclaration":2612,"src":"426:16:25"},"id":4774,"nodeType":"InheritanceSpecifier","src":"426:16:25"},{"baseName":{"id":4775,"name":"Ownable","nodeType":"IdentifierPath","referencedDeclaration":112,"src":"444:7:25"},"id":4776,"nodeType":"InheritanceSpecifier","src":"444:7:25"}],"canonicalName":"MyToken","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4969,"linearizedBaseContracts":[4969,112,2612,2487,2643,1999,2670,2115,3810,3822,3022],"name":"MyToken","nameLocation":"389:7:25","nodeType":"ContractDefinition","nodes":[{"id":4780,"libraryName":{"id":4777,"name":"Counters","nodeType":"IdentifierPath","referencedDeclaration":3096,"src":"464:8:25"},"nodeType":"UsingForDirective","src":"458:36:25","typeName":{"id":4779,"nodeType":"UserDefinedTypeName","pathNode":{"id":4778,"name":"Counters.Counter","nodeType":"IdentifierPath","referencedDeclaration":3028,"src":"477:16:25"},"referencedDeclaration":3028,"src":"477:16:25","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3028_storage_ptr","typeString":"struct Counters.Counter"}}},{"constant":false,"id":4783,"mutability":"mutable","name":"_tokenIdCounter","nameLocation":"525:15:25","nodeType":"VariableDeclaration","scope":4969,"src":"500:40:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3028_storage","typeString":"struct Counters.Counter"},"typeName":{"id":4782,"nodeType":"UserDefinedTypeName","pathNode":{"id":4781,"name":"Counters.Counter","nodeType":"IdentifierPath","referencedDeclaration":3028,"src":"500:16:25"},"referencedDeclaration":3028,"src":"500:16:25","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3028_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"private"},{"constant":false,"id":4785,"mutability":"mutable","name":"_contractURI","nameLocation":"562:12:25","nodeType":"VariableDeclaration","scope":4969,"src":"547:27:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":4784,"name":"string","nodeType":"ElementaryTypeName","src":"547:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"canonicalName":"MyToken.ItemParam","id":4790,"members":[{"constant":false,"id":4787,"mutability":"mutable","name":"to","nameLocation":"616:2:25","nodeType":"VariableDeclaration","scope":4790,"src":"608:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4786,"name":"address","nodeType":"ElementaryTypeName","src":"608:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4789,"mutability":"mutable","name":"tokenURI","nameLocation":"635:8:25","nodeType":"VariableDeclaration","scope":4790,"src":"628:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":4788,"name":"string","nodeType":"ElementaryTypeName","src":"628:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"ItemParam","nameLocation":"588:9:25","nodeType":"StructDefinition","scope":4969,"src":"581:69:25","visibility":"public"},{"body":{"id":4807,"nodeType":"Block","src":"793:44:25","statements":[{"expression":{"id":4805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4803,"name":"_contractURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"803:12:25","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4804,"name":"contractURI_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4796,"src":"818:12:25","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"803:27:25","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":4806,"nodeType":"ExpressionStatement","src":"803:27:25"}]},"id":4808,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":4799,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"777:5:25","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":4800,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4794,"src":"784:7:25","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"id":4801,"kind":"baseConstructorSpecifier","modifierName":{"id":4798,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":1999,"src":"770:6:25"},"nodeType":"ModifierInvocation","src":"770:22:25"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4792,"mutability":"mutable","name":"name_","nameLocation":"691:5:25","nodeType":"VariableDeclaration","scope":4808,"src":"677:19:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4791,"name":"string","nodeType":"ElementaryTypeName","src":"677:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4794,"mutability":"mutable","name":"symbol_","nameLocation":"720:7:25","nodeType":"VariableDeclaration","scope":4808,"src":"706:21:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4793,"name":"string","nodeType":"ElementaryTypeName","src":"706:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4796,"mutability":"mutable","name":"contractURI_","nameLocation":"751:12:25","nodeType":"VariableDeclaration","scope":4808,"src":"737:26:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4795,"name":"string","nodeType":"ElementaryTypeName","src":"737:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"667:102:25"},"returnParameters":{"id":4802,"nodeType":"ParameterList","parameters":[],"src":"793:0:25"},"scope":4969,"src":"656:181:25","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1268],"body":{"id":4816,"nodeType":"Block","src":"910:33:25","statements":[{"expression":{"hexValue":"697066733a2f2f","id":4814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"927:9:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_66f0790b1cbe0dcac007f07341b00cafe2bda254914729058b5209e04b702afe","typeString":"literal_string \"ipfs://\""},"value":"ipfs://"},"functionReturnParameters":4813,"id":4815,"nodeType":"Return","src":"920:16:25"}]},"id":4817,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"852:8:25","nodeType":"FunctionDefinition","overrides":{"id":4810,"nodeType":"OverrideSpecifier","overrides":[],"src":"877:8:25"},"parameters":{"id":4809,"nodeType":"ParameterList","parameters":[],"src":"860:2:25"},"returnParameters":{"id":4813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4812,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4817,"src":"895:13:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4811,"name":"string","nodeType":"ElementaryTypeName","src":"895:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"894:15:25"},"scope":4969,"src":"843:100:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4831,"nodeType":"Block","src":"1008:73:25","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"697066733a2f2f","id":4826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1049:9:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_66f0790b1cbe0dcac007f07341b00cafe2bda254914729058b5209e04b702afe","typeString":"literal_string \"ipfs://\""},"value":"ipfs://"},{"id":4827,"name":"_contractURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"1060:12:25","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_66f0790b1cbe0dcac007f07341b00cafe2bda254914729058b5209e04b702afe","typeString":"literal_string \"ipfs://\""},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":4824,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1032:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4825,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"1032:16:25","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4828,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1032:41:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4823,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1025:6:25","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":4822,"name":"string","nodeType":"ElementaryTypeName","src":"1025:6:25","typeDescriptions":{}}},"id":4829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1025:49:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":4821,"id":4830,"nodeType":"Return","src":"1018:56:25"}]},"functionSelector":"e8a3d485","id":4832,"implemented":true,"kind":"function","modifiers":[],"name":"contractURI","nameLocation":"958:11:25","nodeType":"FunctionDefinition","parameters":{"id":4818,"nodeType":"ParameterList","parameters":[],"src":"969:2:25"},"returnParameters":{"id":4821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4820,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4832,"src":"993:13:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4819,"name":"string","nodeType":"ElementaryTypeName","src":"993:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"992:15:25"},"scope":4969,"src":"949:132:25","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4862,"nodeType":"Block","src":"1153:165:25","statements":[{"assignments":[4842],"declarations":[{"constant":false,"id":4842,"mutability":"mutable","name":"tokenId","nameLocation":"1171:7:25","nodeType":"VariableDeclaration","scope":4862,"src":"1163:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4841,"name":"uint256","nodeType":"ElementaryTypeName","src":"1163:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4846,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4843,"name":"_tokenIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4783,"src":"1181:15:25","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3028_storage","typeString":"struct Counters.Counter storage ref"}},"id":4844,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"current","nodeType":"MemberAccess","referencedDeclaration":3040,"src":"1181:23:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$3028_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$3028_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer) view returns (uint256)"}},"id":4845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1181:25:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1163:43:25"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4847,"name":"_tokenIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4783,"src":"1216:15:25","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$3028_storage","typeString":"struct Counters.Counter storage ref"}},"id":4849,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":3054,"src":"1216:25:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$3028_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$3028_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer)"}},"id":4850,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1216:27:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4851,"nodeType":"ExpressionStatement","src":"1216:27:25"},{"expression":{"arguments":[{"id":4853,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4834,"src":"1263:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4854,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4842,"src":"1267:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4852,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[1549,1578],"referencedDeclaration":1549,"src":"1253:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4855,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1253:22:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4856,"nodeType":"ExpressionStatement","src":"1253:22:25"},{"expression":{"arguments":[{"id":4858,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4842,"src":"1298:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4859,"name":"uri","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4836,"src":"1307:3:25","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4857,"name":"_setTokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2581,"src":"1285:12:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":4860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1285:26:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4861,"nodeType":"ExpressionStatement","src":"1285:26:25"}]},"functionSelector":"d204c45e","id":4863,"implemented":true,"kind":"function","modifiers":[{"id":4839,"kind":"modifierInvocation","modifierName":{"id":4838,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1143:9:25"},"nodeType":"ModifierInvocation","src":"1143:9:25"}],"name":"safeMint","nameLocation":"1096:8:25","nodeType":"FunctionDefinition","parameters":{"id":4837,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4834,"mutability":"mutable","name":"to","nameLocation":"1113:2:25","nodeType":"VariableDeclaration","scope":4863,"src":"1105:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4833,"name":"address","nodeType":"ElementaryTypeName","src":"1105:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4836,"mutability":"mutable","name":"uri","nameLocation":"1131:3:25","nodeType":"VariableDeclaration","scope":4863,"src":"1117:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4835,"name":"string","nodeType":"ElementaryTypeName","src":"1117:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1104:31:25"},"returnParameters":{"id":4840,"nodeType":"ParameterList","parameters":[],"src":"1153:0:25"},"scope":4969,"src":"1087:231:25","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4896,"nodeType":"Block","src":"1390:124:25","statements":[{"body":{"id":4894,"nodeType":"Block","src":"1443:65:25","statements":[{"expression":{"arguments":[{"expression":{"baseExpression":{"id":4884,"name":"items","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4867,"src":"1466:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ItemParam_$4790_memory_ptr_$dyn_memory_ptr","typeString":"struct MyToken.ItemParam memory[] memory"}},"id":4886,"indexExpression":{"id":4885,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4873,"src":"1472:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1466:8:25","typeDescriptions":{"typeIdentifier":"t_struct$_ItemParam_$4790_memory_ptr","typeString":"struct MyToken.ItemParam memory"}},"id":4887,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"to","nodeType":"MemberAccess","referencedDeclaration":4787,"src":"1466:11:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"baseExpression":{"id":4888,"name":"items","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4867,"src":"1479:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ItemParam_$4790_memory_ptr_$dyn_memory_ptr","typeString":"struct MyToken.ItemParam memory[] memory"}},"id":4890,"indexExpression":{"id":4889,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4873,"src":"1485:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1479:8:25","typeDescriptions":{"typeIdentifier":"t_struct$_ItemParam_$4790_memory_ptr","typeString":"struct MyToken.ItemParam memory"}},"id":4891,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"tokenURI","nodeType":"MemberAccess","referencedDeclaration":4789,"src":"1479:17:25","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4883,"name":"safeMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4863,"src":"1457:8:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_string_memory_ptr_$returns$__$","typeString":"function (address,string memory)"}},"id":4892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1457:40:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4893,"nodeType":"ExpressionStatement","src":"1457:40:25"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4876,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4873,"src":"1420:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4877,"name":"items","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4867,"src":"1424:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ItemParam_$4790_memory_ptr_$dyn_memory_ptr","typeString":"struct MyToken.ItemParam memory[] memory"}},"id":4878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1424:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1420:16:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4895,"initializationExpression":{"assignments":[4873],"declarations":[{"constant":false,"id":4873,"mutability":"mutable","name":"i","nameLocation":"1413:1:25","nodeType":"VariableDeclaration","scope":4895,"src":"1405:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4872,"name":"uint256","nodeType":"ElementaryTypeName","src":"1405:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4875,"initialValue":{"hexValue":"30","id":4874,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1417:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1405:13:25"},"loopExpression":{"expression":{"id":4881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1438:3:25","subExpression":{"id":4880,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4873,"src":"1438:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4882,"nodeType":"ExpressionStatement","src":"1438:3:25"},"nodeType":"ForStatement","src":"1400:108:25"}]},"functionSelector":"1c02aeaf","id":4897,"implemented":true,"kind":"function","modifiers":[{"id":4870,"kind":"modifierInvocation","modifierName":{"id":4869,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1380:9:25"},"nodeType":"ModifierInvocation","src":"1380:9:25"}],"name":"multiSafeMint","nameLocation":"1333:13:25","nodeType":"FunctionDefinition","parameters":{"id":4868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4867,"mutability":"mutable","name":"items","nameLocation":"1366:5:25","nodeType":"VariableDeclaration","scope":4897,"src":"1347:24:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ItemParam_$4790_memory_ptr_$dyn_memory_ptr","typeString":"struct MyToken.ItemParam[]"},"typeName":{"baseType":{"id":4865,"nodeType":"UserDefinedTypeName","pathNode":{"id":4864,"name":"ItemParam","nodeType":"IdentifierPath","referencedDeclaration":4790,"src":"1347:9:25"},"referencedDeclaration":4790,"src":"1347:9:25","typeDescriptions":{"typeIdentifier":"t_struct$_ItemParam_$4790_storage_ptr","typeString":"struct MyToken.ItemParam"}},"id":4866,"nodeType":"ArrayTypeName","src":"1347:11:25","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_ItemParam_$4790_storage_$dyn_storage_ptr","typeString":"struct MyToken.ItemParam[]"}},"visibility":"internal"}],"src":"1346:26:25"},"returnParameters":{"id":4871,"nodeType":"ParameterList","parameters":[],"src":"1390:0:25"},"scope":4969,"src":"1324:190:25","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1985,2325],"body":{"id":4920,"nodeType":"Block","src":"1762:73:25","statements":[{"expression":{"arguments":[{"id":4914,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4899,"src":"1799:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4915,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4901,"src":"1805:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4916,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4903,"src":"1809:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4917,"name":"batchSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4905,"src":"1818:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4911,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1772:5:25","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_MyToken_$4969_$","typeString":"type(contract super MyToken)"}},"id":4913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"_beforeTokenTransfer","nodeType":"MemberAccess","referencedDeclaration":2325,"src":"1772:26:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":4918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1772:56:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4919,"nodeType":"ExpressionStatement","src":"1772:56:25"}]},"id":4921,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"1597:20:25","nodeType":"FunctionDefinition","overrides":{"id":4909,"nodeType":"OverrideSpecifier","overrides":[{"id":4907,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":1999,"src":"1736:6:25"},{"id":4908,"name":"ERC721Enumerable","nodeType":"IdentifierPath","referencedDeclaration":2487,"src":"1744:16:25"}],"src":"1727:34:25"},"parameters":{"id":4906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4899,"mutability":"mutable","name":"from","nameLocation":"1635:4:25","nodeType":"VariableDeclaration","scope":4921,"src":"1627:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4898,"name":"address","nodeType":"ElementaryTypeName","src":"1627:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4901,"mutability":"mutable","name":"to","nameLocation":"1657:2:25","nodeType":"VariableDeclaration","scope":4921,"src":"1649:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4900,"name":"address","nodeType":"ElementaryTypeName","src":"1649:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4903,"mutability":"mutable","name":"tokenId","nameLocation":"1677:7:25","nodeType":"VariableDeclaration","scope":4921,"src":"1669:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4902,"name":"uint256","nodeType":"ElementaryTypeName","src":"1669:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4905,"mutability":"mutable","name":"batchSize","nameLocation":"1702:9:25","nodeType":"VariableDeclaration","scope":4921,"src":"1694:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4904,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1617:100:25"},"returnParameters":{"id":4910,"nodeType":"ParameterList","parameters":[],"src":"1762:0:25"},"scope":4969,"src":"1588:247:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1722,2611],"body":{"id":4935,"nodeType":"Block","src":"1937:37:25","statements":[{"expression":{"arguments":[{"id":4932,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4923,"src":"1959:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4929,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1947:5:25","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_MyToken_$4969_$","typeString":"type(contract super MyToken)"}},"id":4931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"_burn","nodeType":"MemberAccess","referencedDeclaration":2611,"src":"1947:11:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1947:20:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4934,"nodeType":"ExpressionStatement","src":"1947:20:25"}]},"id":4936,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"1850:5:25","nodeType":"FunctionDefinition","overrides":{"id":4927,"nodeType":"OverrideSpecifier","overrides":[{"id":4925,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":1999,"src":"1907:6:25"},{"id":4926,"name":"ERC721URIStorage","nodeType":"IdentifierPath","referencedDeclaration":2612,"src":"1915:16:25"}],"src":"1898:34:25"},"parameters":{"id":4924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4923,"mutability":"mutable","name":"tokenId","nameLocation":"1864:7:25","nodeType":"VariableDeclaration","scope":4936,"src":"1856:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4922,"name":"uint256","nodeType":"ElementaryTypeName","src":"1856:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1855:17:25"},"returnParameters":{"id":4928,"nodeType":"ParameterList","parameters":[],"src":"1937:0:25"},"scope":4969,"src":"1841:133:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1259,2559],"body":{"id":4951,"nodeType":"Block","src":"2122:47:25","statements":[{"expression":{"arguments":[{"id":4948,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4938,"src":"2154:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4946,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2139:5:25","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_MyToken_$4969_$","typeString":"type(contract super MyToken)"}},"id":4947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"tokenURI","nodeType":"MemberAccess","referencedDeclaration":2559,"src":"2139:14:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) view returns (string memory)"}},"id":4949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2139:23:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":4945,"id":4950,"nodeType":"Return","src":"2132:30:25"}]},"functionSelector":"c87b56dd","id":4952,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"1989:8:25","nodeType":"FunctionDefinition","overrides":{"id":4942,"nodeType":"OverrideSpecifier","overrides":[{"id":4940,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":1999,"src":"2060:6:25"},{"id":4941,"name":"ERC721URIStorage","nodeType":"IdentifierPath","referencedDeclaration":2612,"src":"2068:16:25"}],"src":"2051:34:25"},"parameters":{"id":4939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4938,"mutability":"mutable","name":"tokenId","nameLocation":"2006:7:25","nodeType":"VariableDeclaration","scope":4952,"src":"1998:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4937,"name":"uint256","nodeType":"ElementaryTypeName","src":"1998:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1997:17:25"},"returnParameters":{"id":4945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4944,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4952,"src":"2103:13:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4943,"name":"string","nodeType":"ElementaryTypeName","src":"2103:6:25","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2102:15:25"},"scope":4969,"src":"1980:189:25","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[1148,2183],"body":{"id":4967,"nodeType":"Block","src":"2320:60:25","statements":[{"expression":{"arguments":[{"id":4964,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4954,"src":"2361:11:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":4962,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2337:5:25","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_MyToken_$4969_$","typeString":"type(contract super MyToken)"}},"id":4963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":2183,"src":"2337:23:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":4965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2337:36:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4961,"id":4966,"nodeType":"Return","src":"2330:43:25"}]},"functionSelector":"01ffc9a7","id":4968,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2184:17:25","nodeType":"FunctionDefinition","overrides":{"id":4958,"nodeType":"OverrideSpecifier","overrides":[{"id":4956,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":1999,"src":"2267:6:25"},{"id":4957,"name":"ERC721Enumerable","nodeType":"IdentifierPath","referencedDeclaration":2487,"src":"2275:16:25"}],"src":"2258:34:25"},"parameters":{"id":4955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4954,"mutability":"mutable","name":"interfaceId","nameLocation":"2209:11:25","nodeType":"VariableDeclaration","scope":4968,"src":"2202:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4953,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2202:6:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2201:20:25"},"returnParameters":{"id":4961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4960,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4968,"src":"2310:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4959,"name":"bool","nodeType":"ElementaryTypeName","src":"2310:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2309:6:25"},"scope":4969,"src":"2175:205:25","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":4970,"src":"380:2002:25","usedErrors":[]}],"src":"32:2351:25"},"id":25}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ERC20":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.","kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"constructor":{"details":"Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_157":{"entryPoint":null,"id":157,"parameterSlots":2,"returnSlots":0},"abi_decode_available_length_t_string_memory_ptr_fromMemory":{"entryPoint":576,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_string_memory_ptr_fromMemory":{"entryPoint":651,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":702,"id":null,"parameterSlots":2,"returnSlots":2},"allocate_memory":{"entryPoint":437,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":289,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":468,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":522,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":882,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":383,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x22":{"entryPoint":835,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":336,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":309,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":314,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":304,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":299,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":319,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4093:26","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:26","statements":[{"nodeType":"YulAssignment","src":"57:19:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:26","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:26"},"nodeType":"YulFunctionCall","src":"67:9:26"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:26"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:26","type":""}],"src":"7:75:26"},{"body":{"nodeType":"YulBlock","src":"177:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:26"},"nodeType":"YulFunctionCall","src":"187:12:26"},"nodeType":"YulExpressionStatement","src":"187:12:26"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:26"},{"body":{"nodeType":"YulBlock","src":"300:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:26"},"nodeType":"YulFunctionCall","src":"310:12:26"},"nodeType":"YulExpressionStatement","src":"310:12:26"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:26"},{"body":{"nodeType":"YulBlock","src":"423:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"440:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"443:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"433:6:26"},"nodeType":"YulFunctionCall","src":"433:12:26"},"nodeType":"YulExpressionStatement","src":"433:12:26"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"334:117:26"},{"body":{"nodeType":"YulBlock","src":"546:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"563:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"566:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"556:6:26"},"nodeType":"YulFunctionCall","src":"556:12:26"},"nodeType":"YulExpressionStatement","src":"556:12:26"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"457:117:26"},{"body":{"nodeType":"YulBlock","src":"628:54:26","statements":[{"nodeType":"YulAssignment","src":"638:38:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"656:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"663:2:26","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"652:3:26"},"nodeType":"YulFunctionCall","src":"652:14:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"672:2:26","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"668:3:26"},"nodeType":"YulFunctionCall","src":"668:7:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"648:3:26"},"nodeType":"YulFunctionCall","src":"648:28:26"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"638:6:26"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"611:5:26","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"621:6:26","type":""}],"src":"580:102:26"},{"body":{"nodeType":"YulBlock","src":"716:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"733:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"736:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"726:6:26"},"nodeType":"YulFunctionCall","src":"726:88:26"},"nodeType":"YulExpressionStatement","src":"726:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"830:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"833:4:26","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"823:6:26"},"nodeType":"YulFunctionCall","src":"823:15:26"},"nodeType":"YulExpressionStatement","src":"823:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"854:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"857:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"847:6:26"},"nodeType":"YulFunctionCall","src":"847:15:26"},"nodeType":"YulExpressionStatement","src":"847:15:26"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"688:180:26"},{"body":{"nodeType":"YulBlock","src":"917:238:26","statements":[{"nodeType":"YulVariableDeclaration","src":"927:58:26","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"949:6:26"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"979:4:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"957:21:26"},"nodeType":"YulFunctionCall","src":"957:27:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"945:3:26"},"nodeType":"YulFunctionCall","src":"945:40:26"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"931:10:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"1096:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1098:16:26"},"nodeType":"YulFunctionCall","src":"1098:18:26"},"nodeType":"YulExpressionStatement","src":"1098:18:26"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1039:10:26"},{"kind":"number","nodeType":"YulLiteral","src":"1051:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1036:2:26"},"nodeType":"YulFunctionCall","src":"1036:34:26"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1075:10:26"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1087:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1072:2:26"},"nodeType":"YulFunctionCall","src":"1072:22:26"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1033:2:26"},"nodeType":"YulFunctionCall","src":"1033:62:26"},"nodeType":"YulIf","src":"1030:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1134:2:26","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1138:10:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1127:6:26"},"nodeType":"YulFunctionCall","src":"1127:22:26"},"nodeType":"YulExpressionStatement","src":"1127:22:26"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"903:6:26","type":""},{"name":"size","nodeType":"YulTypedName","src":"911:4:26","type":""}],"src":"874:281:26"},{"body":{"nodeType":"YulBlock","src":"1202:88:26","statements":[{"nodeType":"YulAssignment","src":"1212:30:26","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1222:18:26"},"nodeType":"YulFunctionCall","src":"1222:20:26"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1212:6:26"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1271:6:26"},{"name":"size","nodeType":"YulIdentifier","src":"1279:4:26"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1251:19:26"},"nodeType":"YulFunctionCall","src":"1251:33:26"},"nodeType":"YulExpressionStatement","src":"1251:33:26"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1186:4:26","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1195:6:26","type":""}],"src":"1161:129:26"},{"body":{"nodeType":"YulBlock","src":"1363:241:26","statements":[{"body":{"nodeType":"YulBlock","src":"1468:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1470:16:26"},"nodeType":"YulFunctionCall","src":"1470:18:26"},"nodeType":"YulExpressionStatement","src":"1470:18:26"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1440:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"1448:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1437:2:26"},"nodeType":"YulFunctionCall","src":"1437:30:26"},"nodeType":"YulIf","src":"1434:56:26"},{"nodeType":"YulAssignment","src":"1500:37:26","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1530:6:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1508:21:26"},"nodeType":"YulFunctionCall","src":"1508:29:26"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1500:4:26"}]},{"nodeType":"YulAssignment","src":"1574:23:26","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1586:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"1592:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1582:3:26"},"nodeType":"YulFunctionCall","src":"1582:15:26"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1574:4:26"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1347:6:26","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1358:4:26","type":""}],"src":"1296:308:26"},{"body":{"nodeType":"YulBlock","src":"1659:258:26","statements":[{"nodeType":"YulVariableDeclaration","src":"1669:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"1678:1:26","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1673:1:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"1738:63:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1763:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"1768:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1759:3:26"},"nodeType":"YulFunctionCall","src":"1759:11:26"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1782:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"1787:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1778:3:26"},"nodeType":"YulFunctionCall","src":"1778:11:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1772:5:26"},"nodeType":"YulFunctionCall","src":"1772:18:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1752:6:26"},"nodeType":"YulFunctionCall","src":"1752:39:26"},"nodeType":"YulExpressionStatement","src":"1752:39:26"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1699:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"1702:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1696:2:26"},"nodeType":"YulFunctionCall","src":"1696:13:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1710:19:26","statements":[{"nodeType":"YulAssignment","src":"1712:15:26","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1721:1:26"},{"kind":"number","nodeType":"YulLiteral","src":"1724:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1717:3:26"},"nodeType":"YulFunctionCall","src":"1717:10:26"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1712:1:26"}]}]},"pre":{"nodeType":"YulBlock","src":"1692:3:26","statements":[]},"src":"1688:113:26"},{"body":{"nodeType":"YulBlock","src":"1835:76:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1885:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"1890:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1881:3:26"},"nodeType":"YulFunctionCall","src":"1881:16:26"},{"kind":"number","nodeType":"YulLiteral","src":"1899:1:26","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1874:6:26"},"nodeType":"YulFunctionCall","src":"1874:27:26"},"nodeType":"YulExpressionStatement","src":"1874:27:26"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1816:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"1819:6:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1813:2:26"},"nodeType":"YulFunctionCall","src":"1813:13:26"},"nodeType":"YulIf","src":"1810:101:26"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1641:3:26","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1646:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"1651:6:26","type":""}],"src":"1610:307:26"},{"body":{"nodeType":"YulBlock","src":"2018:326:26","statements":[{"nodeType":"YulAssignment","src":"2028:75:26","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2095:6:26"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2053:41:26"},"nodeType":"YulFunctionCall","src":"2053:49:26"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2037:15:26"},"nodeType":"YulFunctionCall","src":"2037:66:26"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2028:5:26"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2119:5:26"},{"name":"length","nodeType":"YulIdentifier","src":"2126:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2112:6:26"},"nodeType":"YulFunctionCall","src":"2112:21:26"},"nodeType":"YulExpressionStatement","src":"2112:21:26"},{"nodeType":"YulVariableDeclaration","src":"2142:27:26","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2157:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"2164:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2153:3:26"},"nodeType":"YulFunctionCall","src":"2153:16:26"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2146:3:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"2207:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"2209:77:26"},"nodeType":"YulFunctionCall","src":"2209:79:26"},"nodeType":"YulExpressionStatement","src":"2209:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2188:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"2193:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2184:3:26"},"nodeType":"YulFunctionCall","src":"2184:16:26"},{"name":"end","nodeType":"YulIdentifier","src":"2202:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2181:2:26"},"nodeType":"YulFunctionCall","src":"2181:25:26"},"nodeType":"YulIf","src":"2178:112:26"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2321:3:26"},{"name":"dst","nodeType":"YulIdentifier","src":"2326:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"2331:6:26"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"2299:21:26"},"nodeType":"YulFunctionCall","src":"2299:39:26"},"nodeType":"YulExpressionStatement","src":"2299:39:26"}]},"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1991:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"1996:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"2004:3:26","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2012:5:26","type":""}],"src":"1923:421:26"},{"body":{"nodeType":"YulBlock","src":"2437:282:26","statements":[{"body":{"nodeType":"YulBlock","src":"2486:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"2488:77:26"},"nodeType":"YulFunctionCall","src":"2488:79:26"},"nodeType":"YulExpressionStatement","src":"2488:79:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2465:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"2473:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2461:3:26"},"nodeType":"YulFunctionCall","src":"2461:17:26"},{"name":"end","nodeType":"YulIdentifier","src":"2480:3:26"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2457:3:26"},"nodeType":"YulFunctionCall","src":"2457:27:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2450:6:26"},"nodeType":"YulFunctionCall","src":"2450:35:26"},"nodeType":"YulIf","src":"2447:122:26"},{"nodeType":"YulVariableDeclaration","src":"2578:27:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2598:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2592:5:26"},"nodeType":"YulFunctionCall","src":"2592:13:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2582:6:26","type":""}]},{"nodeType":"YulAssignment","src":"2614:99:26","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2686:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"2694:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2682:3:26"},"nodeType":"YulFunctionCall","src":"2682:17:26"},{"name":"length","nodeType":"YulIdentifier","src":"2701:6:26"},{"name":"end","nodeType":"YulIdentifier","src":"2709:3:26"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"2623:58:26"},"nodeType":"YulFunctionCall","src":"2623:90:26"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2614:5:26"}]}]},"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2415:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"2423:3:26","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2431:5:26","type":""}],"src":"2364:355:26"},{"body":{"nodeType":"YulBlock","src":"2839:739:26","statements":[{"body":{"nodeType":"YulBlock","src":"2885:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2887:77:26"},"nodeType":"YulFunctionCall","src":"2887:79:26"},"nodeType":"YulExpressionStatement","src":"2887:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2860:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"2869:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2856:3:26"},"nodeType":"YulFunctionCall","src":"2856:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"2881:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2852:3:26"},"nodeType":"YulFunctionCall","src":"2852:32:26"},"nodeType":"YulIf","src":"2849:119:26"},{"nodeType":"YulBlock","src":"2978:291:26","statements":[{"nodeType":"YulVariableDeclaration","src":"2993:38:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3017:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3028:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3013:3:26"},"nodeType":"YulFunctionCall","src":"3013:17:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3007:5:26"},"nodeType":"YulFunctionCall","src":"3007:24:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2997:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"3078:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3080:77:26"},"nodeType":"YulFunctionCall","src":"3080:79:26"},"nodeType":"YulExpressionStatement","src":"3080:79:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3050:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"3058:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3047:2:26"},"nodeType":"YulFunctionCall","src":"3047:30:26"},"nodeType":"YulIf","src":"3044:117:26"},{"nodeType":"YulAssignment","src":"3175:84:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3231:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"3242:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3227:3:26"},"nodeType":"YulFunctionCall","src":"3227:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3251:7:26"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3185:41:26"},"nodeType":"YulFunctionCall","src":"3185:74:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3175:6:26"}]}]},{"nodeType":"YulBlock","src":"3279:292:26","statements":[{"nodeType":"YulVariableDeclaration","src":"3294:39:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3318:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3329:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3314:3:26"},"nodeType":"YulFunctionCall","src":"3314:18:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3308:5:26"},"nodeType":"YulFunctionCall","src":"3308:25:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3298:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"3380:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3382:77:26"},"nodeType":"YulFunctionCall","src":"3382:79:26"},"nodeType":"YulExpressionStatement","src":"3382:79:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3352:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"3360:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3349:2:26"},"nodeType":"YulFunctionCall","src":"3349:30:26"},"nodeType":"YulIf","src":"3346:117:26"},{"nodeType":"YulAssignment","src":"3477:84:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3533:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"3544:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3529:3:26"},"nodeType":"YulFunctionCall","src":"3529:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3553:7:26"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3487:41:26"},"nodeType":"YulFunctionCall","src":"3487:74:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3477:6:26"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2801:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2812:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2824:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2832:6:26","type":""}],"src":"2725:853:26"},{"body":{"nodeType":"YulBlock","src":"3612:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3629:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3632:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3622:6:26"},"nodeType":"YulFunctionCall","src":"3622:88:26"},"nodeType":"YulExpressionStatement","src":"3622:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3726:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3729:4:26","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3719:6:26"},"nodeType":"YulFunctionCall","src":"3719:15:26"},"nodeType":"YulExpressionStatement","src":"3719:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3750:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3753:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3743:6:26"},"nodeType":"YulFunctionCall","src":"3743:15:26"},"nodeType":"YulExpressionStatement","src":"3743:15:26"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"3584:180:26"},{"body":{"nodeType":"YulBlock","src":"3821:269:26","statements":[{"nodeType":"YulAssignment","src":"3831:22:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3845:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"3851:1:26","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3841:3:26"},"nodeType":"YulFunctionCall","src":"3841:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3831:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"3862:38:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3892:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"3898:1:26","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3888:3:26"},"nodeType":"YulFunctionCall","src":"3888:12:26"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"3866:18:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"3939:51:26","statements":[{"nodeType":"YulAssignment","src":"3953:27:26","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3967:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"3975:4:26","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3963:3:26"},"nodeType":"YulFunctionCall","src":"3963:17:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3953:6:26"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"3919:18:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3912:6:26"},"nodeType":"YulFunctionCall","src":"3912:26:26"},"nodeType":"YulIf","src":"3909:81:26"},{"body":{"nodeType":"YulBlock","src":"4042:42:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"4056:16:26"},"nodeType":"YulFunctionCall","src":"4056:18:26"},"nodeType":"YulExpressionStatement","src":"4056:18:26"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4006:18:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4029:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"4037:2:26","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4026:2:26"},"nodeType":"YulFunctionCall","src":"4026:14:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4003:2:26"},"nodeType":"YulFunctionCall","src":"4003:38:26"},"nodeType":"YulIf","src":"4000:84:26"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3805:4:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"3814:6:26","type":""}],"src":"3770:320:26"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n}\n","id":26,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b5060405162001617380380620016178339818101604052810190620000379190620002be565b81600390805190602001906200004f92919062000071565b5080600490805190602001906200006892919062000071565b505050620003a8565b8280546200007f9062000372565b90600052602060002090601f016020900481019282620000a35760008555620000ef565b82601f10620000be57805160ff1916838001178555620000ef565b82800160010185558215620000ef579182015b82811115620000ee578251825591602001919060010190620000d1565b5b509050620000fe919062000102565b5090565b5b808211156200011d57600081600090555060010162000103565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200018a826200013f565b810181811067ffffffffffffffff82111715620001ac57620001ab62000150565b5b80604052505050565b6000620001c162000121565b9050620001cf82826200017f565b919050565b600067ffffffffffffffff821115620001f257620001f162000150565b5b620001fd826200013f565b9050602081019050919050565b60005b838110156200022a5780820151818401526020810190506200020d565b838111156200023a576000848401525b50505050565b6000620002576200025184620001d4565b620001b5565b9050828152602081018484840111156200027657620002756200013a565b5b620002838482856200020a565b509392505050565b600082601f830112620002a357620002a262000135565b5b8151620002b584826020860162000240565b91505092915050565b60008060408385031215620002d857620002d76200012b565b5b600083015167ffffffffffffffff811115620002f957620002f862000130565b5b62000307858286016200028b565b925050602083015167ffffffffffffffff8111156200032b576200032a62000130565b5b62000339858286016200028b565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200038b57607f821691505b60208210811415620003a257620003a162000343565b5b50919050565b61125f80620003b86000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610b19565b60405180910390f35b6100e660048036038101906100e19190610bd4565b610308565b6040516100f39190610c2f565b60405180910390f35b61010461032b565b6040516101119190610c59565b60405180910390f35b610134600480360381019061012f9190610c74565b610335565b6040516101419190610c2f565b60405180910390f35b610152610364565b60405161015f9190610ce3565b60405180910390f35b610182600480360381019061017d9190610bd4565b61036d565b60405161018f9190610c2f565b60405180910390f35b6101b260048036038101906101ad9190610cfe565b6103a4565b6040516101bf9190610c59565b60405180910390f35b6101d06103ec565b6040516101dd9190610b19565b60405180910390f35b61020060048036038101906101fb9190610bd4565b61047e565b60405161020d9190610c2f565b60405180910390f35b610230600480360381019061022b9190610bd4565b6104f5565b60405161023d9190610c2f565b60405180910390f35b610260600480360381019061025b9190610d2b565b610518565b60405161026d9190610c59565b60405180910390f35b60606003805461028590610d9a565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190610d9a565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b60008061031361059f565b90506103208185856105a7565b600191505092915050565b6000600254905090565b60008061034061059f565b905061034d858285610772565b6103588585856107fe565b60019150509392505050565b60006012905090565b60008061037861059f565b905061039981858561038a8589610518565b6103949190610dfb565b6105a7565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546103fb90610d9a565b80601f016020809104026020016040519081016040528092919081815260200182805461042790610d9a565b80156104745780601f1061044957610100808354040283529160200191610474565b820191906000526020600020905b81548152906001019060200180831161045757829003601f168201915b5050505050905090565b60008061048961059f565b905060006104978286610518565b9050838110156104dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d390610ec3565b60405180910390fd5b6104e982868684036105a7565b60019250505092915050565b60008061050061059f565b905061050d8185856107fe565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060e90610f55565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067e90610fe7565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107659190610c59565b60405180910390a3505050565b600061077e8484610518565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107f857818110156107ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e190611053565b60405180910390fd5b6107f784848484036105a7565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561086e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610865906110e5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d590611177565b60405180910390fd5b6108e9838383610a76565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561096f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096690611209565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a5d9190610c59565b60405180910390a3610a70848484610a7b565b50505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610aba578082015181840152602081019050610a9f565b83811115610ac9576000848401525b50505050565b6000601f19601f8301169050919050565b6000610aeb82610a80565b610af58185610a8b565b9350610b05818560208601610a9c565b610b0e81610acf565b840191505092915050565b60006020820190508181036000830152610b338184610ae0565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b6b82610b40565b9050919050565b610b7b81610b60565b8114610b8657600080fd5b50565b600081359050610b9881610b72565b92915050565b6000819050919050565b610bb181610b9e565b8114610bbc57600080fd5b50565b600081359050610bce81610ba8565b92915050565b60008060408385031215610beb57610bea610b3b565b5b6000610bf985828601610b89565b9250506020610c0a85828601610bbf565b9150509250929050565b60008115159050919050565b610c2981610c14565b82525050565b6000602082019050610c446000830184610c20565b92915050565b610c5381610b9e565b82525050565b6000602082019050610c6e6000830184610c4a565b92915050565b600080600060608486031215610c8d57610c8c610b3b565b5b6000610c9b86828701610b89565b9350506020610cac86828701610b89565b9250506040610cbd86828701610bbf565b9150509250925092565b600060ff82169050919050565b610cdd81610cc7565b82525050565b6000602082019050610cf86000830184610cd4565b92915050565b600060208284031215610d1457610d13610b3b565b5b6000610d2284828501610b89565b91505092915050565b60008060408385031215610d4257610d41610b3b565b5b6000610d5085828601610b89565b9250506020610d6185828601610b89565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610db257607f821691505b60208210811415610dc657610dc5610d6b565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e0682610b9e565b9150610e1183610b9e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e4657610e45610dcc565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000610ead602583610a8b565b9150610eb882610e51565b604082019050919050565b60006020820190508181036000830152610edc81610ea0565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000610f3f602483610a8b565b9150610f4a82610ee3565b604082019050919050565b60006020820190508181036000830152610f6e81610f32565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000610fd1602283610a8b565b9150610fdc82610f75565b604082019050919050565b6000602082019050818103600083015261100081610fc4565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061103d601d83610a8b565b915061104882611007565b602082019050919050565b6000602082019050818103600083015261106c81611030565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006110cf602583610a8b565b91506110da82611073565b604082019050919050565b600060208201905081810360008301526110fe816110c2565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611161602383610a8b565b915061116c82611105565b604082019050919050565b6000602082019050818103600083015261119081611154565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006111f3602683610a8b565b91506111fe82611197565b604082019050919050565b60006020820190508181036000830152611222816111e6565b905091905056fea2646970667358221220137fbada0346aceda4e5b17bda369789df5c3b38b92b2beb3e9418c8b4fce7b464736f6c63430008090033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1617 CODESIZE SUB DUP1 PUSH3 0x1617 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x2BE JUMP JUMPDEST DUP2 PUSH1 0x3 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x4F SWAP3 SWAP2 SWAP1 PUSH3 0x71 JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x68 SWAP3 SWAP2 SWAP1 PUSH3 0x71 JUMP JUMPDEST POP POP POP PUSH3 0x3A8 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x7F SWAP1 PUSH3 0x372 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0xA3 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xEF JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xBE JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xEF JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xEF JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xEE JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xD1 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0xFE SWAP2 SWAP1 PUSH3 0x102 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x11D JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x103 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0x18A DUP3 PUSH3 0x13F JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x1AC JUMPI PUSH3 0x1AB PUSH3 0x150 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1C1 PUSH3 0x121 JUMP JUMPDEST SWAP1 POP PUSH3 0x1CF DUP3 DUP3 PUSH3 0x17F JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x1F2 JUMPI PUSH3 0x1F1 PUSH3 0x150 JUMP JUMPDEST JUMPDEST PUSH3 0x1FD DUP3 PUSH3 0x13F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x22A JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x20D JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x23A JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x257 PUSH3 0x251 DUP5 PUSH3 0x1D4 JUMP JUMPDEST PUSH3 0x1B5 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x276 JUMPI PUSH3 0x275 PUSH3 0x13A JUMP JUMPDEST JUMPDEST PUSH3 0x283 DUP5 DUP3 DUP6 PUSH3 0x20A JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x2A3 JUMPI PUSH3 0x2A2 PUSH3 0x135 JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x2B5 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x240 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x2D8 JUMPI PUSH3 0x2D7 PUSH3 0x12B JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x2F9 JUMPI PUSH3 0x2F8 PUSH3 0x130 JUMP JUMPDEST JUMPDEST PUSH3 0x307 DUP6 DUP3 DUP7 ADD PUSH3 0x28B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x32B JUMPI PUSH3 0x32A PUSH3 0x130 JUMP JUMPDEST JUMPDEST PUSH3 0x339 DUP6 DUP3 DUP7 ADD PUSH3 0x28B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x38B JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x3A2 JUMPI PUSH3 0x3A1 PUSH3 0x343 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x125F DUP1 PUSH3 0x3B8 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x246 JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x11A JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x14A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x276 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0xB19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE1 SWAP2 SWAP1 PUSH2 0xBD4 JUMP JUMPDEST PUSH2 0x308 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xC2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x104 PUSH2 0x32B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x111 SWAP2 SWAP1 PUSH2 0xC59 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x134 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12F SWAP2 SWAP1 PUSH2 0xC74 JUMP JUMPDEST PUSH2 0x335 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x141 SWAP2 SWAP1 PUSH2 0xC2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x152 PUSH2 0x364 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15F SWAP2 SWAP1 PUSH2 0xCE3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x182 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17D SWAP2 SWAP1 PUSH2 0xBD4 JUMP JUMPDEST PUSH2 0x36D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18F SWAP2 SWAP1 PUSH2 0xC2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AD SWAP2 SWAP1 PUSH2 0xCFE JUMP JUMPDEST PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BF SWAP2 SWAP1 PUSH2 0xC59 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D0 PUSH2 0x3EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DD SWAP2 SWAP1 PUSH2 0xB19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x200 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0xBD4 JUMP JUMPDEST PUSH2 0x47E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20D SWAP2 SWAP1 PUSH2 0xC2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x230 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22B SWAP2 SWAP1 PUSH2 0xBD4 JUMP JUMPDEST PUSH2 0x4F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23D SWAP2 SWAP1 PUSH2 0xC2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x260 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25B SWAP2 SWAP1 PUSH2 0xD2B JUMP JUMPDEST PUSH2 0x518 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0xC59 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x285 SWAP1 PUSH2 0xD9A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B1 SWAP1 PUSH2 0xD9A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2FE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x313 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP PUSH2 0x320 DUP2 DUP6 DUP6 PUSH2 0x5A7 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x340 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP PUSH2 0x34D DUP6 DUP3 DUP6 PUSH2 0x772 JUMP JUMPDEST PUSH2 0x358 DUP6 DUP6 DUP6 PUSH2 0x7FE JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x378 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP PUSH2 0x399 DUP2 DUP6 DUP6 PUSH2 0x38A DUP6 DUP10 PUSH2 0x518 JUMP JUMPDEST PUSH2 0x394 SWAP2 SWAP1 PUSH2 0xDFB JUMP JUMPDEST PUSH2 0x5A7 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x3FB SWAP1 PUSH2 0xD9A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x427 SWAP1 PUSH2 0xD9A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x474 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x449 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x474 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x457 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x489 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x497 DUP3 DUP7 PUSH2 0x518 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x4DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D3 SWAP1 PUSH2 0xEC3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4E9 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x5A7 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x500 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP PUSH2 0x50D DUP2 DUP6 DUP6 PUSH2 0x7FE JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x617 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x60E SWAP1 PUSH2 0xF55 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x687 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x67E SWAP1 PUSH2 0xFE7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x765 SWAP2 SWAP1 PUSH2 0xC59 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x77E DUP5 DUP5 PUSH2 0x518 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x7F8 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x7EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7E1 SWAP1 PUSH2 0x1053 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7F7 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x5A7 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x86E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x865 SWAP1 PUSH2 0x10E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x8DE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x1177 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8E9 DUP4 DUP4 DUP4 PUSH2 0xA76 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x96F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x966 SWAP1 PUSH2 0x1209 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xA5D SWAP2 SWAP1 PUSH2 0xC59 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xA70 DUP5 DUP5 DUP5 PUSH2 0xA7B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xABA JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xA9F JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xAC9 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAEB DUP3 PUSH2 0xA80 JUMP JUMPDEST PUSH2 0xAF5 DUP2 DUP6 PUSH2 0xA8B JUMP JUMPDEST SWAP4 POP PUSH2 0xB05 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xA9C JUMP JUMPDEST PUSH2 0xB0E DUP2 PUSH2 0xACF JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB33 DUP2 DUP5 PUSH2 0xAE0 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB6B DUP3 PUSH2 0xB40 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB7B DUP2 PUSH2 0xB60 JUMP JUMPDEST DUP2 EQ PUSH2 0xB86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB98 DUP2 PUSH2 0xB72 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBB1 DUP2 PUSH2 0xB9E JUMP JUMPDEST DUP2 EQ PUSH2 0xBBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBCE DUP2 PUSH2 0xBA8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBEB JUMPI PUSH2 0xBEA PUSH2 0xB3B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xBF9 DUP6 DUP3 DUP7 ADD PUSH2 0xB89 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xC0A DUP6 DUP3 DUP7 ADD PUSH2 0xBBF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC29 DUP2 PUSH2 0xC14 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC44 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC20 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC53 DUP2 PUSH2 0xB9E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC6E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC4A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC8D JUMPI PUSH2 0xC8C PUSH2 0xB3B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC9B DUP7 DUP3 DUP8 ADD PUSH2 0xB89 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xCAC DUP7 DUP3 DUP8 ADD PUSH2 0xB89 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xCBD DUP7 DUP3 DUP8 ADD PUSH2 0xBBF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCDD DUP2 PUSH2 0xCC7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xCF8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCD4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD14 JUMPI PUSH2 0xD13 PUSH2 0xB3B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD22 DUP5 DUP3 DUP6 ADD PUSH2 0xB89 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD42 JUMPI PUSH2 0xD41 PUSH2 0xB3B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD50 DUP6 DUP3 DUP7 ADD PUSH2 0xB89 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xD61 DUP6 DUP3 DUP7 ADD PUSH2 0xB89 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xDB2 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0xDC6 JUMPI PUSH2 0xDC5 PUSH2 0xD6B JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xE06 DUP3 PUSH2 0xB9E JUMP JUMPDEST SWAP2 POP PUSH2 0xE11 DUP4 PUSH2 0xB9E JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0xE46 JUMPI PUSH2 0xE45 PUSH2 0xDCC JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEAD PUSH1 0x25 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0xEB8 DUP3 PUSH2 0xE51 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xEDC DUP2 PUSH2 0xEA0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF3F PUSH1 0x24 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0xF4A DUP3 PUSH2 0xEE3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF6E DUP2 PUSH2 0xF32 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFD1 PUSH1 0x22 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0xFDC DUP3 PUSH2 0xF75 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1000 DUP2 PUSH2 0xFC4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x103D PUSH1 0x1D DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0x1048 DUP3 PUSH2 0x1007 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x106C DUP2 PUSH2 0x1030 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10CF PUSH1 0x25 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0x10DA DUP3 PUSH2 0x1073 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x10FE DUP2 PUSH2 0x10C2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1161 PUSH1 0x23 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0x116C DUP3 PUSH2 0x1105 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1190 DUP2 PUSH2 0x1154 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11F3 PUSH1 0x26 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0x11FE DUP3 PUSH2 0x1197 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1222 DUP2 PUSH2 0x11E6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SGT PUSH32 0xBADA0346ACEDA4E5B17BDA369789DF5C3B38B92B2BEB3E9418C8B4FCE7B46473 PUSH16 0x6C634300080900330000000000000000 ","sourceMap":"1401:11610:1:-:0;;;1976:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2050:5;2042;:13;;;;;;;;;;;;:::i;:::-;;2075:7;2065;:17;;;;;;;;;;;;:::i;:::-;;1976:113;;1401:11610;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:75:26:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:117;566:1;563;556:12;580:102;621:6;672:2;668:7;663:2;656:5;652:14;648:28;638:38;;580:102;;;:::o;688:180::-;736:77;733:1;726:88;833:4;830:1;823:15;857:4;854:1;847:15;874:281;957:27;979:4;957:27;:::i;:::-;949:6;945:40;1087:6;1075:10;1072:22;1051:18;1039:10;1036:34;1033:62;1030:88;;;1098:18;;:::i;:::-;1030:88;1138:10;1134:2;1127:22;917:238;874:281;;:::o;1161:129::-;1195:6;1222:20;;:::i;:::-;1212:30;;1251:33;1279:4;1271:6;1251:33;:::i;:::-;1161:129;;;:::o;1296:308::-;1358:4;1448:18;1440:6;1437:30;1434:56;;;1470:18;;:::i;:::-;1434:56;1508:29;1530:6;1508:29;:::i;:::-;1500:37;;1592:4;1586;1582:15;1574:23;;1296:308;;;:::o;1610:307::-;1678:1;1688:113;1702:6;1699:1;1696:13;1688:113;;;1787:1;1782:3;1778:11;1772:18;1768:1;1763:3;1759:11;1752:39;1724:2;1721:1;1717:10;1712:15;;1688:113;;;1819:6;1816:1;1813:13;1810:101;;;1899:1;1890:6;1885:3;1881:16;1874:27;1810:101;1659:258;1610:307;;;:::o;1923:421::-;2012:5;2037:66;2053:49;2095:6;2053:49;:::i;:::-;2037:66;:::i;:::-;2028:75;;2126:6;2119:5;2112:21;2164:4;2157:5;2153:16;2202:3;2193:6;2188:3;2184:16;2181:25;2178:112;;;2209:79;;:::i;:::-;2178:112;2299:39;2331:6;2326:3;2321;2299:39;:::i;:::-;2018:326;1923:421;;;;;:::o;2364:355::-;2431:5;2480:3;2473:4;2465:6;2461:17;2457:27;2447:122;;2488:79;;:::i;:::-;2447:122;2598:6;2592:13;2623:90;2709:3;2701:6;2694:4;2686:6;2682:17;2623:90;:::i;:::-;2614:99;;2437:282;2364:355;;;;:::o;2725:853::-;2824:6;2832;2881:2;2869:9;2860:7;2856:23;2852:32;2849:119;;;2887:79;;:::i;:::-;2849:119;3028:1;3017:9;3013:17;3007:24;3058:18;3050:6;3047:30;3044:117;;;3080:79;;:::i;:::-;3044:117;3185:74;3251:7;3242:6;3231:9;3227:22;3185:74;:::i;:::-;3175:84;;2978:291;3329:2;3318:9;3314:18;3308:25;3360:18;3352:6;3349:30;3346:117;;;3382:79;;:::i;:::-;3346:117;3487:74;3553:7;3544:6;3533:9;3529:22;3487:74;:::i;:::-;3477:84;;3279:292;2725:853;;;;;:::o;3584:180::-;3632:77;3629:1;3622:88;3729:4;3726:1;3719:15;3753:4;3750:1;3743:15;3770:320;3814:6;3851:1;3845:4;3841:12;3831:22;;3898:1;3892:4;3888:12;3919:18;3909:81;;3975:4;3967:6;3963:17;3953:27;;3909:81;4037:2;4029:6;4026:14;4006:18;4003:38;4000:84;;;4056:18;;:::i;:::-;4000:84;3821:269;3770:320;;;:::o;1401:11610:1:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_698":{"entryPoint":2683,"id":698,"parameterSlots":3,"returnSlots":0},"@_approve_633":{"entryPoint":1447,"id":633,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_687":{"entryPoint":2678,"id":687,"parameterSlots":3,"returnSlots":0},"@_msgSender_3012":{"entryPoint":1439,"id":3012,"parameterSlots":0,"returnSlots":1},"@_spendAllowance_676":{"entryPoint":1906,"id":676,"parameterSlots":3,"returnSlots":0},"@_transfer_459":{"entryPoint":2046,"id":459,"parameterSlots":3,"returnSlots":0},"@allowance_254":{"entryPoint":1304,"id":254,"parameterSlots":2,"returnSlots":1},"@approve_279":{"entryPoint":776,"id":279,"parameterSlots":2,"returnSlots":1},"@balanceOf_211":{"entryPoint":932,"id":211,"parameterSlots":1,"returnSlots":1},"@decimals_187":{"entryPoint":868,"id":187,"parameterSlots":0,"returnSlots":1},"@decreaseAllowance_382":{"entryPoint":1150,"id":382,"parameterSlots":2,"returnSlots":1},"@increaseAllowance_341":{"entryPoint":877,"id":341,"parameterSlots":2,"returnSlots":1},"@name_167":{"entryPoint":630,"id":167,"parameterSlots":0,"returnSlots":1},"@symbol_177":{"entryPoint":1004,"id":177,"parameterSlots":0,"returnSlots":1},"@totalSupply_197":{"entryPoint":811,"id":197,"parameterSlots":0,"returnSlots":1},"@transferFrom_312":{"entryPoint":821,"id":312,"parameterSlots":3,"returnSlots":1},"@transfer_236":{"entryPoint":1269,"id":236,"parameterSlots":2,"returnSlots":1},"abi_decode_t_address":{"entryPoint":2953,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":3007,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3326,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":3371,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":3188,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":3028,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":3104,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":2784,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack":{"entryPoint":4436,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack":{"entryPoint":4036,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack":{"entryPoint":4144,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack":{"entryPoint":4582,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack":{"entryPoint":4290,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack":{"entryPoint":3890,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack":{"entryPoint":3744,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":3146,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":3284,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":3119,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2841,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4471,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4071,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4179,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4617,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4325,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3925,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3779,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":3161,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":3299,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":2688,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":2699,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":3579,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":2912,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":3092,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":2880,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":2974,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":3271,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":2716,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":3482,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":3532,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":3435,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":2875,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":2767,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f":{"entryPoint":4357,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029":{"entryPoint":3957,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe":{"entryPoint":4103,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6":{"entryPoint":4503,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea":{"entryPoint":4211,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208":{"entryPoint":3811,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8":{"entryPoint":3665,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":2930,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":2984,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:13861:26","statements":[{"body":{"nodeType":"YulBlock","src":"66:40:26","statements":[{"nodeType":"YulAssignment","src":"77:22:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"93:5:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"87:5:26"},"nodeType":"YulFunctionCall","src":"87:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"77:6:26"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"49:5:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"59:6:26","type":""}],"src":"7:99:26"},{"body":{"nodeType":"YulBlock","src":"208:73:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"225:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"230:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"218:6:26"},"nodeType":"YulFunctionCall","src":"218:19:26"},"nodeType":"YulExpressionStatement","src":"218:19:26"},{"nodeType":"YulAssignment","src":"246:29:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"265:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"270:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"261:3:26"},"nodeType":"YulFunctionCall","src":"261:14:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"246:11:26"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"180:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"185:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"196:11:26","type":""}],"src":"112:169:26"},{"body":{"nodeType":"YulBlock","src":"336:258:26","statements":[{"nodeType":"YulVariableDeclaration","src":"346:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"355:1:26","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"350:1:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"415:63:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"440:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"445:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"436:3:26"},"nodeType":"YulFunctionCall","src":"436:11:26"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"459:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"464:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"455:3:26"},"nodeType":"YulFunctionCall","src":"455:11:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"449:5:26"},"nodeType":"YulFunctionCall","src":"449:18:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"429:6:26"},"nodeType":"YulFunctionCall","src":"429:39:26"},"nodeType":"YulExpressionStatement","src":"429:39:26"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"376:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"379:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"373:2:26"},"nodeType":"YulFunctionCall","src":"373:13:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"387:19:26","statements":[{"nodeType":"YulAssignment","src":"389:15:26","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"398:1:26"},{"kind":"number","nodeType":"YulLiteral","src":"401:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"394:3:26"},"nodeType":"YulFunctionCall","src":"394:10:26"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"389:1:26"}]}]},"pre":{"nodeType":"YulBlock","src":"369:3:26","statements":[]},"src":"365:113:26"},{"body":{"nodeType":"YulBlock","src":"512:76:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"562:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"567:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"558:3:26"},"nodeType":"YulFunctionCall","src":"558:16:26"},{"kind":"number","nodeType":"YulLiteral","src":"576:1:26","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"551:6:26"},"nodeType":"YulFunctionCall","src":"551:27:26"},"nodeType":"YulExpressionStatement","src":"551:27:26"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"493:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"496:6:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"490:2:26"},"nodeType":"YulFunctionCall","src":"490:13:26"},"nodeType":"YulIf","src":"487:101:26"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"318:3:26","type":""},{"name":"dst","nodeType":"YulTypedName","src":"323:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"328:6:26","type":""}],"src":"287:307:26"},{"body":{"nodeType":"YulBlock","src":"648:54:26","statements":[{"nodeType":"YulAssignment","src":"658:38:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"683:2:26","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"672:3:26"},"nodeType":"YulFunctionCall","src":"672:14:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"692:2:26","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"688:3:26"},"nodeType":"YulFunctionCall","src":"688:7:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"668:3:26"},"nodeType":"YulFunctionCall","src":"668:28:26"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"658:6:26"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"631:5:26","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"641:6:26","type":""}],"src":"600:102:26"},{"body":{"nodeType":"YulBlock","src":"800:272:26","statements":[{"nodeType":"YulVariableDeclaration","src":"810:53:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"857:5:26"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"824:32:26"},"nodeType":"YulFunctionCall","src":"824:39:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"814:6:26","type":""}]},{"nodeType":"YulAssignment","src":"872:78:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"938:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"943:6:26"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"879:58:26"},"nodeType":"YulFunctionCall","src":"879:71:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"872:3:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"985:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"992:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"981:3:26"},"nodeType":"YulFunctionCall","src":"981:16:26"},{"name":"pos","nodeType":"YulIdentifier","src":"999:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"1004:6:26"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"959:21:26"},"nodeType":"YulFunctionCall","src":"959:52:26"},"nodeType":"YulExpressionStatement","src":"959:52:26"},{"nodeType":"YulAssignment","src":"1020:46:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1031:3:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1058:6:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1036:21:26"},"nodeType":"YulFunctionCall","src":"1036:29:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1027:3:26"},"nodeType":"YulFunctionCall","src":"1027:39:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1020:3:26"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"781:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"788:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"796:3:26","type":""}],"src":"708:364:26"},{"body":{"nodeType":"YulBlock","src":"1196:195:26","statements":[{"nodeType":"YulAssignment","src":"1206:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1218:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1229:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1214:3:26"},"nodeType":"YulFunctionCall","src":"1214:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1206:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1253:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1264:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1249:3:26"},"nodeType":"YulFunctionCall","src":"1249:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1272:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"1278:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1268:3:26"},"nodeType":"YulFunctionCall","src":"1268:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1242:6:26"},"nodeType":"YulFunctionCall","src":"1242:47:26"},"nodeType":"YulExpressionStatement","src":"1242:47:26"},{"nodeType":"YulAssignment","src":"1298:86:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1370:6:26"},{"name":"tail","nodeType":"YulIdentifier","src":"1379:4:26"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"1306:63:26"},"nodeType":"YulFunctionCall","src":"1306:78:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1298:4:26"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1168:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1180:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1191:4:26","type":""}],"src":"1078:313:26"},{"body":{"nodeType":"YulBlock","src":"1437:35:26","statements":[{"nodeType":"YulAssignment","src":"1447:19:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1463:2:26","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1457:5:26"},"nodeType":"YulFunctionCall","src":"1457:9:26"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1447:6:26"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1430:6:26","type":""}],"src":"1397:75:26"},{"body":{"nodeType":"YulBlock","src":"1567:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1584:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1587:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1577:6:26"},"nodeType":"YulFunctionCall","src":"1577:12:26"},"nodeType":"YulExpressionStatement","src":"1577:12:26"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"1478:117:26"},{"body":{"nodeType":"YulBlock","src":"1690:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1707:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1710:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1700:6:26"},"nodeType":"YulFunctionCall","src":"1700:12:26"},"nodeType":"YulExpressionStatement","src":"1700:12:26"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"1601:117:26"},{"body":{"nodeType":"YulBlock","src":"1769:81:26","statements":[{"nodeType":"YulAssignment","src":"1779:65:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1794:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"1801:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1790:3:26"},"nodeType":"YulFunctionCall","src":"1790:54:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1779:7:26"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1751:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1761:7:26","type":""}],"src":"1724:126:26"},{"body":{"nodeType":"YulBlock","src":"1901:51:26","statements":[{"nodeType":"YulAssignment","src":"1911:35:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1940:5:26"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"1922:17:26"},"nodeType":"YulFunctionCall","src":"1922:24:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1911:7:26"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1883:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1893:7:26","type":""}],"src":"1856:96:26"},{"body":{"nodeType":"YulBlock","src":"2001:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"2058:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2067:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2070:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2060:6:26"},"nodeType":"YulFunctionCall","src":"2060:12:26"},"nodeType":"YulExpressionStatement","src":"2060:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2024:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2049:5:26"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"2031:17:26"},"nodeType":"YulFunctionCall","src":"2031:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2021:2:26"},"nodeType":"YulFunctionCall","src":"2021:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2014:6:26"},"nodeType":"YulFunctionCall","src":"2014:43:26"},"nodeType":"YulIf","src":"2011:63:26"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1994:5:26","type":""}],"src":"1958:122:26"},{"body":{"nodeType":"YulBlock","src":"2138:87:26","statements":[{"nodeType":"YulAssignment","src":"2148:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2170:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2157:12:26"},"nodeType":"YulFunctionCall","src":"2157:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2148:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2213:5:26"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"2186:26:26"},"nodeType":"YulFunctionCall","src":"2186:33:26"},"nodeType":"YulExpressionStatement","src":"2186:33:26"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2116:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"2124:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2132:5:26","type":""}],"src":"2086:139:26"},{"body":{"nodeType":"YulBlock","src":"2276:32:26","statements":[{"nodeType":"YulAssignment","src":"2286:16:26","value":{"name":"value","nodeType":"YulIdentifier","src":"2297:5:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2286:7:26"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2258:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2268:7:26","type":""}],"src":"2231:77:26"},{"body":{"nodeType":"YulBlock","src":"2357:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"2414:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2423:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2426:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2416:6:26"},"nodeType":"YulFunctionCall","src":"2416:12:26"},"nodeType":"YulExpressionStatement","src":"2416:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2380:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2405:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2387:17:26"},"nodeType":"YulFunctionCall","src":"2387:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2377:2:26"},"nodeType":"YulFunctionCall","src":"2377:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2370:6:26"},"nodeType":"YulFunctionCall","src":"2370:43:26"},"nodeType":"YulIf","src":"2367:63:26"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2350:5:26","type":""}],"src":"2314:122:26"},{"body":{"nodeType":"YulBlock","src":"2494:87:26","statements":[{"nodeType":"YulAssignment","src":"2504:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2526:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2513:12:26"},"nodeType":"YulFunctionCall","src":"2513:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2504:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2569:5:26"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"2542:26:26"},"nodeType":"YulFunctionCall","src":"2542:33:26"},"nodeType":"YulExpressionStatement","src":"2542:33:26"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2472:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"2480:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2488:5:26","type":""}],"src":"2442:139:26"},{"body":{"nodeType":"YulBlock","src":"2670:391:26","statements":[{"body":{"nodeType":"YulBlock","src":"2716:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2718:77:26"},"nodeType":"YulFunctionCall","src":"2718:79:26"},"nodeType":"YulExpressionStatement","src":"2718:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2691:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"2700:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2687:3:26"},"nodeType":"YulFunctionCall","src":"2687:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"2712:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2683:3:26"},"nodeType":"YulFunctionCall","src":"2683:32:26"},"nodeType":"YulIf","src":"2680:119:26"},{"nodeType":"YulBlock","src":"2809:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"2824:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"2838:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2828:6:26","type":""}]},{"nodeType":"YulAssignment","src":"2853:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2888:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"2899:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2884:3:26"},"nodeType":"YulFunctionCall","src":"2884:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2908:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2863:20:26"},"nodeType":"YulFunctionCall","src":"2863:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2853:6:26"}]}]},{"nodeType":"YulBlock","src":"2936:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"2951:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"2965:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2955:6:26","type":""}]},{"nodeType":"YulAssignment","src":"2981:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3016:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"3027:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3012:3:26"},"nodeType":"YulFunctionCall","src":"3012:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3036:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2991:20:26"},"nodeType":"YulFunctionCall","src":"2991:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2981:6:26"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2632:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2643:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2655:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2663:6:26","type":""}],"src":"2587:474:26"},{"body":{"nodeType":"YulBlock","src":"3109:48:26","statements":[{"nodeType":"YulAssignment","src":"3119:32:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3144:5:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3137:6:26"},"nodeType":"YulFunctionCall","src":"3137:13:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3130:6:26"},"nodeType":"YulFunctionCall","src":"3130:21:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3119:7:26"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3091:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3101:7:26","type":""}],"src":"3067:90:26"},{"body":{"nodeType":"YulBlock","src":"3222:50:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3239:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3259:5:26"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"3244:14:26"},"nodeType":"YulFunctionCall","src":"3244:21:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3232:6:26"},"nodeType":"YulFunctionCall","src":"3232:34:26"},"nodeType":"YulExpressionStatement","src":"3232:34:26"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3210:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3217:3:26","type":""}],"src":"3163:109:26"},{"body":{"nodeType":"YulBlock","src":"3370:118:26","statements":[{"nodeType":"YulAssignment","src":"3380:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3392:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3403:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3388:3:26"},"nodeType":"YulFunctionCall","src":"3388:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3380:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3454:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3467:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3478:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3463:3:26"},"nodeType":"YulFunctionCall","src":"3463:17:26"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"3416:37:26"},"nodeType":"YulFunctionCall","src":"3416:65:26"},"nodeType":"YulExpressionStatement","src":"3416:65:26"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3342:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3354:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3365:4:26","type":""}],"src":"3278:210:26"},{"body":{"nodeType":"YulBlock","src":"3559:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3576:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3599:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3581:17:26"},"nodeType":"YulFunctionCall","src":"3581:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3569:6:26"},"nodeType":"YulFunctionCall","src":"3569:37:26"},"nodeType":"YulExpressionStatement","src":"3569:37:26"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3547:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3554:3:26","type":""}],"src":"3494:118:26"},{"body":{"nodeType":"YulBlock","src":"3716:124:26","statements":[{"nodeType":"YulAssignment","src":"3726:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3738:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3749:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3734:3:26"},"nodeType":"YulFunctionCall","src":"3734:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3726:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3806:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3819:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3830:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3815:3:26"},"nodeType":"YulFunctionCall","src":"3815:17:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"3762:43:26"},"nodeType":"YulFunctionCall","src":"3762:71:26"},"nodeType":"YulExpressionStatement","src":"3762:71:26"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3688:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3700:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3711:4:26","type":""}],"src":"3618:222:26"},{"body":{"nodeType":"YulBlock","src":"3946:519:26","statements":[{"body":{"nodeType":"YulBlock","src":"3992:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3994:77:26"},"nodeType":"YulFunctionCall","src":"3994:79:26"},"nodeType":"YulExpressionStatement","src":"3994:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3967:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"3976:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3963:3:26"},"nodeType":"YulFunctionCall","src":"3963:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"3988:2:26","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3959:3:26"},"nodeType":"YulFunctionCall","src":"3959:32:26"},"nodeType":"YulIf","src":"3956:119:26"},{"nodeType":"YulBlock","src":"4085:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"4100:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"4114:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4104:6:26","type":""}]},{"nodeType":"YulAssignment","src":"4129:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4164:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"4175:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4160:3:26"},"nodeType":"YulFunctionCall","src":"4160:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4184:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4139:20:26"},"nodeType":"YulFunctionCall","src":"4139:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4129:6:26"}]}]},{"nodeType":"YulBlock","src":"4212:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"4227:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"4241:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4231:6:26","type":""}]},{"nodeType":"YulAssignment","src":"4257:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4292:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"4303:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4288:3:26"},"nodeType":"YulFunctionCall","src":"4288:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4312:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4267:20:26"},"nodeType":"YulFunctionCall","src":"4267:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4257:6:26"}]}]},{"nodeType":"YulBlock","src":"4340:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"4355:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"4369:2:26","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4359:6:26","type":""}]},{"nodeType":"YulAssignment","src":"4385:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4420:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"4431:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4416:3:26"},"nodeType":"YulFunctionCall","src":"4416:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4440:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4395:20:26"},"nodeType":"YulFunctionCall","src":"4395:53:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4385:6:26"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3900:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3911:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3923:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3931:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3939:6:26","type":""}],"src":"3846:619:26"},{"body":{"nodeType":"YulBlock","src":"4514:43:26","statements":[{"nodeType":"YulAssignment","src":"4524:27:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4539:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"4546:4:26","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4535:3:26"},"nodeType":"YulFunctionCall","src":"4535:16:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4524:7:26"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4496:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4506:7:26","type":""}],"src":"4471:86:26"},{"body":{"nodeType":"YulBlock","src":"4624:51:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4641:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4662:5:26"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"4646:15:26"},"nodeType":"YulFunctionCall","src":"4646:22:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4634:6:26"},"nodeType":"YulFunctionCall","src":"4634:35:26"},"nodeType":"YulExpressionStatement","src":"4634:35:26"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4612:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4619:3:26","type":""}],"src":"4563:112:26"},{"body":{"nodeType":"YulBlock","src":"4775:120:26","statements":[{"nodeType":"YulAssignment","src":"4785:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4797:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4808:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4793:3:26"},"nodeType":"YulFunctionCall","src":"4793:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4785:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4861:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4874:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4885:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4870:3:26"},"nodeType":"YulFunctionCall","src":"4870:17:26"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"4821:39:26"},"nodeType":"YulFunctionCall","src":"4821:67:26"},"nodeType":"YulExpressionStatement","src":"4821:67:26"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4747:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4759:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4770:4:26","type":""}],"src":"4681:214:26"},{"body":{"nodeType":"YulBlock","src":"4967:263:26","statements":[{"body":{"nodeType":"YulBlock","src":"5013:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5015:77:26"},"nodeType":"YulFunctionCall","src":"5015:79:26"},"nodeType":"YulExpressionStatement","src":"5015:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4988:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"4997:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4984:3:26"},"nodeType":"YulFunctionCall","src":"4984:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"5009:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4980:3:26"},"nodeType":"YulFunctionCall","src":"4980:32:26"},"nodeType":"YulIf","src":"4977:119:26"},{"nodeType":"YulBlock","src":"5106:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"5121:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"5135:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5125:6:26","type":""}]},{"nodeType":"YulAssignment","src":"5150:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5185:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"5196:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5181:3:26"},"nodeType":"YulFunctionCall","src":"5181:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5205:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5160:20:26"},"nodeType":"YulFunctionCall","src":"5160:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5150:6:26"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4937:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4948:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4960:6:26","type":""}],"src":"4901:329:26"},{"body":{"nodeType":"YulBlock","src":"5319:391:26","statements":[{"body":{"nodeType":"YulBlock","src":"5365:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5367:77:26"},"nodeType":"YulFunctionCall","src":"5367:79:26"},"nodeType":"YulExpressionStatement","src":"5367:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5340:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"5349:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5336:3:26"},"nodeType":"YulFunctionCall","src":"5336:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"5361:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5332:3:26"},"nodeType":"YulFunctionCall","src":"5332:32:26"},"nodeType":"YulIf","src":"5329:119:26"},{"nodeType":"YulBlock","src":"5458:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"5473:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"5487:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5477:6:26","type":""}]},{"nodeType":"YulAssignment","src":"5502:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5537:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"5548:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5533:3:26"},"nodeType":"YulFunctionCall","src":"5533:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5557:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5512:20:26"},"nodeType":"YulFunctionCall","src":"5512:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5502:6:26"}]}]},{"nodeType":"YulBlock","src":"5585:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"5600:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"5614:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5604:6:26","type":""}]},{"nodeType":"YulAssignment","src":"5630:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5665:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"5676:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5661:3:26"},"nodeType":"YulFunctionCall","src":"5661:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5685:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5640:20:26"},"nodeType":"YulFunctionCall","src":"5640:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5630:6:26"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5281:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5292:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5304:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5312:6:26","type":""}],"src":"5236:474:26"},{"body":{"nodeType":"YulBlock","src":"5744:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5761:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5764:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5754:6:26"},"nodeType":"YulFunctionCall","src":"5754:88:26"},"nodeType":"YulExpressionStatement","src":"5754:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5858:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5861:4:26","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5851:6:26"},"nodeType":"YulFunctionCall","src":"5851:15:26"},"nodeType":"YulExpressionStatement","src":"5851:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5882:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5885:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5875:6:26"},"nodeType":"YulFunctionCall","src":"5875:15:26"},"nodeType":"YulExpressionStatement","src":"5875:15:26"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"5716:180:26"},{"body":{"nodeType":"YulBlock","src":"5953:269:26","statements":[{"nodeType":"YulAssignment","src":"5963:22:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"5977:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"5983:1:26","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"5973:3:26"},"nodeType":"YulFunctionCall","src":"5973:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"5963:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"5994:38:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6024:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"6030:1:26","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6020:3:26"},"nodeType":"YulFunctionCall","src":"6020:12:26"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"5998:18:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"6071:51:26","statements":[{"nodeType":"YulAssignment","src":"6085:27:26","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6099:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"6107:4:26","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6095:3:26"},"nodeType":"YulFunctionCall","src":"6095:17:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6085:6:26"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6051:18:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6044:6:26"},"nodeType":"YulFunctionCall","src":"6044:26:26"},"nodeType":"YulIf","src":"6041:81:26"},{"body":{"nodeType":"YulBlock","src":"6174:42:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"6188:16:26"},"nodeType":"YulFunctionCall","src":"6188:18:26"},"nodeType":"YulExpressionStatement","src":"6188:18:26"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6138:18:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6161:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"6169:2:26","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6158:2:26"},"nodeType":"YulFunctionCall","src":"6158:14:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6135:2:26"},"nodeType":"YulFunctionCall","src":"6135:38:26"},"nodeType":"YulIf","src":"6132:84:26"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"5937:4:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"5946:6:26","type":""}],"src":"5902:320:26"},{"body":{"nodeType":"YulBlock","src":"6256:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6273:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6276:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6266:6:26"},"nodeType":"YulFunctionCall","src":"6266:88:26"},"nodeType":"YulExpressionStatement","src":"6266:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6370:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6373:4:26","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6363:6:26"},"nodeType":"YulFunctionCall","src":"6363:15:26"},"nodeType":"YulExpressionStatement","src":"6363:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6394:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6397:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6387:6:26"},"nodeType":"YulFunctionCall","src":"6387:15:26"},"nodeType":"YulExpressionStatement","src":"6387:15:26"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"6228:180:26"},{"body":{"nodeType":"YulBlock","src":"6458:261:26","statements":[{"nodeType":"YulAssignment","src":"6468:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6491:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6473:17:26"},"nodeType":"YulFunctionCall","src":"6473:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"6468:1:26"}]},{"nodeType":"YulAssignment","src":"6502:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"6525:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6507:17:26"},"nodeType":"YulFunctionCall","src":"6507:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"6502:1:26"}]},{"body":{"nodeType":"YulBlock","src":"6665:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6667:16:26"},"nodeType":"YulFunctionCall","src":"6667:18:26"},"nodeType":"YulExpressionStatement","src":"6667:18:26"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6586:1:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6593:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"y","nodeType":"YulIdentifier","src":"6661:1:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6589:3:26"},"nodeType":"YulFunctionCall","src":"6589:74:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6583:2:26"},"nodeType":"YulFunctionCall","src":"6583:81:26"},"nodeType":"YulIf","src":"6580:107:26"},{"nodeType":"YulAssignment","src":"6697:16:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6708:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"6711:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6704:3:26"},"nodeType":"YulFunctionCall","src":"6704:9:26"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"6697:3:26"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"6445:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"6448:1:26","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"6454:3:26","type":""}],"src":"6414:305:26"},{"body":{"nodeType":"YulBlock","src":"6831:118:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6853:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"6861:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6849:3:26"},"nodeType":"YulFunctionCall","src":"6849:14:26"},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77","kind":"string","nodeType":"YulLiteral","src":"6865:34:26","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6842:6:26"},"nodeType":"YulFunctionCall","src":"6842:58:26"},"nodeType":"YulExpressionStatement","src":"6842:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6921:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"6929:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6917:3:26"},"nodeType":"YulFunctionCall","src":"6917:15:26"},{"hexValue":"207a65726f","kind":"string","nodeType":"YulLiteral","src":"6934:7:26","type":"","value":" zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6910:6:26"},"nodeType":"YulFunctionCall","src":"6910:32:26"},"nodeType":"YulExpressionStatement","src":"6910:32:26"}]},"name":"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"6823:6:26","type":""}],"src":"6725:224:26"},{"body":{"nodeType":"YulBlock","src":"7101:220:26","statements":[{"nodeType":"YulAssignment","src":"7111:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7177:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"7182:2:26","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7118:58:26"},"nodeType":"YulFunctionCall","src":"7118:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7111:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7283:3:26"}],"functionName":{"name":"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","nodeType":"YulIdentifier","src":"7194:88:26"},"nodeType":"YulFunctionCall","src":"7194:93:26"},"nodeType":"YulExpressionStatement","src":"7194:93:26"},{"nodeType":"YulAssignment","src":"7296:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7307:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"7312:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7303:3:26"},"nodeType":"YulFunctionCall","src":"7303:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7296:3:26"}]}]},"name":"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7089:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7097:3:26","type":""}],"src":"6955:366:26"},{"body":{"nodeType":"YulBlock","src":"7498:248:26","statements":[{"nodeType":"YulAssignment","src":"7508:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7520:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"7531:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7516:3:26"},"nodeType":"YulFunctionCall","src":"7516:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7508:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7555:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"7566:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7551:3:26"},"nodeType":"YulFunctionCall","src":"7551:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7574:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"7580:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7570:3:26"},"nodeType":"YulFunctionCall","src":"7570:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7544:6:26"},"nodeType":"YulFunctionCall","src":"7544:47:26"},"nodeType":"YulExpressionStatement","src":"7544:47:26"},{"nodeType":"YulAssignment","src":"7600:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7734:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7608:124:26"},"nodeType":"YulFunctionCall","src":"7608:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7600:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7478:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7493:4:26","type":""}],"src":"7327:419:26"},{"body":{"nodeType":"YulBlock","src":"7858:117:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7880:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"7888:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7876:3:26"},"nodeType":"YulFunctionCall","src":"7876:14:26"},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"7892:34:26","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7869:6:26"},"nodeType":"YulFunctionCall","src":"7869:58:26"},"nodeType":"YulExpressionStatement","src":"7869:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7948:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"7956:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7944:3:26"},"nodeType":"YulFunctionCall","src":"7944:15:26"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"7961:6:26","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7937:6:26"},"nodeType":"YulFunctionCall","src":"7937:31:26"},"nodeType":"YulExpressionStatement","src":"7937:31:26"}]},"name":"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7850:6:26","type":""}],"src":"7752:223:26"},{"body":{"nodeType":"YulBlock","src":"8127:220:26","statements":[{"nodeType":"YulAssignment","src":"8137:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8203:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"8208:2:26","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8144:58:26"},"nodeType":"YulFunctionCall","src":"8144:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8137:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8309:3:26"}],"functionName":{"name":"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","nodeType":"YulIdentifier","src":"8220:88:26"},"nodeType":"YulFunctionCall","src":"8220:93:26"},"nodeType":"YulExpressionStatement","src":"8220:93:26"},{"nodeType":"YulAssignment","src":"8322:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8333:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"8338:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8329:3:26"},"nodeType":"YulFunctionCall","src":"8329:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8322:3:26"}]}]},"name":"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8115:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8123:3:26","type":""}],"src":"7981:366:26"},{"body":{"nodeType":"YulBlock","src":"8524:248:26","statements":[{"nodeType":"YulAssignment","src":"8534:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8546:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"8557:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8542:3:26"},"nodeType":"YulFunctionCall","src":"8542:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8534:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8581:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"8592:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8577:3:26"},"nodeType":"YulFunctionCall","src":"8577:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8600:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"8606:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8596:3:26"},"nodeType":"YulFunctionCall","src":"8596:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8570:6:26"},"nodeType":"YulFunctionCall","src":"8570:47:26"},"nodeType":"YulExpressionStatement","src":"8570:47:26"},{"nodeType":"YulAssignment","src":"8626:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8760:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8634:124:26"},"nodeType":"YulFunctionCall","src":"8634:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8626:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8504:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8519:4:26","type":""}],"src":"8353:419:26"},{"body":{"nodeType":"YulBlock","src":"8884:115:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8906:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"8914:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8902:3:26"},"nodeType":"YulFunctionCall","src":"8902:14:26"},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f206164647265","kind":"string","nodeType":"YulLiteral","src":"8918:34:26","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8895:6:26"},"nodeType":"YulFunctionCall","src":"8895:58:26"},"nodeType":"YulExpressionStatement","src":"8895:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8974:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"8982:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8970:3:26"},"nodeType":"YulFunctionCall","src":"8970:15:26"},{"hexValue":"7373","kind":"string","nodeType":"YulLiteral","src":"8987:4:26","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8963:6:26"},"nodeType":"YulFunctionCall","src":"8963:29:26"},"nodeType":"YulExpressionStatement","src":"8963:29:26"}]},"name":"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"8876:6:26","type":""}],"src":"8778:221:26"},{"body":{"nodeType":"YulBlock","src":"9151:220:26","statements":[{"nodeType":"YulAssignment","src":"9161:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9227:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"9232:2:26","type":"","value":"34"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9168:58:26"},"nodeType":"YulFunctionCall","src":"9168:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9161:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9333:3:26"}],"functionName":{"name":"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","nodeType":"YulIdentifier","src":"9244:88:26"},"nodeType":"YulFunctionCall","src":"9244:93:26"},"nodeType":"YulExpressionStatement","src":"9244:93:26"},{"nodeType":"YulAssignment","src":"9346:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9357:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"9362:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9353:3:26"},"nodeType":"YulFunctionCall","src":"9353:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9346:3:26"}]}]},"name":"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9139:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9147:3:26","type":""}],"src":"9005:366:26"},{"body":{"nodeType":"YulBlock","src":"9548:248:26","statements":[{"nodeType":"YulAssignment","src":"9558:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9570:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"9581:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9566:3:26"},"nodeType":"YulFunctionCall","src":"9566:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9558:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9605:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"9616:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9601:3:26"},"nodeType":"YulFunctionCall","src":"9601:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9624:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"9630:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9620:3:26"},"nodeType":"YulFunctionCall","src":"9620:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9594:6:26"},"nodeType":"YulFunctionCall","src":"9594:47:26"},"nodeType":"YulExpressionStatement","src":"9594:47:26"},{"nodeType":"YulAssignment","src":"9650:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9784:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9658:124:26"},"nodeType":"YulFunctionCall","src":"9658:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9650:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9528:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9543:4:26","type":""}],"src":"9377:419:26"},{"body":{"nodeType":"YulBlock","src":"9908:73:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9930:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"9938:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9926:3:26"},"nodeType":"YulFunctionCall","src":"9926:14:26"},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","kind":"string","nodeType":"YulLiteral","src":"9942:31:26","type":"","value":"ERC20: insufficient allowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9919:6:26"},"nodeType":"YulFunctionCall","src":"9919:55:26"},"nodeType":"YulExpressionStatement","src":"9919:55:26"}]},"name":"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"9900:6:26","type":""}],"src":"9802:179:26"},{"body":{"nodeType":"YulBlock","src":"10133:220:26","statements":[{"nodeType":"YulAssignment","src":"10143:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10209:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"10214:2:26","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10150:58:26"},"nodeType":"YulFunctionCall","src":"10150:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10143:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10315:3:26"}],"functionName":{"name":"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","nodeType":"YulIdentifier","src":"10226:88:26"},"nodeType":"YulFunctionCall","src":"10226:93:26"},"nodeType":"YulExpressionStatement","src":"10226:93:26"},{"nodeType":"YulAssignment","src":"10328:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10339:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"10344:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10335:3:26"},"nodeType":"YulFunctionCall","src":"10335:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10328:3:26"}]}]},"name":"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10121:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10129:3:26","type":""}],"src":"9987:366:26"},{"body":{"nodeType":"YulBlock","src":"10530:248:26","statements":[{"nodeType":"YulAssignment","src":"10540:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10552:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"10563:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10548:3:26"},"nodeType":"YulFunctionCall","src":"10548:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10540:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10587:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"10598:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10583:3:26"},"nodeType":"YulFunctionCall","src":"10583:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10606:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"10612:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10602:3:26"},"nodeType":"YulFunctionCall","src":"10602:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10576:6:26"},"nodeType":"YulFunctionCall","src":"10576:47:26"},"nodeType":"YulExpressionStatement","src":"10576:47:26"},{"nodeType":"YulAssignment","src":"10632:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10766:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10640:124:26"},"nodeType":"YulFunctionCall","src":"10640:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10632:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10510:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10525:4:26","type":""}],"src":"10359:419:26"},{"body":{"nodeType":"YulBlock","src":"10890:118:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10912:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"10920:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10908:3:26"},"nodeType":"YulFunctionCall","src":"10908:14:26"},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"10924:34:26","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10901:6:26"},"nodeType":"YulFunctionCall","src":"10901:58:26"},"nodeType":"YulExpressionStatement","src":"10901:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10980:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"10988:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10976:3:26"},"nodeType":"YulFunctionCall","src":"10976:15:26"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"10993:7:26","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10969:6:26"},"nodeType":"YulFunctionCall","src":"10969:32:26"},"nodeType":"YulExpressionStatement","src":"10969:32:26"}]},"name":"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"10882:6:26","type":""}],"src":"10784:224:26"},{"body":{"nodeType":"YulBlock","src":"11160:220:26","statements":[{"nodeType":"YulAssignment","src":"11170:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11236:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"11241:2:26","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11177:58:26"},"nodeType":"YulFunctionCall","src":"11177:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11170:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11342:3:26"}],"functionName":{"name":"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","nodeType":"YulIdentifier","src":"11253:88:26"},"nodeType":"YulFunctionCall","src":"11253:93:26"},"nodeType":"YulExpressionStatement","src":"11253:93:26"},{"nodeType":"YulAssignment","src":"11355:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11366:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"11371:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11362:3:26"},"nodeType":"YulFunctionCall","src":"11362:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11355:3:26"}]}]},"name":"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11148:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11156:3:26","type":""}],"src":"11014:366:26"},{"body":{"nodeType":"YulBlock","src":"11557:248:26","statements":[{"nodeType":"YulAssignment","src":"11567:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11579:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"11590:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11575:3:26"},"nodeType":"YulFunctionCall","src":"11575:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11567:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11614:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"11625:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11610:3:26"},"nodeType":"YulFunctionCall","src":"11610:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11633:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"11639:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11629:3:26"},"nodeType":"YulFunctionCall","src":"11629:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11603:6:26"},"nodeType":"YulFunctionCall","src":"11603:47:26"},"nodeType":"YulExpressionStatement","src":"11603:47:26"},{"nodeType":"YulAssignment","src":"11659:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11793:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11667:124:26"},"nodeType":"YulFunctionCall","src":"11667:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11659:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11537:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11552:4:26","type":""}],"src":"11386:419:26"},{"body":{"nodeType":"YulBlock","src":"11917:116:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11939:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"11947:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11935:3:26"},"nodeType":"YulFunctionCall","src":"11935:14:26"},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472","kind":"string","nodeType":"YulLiteral","src":"11951:34:26","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11928:6:26"},"nodeType":"YulFunctionCall","src":"11928:58:26"},"nodeType":"YulExpressionStatement","src":"11928:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12007:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"12015:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12003:3:26"},"nodeType":"YulFunctionCall","src":"12003:15:26"},{"hexValue":"657373","kind":"string","nodeType":"YulLiteral","src":"12020:5:26","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11996:6:26"},"nodeType":"YulFunctionCall","src":"11996:30:26"},"nodeType":"YulExpressionStatement","src":"11996:30:26"}]},"name":"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11909:6:26","type":""}],"src":"11811:222:26"},{"body":{"nodeType":"YulBlock","src":"12185:220:26","statements":[{"nodeType":"YulAssignment","src":"12195:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12261:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"12266:2:26","type":"","value":"35"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12202:58:26"},"nodeType":"YulFunctionCall","src":"12202:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12195:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12367:3:26"}],"functionName":{"name":"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","nodeType":"YulIdentifier","src":"12278:88:26"},"nodeType":"YulFunctionCall","src":"12278:93:26"},"nodeType":"YulExpressionStatement","src":"12278:93:26"},{"nodeType":"YulAssignment","src":"12380:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12391:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"12396:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12387:3:26"},"nodeType":"YulFunctionCall","src":"12387:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12380:3:26"}]}]},"name":"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12173:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12181:3:26","type":""}],"src":"12039:366:26"},{"body":{"nodeType":"YulBlock","src":"12582:248:26","statements":[{"nodeType":"YulAssignment","src":"12592:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12604:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12615:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12600:3:26"},"nodeType":"YulFunctionCall","src":"12600:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12592:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12639:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12650:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12635:3:26"},"nodeType":"YulFunctionCall","src":"12635:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12658:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"12664:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12654:3:26"},"nodeType":"YulFunctionCall","src":"12654:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12628:6:26"},"nodeType":"YulFunctionCall","src":"12628:47:26"},"nodeType":"YulExpressionStatement","src":"12628:47:26"},{"nodeType":"YulAssignment","src":"12684:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12818:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12692:124:26"},"nodeType":"YulFunctionCall","src":"12692:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12684:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12562:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12577:4:26","type":""}],"src":"12411:419:26"},{"body":{"nodeType":"YulBlock","src":"12942:119:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12964:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"12972:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12960:3:26"},"nodeType":"YulFunctionCall","src":"12960:14:26"},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062","kind":"string","nodeType":"YulLiteral","src":"12976:34:26","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12953:6:26"},"nodeType":"YulFunctionCall","src":"12953:58:26"},"nodeType":"YulExpressionStatement","src":"12953:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13032:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"13040:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13028:3:26"},"nodeType":"YulFunctionCall","src":"13028:15:26"},{"hexValue":"616c616e6365","kind":"string","nodeType":"YulLiteral","src":"13045:8:26","type":"","value":"alance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13021:6:26"},"nodeType":"YulFunctionCall","src":"13021:33:26"},"nodeType":"YulExpressionStatement","src":"13021:33:26"}]},"name":"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12934:6:26","type":""}],"src":"12836:225:26"},{"body":{"nodeType":"YulBlock","src":"13213:220:26","statements":[{"nodeType":"YulAssignment","src":"13223:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13289:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"13294:2:26","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13230:58:26"},"nodeType":"YulFunctionCall","src":"13230:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13223:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13395:3:26"}],"functionName":{"name":"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","nodeType":"YulIdentifier","src":"13306:88:26"},"nodeType":"YulFunctionCall","src":"13306:93:26"},"nodeType":"YulExpressionStatement","src":"13306:93:26"},{"nodeType":"YulAssignment","src":"13408:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13419:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"13424:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13415:3:26"},"nodeType":"YulFunctionCall","src":"13415:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13408:3:26"}]}]},"name":"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13201:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13209:3:26","type":""}],"src":"13067:366:26"},{"body":{"nodeType":"YulBlock","src":"13610:248:26","statements":[{"nodeType":"YulAssignment","src":"13620:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13632:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"13643:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13628:3:26"},"nodeType":"YulFunctionCall","src":"13628:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13620:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13667:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"13678:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13663:3:26"},"nodeType":"YulFunctionCall","src":"13663:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13686:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"13692:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13682:3:26"},"nodeType":"YulFunctionCall","src":"13682:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13656:6:26"},"nodeType":"YulFunctionCall","src":"13656:47:26"},"nodeType":"YulExpressionStatement","src":"13656:47:26"},{"nodeType":"YulAssignment","src":"13712:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13846:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13720:124:26"},"nodeType":"YulFunctionCall","src":"13720:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13712:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13590:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13605:4:26","type":""}],"src":"13439:419:26"}]},"contents":"{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: decreased allowance below\")\n\n        mstore(add(memPtr, 32), \" zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve from the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve to the zero addre\")\n\n        mstore(add(memPtr, 32), \"ss\")\n\n    }\n\n    function abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: insufficient allowance\")\n\n    }\n\n    function abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer from the zero ad\")\n\n        mstore(add(memPtr, 32), \"dress\")\n\n    }\n\n    function abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer to the zero addr\")\n\n        mstore(add(memPtr, 32), \"ess\")\n\n    }\n\n    function abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 35)\n        store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer amount exceeds b\")\n\n        mstore(add(memPtr, 32), \"alance\")\n\n    }\n\n    function abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":26,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610b19565b60405180910390f35b6100e660048036038101906100e19190610bd4565b610308565b6040516100f39190610c2f565b60405180910390f35b61010461032b565b6040516101119190610c59565b60405180910390f35b610134600480360381019061012f9190610c74565b610335565b6040516101419190610c2f565b60405180910390f35b610152610364565b60405161015f9190610ce3565b60405180910390f35b610182600480360381019061017d9190610bd4565b61036d565b60405161018f9190610c2f565b60405180910390f35b6101b260048036038101906101ad9190610cfe565b6103a4565b6040516101bf9190610c59565b60405180910390f35b6101d06103ec565b6040516101dd9190610b19565b60405180910390f35b61020060048036038101906101fb9190610bd4565b61047e565b60405161020d9190610c2f565b60405180910390f35b610230600480360381019061022b9190610bd4565b6104f5565b60405161023d9190610c2f565b60405180910390f35b610260600480360381019061025b9190610d2b565b610518565b60405161026d9190610c59565b60405180910390f35b60606003805461028590610d9a565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190610d9a565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b60008061031361059f565b90506103208185856105a7565b600191505092915050565b6000600254905090565b60008061034061059f565b905061034d858285610772565b6103588585856107fe565b60019150509392505050565b60006012905090565b60008061037861059f565b905061039981858561038a8589610518565b6103949190610dfb565b6105a7565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546103fb90610d9a565b80601f016020809104026020016040519081016040528092919081815260200182805461042790610d9a565b80156104745780601f1061044957610100808354040283529160200191610474565b820191906000526020600020905b81548152906001019060200180831161045757829003601f168201915b5050505050905090565b60008061048961059f565b905060006104978286610518565b9050838110156104dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d390610ec3565b60405180910390fd5b6104e982868684036105a7565b60019250505092915050565b60008061050061059f565b905061050d8185856107fe565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060e90610f55565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067e90610fe7565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107659190610c59565b60405180910390a3505050565b600061077e8484610518565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107f857818110156107ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e190611053565b60405180910390fd5b6107f784848484036105a7565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561086e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610865906110e5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d590611177565b60405180910390fd5b6108e9838383610a76565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561096f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096690611209565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a5d9190610c59565b60405180910390a3610a70848484610a7b565b50505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610aba578082015181840152602081019050610a9f565b83811115610ac9576000848401525b50505050565b6000601f19601f8301169050919050565b6000610aeb82610a80565b610af58185610a8b565b9350610b05818560208601610a9c565b610b0e81610acf565b840191505092915050565b60006020820190508181036000830152610b338184610ae0565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b6b82610b40565b9050919050565b610b7b81610b60565b8114610b8657600080fd5b50565b600081359050610b9881610b72565b92915050565b6000819050919050565b610bb181610b9e565b8114610bbc57600080fd5b50565b600081359050610bce81610ba8565b92915050565b60008060408385031215610beb57610bea610b3b565b5b6000610bf985828601610b89565b9250506020610c0a85828601610bbf565b9150509250929050565b60008115159050919050565b610c2981610c14565b82525050565b6000602082019050610c446000830184610c20565b92915050565b610c5381610b9e565b82525050565b6000602082019050610c6e6000830184610c4a565b92915050565b600080600060608486031215610c8d57610c8c610b3b565b5b6000610c9b86828701610b89565b9350506020610cac86828701610b89565b9250506040610cbd86828701610bbf565b9150509250925092565b600060ff82169050919050565b610cdd81610cc7565b82525050565b6000602082019050610cf86000830184610cd4565b92915050565b600060208284031215610d1457610d13610b3b565b5b6000610d2284828501610b89565b91505092915050565b60008060408385031215610d4257610d41610b3b565b5b6000610d5085828601610b89565b9250506020610d6185828601610b89565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610db257607f821691505b60208210811415610dc657610dc5610d6b565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e0682610b9e565b9150610e1183610b9e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e4657610e45610dcc565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000610ead602583610a8b565b9150610eb882610e51565b604082019050919050565b60006020820190508181036000830152610edc81610ea0565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000610f3f602483610a8b565b9150610f4a82610ee3565b604082019050919050565b60006020820190508181036000830152610f6e81610f32565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000610fd1602283610a8b565b9150610fdc82610f75565b604082019050919050565b6000602082019050818103600083015261100081610fc4565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061103d601d83610a8b565b915061104882611007565b602082019050919050565b6000602082019050818103600083015261106c81611030565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006110cf602583610a8b565b91506110da82611073565b604082019050919050565b600060208201905081810360008301526110fe816110c2565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611161602383610a8b565b915061116c82611105565b604082019050919050565b6000602082019050818103600083015261119081611154565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006111f3602683610a8b565b91506111fe82611197565b604082019050919050565b60006020820190508181036000830152611222816111e6565b905091905056fea2646970667358221220137fbada0346aceda4e5b17bda369789df5c3b38b92b2beb3e9418c8b4fce7b464736f6c63430008090033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x246 JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x11A JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x14A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x276 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0xB19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE1 SWAP2 SWAP1 PUSH2 0xBD4 JUMP JUMPDEST PUSH2 0x308 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xC2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x104 PUSH2 0x32B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x111 SWAP2 SWAP1 PUSH2 0xC59 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x134 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x12F SWAP2 SWAP1 PUSH2 0xC74 JUMP JUMPDEST PUSH2 0x335 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x141 SWAP2 SWAP1 PUSH2 0xC2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x152 PUSH2 0x364 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15F SWAP2 SWAP1 PUSH2 0xCE3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x182 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17D SWAP2 SWAP1 PUSH2 0xBD4 JUMP JUMPDEST PUSH2 0x36D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18F SWAP2 SWAP1 PUSH2 0xC2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1B2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AD SWAP2 SWAP1 PUSH2 0xCFE JUMP JUMPDEST PUSH2 0x3A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BF SWAP2 SWAP1 PUSH2 0xC59 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D0 PUSH2 0x3EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1DD SWAP2 SWAP1 PUSH2 0xB19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x200 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FB SWAP2 SWAP1 PUSH2 0xBD4 JUMP JUMPDEST PUSH2 0x47E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x20D SWAP2 SWAP1 PUSH2 0xC2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x230 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x22B SWAP2 SWAP1 PUSH2 0xBD4 JUMP JUMPDEST PUSH2 0x4F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23D SWAP2 SWAP1 PUSH2 0xC2F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x260 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25B SWAP2 SWAP1 PUSH2 0xD2B JUMP JUMPDEST PUSH2 0x518 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26D SWAP2 SWAP1 PUSH2 0xC59 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x285 SWAP1 PUSH2 0xD9A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B1 SWAP1 PUSH2 0xD9A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FE JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2FE JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x313 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP PUSH2 0x320 DUP2 DUP6 DUP6 PUSH2 0x5A7 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x340 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP PUSH2 0x34D DUP6 DUP3 DUP6 PUSH2 0x772 JUMP JUMPDEST PUSH2 0x358 DUP6 DUP6 DUP6 PUSH2 0x7FE JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x378 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP PUSH2 0x399 DUP2 DUP6 DUP6 PUSH2 0x38A DUP6 DUP10 PUSH2 0x518 JUMP JUMPDEST PUSH2 0x394 SWAP2 SWAP1 PUSH2 0xDFB JUMP JUMPDEST PUSH2 0x5A7 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x3FB SWAP1 PUSH2 0xD9A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x427 SWAP1 PUSH2 0xD9A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x474 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x449 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x474 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x457 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x489 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x497 DUP3 DUP7 PUSH2 0x518 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x4DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D3 SWAP1 PUSH2 0xEC3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4E9 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x5A7 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x500 PUSH2 0x59F JUMP JUMPDEST SWAP1 POP PUSH2 0x50D DUP2 DUP6 DUP6 PUSH2 0x7FE JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x617 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x60E SWAP1 PUSH2 0xF55 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x687 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x67E SWAP1 PUSH2 0xFE7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x765 SWAP2 SWAP1 PUSH2 0xC59 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x77E DUP5 DUP5 PUSH2 0x518 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x7F8 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x7EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7E1 SWAP1 PUSH2 0x1053 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7F7 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x5A7 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x86E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x865 SWAP1 PUSH2 0x10E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x8DE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D5 SWAP1 PUSH2 0x1177 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8E9 DUP4 DUP4 DUP4 PUSH2 0xA76 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x96F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x966 SWAP1 PUSH2 0x1209 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xA5D SWAP2 SWAP1 PUSH2 0xC59 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xA70 DUP5 DUP5 DUP5 PUSH2 0xA7B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xABA JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xA9F JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xAC9 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAEB DUP3 PUSH2 0xA80 JUMP JUMPDEST PUSH2 0xAF5 DUP2 DUP6 PUSH2 0xA8B JUMP JUMPDEST SWAP4 POP PUSH2 0xB05 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xA9C JUMP JUMPDEST PUSH2 0xB0E DUP2 PUSH2 0xACF JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB33 DUP2 DUP5 PUSH2 0xAE0 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB6B DUP3 PUSH2 0xB40 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB7B DUP2 PUSH2 0xB60 JUMP JUMPDEST DUP2 EQ PUSH2 0xB86 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xB98 DUP2 PUSH2 0xB72 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xBB1 DUP2 PUSH2 0xB9E JUMP JUMPDEST DUP2 EQ PUSH2 0xBBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xBCE DUP2 PUSH2 0xBA8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xBEB JUMPI PUSH2 0xBEA PUSH2 0xB3B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xBF9 DUP6 DUP3 DUP7 ADD PUSH2 0xB89 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xC0A DUP6 DUP3 DUP7 ADD PUSH2 0xBBF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC29 DUP2 PUSH2 0xC14 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC44 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC20 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC53 DUP2 PUSH2 0xB9E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC6E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xC4A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xC8D JUMPI PUSH2 0xC8C PUSH2 0xB3B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xC9B DUP7 DUP3 DUP8 ADD PUSH2 0xB89 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xCAC DUP7 DUP3 DUP8 ADD PUSH2 0xB89 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xCBD DUP7 DUP3 DUP8 ADD PUSH2 0xBBF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCDD DUP2 PUSH2 0xCC7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xCF8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xCD4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD14 JUMPI PUSH2 0xD13 PUSH2 0xB3B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD22 DUP5 DUP3 DUP6 ADD PUSH2 0xB89 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD42 JUMPI PUSH2 0xD41 PUSH2 0xB3B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD50 DUP6 DUP3 DUP7 ADD PUSH2 0xB89 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xD61 DUP6 DUP3 DUP7 ADD PUSH2 0xB89 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xDB2 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0xDC6 JUMPI PUSH2 0xDC5 PUSH2 0xD6B JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xE06 DUP3 PUSH2 0xB9E JUMP JUMPDEST SWAP2 POP PUSH2 0xE11 DUP4 PUSH2 0xB9E JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0xE46 JUMPI PUSH2 0xE45 PUSH2 0xDCC JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEAD PUSH1 0x25 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0xEB8 DUP3 PUSH2 0xE51 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xEDC DUP2 PUSH2 0xEA0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF3F PUSH1 0x24 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0xF4A DUP3 PUSH2 0xEE3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF6E DUP2 PUSH2 0xF32 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFD1 PUSH1 0x22 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0xFDC DUP3 PUSH2 0xF75 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1000 DUP2 PUSH2 0xFC4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x103D PUSH1 0x1D DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0x1048 DUP3 PUSH2 0x1007 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x106C DUP2 PUSH2 0x1030 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10CF PUSH1 0x25 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0x10DA DUP3 PUSH2 0x1073 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x10FE DUP2 PUSH2 0x10C2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1161 PUSH1 0x23 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0x116C DUP3 PUSH2 0x1105 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1190 DUP2 PUSH2 0x1154 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11F3 PUSH1 0x26 DUP4 PUSH2 0xA8B JUMP JUMPDEST SWAP2 POP PUSH2 0x11FE DUP3 PUSH2 0x1197 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1222 DUP2 PUSH2 0x11E6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SGT PUSH32 0xBADA0346ACEDA4E5B17BDA369789DF5C3B38B92B2BEB3E9418C8B4FCE7B46473 PUSH16 0x6C634300080900330000000000000000 ","sourceMap":"1401:11610:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4431:197;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3242:106;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5190:286;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3091:91;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5871:234;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3406:125;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2365:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6592:427;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3727:189;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3974:149;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2154:98;2208:13;2240:5;2233:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98;:::o;4431:197::-;4514:4;4530:13;4546:12;:10;:12::i;:::-;4530:28;;4568:32;4577:5;4584:7;4593:6;4568:8;:32::i;:::-;4617:4;4610:11;;;4431:197;;;;:::o;3242:106::-;3303:7;3329:12;;3322:19;;3242:106;:::o;5190:286::-;5317:4;5333:15;5351:12;:10;:12::i;:::-;5333:30;;5373:38;5389:4;5395:7;5404:6;5373:15;:38::i;:::-;5421:27;5431:4;5437:2;5441:6;5421:9;:27::i;:::-;5465:4;5458:11;;;5190:286;;;;;:::o;3091:91::-;3149:5;3173:2;3166:9;;3091:91;:::o;5871:234::-;5959:4;5975:13;5991:12;:10;:12::i;:::-;5975:28;;6013:64;6022:5;6029:7;6066:10;6038:25;6048:5;6055:7;6038:9;:25::i;:::-;:38;;;;:::i;:::-;6013:8;:64::i;:::-;6094:4;6087:11;;;5871:234;;;;:::o;3406:125::-;3480:7;3506:9;:18;3516:7;3506:18;;;;;;;;;;;;;;;;3499:25;;3406:125;;;:::o;2365:102::-;2421:13;2453:7;2446:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2365:102;:::o;6592:427::-;6685:4;6701:13;6717:12;:10;:12::i;:::-;6701:28;;6739:24;6766:25;6776:5;6783:7;6766:9;:25::i;:::-;6739:52;;6829:15;6809:16;:35;;6801:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;6920:60;6929:5;6936:7;6964:15;6945:16;:34;6920:8;:60::i;:::-;7008:4;7001:11;;;;6592:427;;;;:::o;3727:189::-;3806:4;3822:13;3838:12;:10;:12::i;:::-;3822:28;;3860;3870:5;3877:2;3881:6;3860:9;:28::i;:::-;3905:4;3898:11;;;3727:189;;;;:::o;3974:149::-;4063:7;4089:11;:18;4101:5;4089:18;;;;;;;;;;;;;;;:27;4108:7;4089:27;;;;;;;;;;;;;;;;4082:34;;3974:149;;;;:::o;640:96:15:-;693:7;719:10;712:17;;640:96;:::o;10504:370:1:-;10652:1;10635:19;;:5;:19;;;;10627:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;10732:1;10713:21;;:7;:21;;;;10705:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;10814:6;10784:11;:18;10796:5;10784:18;;;;;;;;;;;;;;;:27;10803:7;10784:27;;;;;;;;;;;;;;;:36;;;;10851:7;10835:32;;10844:5;10835:32;;;10860:6;10835:32;;;;;;:::i;:::-;;;;;;;;10504:370;;;:::o;11155:441::-;11285:24;11312:25;11322:5;11329:7;11312:9;:25::i;:::-;11285:52;;11371:17;11351:16;:37;11347:243;;11432:6;11412:16;:26;;11404:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11514:51;11523:5;11530:7;11558:6;11539:16;:25;11514:8;:51::i;:::-;11347:243;11275:321;11155:441;;;:::o;7473:818::-;7615:1;7599:18;;:4;:18;;;;7591:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;7691:1;7677:16;;:2;:16;;;;7669:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;7744:38;7765:4;7771:2;7775:6;7744:20;:38::i;:::-;7793:19;7815:9;:15;7825:4;7815:15;;;;;;;;;;;;;;;;7793:37;;7863:6;7848:11;:21;;7840:72;;;;;;;;;;;;:::i;:::-;;;;;;;;;7978:6;7964:11;:20;7946:9;:15;7956:4;7946:15;;;;;;;;;;;;;;;:38;;;;8178:6;8161:9;:13;8171:2;8161:13;;;;;;;;;;;;;;;;:23;;;;;;;;;;;8225:2;8210:26;;8219:4;8210:26;;;8229:6;8210:26;;;;;;:::i;:::-;;;;;;;;8247:37;8267:4;8273:2;8277:6;8247:19;:37::i;:::-;7581:710;7473:818;;;:::o;12180:121::-;;;;:::o;12889:120::-;;;;:::o;7:99:26:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:169::-;196:11;230:6;225:3;218:19;270:4;265:3;261:14;246:29;;112:169;;;;:::o;287:307::-;355:1;365:113;379:6;376:1;373:13;365:113;;;464:1;459:3;455:11;449:18;445:1;440:3;436:11;429:39;401:2;398:1;394:10;389:15;;365:113;;;496:6;493:1;490:13;487:101;;;576:1;567:6;562:3;558:16;551:27;487:101;336:258;287:307;;;:::o;600:102::-;641:6;692:2;688:7;683:2;676:5;672:14;668:28;658:38;;600:102;;;:::o;708:364::-;796:3;824:39;857:5;824:39;:::i;:::-;879:71;943:6;938:3;879:71;:::i;:::-;872:78;;959:52;1004:6;999:3;992:4;985:5;981:16;959:52;:::i;:::-;1036:29;1058:6;1036:29;:::i;:::-;1031:3;1027:39;1020:46;;800:272;708:364;;;;:::o;1078:313::-;1191:4;1229:2;1218:9;1214:18;1206:26;;1278:9;1272:4;1268:20;1264:1;1253:9;1249:17;1242:47;1306:78;1379:4;1370:6;1306:78;:::i;:::-;1298:86;;1078:313;;;;:::o;1478:117::-;1587:1;1584;1577:12;1724:126;1761:7;1801:42;1794:5;1790:54;1779:65;;1724:126;;;:::o;1856:96::-;1893:7;1922:24;1940:5;1922:24;:::i;:::-;1911:35;;1856:96;;;:::o;1958:122::-;2031:24;2049:5;2031:24;:::i;:::-;2024:5;2021:35;2011:63;;2070:1;2067;2060:12;2011:63;1958:122;:::o;2086:139::-;2132:5;2170:6;2157:20;2148:29;;2186:33;2213:5;2186:33;:::i;:::-;2086:139;;;;:::o;2231:77::-;2268:7;2297:5;2286:16;;2231:77;;;:::o;2314:122::-;2387:24;2405:5;2387:24;:::i;:::-;2380:5;2377:35;2367:63;;2426:1;2423;2416:12;2367:63;2314:122;:::o;2442:139::-;2488:5;2526:6;2513:20;2504:29;;2542:33;2569:5;2542:33;:::i;:::-;2442:139;;;;:::o;2587:474::-;2655:6;2663;2712:2;2700:9;2691:7;2687:23;2683:32;2680:119;;;2718:79;;:::i;:::-;2680:119;2838:1;2863:53;2908:7;2899:6;2888:9;2884:22;2863:53;:::i;:::-;2853:63;;2809:117;2965:2;2991:53;3036:7;3027:6;3016:9;3012:22;2991:53;:::i;:::-;2981:63;;2936:118;2587:474;;;;;:::o;3067:90::-;3101:7;3144:5;3137:13;3130:21;3119:32;;3067:90;;;:::o;3163:109::-;3244:21;3259:5;3244:21;:::i;:::-;3239:3;3232:34;3163:109;;:::o;3278:210::-;3365:4;3403:2;3392:9;3388:18;3380:26;;3416:65;3478:1;3467:9;3463:17;3454:6;3416:65;:::i;:::-;3278:210;;;;:::o;3494:118::-;3581:24;3599:5;3581:24;:::i;:::-;3576:3;3569:37;3494:118;;:::o;3618:222::-;3711:4;3749:2;3738:9;3734:18;3726:26;;3762:71;3830:1;3819:9;3815:17;3806:6;3762:71;:::i;:::-;3618:222;;;;:::o;3846:619::-;3923:6;3931;3939;3988:2;3976:9;3967:7;3963:23;3959:32;3956:119;;;3994:79;;:::i;:::-;3956:119;4114:1;4139:53;4184:7;4175:6;4164:9;4160:22;4139:53;:::i;:::-;4129:63;;4085:117;4241:2;4267:53;4312:7;4303:6;4292:9;4288:22;4267:53;:::i;:::-;4257:63;;4212:118;4369:2;4395:53;4440:7;4431:6;4420:9;4416:22;4395:53;:::i;:::-;4385:63;;4340:118;3846:619;;;;;:::o;4471:86::-;4506:7;4546:4;4539:5;4535:16;4524:27;;4471:86;;;:::o;4563:112::-;4646:22;4662:5;4646:22;:::i;:::-;4641:3;4634:35;4563:112;;:::o;4681:214::-;4770:4;4808:2;4797:9;4793:18;4785:26;;4821:67;4885:1;4874:9;4870:17;4861:6;4821:67;:::i;:::-;4681:214;;;;:::o;4901:329::-;4960:6;5009:2;4997:9;4988:7;4984:23;4980:32;4977:119;;;5015:79;;:::i;:::-;4977:119;5135:1;5160:53;5205:7;5196:6;5185:9;5181:22;5160:53;:::i;:::-;5150:63;;5106:117;4901:329;;;;:::o;5236:474::-;5304:6;5312;5361:2;5349:9;5340:7;5336:23;5332:32;5329:119;;;5367:79;;:::i;:::-;5329:119;5487:1;5512:53;5557:7;5548:6;5537:9;5533:22;5512:53;:::i;:::-;5502:63;;5458:117;5614:2;5640:53;5685:7;5676:6;5665:9;5661:22;5640:53;:::i;:::-;5630:63;;5585:118;5236:474;;;;;:::o;5716:180::-;5764:77;5761:1;5754:88;5861:4;5858:1;5851:15;5885:4;5882:1;5875:15;5902:320;5946:6;5983:1;5977:4;5973:12;5963:22;;6030:1;6024:4;6020:12;6051:18;6041:81;;6107:4;6099:6;6095:17;6085:27;;6041:81;6169:2;6161:6;6158:14;6138:18;6135:38;6132:84;;;6188:18;;:::i;:::-;6132:84;5953:269;5902:320;;;:::o;6228:180::-;6276:77;6273:1;6266:88;6373:4;6370:1;6363:15;6397:4;6394:1;6387:15;6414:305;6454:3;6473:20;6491:1;6473:20;:::i;:::-;6468:25;;6507:20;6525:1;6507:20;:::i;:::-;6502:25;;6661:1;6593:66;6589:74;6586:1;6583:81;6580:107;;;6667:18;;:::i;:::-;6580:107;6711:1;6708;6704:9;6697:16;;6414:305;;;;:::o;6725:224::-;6865:34;6861:1;6853:6;6849:14;6842:58;6934:7;6929:2;6921:6;6917:15;6910:32;6725:224;:::o;6955:366::-;7097:3;7118:67;7182:2;7177:3;7118:67;:::i;:::-;7111:74;;7194:93;7283:3;7194:93;:::i;:::-;7312:2;7307:3;7303:12;7296:19;;6955:366;;;:::o;7327:419::-;7493:4;7531:2;7520:9;7516:18;7508:26;;7580:9;7574:4;7570:20;7566:1;7555:9;7551:17;7544:47;7608:131;7734:4;7608:131;:::i;:::-;7600:139;;7327:419;;;:::o;7752:223::-;7892:34;7888:1;7880:6;7876:14;7869:58;7961:6;7956:2;7948:6;7944:15;7937:31;7752:223;:::o;7981:366::-;8123:3;8144:67;8208:2;8203:3;8144:67;:::i;:::-;8137:74;;8220:93;8309:3;8220:93;:::i;:::-;8338:2;8333:3;8329:12;8322:19;;7981:366;;;:::o;8353:419::-;8519:4;8557:2;8546:9;8542:18;8534:26;;8606:9;8600:4;8596:20;8592:1;8581:9;8577:17;8570:47;8634:131;8760:4;8634:131;:::i;:::-;8626:139;;8353:419;;;:::o;8778:221::-;8918:34;8914:1;8906:6;8902:14;8895:58;8987:4;8982:2;8974:6;8970:15;8963:29;8778:221;:::o;9005:366::-;9147:3;9168:67;9232:2;9227:3;9168:67;:::i;:::-;9161:74;;9244:93;9333:3;9244:93;:::i;:::-;9362:2;9357:3;9353:12;9346:19;;9005:366;;;:::o;9377:419::-;9543:4;9581:2;9570:9;9566:18;9558:26;;9630:9;9624:4;9620:20;9616:1;9605:9;9601:17;9594:47;9658:131;9784:4;9658:131;:::i;:::-;9650:139;;9377:419;;;:::o;9802:179::-;9942:31;9938:1;9930:6;9926:14;9919:55;9802:179;:::o;9987:366::-;10129:3;10150:67;10214:2;10209:3;10150:67;:::i;:::-;10143:74;;10226:93;10315:3;10226:93;:::i;:::-;10344:2;10339:3;10335:12;10328:19;;9987:366;;;:::o;10359:419::-;10525:4;10563:2;10552:9;10548:18;10540:26;;10612:9;10606:4;10602:20;10598:1;10587:9;10583:17;10576:47;10640:131;10766:4;10640:131;:::i;:::-;10632:139;;10359:419;;;:::o;10784:224::-;10924:34;10920:1;10912:6;10908:14;10901:58;10993:7;10988:2;10980:6;10976:15;10969:32;10784:224;:::o;11014:366::-;11156:3;11177:67;11241:2;11236:3;11177:67;:::i;:::-;11170:74;;11253:93;11342:3;11253:93;:::i;:::-;11371:2;11366:3;11362:12;11355:19;;11014:366;;;:::o;11386:419::-;11552:4;11590:2;11579:9;11575:18;11567:26;;11639:9;11633:4;11629:20;11625:1;11614:9;11610:17;11603:47;11667:131;11793:4;11667:131;:::i;:::-;11659:139;;11386:419;;;:::o;11811:222::-;11951:34;11947:1;11939:6;11935:14;11928:58;12020:5;12015:2;12007:6;12003:15;11996:30;11811:222;:::o;12039:366::-;12181:3;12202:67;12266:2;12261:3;12202:67;:::i;:::-;12195:74;;12278:93;12367:3;12278:93;:::i;:::-;12396:2;12391:3;12387:12;12380:19;;12039:366;;;:::o;12411:419::-;12577:4;12615:2;12604:9;12600:18;12592:26;;12664:9;12658:4;12654:20;12650:1;12639:9;12635:17;12628:47;12692:131;12818:4;12692:131;:::i;:::-;12684:139;;12411:419;;;:::o;12836:225::-;12976:34;12972:1;12964:6;12960:14;12953:58;13045:8;13040:2;13032:6;13028:15;13021:33;12836:225;:::o;13067:366::-;13209:3;13230:67;13294:2;13289:3;13230:67;:::i;:::-;13223:74;;13306:93;13395:3;13306:93;:::i;:::-;13424:2;13419:3;13415:12;13408:19;;13067:366;;;:::o;13439:419::-;13605:4;13643:2;13632:9;13628:18;13620:26;;13692:9;13686:4;13682:20;13678:1;13667:9;13663:17;13656:47;13720:131;13846:4;13720:131;:::i;:::-;13712:139;;13439:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"940600","executionCost":"infinite","totalCost":"infinite"},"external":{"allowance(address,address)":"infinite","approve(address,uint256)":"infinite","balanceOf(address)":"2863","decimals()":"432","decreaseAllowance(address,uint256)":"infinite","increaseAllowance(address,uint256)":"infinite","name()":"infinite","symbol()":"infinite","totalSupply()":"2482","transfer(address,uint256)":"infinite","transferFrom(address,address,uint256)":"infinite"},"internal":{"_afterTokenTransfer(address,address,uint256)":"15","_approve(address,address,uint256)":"infinite","_beforeTokenTransfer(address,address,uint256)":"15","_burn(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_spendAllowance(address,address,uint256)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":128,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":134,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":136,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":138,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":140,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol":{"ERC20Burnable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).","kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"burn(uint256)":{"details":"Destroys `amount` tokens from the caller. See {ERC20-_burn}."},"burnFrom(address,uint256)":{"details":"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(uint256)":"42966c68","burnFrom(address,uint256)":"79cc6790","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":\"ERC20Burnable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":128,"contract":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":134,"contract":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":136,"contract":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":138,"contract":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":140,"contract":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"IERC20Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._","kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"decimals()":{"details":"Returns the decimals places of the token."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol":{"ERC20Permit":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. _Available since v3.4._","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"See {IERC20Permit-DOMAIN_SEPARATOR}."},"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"constructor":{"details":"Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`. It's a good idea to use the same `name` that is defined as the ERC20 token name."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"nonces(address)":{"details":"See {IERC20Permit-nonces}."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"See {IERC20Permit-permit}."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"stateVariables":{"_PERMIT_TYPEHASH_DEPRECATED_SLOT":{"custom:oz-renamed-from":"_PERMIT_TYPEHASH","details":"In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`. However, to ensure consistency with the upgradeable transpiler, we will continue to reserve a slot."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. _Available since v3.4._\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`. It's a good idea to use the same `name` that is defined as the ERC20 token name.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"_PERMIT_TYPEHASH_DEPRECATED_SLOT\":{\"custom:oz-renamed-from\":\"_PERMIT_TYPEHASH\",\"details\":\"In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`. However, to ensure consistency with the upgradeable transpiler, we will continue to reserve a slot.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\":\"ERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0xd2dd6003a2dc02ab905fd405938322e510429d19ae6c07c2c683d70f13ab2f36\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x948d8b2d18f38141ec78c5229d770d950ebc781ed3f44cc9e3ccbb9fded5846a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":128,"contract":"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:ERC20Permit","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":134,"contract":"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:ERC20Permit","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":136,"contract":"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:ERC20Permit","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":138,"contract":"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:ERC20Permit","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":140,"contract":"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:ERC20Permit","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"},{"astId":869,"contract":"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:ERC20Permit","label":"_nonces","offset":0,"slot":"5","type":"t_mapping(t_address,t_struct(Counter)3028_storage)"},{"astId":877,"contract":"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:ERC20Permit","label":"_PERMIT_TYPEHASH_DEPRECATED_SLOT","offset":0,"slot":"6","type":"t_bytes32"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_struct(Counter)3028_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct Counters.Counter)","numberOfBytes":"32","value":"t_struct(Counter)3028_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Counter)3028_storage":{"encoding":"inplace","label":"struct Counters.Counter","members":[{"astId":3027,"contract":"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol:ERC20Permit","label":"_value","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol":{"IERC20Permit":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ERC721":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"constructor":{"details":"Initializes the contract by setting a `name` and a `symbol` to the token collection."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1117":{"entryPoint":null,"id":1117,"parameterSlots":2,"returnSlots":0},"abi_decode_available_length_t_string_memory_ptr_fromMemory":{"entryPoint":576,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_string_memory_ptr_fromMemory":{"entryPoint":651,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":702,"id":null,"parameterSlots":2,"returnSlots":2},"allocate_memory":{"entryPoint":437,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":289,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":468,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":522,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":882,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":383,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x22":{"entryPoint":835,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":336,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":309,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":314,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":304,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":299,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":319,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4093:26","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:26","statements":[{"nodeType":"YulAssignment","src":"57:19:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:26","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:26"},"nodeType":"YulFunctionCall","src":"67:9:26"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:26"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:26","type":""}],"src":"7:75:26"},{"body":{"nodeType":"YulBlock","src":"177:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:26"},"nodeType":"YulFunctionCall","src":"187:12:26"},"nodeType":"YulExpressionStatement","src":"187:12:26"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:26"},{"body":{"nodeType":"YulBlock","src":"300:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:26"},"nodeType":"YulFunctionCall","src":"310:12:26"},"nodeType":"YulExpressionStatement","src":"310:12:26"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:26"},{"body":{"nodeType":"YulBlock","src":"423:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"440:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"443:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"433:6:26"},"nodeType":"YulFunctionCall","src":"433:12:26"},"nodeType":"YulExpressionStatement","src":"433:12:26"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"334:117:26"},{"body":{"nodeType":"YulBlock","src":"546:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"563:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"566:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"556:6:26"},"nodeType":"YulFunctionCall","src":"556:12:26"},"nodeType":"YulExpressionStatement","src":"556:12:26"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"457:117:26"},{"body":{"nodeType":"YulBlock","src":"628:54:26","statements":[{"nodeType":"YulAssignment","src":"638:38:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"656:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"663:2:26","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"652:3:26"},"nodeType":"YulFunctionCall","src":"652:14:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"672:2:26","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"668:3:26"},"nodeType":"YulFunctionCall","src":"668:7:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"648:3:26"},"nodeType":"YulFunctionCall","src":"648:28:26"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"638:6:26"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"611:5:26","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"621:6:26","type":""}],"src":"580:102:26"},{"body":{"nodeType":"YulBlock","src":"716:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"733:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"736:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"726:6:26"},"nodeType":"YulFunctionCall","src":"726:88:26"},"nodeType":"YulExpressionStatement","src":"726:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"830:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"833:4:26","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"823:6:26"},"nodeType":"YulFunctionCall","src":"823:15:26"},"nodeType":"YulExpressionStatement","src":"823:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"854:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"857:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"847:6:26"},"nodeType":"YulFunctionCall","src":"847:15:26"},"nodeType":"YulExpressionStatement","src":"847:15:26"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"688:180:26"},{"body":{"nodeType":"YulBlock","src":"917:238:26","statements":[{"nodeType":"YulVariableDeclaration","src":"927:58:26","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"949:6:26"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"979:4:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"957:21:26"},"nodeType":"YulFunctionCall","src":"957:27:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"945:3:26"},"nodeType":"YulFunctionCall","src":"945:40:26"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"931:10:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"1096:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1098:16:26"},"nodeType":"YulFunctionCall","src":"1098:18:26"},"nodeType":"YulExpressionStatement","src":"1098:18:26"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1039:10:26"},{"kind":"number","nodeType":"YulLiteral","src":"1051:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1036:2:26"},"nodeType":"YulFunctionCall","src":"1036:34:26"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1075:10:26"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1087:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1072:2:26"},"nodeType":"YulFunctionCall","src":"1072:22:26"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1033:2:26"},"nodeType":"YulFunctionCall","src":"1033:62:26"},"nodeType":"YulIf","src":"1030:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1134:2:26","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1138:10:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1127:6:26"},"nodeType":"YulFunctionCall","src":"1127:22:26"},"nodeType":"YulExpressionStatement","src":"1127:22:26"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"903:6:26","type":""},{"name":"size","nodeType":"YulTypedName","src":"911:4:26","type":""}],"src":"874:281:26"},{"body":{"nodeType":"YulBlock","src":"1202:88:26","statements":[{"nodeType":"YulAssignment","src":"1212:30:26","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1222:18:26"},"nodeType":"YulFunctionCall","src":"1222:20:26"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1212:6:26"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1271:6:26"},{"name":"size","nodeType":"YulIdentifier","src":"1279:4:26"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1251:19:26"},"nodeType":"YulFunctionCall","src":"1251:33:26"},"nodeType":"YulExpressionStatement","src":"1251:33:26"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1186:4:26","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1195:6:26","type":""}],"src":"1161:129:26"},{"body":{"nodeType":"YulBlock","src":"1363:241:26","statements":[{"body":{"nodeType":"YulBlock","src":"1468:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1470:16:26"},"nodeType":"YulFunctionCall","src":"1470:18:26"},"nodeType":"YulExpressionStatement","src":"1470:18:26"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1440:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"1448:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1437:2:26"},"nodeType":"YulFunctionCall","src":"1437:30:26"},"nodeType":"YulIf","src":"1434:56:26"},{"nodeType":"YulAssignment","src":"1500:37:26","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1530:6:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1508:21:26"},"nodeType":"YulFunctionCall","src":"1508:29:26"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1500:4:26"}]},{"nodeType":"YulAssignment","src":"1574:23:26","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1586:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"1592:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1582:3:26"},"nodeType":"YulFunctionCall","src":"1582:15:26"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1574:4:26"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1347:6:26","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1358:4:26","type":""}],"src":"1296:308:26"},{"body":{"nodeType":"YulBlock","src":"1659:258:26","statements":[{"nodeType":"YulVariableDeclaration","src":"1669:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"1678:1:26","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1673:1:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"1738:63:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1763:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"1768:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1759:3:26"},"nodeType":"YulFunctionCall","src":"1759:11:26"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1782:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"1787:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1778:3:26"},"nodeType":"YulFunctionCall","src":"1778:11:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1772:5:26"},"nodeType":"YulFunctionCall","src":"1772:18:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1752:6:26"},"nodeType":"YulFunctionCall","src":"1752:39:26"},"nodeType":"YulExpressionStatement","src":"1752:39:26"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1699:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"1702:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1696:2:26"},"nodeType":"YulFunctionCall","src":"1696:13:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1710:19:26","statements":[{"nodeType":"YulAssignment","src":"1712:15:26","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1721:1:26"},{"kind":"number","nodeType":"YulLiteral","src":"1724:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1717:3:26"},"nodeType":"YulFunctionCall","src":"1717:10:26"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1712:1:26"}]}]},"pre":{"nodeType":"YulBlock","src":"1692:3:26","statements":[]},"src":"1688:113:26"},{"body":{"nodeType":"YulBlock","src":"1835:76:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1885:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"1890:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1881:3:26"},"nodeType":"YulFunctionCall","src":"1881:16:26"},{"kind":"number","nodeType":"YulLiteral","src":"1899:1:26","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1874:6:26"},"nodeType":"YulFunctionCall","src":"1874:27:26"},"nodeType":"YulExpressionStatement","src":"1874:27:26"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1816:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"1819:6:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1813:2:26"},"nodeType":"YulFunctionCall","src":"1813:13:26"},"nodeType":"YulIf","src":"1810:101:26"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1641:3:26","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1646:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"1651:6:26","type":""}],"src":"1610:307:26"},{"body":{"nodeType":"YulBlock","src":"2018:326:26","statements":[{"nodeType":"YulAssignment","src":"2028:75:26","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2095:6:26"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2053:41:26"},"nodeType":"YulFunctionCall","src":"2053:49:26"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2037:15:26"},"nodeType":"YulFunctionCall","src":"2037:66:26"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2028:5:26"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2119:5:26"},{"name":"length","nodeType":"YulIdentifier","src":"2126:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2112:6:26"},"nodeType":"YulFunctionCall","src":"2112:21:26"},"nodeType":"YulExpressionStatement","src":"2112:21:26"},{"nodeType":"YulVariableDeclaration","src":"2142:27:26","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2157:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"2164:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2153:3:26"},"nodeType":"YulFunctionCall","src":"2153:16:26"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2146:3:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"2207:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"2209:77:26"},"nodeType":"YulFunctionCall","src":"2209:79:26"},"nodeType":"YulExpressionStatement","src":"2209:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2188:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"2193:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2184:3:26"},"nodeType":"YulFunctionCall","src":"2184:16:26"},{"name":"end","nodeType":"YulIdentifier","src":"2202:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2181:2:26"},"nodeType":"YulFunctionCall","src":"2181:25:26"},"nodeType":"YulIf","src":"2178:112:26"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2321:3:26"},{"name":"dst","nodeType":"YulIdentifier","src":"2326:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"2331:6:26"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"2299:21:26"},"nodeType":"YulFunctionCall","src":"2299:39:26"},"nodeType":"YulExpressionStatement","src":"2299:39:26"}]},"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1991:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"1996:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"2004:3:26","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2012:5:26","type":""}],"src":"1923:421:26"},{"body":{"nodeType":"YulBlock","src":"2437:282:26","statements":[{"body":{"nodeType":"YulBlock","src":"2486:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"2488:77:26"},"nodeType":"YulFunctionCall","src":"2488:79:26"},"nodeType":"YulExpressionStatement","src":"2488:79:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2465:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"2473:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2461:3:26"},"nodeType":"YulFunctionCall","src":"2461:17:26"},{"name":"end","nodeType":"YulIdentifier","src":"2480:3:26"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2457:3:26"},"nodeType":"YulFunctionCall","src":"2457:27:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2450:6:26"},"nodeType":"YulFunctionCall","src":"2450:35:26"},"nodeType":"YulIf","src":"2447:122:26"},{"nodeType":"YulVariableDeclaration","src":"2578:27:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2598:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2592:5:26"},"nodeType":"YulFunctionCall","src":"2592:13:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2582:6:26","type":""}]},{"nodeType":"YulAssignment","src":"2614:99:26","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2686:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"2694:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2682:3:26"},"nodeType":"YulFunctionCall","src":"2682:17:26"},{"name":"length","nodeType":"YulIdentifier","src":"2701:6:26"},{"name":"end","nodeType":"YulIdentifier","src":"2709:3:26"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"2623:58:26"},"nodeType":"YulFunctionCall","src":"2623:90:26"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2614:5:26"}]}]},"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2415:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"2423:3:26","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2431:5:26","type":""}],"src":"2364:355:26"},{"body":{"nodeType":"YulBlock","src":"2839:739:26","statements":[{"body":{"nodeType":"YulBlock","src":"2885:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2887:77:26"},"nodeType":"YulFunctionCall","src":"2887:79:26"},"nodeType":"YulExpressionStatement","src":"2887:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2860:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"2869:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2856:3:26"},"nodeType":"YulFunctionCall","src":"2856:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"2881:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2852:3:26"},"nodeType":"YulFunctionCall","src":"2852:32:26"},"nodeType":"YulIf","src":"2849:119:26"},{"nodeType":"YulBlock","src":"2978:291:26","statements":[{"nodeType":"YulVariableDeclaration","src":"2993:38:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3017:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3028:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3013:3:26"},"nodeType":"YulFunctionCall","src":"3013:17:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3007:5:26"},"nodeType":"YulFunctionCall","src":"3007:24:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2997:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"3078:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3080:77:26"},"nodeType":"YulFunctionCall","src":"3080:79:26"},"nodeType":"YulExpressionStatement","src":"3080:79:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3050:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"3058:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3047:2:26"},"nodeType":"YulFunctionCall","src":"3047:30:26"},"nodeType":"YulIf","src":"3044:117:26"},{"nodeType":"YulAssignment","src":"3175:84:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3231:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"3242:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3227:3:26"},"nodeType":"YulFunctionCall","src":"3227:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3251:7:26"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3185:41:26"},"nodeType":"YulFunctionCall","src":"3185:74:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3175:6:26"}]}]},{"nodeType":"YulBlock","src":"3279:292:26","statements":[{"nodeType":"YulVariableDeclaration","src":"3294:39:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3318:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3329:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3314:3:26"},"nodeType":"YulFunctionCall","src":"3314:18:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3308:5:26"},"nodeType":"YulFunctionCall","src":"3308:25:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3298:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"3380:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3382:77:26"},"nodeType":"YulFunctionCall","src":"3382:79:26"},"nodeType":"YulExpressionStatement","src":"3382:79:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3352:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"3360:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3349:2:26"},"nodeType":"YulFunctionCall","src":"3349:30:26"},"nodeType":"YulIf","src":"3346:117:26"},{"nodeType":"YulAssignment","src":"3477:84:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3533:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"3544:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3529:3:26"},"nodeType":"YulFunctionCall","src":"3529:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3553:7:26"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3487:41:26"},"nodeType":"YulFunctionCall","src":"3487:74:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3477:6:26"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2801:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2812:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2824:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2832:6:26","type":""}],"src":"2725:853:26"},{"body":{"nodeType":"YulBlock","src":"3612:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3629:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3632:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3622:6:26"},"nodeType":"YulFunctionCall","src":"3622:88:26"},"nodeType":"YulExpressionStatement","src":"3622:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3726:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3729:4:26","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3719:6:26"},"nodeType":"YulFunctionCall","src":"3719:15:26"},"nodeType":"YulExpressionStatement","src":"3719:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3750:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3753:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3743:6:26"},"nodeType":"YulFunctionCall","src":"3743:15:26"},"nodeType":"YulExpressionStatement","src":"3743:15:26"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"3584:180:26"},{"body":{"nodeType":"YulBlock","src":"3821:269:26","statements":[{"nodeType":"YulAssignment","src":"3831:22:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3845:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"3851:1:26","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3841:3:26"},"nodeType":"YulFunctionCall","src":"3841:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3831:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"3862:38:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3892:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"3898:1:26","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3888:3:26"},"nodeType":"YulFunctionCall","src":"3888:12:26"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"3866:18:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"3939:51:26","statements":[{"nodeType":"YulAssignment","src":"3953:27:26","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3967:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"3975:4:26","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3963:3:26"},"nodeType":"YulFunctionCall","src":"3963:17:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3953:6:26"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"3919:18:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3912:6:26"},"nodeType":"YulFunctionCall","src":"3912:26:26"},"nodeType":"YulIf","src":"3909:81:26"},{"body":{"nodeType":"YulBlock","src":"4042:42:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"4056:16:26"},"nodeType":"YulFunctionCall","src":"4056:18:26"},"nodeType":"YulExpressionStatement","src":"4056:18:26"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4006:18:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4029:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"4037:2:26","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4026:2:26"},"nodeType":"YulFunctionCall","src":"4026:14:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4003:2:26"},"nodeType":"YulFunctionCall","src":"4003:38:26"},"nodeType":"YulIf","src":"4000:84:26"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3805:4:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"3814:6:26","type":""}],"src":"3770:320:26"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n}\n","id":26,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b50604051620026da380380620026da8339818101604052810190620000379190620002be565b81600090805190602001906200004f92919062000071565b5080600190805190602001906200006892919062000071565b505050620003a8565b8280546200007f9062000372565b90600052602060002090601f016020900481019282620000a35760008555620000ef565b82601f10620000be57805160ff1916838001178555620000ef565b82800160010185558215620000ef579182015b82811115620000ee578251825591602001919060010190620000d1565b5b509050620000fe919062000102565b5090565b5b808211156200011d57600081600090555060010162000103565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200018a826200013f565b810181811067ffffffffffffffff82111715620001ac57620001ab62000150565b5b80604052505050565b6000620001c162000121565b9050620001cf82826200017f565b919050565b600067ffffffffffffffff821115620001f257620001f162000150565b5b620001fd826200013f565b9050602081019050919050565b60005b838110156200022a5780820151818401526020810190506200020d565b838111156200023a576000848401525b50505050565b6000620002576200025184620001d4565b620001b5565b9050828152602081018484840111156200027657620002756200013a565b5b620002838482856200020a565b509392505050565b600082601f830112620002a357620002a262000135565b5b8151620002b584826020860162000240565b91505092915050565b60008060408385031215620002d857620002d76200012b565b5b600083015167ffffffffffffffff811115620002f957620002f862000130565b5b62000307858286016200028b565b925050602083015167ffffffffffffffff8111156200032b576200032a62000130565b5b62000339858286016200028b565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200038b57607f821691505b60208210811415620003a257620003a162000343565b5b50919050565b61232280620003b86000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb46514610224578063b88d4fde14610240578063c87b56dd1461025c578063e985e9c51461028c576100cf565b80636352211e146101a657806370a08231146101d657806395d89b4114610206576100cf565b806301ffc9a7146100d457806306fdde0314610104578063081812fc14610122578063095ea7b31461015257806323b872dd1461016e57806342842e0e1461018a575b600080fd5b6100ee60048036038101906100e99190611633565b6102bc565b6040516100fb919061167b565b60405180910390f35b61010c61039e565b604051610119919061172f565b60405180910390f35b61013c60048036038101906101379190611787565b610430565b60405161014991906117f5565b60405180910390f35b61016c6004803603810190610167919061183c565b610476565b005b6101886004803603810190610183919061187c565b61058e565b005b6101a4600480360381019061019f919061187c565b6105ee565b005b6101c060048036038101906101bb9190611787565b61060e565b6040516101cd91906117f5565b60405180910390f35b6101f060048036038101906101eb91906118cf565b610695565b6040516101fd919061190b565b60405180910390f35b61020e61074d565b60405161021b919061172f565b60405180910390f35b61023e60048036038101906102399190611952565b6107df565b005b61025a60048036038101906102559190611ac7565b6107f5565b005b61027660048036038101906102719190611787565b610857565b604051610283919061172f565b60405180910390f35b6102a660048036038101906102a19190611b4a565b6108bf565b6040516102b3919061167b565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061038757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610397575061039682610953565b5b9050919050565b6060600080546103ad90611bb9565b80601f01602080910402602001604051908101604052809291908181526020018280546103d990611bb9565b80156104265780601f106103fb57610100808354040283529160200191610426565b820191906000526020600020905b81548152906001019060200180831161040957829003601f168201915b5050505050905090565b600061043b826109bd565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104818261060e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156104f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e990611c5d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610511610a08565b73ffffffffffffffffffffffffffffffffffffffff161480610540575061053f8161053a610a08565b6108bf565b5b61057f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057690611cef565b60405180910390fd5b6105898383610a10565b505050565b61059f610599610a08565b82610ac9565b6105de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d590611d81565b60405180910390fd5b6105e9838383610b5e565b505050565b610609838383604051806020016040528060008152506107f5565b505050565b60008061061a83610e58565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561068c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068390611ded565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610706576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fd90611e7f565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461075c90611bb9565b80601f016020809104026020016040519081016040528092919081815260200182805461078890611bb9565b80156107d55780601f106107aa576101008083540402835291602001916107d5565b820191906000526020600020905b8154815290600101906020018083116107b857829003601f168201915b5050505050905090565b6107f16107ea610a08565b8383610e95565b5050565b610806610800610a08565b83610ac9565b610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c90611d81565b60405180910390fd5b61085184848484611002565b50505050565b6060610862826109bd565b600061086c61105e565b9050600081511161088c57604051806020016040528060008152506108b7565b8061089684611075565b6040516020016108a7929190611edb565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6109c68161114d565b610a05576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fc90611ded565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610a838361060e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610ad58361060e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610b175750610b1681856108bf565b5b80610b5557508373ffffffffffffffffffffffffffffffffffffffff16610b3d84610430565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610b7e8261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcb90611f71565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3b90612003565b60405180910390fd5b610c51838383600161118e565b8273ffffffffffffffffffffffffffffffffffffffff16610c718261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610cc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbe90611f71565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610e5383838360016112b4565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efb9061206f565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ff5919061167b565b60405180910390a3505050565b61100d848484610b5e565b611019848484846112ba565b611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104f90612101565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000600161108484611451565b01905060008167ffffffffffffffff8111156110a3576110a261199c565b5b6040519080825280601f01601f1916602001820160405280156110d55781602001600182028036833780820191505090505b509050600082602001820190505b600115611142578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161112c5761112b612121565b5b049450600085141561113d57611142565b6110e3565b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661116f83610e58565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60018111156112ae57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146112225780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461121a919061217f565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146112ad5780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112a591906121b3565b925050819055505b5b50505050565b50505050565b60006112db8473ffffffffffffffffffffffffffffffffffffffff166115a4565b15611444578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611304610a08565b8786866040518563ffffffff1660e01b8152600401611326949392919061225e565b602060405180830381600087803b15801561134057600080fd5b505af192505050801561137157506040513d601f19601f8201168201806040525081019061136e91906122bf565b60015b6113f4573d80600081146113a1576040519150601f19603f3d011682016040523d82523d6000602084013e6113a6565b606091505b506000815114156113ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e390612101565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611449565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106114af577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816114a5576114a4612121565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106114ec576d04ee2d6d415b85acef810000000083816114e2576114e1612121565b5b0492506020810190505b662386f26fc10000831061151b57662386f26fc10000838161151157611510612121565b5b0492506010810190505b6305f5e1008310611544576305f5e100838161153a57611539612121565b5b0492506008810190505b612710831061156957612710838161155f5761155e612121565b5b0492506004810190505b6064831061158c576064838161158257611581612121565b5b0492506002810190505b600a831061159b576001810190505b80915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611610816115db565b811461161b57600080fd5b50565b60008135905061162d81611607565b92915050565b600060208284031215611649576116486115d1565b5b60006116578482850161161e565b91505092915050565b60008115159050919050565b61167581611660565b82525050565b6000602082019050611690600083018461166c565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156116d05780820151818401526020810190506116b5565b838111156116df576000848401525b50505050565b6000601f19601f8301169050919050565b600061170182611696565b61170b81856116a1565b935061171b8185602086016116b2565b611724816116e5565b840191505092915050565b6000602082019050818103600083015261174981846116f6565b905092915050565b6000819050919050565b61176481611751565b811461176f57600080fd5b50565b6000813590506117818161175b565b92915050565b60006020828403121561179d5761179c6115d1565b5b60006117ab84828501611772565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117df826117b4565b9050919050565b6117ef816117d4565b82525050565b600060208201905061180a60008301846117e6565b92915050565b611819816117d4565b811461182457600080fd5b50565b60008135905061183681611810565b92915050565b60008060408385031215611853576118526115d1565b5b600061186185828601611827565b925050602061187285828601611772565b9150509250929050565b600080600060608486031215611895576118946115d1565b5b60006118a386828701611827565b93505060206118b486828701611827565b92505060406118c586828701611772565b9150509250925092565b6000602082840312156118e5576118e46115d1565b5b60006118f384828501611827565b91505092915050565b61190581611751565b82525050565b600060208201905061192060008301846118fc565b92915050565b61192f81611660565b811461193a57600080fd5b50565b60008135905061194c81611926565b92915050565b60008060408385031215611969576119686115d1565b5b600061197785828601611827565b92505060206119888582860161193d565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6119d4826116e5565b810181811067ffffffffffffffff821117156119f3576119f261199c565b5b80604052505050565b6000611a066115c7565b9050611a1282826119cb565b919050565b600067ffffffffffffffff821115611a3257611a3161199c565b5b611a3b826116e5565b9050602081019050919050565b82818337600083830152505050565b6000611a6a611a6584611a17565b6119fc565b905082815260208101848484011115611a8657611a85611997565b5b611a91848285611a48565b509392505050565b600082601f830112611aae57611aad611992565b5b8135611abe848260208601611a57565b91505092915050565b60008060008060808587031215611ae157611ae06115d1565b5b6000611aef87828801611827565b9450506020611b0087828801611827565b9350506040611b1187828801611772565b925050606085013567ffffffffffffffff811115611b3257611b316115d6565b5b611b3e87828801611a99565b91505092959194509250565b60008060408385031215611b6157611b606115d1565b5b6000611b6f85828601611827565b9250506020611b8085828601611827565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611bd157607f821691505b60208210811415611be557611be4611b8a565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000611c476021836116a1565b9150611c5282611beb565b604082019050919050565b60006020820190508181036000830152611c7681611c3a565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000611cd9603d836116a1565b9150611ce482611c7d565b604082019050919050565b60006020820190508181036000830152611d0881611ccc565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000611d6b602d836116a1565b9150611d7682611d0f565b604082019050919050565b60006020820190508181036000830152611d9a81611d5e565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000611dd76018836116a1565b9150611de282611da1565b602082019050919050565b60006020820190508181036000830152611e0681611dca565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000611e696029836116a1565b9150611e7482611e0d565b604082019050919050565b60006020820190508181036000830152611e9881611e5c565b9050919050565b600081905092915050565b6000611eb582611696565b611ebf8185611e9f565b9350611ecf8185602086016116b2565b80840191505092915050565b6000611ee78285611eaa565b9150611ef38284611eaa565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000611f5b6025836116a1565b9150611f6682611eff565b604082019050919050565b60006020820190508181036000830152611f8a81611f4e565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611fed6024836116a1565b9150611ff882611f91565b604082019050919050565b6000602082019050818103600083015261201c81611fe0565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006120596019836116a1565b915061206482612023565b602082019050919050565b600060208201905081810360008301526120888161204c565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006120eb6032836116a1565b91506120f68261208f565b604082019050919050565b6000602082019050818103600083015261211a816120de565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061218a82611751565b915061219583611751565b9250828210156121a8576121a7612150565b5b828203905092915050565b60006121be82611751565b91506121c983611751565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156121fe576121fd612150565b5b828201905092915050565b600081519050919050565b600082825260208201905092915050565b600061223082612209565b61223a8185612214565b935061224a8185602086016116b2565b612253816116e5565b840191505092915050565b600060808201905061227360008301876117e6565b61228060208301866117e6565b61228d60408301856118fc565b818103606083015261229f8184612225565b905095945050505050565b6000815190506122b981611607565b92915050565b6000602082840312156122d5576122d46115d1565b5b60006122e3848285016122aa565b9150509291505056fea2646970667358221220a50925419473cc2c56322ce0cfa3d3ec5c3641371e437c4800e68b3475fd92c064736f6c63430008090033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x26DA CODESIZE SUB DUP1 PUSH3 0x26DA DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x2BE JUMP JUMPDEST DUP2 PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x4F SWAP3 SWAP2 SWAP1 PUSH3 0x71 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x68 SWAP3 SWAP2 SWAP1 PUSH3 0x71 JUMP JUMPDEST POP POP POP PUSH3 0x3A8 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x7F SWAP1 PUSH3 0x372 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0xA3 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xEF JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xBE JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xEF JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xEF JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xEE JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xD1 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0xFE SWAP2 SWAP1 PUSH3 0x102 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x11D JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x103 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0x18A DUP3 PUSH3 0x13F JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x1AC JUMPI PUSH3 0x1AB PUSH3 0x150 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1C1 PUSH3 0x121 JUMP JUMPDEST SWAP1 POP PUSH3 0x1CF DUP3 DUP3 PUSH3 0x17F JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x1F2 JUMPI PUSH3 0x1F1 PUSH3 0x150 JUMP JUMPDEST JUMPDEST PUSH3 0x1FD DUP3 PUSH3 0x13F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x22A JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x20D JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x23A JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x257 PUSH3 0x251 DUP5 PUSH3 0x1D4 JUMP JUMPDEST PUSH3 0x1B5 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x276 JUMPI PUSH3 0x275 PUSH3 0x13A JUMP JUMPDEST JUMPDEST PUSH3 0x283 DUP5 DUP3 DUP6 PUSH3 0x20A JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x2A3 JUMPI PUSH3 0x2A2 PUSH3 0x135 JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x2B5 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x240 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x2D8 JUMPI PUSH3 0x2D7 PUSH3 0x12B JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x2F9 JUMPI PUSH3 0x2F8 PUSH3 0x130 JUMP JUMPDEST JUMPDEST PUSH3 0x307 DUP6 DUP3 DUP7 ADD PUSH3 0x28B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x32B JUMPI PUSH3 0x32A PUSH3 0x130 JUMP JUMPDEST JUMPDEST PUSH3 0x339 DUP6 DUP3 DUP7 ADD PUSH3 0x28B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x38B JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x3A2 JUMPI PUSH3 0x3A1 PUSH3 0x343 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2322 DUP1 PUSH3 0x3B8 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x28C JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x206 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x18A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1633 JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x167B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH2 0x39E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0x172F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x1787 JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x17F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x183C JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x183 SWAP2 SWAP1 PUSH2 0x187C JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x187C JUMP JUMPDEST PUSH2 0x5EE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BB SWAP2 SWAP1 PUSH2 0x1787 JUMP JUMPDEST PUSH2 0x60E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x17F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x18CF JUMP JUMPDEST PUSH2 0x695 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x190B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20E PUSH2 0x74D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21B SWAP2 SWAP1 PUSH2 0x172F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x239 SWAP2 SWAP1 PUSH2 0x1952 JUMP JUMPDEST PUSH2 0x7DF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x1AC7 JUMP JUMPDEST PUSH2 0x7F5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x276 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x1787 JUMP JUMPDEST PUSH2 0x857 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x172F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x1B4A JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B3 SWAP2 SWAP1 PUSH2 0x167B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x387 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x397 JUMPI POP PUSH2 0x396 DUP3 PUSH2 0x953 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x3AD SWAP1 PUSH2 0x1BB9 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D9 SWAP1 PUSH2 0x1BB9 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x426 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x426 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x409 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43B DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x481 DUP3 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E9 SWAP1 PUSH2 0x1C5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x511 PUSH2 0xA08 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x540 JUMPI POP PUSH2 0x53F DUP2 PUSH2 0x53A PUSH2 0xA08 JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST JUMPDEST PUSH2 0x57F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x576 SWAP1 PUSH2 0x1CEF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x589 DUP4 DUP4 PUSH2 0xA10 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x59F PUSH2 0x599 PUSH2 0xA08 JUMP JUMPDEST DUP3 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x5DE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D5 SWAP1 PUSH2 0x1D81 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E9 DUP4 DUP4 DUP4 PUSH2 0xB5E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x609 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7F5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x61A DUP4 PUSH2 0xE58 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x68C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x683 SWAP1 PUSH2 0x1DED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x706 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FD SWAP1 PUSH2 0x1E7F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x75C SWAP1 PUSH2 0x1BB9 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x788 SWAP1 PUSH2 0x1BB9 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7AA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7F1 PUSH2 0x7EA PUSH2 0xA08 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xE95 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x806 PUSH2 0x800 PUSH2 0xA08 JUMP JUMPDEST DUP4 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x845 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x83C SWAP1 PUSH2 0x1D81 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x851 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1002 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x862 DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x86C PUSH2 0x105E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x88C JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x8B7 JUMP JUMPDEST DUP1 PUSH2 0x896 DUP5 PUSH2 0x1075 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8A7 SWAP3 SWAP2 SWAP1 PUSH2 0x1EDB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9C6 DUP2 PUSH2 0x114D JUMP JUMPDEST PUSH2 0xA05 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9FC SWAP1 PUSH2 0x1DED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA83 DUP4 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAD5 DUP4 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB17 JUMPI POP PUSH2 0xB16 DUP2 DUP6 PUSH2 0x8BF JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xB55 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB3D DUP5 PUSH2 0x430 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB7E DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBD4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBCB SWAP1 PUSH2 0x1F71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC44 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC3B SWAP1 PUSH2 0x2003 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC51 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x118E JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC71 DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBE SWAP1 PUSH2 0x1F71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xE53 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x12B4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xF04 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEFB SWAP1 PUSH2 0x206F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xFF5 SWAP2 SWAP1 PUSH2 0x167B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x100D DUP5 DUP5 DUP5 PUSH2 0xB5E JUMP JUMPDEST PUSH2 0x1019 DUP5 DUP5 DUP5 DUP5 PUSH2 0x12BA JUMP JUMPDEST PUSH2 0x1058 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104F SWAP1 PUSH2 0x2101 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1084 DUP5 PUSH2 0x1451 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10A3 JUMPI PUSH2 0x10A2 PUSH2 0x199C JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10D5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1142 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x112C JUMPI PUSH2 0x112B PUSH2 0x2121 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 EQ ISZERO PUSH2 0x113D JUMPI PUSH2 0x1142 JUMP JUMPDEST PUSH2 0x10E3 JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x116F DUP4 PUSH2 0xE58 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x12AE JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1222 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x121A SWAP2 SWAP1 PUSH2 0x217F JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12AD JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x12A5 SWAP2 SWAP1 PUSH2 0x21B3 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12DB DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x15A4 JUMP JUMPDEST ISZERO PUSH2 0x1444 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1304 PUSH2 0xA08 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1326 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x225E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1340 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1371 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x136E SWAP2 SWAP1 PUSH2 0x22BF JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x13F4 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x13A1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x13A6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x13EC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13E3 SWAP1 PUSH2 0x2101 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x1449 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x14AF JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x14A5 JUMPI PUSH2 0x14A4 PUSH2 0x2121 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x14EC JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x14E2 JUMPI PUSH2 0x14E1 PUSH2 0x2121 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x151B JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x1511 JUMPI PUSH2 0x1510 PUSH2 0x2121 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1544 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x153A JUMPI PUSH2 0x1539 PUSH2 0x2121 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1569 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x155F JUMPI PUSH2 0x155E PUSH2 0x2121 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x158C JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1582 JUMPI PUSH2 0x1581 PUSH2 0x2121 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x159B JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1610 DUP2 PUSH2 0x15DB JUMP JUMPDEST DUP2 EQ PUSH2 0x161B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x162D DUP2 PUSH2 0x1607 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1649 JUMPI PUSH2 0x1648 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1657 DUP5 DUP3 DUP6 ADD PUSH2 0x161E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1675 DUP2 PUSH2 0x1660 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1690 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x166C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x16D0 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x16B5 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x16DF JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1701 DUP3 PUSH2 0x1696 JUMP JUMPDEST PUSH2 0x170B DUP2 DUP6 PUSH2 0x16A1 JUMP JUMPDEST SWAP4 POP PUSH2 0x171B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x16B2 JUMP JUMPDEST PUSH2 0x1724 DUP2 PUSH2 0x16E5 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1749 DUP2 DUP5 PUSH2 0x16F6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1764 DUP2 PUSH2 0x1751 JUMP JUMPDEST DUP2 EQ PUSH2 0x176F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1781 DUP2 PUSH2 0x175B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x179D JUMPI PUSH2 0x179C PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x17AB DUP5 DUP3 DUP6 ADD PUSH2 0x1772 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17DF DUP3 PUSH2 0x17B4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x17EF DUP2 PUSH2 0x17D4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x180A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x17E6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1819 DUP2 PUSH2 0x17D4 JUMP JUMPDEST DUP2 EQ PUSH2 0x1824 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1836 DUP2 PUSH2 0x1810 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1853 JUMPI PUSH2 0x1852 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1861 DUP6 DUP3 DUP7 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1872 DUP6 DUP3 DUP7 ADD PUSH2 0x1772 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1895 JUMPI PUSH2 0x1894 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18A3 DUP7 DUP3 DUP8 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x18B4 DUP7 DUP3 DUP8 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x18C5 DUP7 DUP3 DUP8 ADD PUSH2 0x1772 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18E5 JUMPI PUSH2 0x18E4 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18F3 DUP5 DUP3 DUP6 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1905 DUP2 PUSH2 0x1751 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1920 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x18FC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x192F DUP2 PUSH2 0x1660 JUMP JUMPDEST DUP2 EQ PUSH2 0x193A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x194C DUP2 PUSH2 0x1926 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1969 JUMPI PUSH2 0x1968 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1977 DUP6 DUP3 DUP7 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1988 DUP6 DUP3 DUP7 ADD PUSH2 0x193D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x19D4 DUP3 PUSH2 0x16E5 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x19F3 JUMPI PUSH2 0x19F2 PUSH2 0x199C JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A06 PUSH2 0x15C7 JUMP JUMPDEST SWAP1 POP PUSH2 0x1A12 DUP3 DUP3 PUSH2 0x19CB JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1A32 JUMPI PUSH2 0x1A31 PUSH2 0x199C JUMP JUMPDEST JUMPDEST PUSH2 0x1A3B DUP3 PUSH2 0x16E5 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A6A PUSH2 0x1A65 DUP5 PUSH2 0x1A17 JUMP JUMPDEST PUSH2 0x19FC JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1A86 JUMPI PUSH2 0x1A85 PUSH2 0x1997 JUMP JUMPDEST JUMPDEST PUSH2 0x1A91 DUP5 DUP3 DUP6 PUSH2 0x1A48 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1AAE JUMPI PUSH2 0x1AAD PUSH2 0x1992 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1ABE DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1A57 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1AE1 JUMPI PUSH2 0x1AE0 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1AEF DUP8 DUP3 DUP9 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1B00 DUP8 DUP3 DUP9 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1B11 DUP8 DUP3 DUP9 ADD PUSH2 0x1772 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B32 JUMPI PUSH2 0x1B31 PUSH2 0x15D6 JUMP JUMPDEST JUMPDEST PUSH2 0x1B3E DUP8 DUP3 DUP9 ADD PUSH2 0x1A99 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B61 JUMPI PUSH2 0x1B60 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B6F DUP6 DUP3 DUP7 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1B80 DUP6 DUP3 DUP7 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1BD1 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1BE5 JUMPI PUSH2 0x1BE4 PUSH2 0x1B8A JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C47 PUSH1 0x21 DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C52 DUP3 PUSH2 0x1BEB JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C76 DUP2 PUSH2 0x1C3A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CD9 PUSH1 0x3D DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1CE4 DUP3 PUSH2 0x1C7D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D08 DUP2 PUSH2 0x1CCC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D6B PUSH1 0x2D DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D76 DUP3 PUSH2 0x1D0F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D9A DUP2 PUSH2 0x1D5E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DD7 PUSH1 0x18 DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DE2 DUP3 PUSH2 0x1DA1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E06 DUP2 PUSH2 0x1DCA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E69 PUSH1 0x29 DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1E74 DUP3 PUSH2 0x1E0D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E98 DUP2 PUSH2 0x1E5C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EB5 DUP3 PUSH2 0x1696 JUMP JUMPDEST PUSH2 0x1EBF DUP2 DUP6 PUSH2 0x1E9F JUMP JUMPDEST SWAP4 POP PUSH2 0x1ECF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x16B2 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EE7 DUP3 DUP6 PUSH2 0x1EAA JUMP JUMPDEST SWAP2 POP PUSH2 0x1EF3 DUP3 DUP5 PUSH2 0x1EAA JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F5B PUSH1 0x25 DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F66 DUP3 PUSH2 0x1EFF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F8A DUP2 PUSH2 0x1F4E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FED PUSH1 0x24 DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FF8 DUP3 PUSH2 0x1F91 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x201C DUP2 PUSH2 0x1FE0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2059 PUSH1 0x19 DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x2064 DUP3 PUSH2 0x2023 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2088 DUP2 PUSH2 0x204C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20EB PUSH1 0x32 DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x20F6 DUP3 PUSH2 0x208F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x211A DUP2 PUSH2 0x20DE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x218A DUP3 PUSH2 0x1751 JUMP JUMPDEST SWAP2 POP PUSH2 0x2195 DUP4 PUSH2 0x1751 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x21A8 JUMPI PUSH2 0x21A7 PUSH2 0x2150 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21BE DUP3 PUSH2 0x1751 JUMP JUMPDEST SWAP2 POP PUSH2 0x21C9 DUP4 PUSH2 0x1751 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x21FE JUMPI PUSH2 0x21FD PUSH2 0x2150 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2230 DUP3 PUSH2 0x2209 JUMP JUMPDEST PUSH2 0x223A DUP2 DUP6 PUSH2 0x2214 JUMP JUMPDEST SWAP4 POP PUSH2 0x224A DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x16B2 JUMP JUMPDEST PUSH2 0x2253 DUP2 PUSH2 0x16E5 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2273 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x17E6 JUMP JUMPDEST PUSH2 0x2280 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x17E6 JUMP JUMPDEST PUSH2 0x228D PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x18FC JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x229F DUP2 DUP5 PUSH2 0x2225 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x22B9 DUP2 PUSH2 0x1607 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x22D5 JUMPI PUSH2 0x22D4 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x22E3 DUP5 DUP3 DUP6 ADD PUSH2 0x22AA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA5 MULMOD 0x25 COINBASE SWAP5 PUSH20 0xCC2C56322CE0CFA3D3EC5C3641371E437C4800E6 DUP12 CALLVALUE PUSH22 0xFD92C064736F6C634300080900330000000000000000 ","sourceMap":"628:16327:7:-:0;;;1390:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1464:5;1456;:13;;;;;;;;;;;;:::i;:::-;;1489:7;1479;:17;;;;;;;;;;;;:::i;:::-;;1390:113;;628:16327;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:75:26:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:117;566:1;563;556:12;580:102;621:6;672:2;668:7;663:2;656:5;652:14;648:28;638:38;;580:102;;;:::o;688:180::-;736:77;733:1;726:88;833:4;830:1;823:15;857:4;854:1;847:15;874:281;957:27;979:4;957:27;:::i;:::-;949:6;945:40;1087:6;1075:10;1072:22;1051:18;1039:10;1036:34;1033:62;1030:88;;;1098:18;;:::i;:::-;1030:88;1138:10;1134:2;1127:22;917:238;874:281;;:::o;1161:129::-;1195:6;1222:20;;:::i;:::-;1212:30;;1251:33;1279:4;1271:6;1251:33;:::i;:::-;1161:129;;;:::o;1296:308::-;1358:4;1448:18;1440:6;1437:30;1434:56;;;1470:18;;:::i;:::-;1434:56;1508:29;1530:6;1508:29;:::i;:::-;1500:37;;1592:4;1586;1582:15;1574:23;;1296:308;;;:::o;1610:307::-;1678:1;1688:113;1702:6;1699:1;1696:13;1688:113;;;1787:1;1782:3;1778:11;1772:18;1768:1;1763:3;1759:11;1752:39;1724:2;1721:1;1717:10;1712:15;;1688:113;;;1819:6;1816:1;1813:13;1810:101;;;1899:1;1890:6;1885:3;1881:16;1874:27;1810:101;1659:258;1610:307;;;:::o;1923:421::-;2012:5;2037:66;2053:49;2095:6;2053:49;:::i;:::-;2037:66;:::i;:::-;2028:75;;2126:6;2119:5;2112:21;2164:4;2157:5;2153:16;2202:3;2193:6;2188:3;2184:16;2181:25;2178:112;;;2209:79;;:::i;:::-;2178:112;2299:39;2331:6;2326:3;2321;2299:39;:::i;:::-;2018:326;1923:421;;;;;:::o;2364:355::-;2431:5;2480:3;2473:4;2465:6;2461:17;2457:27;2447:122;;2488:79;;:::i;:::-;2447:122;2598:6;2592:13;2623:90;2709:3;2701:6;2694:4;2686:6;2682:17;2623:90;:::i;:::-;2614:99;;2437:282;2364:355;;;;:::o;2725:853::-;2824:6;2832;2881:2;2869:9;2860:7;2856:23;2852:32;2849:119;;;2887:79;;:::i;:::-;2849:119;3028:1;3017:9;3013:17;3007:24;3058:18;3050:6;3047:30;3044:117;;;3080:79;;:::i;:::-;3044:117;3185:74;3251:7;3242:6;3231:9;3227:22;3185:74;:::i;:::-;3175:84;;2978:291;3329:2;3318:9;3314:18;3308:25;3360:18;3352:6;3349:30;3346:117;;;3382:79;;:::i;:::-;3346:117;3487:74;3553:7;3544:6;3533:9;3529:22;3487:74;:::i;:::-;3477:84;;3279:292;2725:853;;;;;:::o;3584:180::-;3632:77;3629:1;3622:88;3729:4;3726:1;3719:15;3753:4;3750:1;3743:15;3770:320;3814:6;3851:1;3845:4;3841:12;3831:22;;3898:1;3892:4;3888:12;3919:18;3909:81;;3975:4;3967:6;3963:17;3953:27;;3909:81;4037:2;4029:6;4026:14;4006:18;4003:38;4000:84;;;4056:18;;:::i;:::-;4000:84;3821:269;3770:320;;;:::o;628:16327:7:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_1998":{"entryPoint":4788,"id":1998,"parameterSlots":4,"returnSlots":0},"@_approve_1831":{"entryPoint":2576,"id":1831,"parameterSlots":2,"returnSlots":0},"@_baseURI_1268":{"entryPoint":4190,"id":1268,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_1985":{"entryPoint":4494,"id":1985,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_1939":{"entryPoint":4794,"id":1939,"parameterSlots":4,"returnSlots":1},"@_exists_1500":{"entryPoint":4429,"id":1500,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_1534":{"entryPoint":2761,"id":1534,"parameterSlots":2,"returnSlots":1},"@_msgSender_3012":{"entryPoint":2568,"id":3012,"parameterSlots":0,"returnSlots":1},"@_ownerOf_1482":{"entryPoint":3672,"id":1482,"parameterSlots":1,"returnSlots":1},"@_requireMinted_1877":{"entryPoint":2493,"id":1877,"parameterSlots":1,"returnSlots":0},"@_safeTransfer_1469":{"entryPoint":4098,"id":1469,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_1863":{"entryPoint":3733,"id":1863,"parameterSlots":3,"returnSlots":0},"@_transfer_1807":{"entryPoint":2910,"id":1807,"parameterSlots":3,"returnSlots":0},"@approve_1311":{"entryPoint":1142,"id":1311,"parameterSlots":2,"returnSlots":0},"@balanceOf_1172":{"entryPoint":1685,"id":1172,"parameterSlots":1,"returnSlots":1},"@getApproved_1329":{"entryPoint":1072,"id":1329,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_1364":{"entryPoint":2239,"id":1364,"parameterSlots":2,"returnSlots":1},"@isContract_2688":{"entryPoint":5540,"id":2688,"parameterSlots":1,"returnSlots":1},"@log10_4524":{"entryPoint":5201,"id":4524,"parameterSlots":1,"returnSlots":1},"@name_1210":{"entryPoint":926,"id":1210,"parameterSlots":0,"returnSlots":1},"@ownerOf_1200":{"entryPoint":1550,"id":1200,"parameterSlots":1,"returnSlots":1},"@safeTransferFrom_1410":{"entryPoint":1518,"id":1410,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_1440":{"entryPoint":2037,"id":1440,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_1346":{"entryPoint":2015,"id":1346,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1148":{"entryPoint":700,"id":1148,"parameterSlots":1,"returnSlots":1},"@supportsInterface_3809":{"entryPoint":2387,"id":3809,"parameterSlots":1,"returnSlots":1},"@symbol_1220":{"entryPoint":1869,"id":1220,"parameterSlots":0,"returnSlots":1},"@toString_3154":{"entryPoint":4213,"id":3154,"parameterSlots":1,"returnSlots":1},"@tokenURI_1259":{"entryPoint":2135,"id":1259,"parameterSlots":1,"returnSlots":1},"@transferFrom_1391":{"entryPoint":1422,"id":1391,"parameterSlots":3,"returnSlots":0},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":6743,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":6183,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":6461,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":5662,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":8874,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":6809,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":6002,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":6351,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":6986,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":6268,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":6855,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":6482,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":6204,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":5683,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":8895,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":6023,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":6118,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":5740,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":8741,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":5878,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":7850,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack":{"entryPoint":7518,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack":{"entryPoint":8414,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack":{"entryPoint":8014,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack":{"entryPoint":8160,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack":{"entryPoint":8268,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack":{"entryPoint":7772,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack":{"entryPoint":7626,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack":{"entryPoint":7226,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack":{"entryPoint":7372,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":6396,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":7899,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":6133,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":8798,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":5755,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5935,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7553,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8449,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8049,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8195,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8303,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7807,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7661,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7261,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7407,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":6411,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":6652,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":5575,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":6679,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":8713,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":5782,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":8724,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":5793,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":7839,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":8627,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":8575,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":6100,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":5728,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":5595,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":6068,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":5969,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory":{"entryPoint":6728,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory":{"entryPoint":5810,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":7097,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":6603,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x11":{"entryPoint":8528,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":8481,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":7050,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":6556,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":6546,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":6551,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":5590,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":5585,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":5861,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af":{"entryPoint":7439,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e":{"entryPoint":8335,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48":{"entryPoint":7935,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4":{"entryPoint":8081,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05":{"entryPoint":8227,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159":{"entryPoint":7693,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f":{"entryPoint":7585,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942":{"entryPoint":7147,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83":{"entryPoint":7293,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":6160,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":6438,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":5639,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":5979,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:23861:26","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:26","statements":[{"nodeType":"YulAssignment","src":"57:19:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:26","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:26"},"nodeType":"YulFunctionCall","src":"67:9:26"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:26"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:26","type":""}],"src":"7:75:26"},{"body":{"nodeType":"YulBlock","src":"177:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:26"},"nodeType":"YulFunctionCall","src":"187:12:26"},"nodeType":"YulExpressionStatement","src":"187:12:26"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:26"},{"body":{"nodeType":"YulBlock","src":"300:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:26"},"nodeType":"YulFunctionCall","src":"310:12:26"},"nodeType":"YulExpressionStatement","src":"310:12:26"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:26"},{"body":{"nodeType":"YulBlock","src":"378:105:26","statements":[{"nodeType":"YulAssignment","src":"388:89:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:26","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:26"},"nodeType":"YulFunctionCall","src":"399:78:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:26"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:26","type":""}],"src":"334:149:26"},{"body":{"nodeType":"YulBlock","src":"531:78:26","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:26"},"nodeType":"YulFunctionCall","src":"589:12:26"},"nodeType":"YulExpressionStatement","src":"589:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:26"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:26"},"nodeType":"YulFunctionCall","src":"561:23:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:26"},"nodeType":"YulFunctionCall","src":"551:34:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:26"},"nodeType":"YulFunctionCall","src":"544:42:26"},"nodeType":"YulIf","src":"541:62:26"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:26","type":""}],"src":"489:120:26"},{"body":{"nodeType":"YulBlock","src":"666:86:26","statements":[{"nodeType":"YulAssignment","src":"676:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:26"},"nodeType":"YulFunctionCall","src":"685:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:26"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:26"},"nodeType":"YulFunctionCall","src":"714:32:26"},"nodeType":"YulExpressionStatement","src":"714:32:26"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:26","type":""}],"src":"615:137:26"},{"body":{"nodeType":"YulBlock","src":"823:262:26","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:26"},"nodeType":"YulFunctionCall","src":"871:79:26"},"nodeType":"YulExpressionStatement","src":"871:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:26"},"nodeType":"YulFunctionCall","src":"840:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:26"},"nodeType":"YulFunctionCall","src":"836:32:26"},"nodeType":"YulIf","src":"833:119:26"},{"nodeType":"YulBlock","src":"962:116:26","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:26","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:26"},"nodeType":"YulFunctionCall","src":"1036:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:26"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:26"},"nodeType":"YulFunctionCall","src":"1016:52:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:26"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:26","type":""}],"src":"758:327:26"},{"body":{"nodeType":"YulBlock","src":"1133:48:26","statements":[{"nodeType":"YulAssignment","src":"1143:32:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:26"},"nodeType":"YulFunctionCall","src":"1161:13:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:26"},"nodeType":"YulFunctionCall","src":"1154:21:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:26"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:26","type":""}],"src":"1091:90:26"},{"body":{"nodeType":"YulBlock","src":"1246:50:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:26"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:26"},"nodeType":"YulFunctionCall","src":"1268:21:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:26"},"nodeType":"YulFunctionCall","src":"1256:34:26"},"nodeType":"YulExpressionStatement","src":"1256:34:26"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:26","type":""}],"src":"1187:109:26"},{"body":{"nodeType":"YulBlock","src":"1394:118:26","statements":[{"nodeType":"YulAssignment","src":"1404:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:26"},"nodeType":"YulFunctionCall","src":"1412:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:26"},"nodeType":"YulFunctionCall","src":"1487:17:26"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:26"},"nodeType":"YulFunctionCall","src":"1440:65:26"},"nodeType":"YulExpressionStatement","src":"1440:65:26"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:26","type":""}],"src":"1302:210:26"},{"body":{"nodeType":"YulBlock","src":"1577:40:26","statements":[{"nodeType":"YulAssignment","src":"1588:22:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1604:5:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1598:5:26"},"nodeType":"YulFunctionCall","src":"1598:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1588:6:26"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1560:5:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1570:6:26","type":""}],"src":"1518:99:26"},{"body":{"nodeType":"YulBlock","src":"1719:73:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1736:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"1741:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1729:6:26"},"nodeType":"YulFunctionCall","src":"1729:19:26"},"nodeType":"YulExpressionStatement","src":"1729:19:26"},{"nodeType":"YulAssignment","src":"1757:29:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1776:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"1781:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1772:3:26"},"nodeType":"YulFunctionCall","src":"1772:14:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1757:11:26"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1691:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"1696:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1707:11:26","type":""}],"src":"1623:169:26"},{"body":{"nodeType":"YulBlock","src":"1847:258:26","statements":[{"nodeType":"YulVariableDeclaration","src":"1857:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"1866:1:26","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1861:1:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"1926:63:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1951:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"1956:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1947:3:26"},"nodeType":"YulFunctionCall","src":"1947:11:26"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1970:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"1975:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1966:3:26"},"nodeType":"YulFunctionCall","src":"1966:11:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1960:5:26"},"nodeType":"YulFunctionCall","src":"1960:18:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1940:6:26"},"nodeType":"YulFunctionCall","src":"1940:39:26"},"nodeType":"YulExpressionStatement","src":"1940:39:26"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1887:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"1890:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1884:2:26"},"nodeType":"YulFunctionCall","src":"1884:13:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1898:19:26","statements":[{"nodeType":"YulAssignment","src":"1900:15:26","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1909:1:26"},{"kind":"number","nodeType":"YulLiteral","src":"1912:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1905:3:26"},"nodeType":"YulFunctionCall","src":"1905:10:26"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1900:1:26"}]}]},"pre":{"nodeType":"YulBlock","src":"1880:3:26","statements":[]},"src":"1876:113:26"},{"body":{"nodeType":"YulBlock","src":"2023:76:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2073:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"2078:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2069:3:26"},"nodeType":"YulFunctionCall","src":"2069:16:26"},{"kind":"number","nodeType":"YulLiteral","src":"2087:1:26","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2062:6:26"},"nodeType":"YulFunctionCall","src":"2062:27:26"},"nodeType":"YulExpressionStatement","src":"2062:27:26"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2004:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"2007:6:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2001:2:26"},"nodeType":"YulFunctionCall","src":"2001:13:26"},"nodeType":"YulIf","src":"1998:101:26"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1829:3:26","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1834:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"1839:6:26","type":""}],"src":"1798:307:26"},{"body":{"nodeType":"YulBlock","src":"2159:54:26","statements":[{"nodeType":"YulAssignment","src":"2169:38:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2187:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"2194:2:26","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2183:3:26"},"nodeType":"YulFunctionCall","src":"2183:14:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2203:2:26","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2199:3:26"},"nodeType":"YulFunctionCall","src":"2199:7:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2179:3:26"},"nodeType":"YulFunctionCall","src":"2179:28:26"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"2169:6:26"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2142:5:26","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"2152:6:26","type":""}],"src":"2111:102:26"},{"body":{"nodeType":"YulBlock","src":"2311:272:26","statements":[{"nodeType":"YulVariableDeclaration","src":"2321:53:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2368:5:26"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2335:32:26"},"nodeType":"YulFunctionCall","src":"2335:39:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2325:6:26","type":""}]},{"nodeType":"YulAssignment","src":"2383:78:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2449:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"2454:6:26"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2390:58:26"},"nodeType":"YulFunctionCall","src":"2390:71:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2383:3:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2496:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"2503:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2492:3:26"},"nodeType":"YulFunctionCall","src":"2492:16:26"},{"name":"pos","nodeType":"YulIdentifier","src":"2510:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"2515:6:26"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"2470:21:26"},"nodeType":"YulFunctionCall","src":"2470:52:26"},"nodeType":"YulExpressionStatement","src":"2470:52:26"},{"nodeType":"YulAssignment","src":"2531:46:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2542:3:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2569:6:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2547:21:26"},"nodeType":"YulFunctionCall","src":"2547:29:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2538:3:26"},"nodeType":"YulFunctionCall","src":"2538:39:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2531:3:26"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2292:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2299:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2307:3:26","type":""}],"src":"2219:364:26"},{"body":{"nodeType":"YulBlock","src":"2707:195:26","statements":[{"nodeType":"YulAssignment","src":"2717:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2729:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2740:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2725:3:26"},"nodeType":"YulFunctionCall","src":"2725:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2717:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2764:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2775:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2760:3:26"},"nodeType":"YulFunctionCall","src":"2760:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2783:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"2789:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2779:3:26"},"nodeType":"YulFunctionCall","src":"2779:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2753:6:26"},"nodeType":"YulFunctionCall","src":"2753:47:26"},"nodeType":"YulExpressionStatement","src":"2753:47:26"},{"nodeType":"YulAssignment","src":"2809:86:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2881:6:26"},{"name":"tail","nodeType":"YulIdentifier","src":"2890:4:26"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2817:63:26"},"nodeType":"YulFunctionCall","src":"2817:78:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2809:4:26"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2679:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2691:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2702:4:26","type":""}],"src":"2589:313:26"},{"body":{"nodeType":"YulBlock","src":"2953:32:26","statements":[{"nodeType":"YulAssignment","src":"2963:16:26","value":{"name":"value","nodeType":"YulIdentifier","src":"2974:5:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2963:7:26"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2935:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2945:7:26","type":""}],"src":"2908:77:26"},{"body":{"nodeType":"YulBlock","src":"3034:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"3091:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3100:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3103:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3093:6:26"},"nodeType":"YulFunctionCall","src":"3093:12:26"},"nodeType":"YulExpressionStatement","src":"3093:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3057:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3082:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3064:17:26"},"nodeType":"YulFunctionCall","src":"3064:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3054:2:26"},"nodeType":"YulFunctionCall","src":"3054:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3047:6:26"},"nodeType":"YulFunctionCall","src":"3047:43:26"},"nodeType":"YulIf","src":"3044:63:26"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3027:5:26","type":""}],"src":"2991:122:26"},{"body":{"nodeType":"YulBlock","src":"3171:87:26","statements":[{"nodeType":"YulAssignment","src":"3181:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3203:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3190:12:26"},"nodeType":"YulFunctionCall","src":"3190:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3181:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3246:5:26"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"3219:26:26"},"nodeType":"YulFunctionCall","src":"3219:33:26"},"nodeType":"YulExpressionStatement","src":"3219:33:26"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3149:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"3157:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3165:5:26","type":""}],"src":"3119:139:26"},{"body":{"nodeType":"YulBlock","src":"3330:263:26","statements":[{"body":{"nodeType":"YulBlock","src":"3376:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3378:77:26"},"nodeType":"YulFunctionCall","src":"3378:79:26"},"nodeType":"YulExpressionStatement","src":"3378:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3351:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"3360:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3347:3:26"},"nodeType":"YulFunctionCall","src":"3347:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"3372:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3343:3:26"},"nodeType":"YulFunctionCall","src":"3343:32:26"},"nodeType":"YulIf","src":"3340:119:26"},{"nodeType":"YulBlock","src":"3469:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"3484:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"3498:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3488:6:26","type":""}]},{"nodeType":"YulAssignment","src":"3513:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3548:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"3559:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3544:3:26"},"nodeType":"YulFunctionCall","src":"3544:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3568:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3523:20:26"},"nodeType":"YulFunctionCall","src":"3523:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3513:6:26"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3300:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3311:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3323:6:26","type":""}],"src":"3264:329:26"},{"body":{"nodeType":"YulBlock","src":"3644:81:26","statements":[{"nodeType":"YulAssignment","src":"3654:65:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3669:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"3676:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3665:3:26"},"nodeType":"YulFunctionCall","src":"3665:54:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3654:7:26"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3626:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3636:7:26","type":""}],"src":"3599:126:26"},{"body":{"nodeType":"YulBlock","src":"3776:51:26","statements":[{"nodeType":"YulAssignment","src":"3786:35:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3815:5:26"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"3797:17:26"},"nodeType":"YulFunctionCall","src":"3797:24:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3786:7:26"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3758:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3768:7:26","type":""}],"src":"3731:96:26"},{"body":{"nodeType":"YulBlock","src":"3898:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3915:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3938:5:26"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"3920:17:26"},"nodeType":"YulFunctionCall","src":"3920:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3908:6:26"},"nodeType":"YulFunctionCall","src":"3908:37:26"},"nodeType":"YulExpressionStatement","src":"3908:37:26"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3886:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3893:3:26","type":""}],"src":"3833:118:26"},{"body":{"nodeType":"YulBlock","src":"4055:124:26","statements":[{"nodeType":"YulAssignment","src":"4065:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4077:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4088:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4073:3:26"},"nodeType":"YulFunctionCall","src":"4073:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4065:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4145:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4158:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4169:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4154:3:26"},"nodeType":"YulFunctionCall","src":"4154:17:26"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4101:43:26"},"nodeType":"YulFunctionCall","src":"4101:71:26"},"nodeType":"YulExpressionStatement","src":"4101:71:26"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4027:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4039:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4050:4:26","type":""}],"src":"3957:222:26"},{"body":{"nodeType":"YulBlock","src":"4228:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"4285:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4294:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4297:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4287:6:26"},"nodeType":"YulFunctionCall","src":"4287:12:26"},"nodeType":"YulExpressionStatement","src":"4287:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4251:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4276:5:26"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4258:17:26"},"nodeType":"YulFunctionCall","src":"4258:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4248:2:26"},"nodeType":"YulFunctionCall","src":"4248:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4241:6:26"},"nodeType":"YulFunctionCall","src":"4241:43:26"},"nodeType":"YulIf","src":"4238:63:26"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4221:5:26","type":""}],"src":"4185:122:26"},{"body":{"nodeType":"YulBlock","src":"4365:87:26","statements":[{"nodeType":"YulAssignment","src":"4375:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4397:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4384:12:26"},"nodeType":"YulFunctionCall","src":"4384:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4375:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4440:5:26"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"4413:26:26"},"nodeType":"YulFunctionCall","src":"4413:33:26"},"nodeType":"YulExpressionStatement","src":"4413:33:26"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4343:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"4351:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4359:5:26","type":""}],"src":"4313:139:26"},{"body":{"nodeType":"YulBlock","src":"4541:391:26","statements":[{"body":{"nodeType":"YulBlock","src":"4587:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4589:77:26"},"nodeType":"YulFunctionCall","src":"4589:79:26"},"nodeType":"YulExpressionStatement","src":"4589:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4562:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"4571:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4558:3:26"},"nodeType":"YulFunctionCall","src":"4558:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"4583:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4554:3:26"},"nodeType":"YulFunctionCall","src":"4554:32:26"},"nodeType":"YulIf","src":"4551:119:26"},{"nodeType":"YulBlock","src":"4680:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"4695:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"4709:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4699:6:26","type":""}]},{"nodeType":"YulAssignment","src":"4724:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4759:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"4770:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4755:3:26"},"nodeType":"YulFunctionCall","src":"4755:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4779:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4734:20:26"},"nodeType":"YulFunctionCall","src":"4734:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4724:6:26"}]}]},{"nodeType":"YulBlock","src":"4807:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"4822:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"4836:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4826:6:26","type":""}]},{"nodeType":"YulAssignment","src":"4852:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4887:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"4898:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4883:3:26"},"nodeType":"YulFunctionCall","src":"4883:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4907:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4862:20:26"},"nodeType":"YulFunctionCall","src":"4862:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4852:6:26"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4503:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4514:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4526:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4534:6:26","type":""}],"src":"4458:474:26"},{"body":{"nodeType":"YulBlock","src":"5038:519:26","statements":[{"body":{"nodeType":"YulBlock","src":"5084:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5086:77:26"},"nodeType":"YulFunctionCall","src":"5086:79:26"},"nodeType":"YulExpressionStatement","src":"5086:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5059:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"5068:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5055:3:26"},"nodeType":"YulFunctionCall","src":"5055:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"5080:2:26","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5051:3:26"},"nodeType":"YulFunctionCall","src":"5051:32:26"},"nodeType":"YulIf","src":"5048:119:26"},{"nodeType":"YulBlock","src":"5177:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"5192:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"5206:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5196:6:26","type":""}]},{"nodeType":"YulAssignment","src":"5221:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5256:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"5267:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5252:3:26"},"nodeType":"YulFunctionCall","src":"5252:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5276:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5231:20:26"},"nodeType":"YulFunctionCall","src":"5231:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5221:6:26"}]}]},{"nodeType":"YulBlock","src":"5304:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"5319:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"5333:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5323:6:26","type":""}]},{"nodeType":"YulAssignment","src":"5349:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5384:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"5395:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5380:3:26"},"nodeType":"YulFunctionCall","src":"5380:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5404:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5359:20:26"},"nodeType":"YulFunctionCall","src":"5359:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5349:6:26"}]}]},{"nodeType":"YulBlock","src":"5432:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"5447:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"5461:2:26","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5451:6:26","type":""}]},{"nodeType":"YulAssignment","src":"5477:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5512:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"5523:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5508:3:26"},"nodeType":"YulFunctionCall","src":"5508:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5532:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5487:20:26"},"nodeType":"YulFunctionCall","src":"5487:53:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5477:6:26"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4992:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5003:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5015:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5023:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5031:6:26","type":""}],"src":"4938:619:26"},{"body":{"nodeType":"YulBlock","src":"5629:263:26","statements":[{"body":{"nodeType":"YulBlock","src":"5675:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5677:77:26"},"nodeType":"YulFunctionCall","src":"5677:79:26"},"nodeType":"YulExpressionStatement","src":"5677:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5650:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"5659:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5646:3:26"},"nodeType":"YulFunctionCall","src":"5646:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"5671:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5642:3:26"},"nodeType":"YulFunctionCall","src":"5642:32:26"},"nodeType":"YulIf","src":"5639:119:26"},{"nodeType":"YulBlock","src":"5768:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"5783:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"5797:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5787:6:26","type":""}]},{"nodeType":"YulAssignment","src":"5812:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5847:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"5858:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5843:3:26"},"nodeType":"YulFunctionCall","src":"5843:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5867:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5822:20:26"},"nodeType":"YulFunctionCall","src":"5822:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5812:6:26"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5599:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5610:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5622:6:26","type":""}],"src":"5563:329:26"},{"body":{"nodeType":"YulBlock","src":"5963:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5980:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6003:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5985:17:26"},"nodeType":"YulFunctionCall","src":"5985:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5973:6:26"},"nodeType":"YulFunctionCall","src":"5973:37:26"},"nodeType":"YulExpressionStatement","src":"5973:37:26"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5951:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5958:3:26","type":""}],"src":"5898:118:26"},{"body":{"nodeType":"YulBlock","src":"6120:124:26","statements":[{"nodeType":"YulAssignment","src":"6130:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6142:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"6153:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6138:3:26"},"nodeType":"YulFunctionCall","src":"6138:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6130:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6210:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6223:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"6234:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6219:3:26"},"nodeType":"YulFunctionCall","src":"6219:17:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"6166:43:26"},"nodeType":"YulFunctionCall","src":"6166:71:26"},"nodeType":"YulExpressionStatement","src":"6166:71:26"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6092:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6104:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6115:4:26","type":""}],"src":"6022:222:26"},{"body":{"nodeType":"YulBlock","src":"6290:76:26","statements":[{"body":{"nodeType":"YulBlock","src":"6344:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6353:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6356:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6346:6:26"},"nodeType":"YulFunctionCall","src":"6346:12:26"},"nodeType":"YulExpressionStatement","src":"6346:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6313:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6335:5:26"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"6320:14:26"},"nodeType":"YulFunctionCall","src":"6320:21:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6310:2:26"},"nodeType":"YulFunctionCall","src":"6310:32:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6303:6:26"},"nodeType":"YulFunctionCall","src":"6303:40:26"},"nodeType":"YulIf","src":"6300:60:26"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6283:5:26","type":""}],"src":"6250:116:26"},{"body":{"nodeType":"YulBlock","src":"6421:84:26","statements":[{"nodeType":"YulAssignment","src":"6431:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6453:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6440:12:26"},"nodeType":"YulFunctionCall","src":"6440:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6431:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6493:5:26"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"6469:23:26"},"nodeType":"YulFunctionCall","src":"6469:30:26"},"nodeType":"YulExpressionStatement","src":"6469:30:26"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6399:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"6407:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"6415:5:26","type":""}],"src":"6372:133:26"},{"body":{"nodeType":"YulBlock","src":"6591:388:26","statements":[{"body":{"nodeType":"YulBlock","src":"6637:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6639:77:26"},"nodeType":"YulFunctionCall","src":"6639:79:26"},"nodeType":"YulExpressionStatement","src":"6639:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6612:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"6621:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6608:3:26"},"nodeType":"YulFunctionCall","src":"6608:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"6633:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6604:3:26"},"nodeType":"YulFunctionCall","src":"6604:32:26"},"nodeType":"YulIf","src":"6601:119:26"},{"nodeType":"YulBlock","src":"6730:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"6745:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"6759:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6749:6:26","type":""}]},{"nodeType":"YulAssignment","src":"6774:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6809:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"6820:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6805:3:26"},"nodeType":"YulFunctionCall","src":"6805:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6829:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6784:20:26"},"nodeType":"YulFunctionCall","src":"6784:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6774:6:26"}]}]},{"nodeType":"YulBlock","src":"6857:115:26","statements":[{"nodeType":"YulVariableDeclaration","src":"6872:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"6886:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6876:6:26","type":""}]},{"nodeType":"YulAssignment","src":"6902:60:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6934:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"6945:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6930:3:26"},"nodeType":"YulFunctionCall","src":"6930:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6954:7:26"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"6912:17:26"},"nodeType":"YulFunctionCall","src":"6912:50:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6902:6:26"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6553:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6564:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6576:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6584:6:26","type":""}],"src":"6511:468:26"},{"body":{"nodeType":"YulBlock","src":"7074:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7091:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7094:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7084:6:26"},"nodeType":"YulFunctionCall","src":"7084:12:26"},"nodeType":"YulExpressionStatement","src":"7084:12:26"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"6985:117:26"},{"body":{"nodeType":"YulBlock","src":"7197:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7214:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7217:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7207:6:26"},"nodeType":"YulFunctionCall","src":"7207:12:26"},"nodeType":"YulExpressionStatement","src":"7207:12:26"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"7108:117:26"},{"body":{"nodeType":"YulBlock","src":"7259:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7276:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7279:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7269:6:26"},"nodeType":"YulFunctionCall","src":"7269:88:26"},"nodeType":"YulExpressionStatement","src":"7269:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7373:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7376:4:26","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7366:6:26"},"nodeType":"YulFunctionCall","src":"7366:15:26"},"nodeType":"YulExpressionStatement","src":"7366:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7397:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7400:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7390:6:26"},"nodeType":"YulFunctionCall","src":"7390:15:26"},"nodeType":"YulExpressionStatement","src":"7390:15:26"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"7231:180:26"},{"body":{"nodeType":"YulBlock","src":"7460:238:26","statements":[{"nodeType":"YulVariableDeclaration","src":"7470:58:26","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7492:6:26"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"7522:4:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"7500:21:26"},"nodeType":"YulFunctionCall","src":"7500:27:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7488:3:26"},"nodeType":"YulFunctionCall","src":"7488:40:26"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"7474:10:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"7639:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7641:16:26"},"nodeType":"YulFunctionCall","src":"7641:18:26"},"nodeType":"YulExpressionStatement","src":"7641:18:26"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7582:10:26"},{"kind":"number","nodeType":"YulLiteral","src":"7594:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7579:2:26"},"nodeType":"YulFunctionCall","src":"7579:34:26"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7618:10:26"},{"name":"memPtr","nodeType":"YulIdentifier","src":"7630:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7615:2:26"},"nodeType":"YulFunctionCall","src":"7615:22:26"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7576:2:26"},"nodeType":"YulFunctionCall","src":"7576:62:26"},"nodeType":"YulIf","src":"7573:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7677:2:26","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7681:10:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7670:6:26"},"nodeType":"YulFunctionCall","src":"7670:22:26"},"nodeType":"YulExpressionStatement","src":"7670:22:26"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7446:6:26","type":""},{"name":"size","nodeType":"YulTypedName","src":"7454:4:26","type":""}],"src":"7417:281:26"},{"body":{"nodeType":"YulBlock","src":"7745:88:26","statements":[{"nodeType":"YulAssignment","src":"7755:30:26","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"7765:18:26"},"nodeType":"YulFunctionCall","src":"7765:20:26"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7755:6:26"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7814:6:26"},{"name":"size","nodeType":"YulIdentifier","src":"7822:4:26"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"7794:19:26"},"nodeType":"YulFunctionCall","src":"7794:33:26"},"nodeType":"YulExpressionStatement","src":"7794:33:26"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"7729:4:26","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"7738:6:26","type":""}],"src":"7704:129:26"},{"body":{"nodeType":"YulBlock","src":"7905:241:26","statements":[{"body":{"nodeType":"YulBlock","src":"8010:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"8012:16:26"},"nodeType":"YulFunctionCall","src":"8012:18:26"},"nodeType":"YulExpressionStatement","src":"8012:18:26"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7982:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"7990:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7979:2:26"},"nodeType":"YulFunctionCall","src":"7979:30:26"},"nodeType":"YulIf","src":"7976:56:26"},{"nodeType":"YulAssignment","src":"8042:37:26","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8072:6:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"8050:21:26"},"nodeType":"YulFunctionCall","src":"8050:29:26"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"8042:4:26"}]},{"nodeType":"YulAssignment","src":"8116:23:26","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"8128:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"8134:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8124:3:26"},"nodeType":"YulFunctionCall","src":"8124:15:26"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"8116:4:26"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"7889:6:26","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"7900:4:26","type":""}],"src":"7839:307:26"},{"body":{"nodeType":"YulBlock","src":"8203:103:26","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8226:3:26"},{"name":"src","nodeType":"YulIdentifier","src":"8231:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"8236:6:26"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"8213:12:26"},"nodeType":"YulFunctionCall","src":"8213:30:26"},"nodeType":"YulExpressionStatement","src":"8213:30:26"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8284:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"8289:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8280:3:26"},"nodeType":"YulFunctionCall","src":"8280:16:26"},{"kind":"number","nodeType":"YulLiteral","src":"8298:1:26","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8273:6:26"},"nodeType":"YulFunctionCall","src":"8273:27:26"},"nodeType":"YulExpressionStatement","src":"8273:27:26"}]},"name":"copy_calldata_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8185:3:26","type":""},{"name":"dst","nodeType":"YulTypedName","src":"8190:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"8195:6:26","type":""}],"src":"8152:154:26"},{"body":{"nodeType":"YulBlock","src":"8395:327:26","statements":[{"nodeType":"YulAssignment","src":"8405:74:26","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8471:6:26"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"8430:40:26"},"nodeType":"YulFunctionCall","src":"8430:48:26"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"8414:15:26"},"nodeType":"YulFunctionCall","src":"8414:65:26"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8405:5:26"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"8495:5:26"},{"name":"length","nodeType":"YulIdentifier","src":"8502:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8488:6:26"},"nodeType":"YulFunctionCall","src":"8488:21:26"},"nodeType":"YulExpressionStatement","src":"8488:21:26"},{"nodeType":"YulVariableDeclaration","src":"8518:27:26","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"8533:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"8540:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8529:3:26"},"nodeType":"YulFunctionCall","src":"8529:16:26"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"8522:3:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"8583:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"8585:77:26"},"nodeType":"YulFunctionCall","src":"8585:79:26"},"nodeType":"YulExpressionStatement","src":"8585:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8564:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"8569:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8560:3:26"},"nodeType":"YulFunctionCall","src":"8560:16:26"},{"name":"end","nodeType":"YulIdentifier","src":"8578:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8557:2:26"},"nodeType":"YulFunctionCall","src":"8557:25:26"},"nodeType":"YulIf","src":"8554:112:26"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8699:3:26"},{"name":"dst","nodeType":"YulIdentifier","src":"8704:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"8709:6:26"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"8675:23:26"},"nodeType":"YulFunctionCall","src":"8675:41:26"},"nodeType":"YulExpressionStatement","src":"8675:41:26"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8368:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"8373:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"8381:3:26","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"8389:5:26","type":""}],"src":"8312:410:26"},{"body":{"nodeType":"YulBlock","src":"8802:277:26","statements":[{"body":{"nodeType":"YulBlock","src":"8851:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"8853:77:26"},"nodeType":"YulFunctionCall","src":"8853:79:26"},"nodeType":"YulExpressionStatement","src":"8853:79:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8830:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"8838:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8826:3:26"},"nodeType":"YulFunctionCall","src":"8826:17:26"},{"name":"end","nodeType":"YulIdentifier","src":"8845:3:26"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8822:3:26"},"nodeType":"YulFunctionCall","src":"8822:27:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8815:6:26"},"nodeType":"YulFunctionCall","src":"8815:35:26"},"nodeType":"YulIf","src":"8812:122:26"},{"nodeType":"YulVariableDeclaration","src":"8943:34:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8970:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8957:12:26"},"nodeType":"YulFunctionCall","src":"8957:20:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8947:6:26","type":""}]},{"nodeType":"YulAssignment","src":"8986:87:26","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9046:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"9054:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9042:3:26"},"nodeType":"YulFunctionCall","src":"9042:17:26"},{"name":"length","nodeType":"YulIdentifier","src":"9061:6:26"},{"name":"end","nodeType":"YulIdentifier","src":"9069:3:26"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"8995:46:26"},"nodeType":"YulFunctionCall","src":"8995:78:26"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8986:5:26"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8780:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"8788:3:26","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"8796:5:26","type":""}],"src":"8741:338:26"},{"body":{"nodeType":"YulBlock","src":"9211:817:26","statements":[{"body":{"nodeType":"YulBlock","src":"9258:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9260:77:26"},"nodeType":"YulFunctionCall","src":"9260:79:26"},"nodeType":"YulExpressionStatement","src":"9260:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9232:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"9241:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9228:3:26"},"nodeType":"YulFunctionCall","src":"9228:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"9253:3:26","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9224:3:26"},"nodeType":"YulFunctionCall","src":"9224:33:26"},"nodeType":"YulIf","src":"9221:120:26"},{"nodeType":"YulBlock","src":"9351:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"9366:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"9380:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9370:6:26","type":""}]},{"nodeType":"YulAssignment","src":"9395:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9430:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"9441:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9426:3:26"},"nodeType":"YulFunctionCall","src":"9426:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9450:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9405:20:26"},"nodeType":"YulFunctionCall","src":"9405:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9395:6:26"}]}]},{"nodeType":"YulBlock","src":"9478:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"9493:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"9507:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9497:6:26","type":""}]},{"nodeType":"YulAssignment","src":"9523:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9558:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"9569:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9554:3:26"},"nodeType":"YulFunctionCall","src":"9554:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9578:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9533:20:26"},"nodeType":"YulFunctionCall","src":"9533:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9523:6:26"}]}]},{"nodeType":"YulBlock","src":"9606:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"9621:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"9635:2:26","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9625:6:26","type":""}]},{"nodeType":"YulAssignment","src":"9651:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9686:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"9697:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9682:3:26"},"nodeType":"YulFunctionCall","src":"9682:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9706:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"9661:20:26"},"nodeType":"YulFunctionCall","src":"9661:53:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"9651:6:26"}]}]},{"nodeType":"YulBlock","src":"9734:287:26","statements":[{"nodeType":"YulVariableDeclaration","src":"9749:46:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9780:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"9791:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9776:3:26"},"nodeType":"YulFunctionCall","src":"9776:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9763:12:26"},"nodeType":"YulFunctionCall","src":"9763:32:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9753:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"9842:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"9844:77:26"},"nodeType":"YulFunctionCall","src":"9844:79:26"},"nodeType":"YulExpressionStatement","src":"9844:79:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9814:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"9822:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9811:2:26"},"nodeType":"YulFunctionCall","src":"9811:30:26"},"nodeType":"YulIf","src":"9808:117:26"},{"nodeType":"YulAssignment","src":"9939:72:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9983:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"9994:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9979:3:26"},"nodeType":"YulFunctionCall","src":"9979:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10003:7:26"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"9949:29:26"},"nodeType":"YulFunctionCall","src":"9949:62:26"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"9939:6:26"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9157:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9168:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9180:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9188:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9196:6:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9204:6:26","type":""}],"src":"9085:943:26"},{"body":{"nodeType":"YulBlock","src":"10117:391:26","statements":[{"body":{"nodeType":"YulBlock","src":"10163:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10165:77:26"},"nodeType":"YulFunctionCall","src":"10165:79:26"},"nodeType":"YulExpressionStatement","src":"10165:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10138:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"10147:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10134:3:26"},"nodeType":"YulFunctionCall","src":"10134:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"10159:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10130:3:26"},"nodeType":"YulFunctionCall","src":"10130:32:26"},"nodeType":"YulIf","src":"10127:119:26"},{"nodeType":"YulBlock","src":"10256:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"10271:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"10285:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10275:6:26","type":""}]},{"nodeType":"YulAssignment","src":"10300:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10335:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"10346:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10331:3:26"},"nodeType":"YulFunctionCall","src":"10331:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10355:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10310:20:26"},"nodeType":"YulFunctionCall","src":"10310:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10300:6:26"}]}]},{"nodeType":"YulBlock","src":"10383:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"10398:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"10412:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10402:6:26","type":""}]},{"nodeType":"YulAssignment","src":"10428:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10463:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"10474:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10459:3:26"},"nodeType":"YulFunctionCall","src":"10459:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10483:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10438:20:26"},"nodeType":"YulFunctionCall","src":"10438:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10428:6:26"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10079:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10090:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10102:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10110:6:26","type":""}],"src":"10034:474:26"},{"body":{"nodeType":"YulBlock","src":"10542:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10559:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10562:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10552:6:26"},"nodeType":"YulFunctionCall","src":"10552:88:26"},"nodeType":"YulExpressionStatement","src":"10552:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10656:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10659:4:26","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10649:6:26"},"nodeType":"YulFunctionCall","src":"10649:15:26"},"nodeType":"YulExpressionStatement","src":"10649:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10680:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10683:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10673:6:26"},"nodeType":"YulFunctionCall","src":"10673:15:26"},"nodeType":"YulExpressionStatement","src":"10673:15:26"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"10514:180:26"},{"body":{"nodeType":"YulBlock","src":"10751:269:26","statements":[{"nodeType":"YulAssignment","src":"10761:22:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10775:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"10781:1:26","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"10771:3:26"},"nodeType":"YulFunctionCall","src":"10771:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10761:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"10792:38:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10822:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"10828:1:26","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10818:3:26"},"nodeType":"YulFunctionCall","src":"10818:12:26"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"10796:18:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"10869:51:26","statements":[{"nodeType":"YulAssignment","src":"10883:27:26","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10897:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"10905:4:26","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10893:3:26"},"nodeType":"YulFunctionCall","src":"10893:17:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10883:6:26"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"10849:18:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10842:6:26"},"nodeType":"YulFunctionCall","src":"10842:26:26"},"nodeType":"YulIf","src":"10839:81:26"},{"body":{"nodeType":"YulBlock","src":"10972:42:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"10986:16:26"},"nodeType":"YulFunctionCall","src":"10986:18:26"},"nodeType":"YulExpressionStatement","src":"10986:18:26"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"10936:18:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10959:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"10967:2:26","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10956:2:26"},"nodeType":"YulFunctionCall","src":"10956:14:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10933:2:26"},"nodeType":"YulFunctionCall","src":"10933:38:26"},"nodeType":"YulIf","src":"10930:84:26"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"10735:4:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"10744:6:26","type":""}],"src":"10700:320:26"},{"body":{"nodeType":"YulBlock","src":"11132:114:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11154:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"11162:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11150:3:26"},"nodeType":"YulFunctionCall","src":"11150:14:26"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"11166:34:26","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11143:6:26"},"nodeType":"YulFunctionCall","src":"11143:58:26"},"nodeType":"YulExpressionStatement","src":"11143:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11222:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"11230:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11218:3:26"},"nodeType":"YulFunctionCall","src":"11218:15:26"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"11235:3:26","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11211:6:26"},"nodeType":"YulFunctionCall","src":"11211:28:26"},"nodeType":"YulExpressionStatement","src":"11211:28:26"}]},"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11124:6:26","type":""}],"src":"11026:220:26"},{"body":{"nodeType":"YulBlock","src":"11398:220:26","statements":[{"nodeType":"YulAssignment","src":"11408:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11474:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"11479:2:26","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11415:58:26"},"nodeType":"YulFunctionCall","src":"11415:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11408:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11580:3:26"}],"functionName":{"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulIdentifier","src":"11491:88:26"},"nodeType":"YulFunctionCall","src":"11491:93:26"},"nodeType":"YulExpressionStatement","src":"11491:93:26"},{"nodeType":"YulAssignment","src":"11593:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11604:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"11609:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11600:3:26"},"nodeType":"YulFunctionCall","src":"11600:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11593:3:26"}]}]},"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11386:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11394:3:26","type":""}],"src":"11252:366:26"},{"body":{"nodeType":"YulBlock","src":"11795:248:26","statements":[{"nodeType":"YulAssignment","src":"11805:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11817:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"11828:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11813:3:26"},"nodeType":"YulFunctionCall","src":"11813:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11805:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11852:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"11863:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11848:3:26"},"nodeType":"YulFunctionCall","src":"11848:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11871:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"11877:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11867:3:26"},"nodeType":"YulFunctionCall","src":"11867:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11841:6:26"},"nodeType":"YulFunctionCall","src":"11841:47:26"},"nodeType":"YulExpressionStatement","src":"11841:47:26"},{"nodeType":"YulAssignment","src":"11897:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12031:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11905:124:26"},"nodeType":"YulFunctionCall","src":"11905:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11897:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11775:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11790:4:26","type":""}],"src":"11624:419:26"},{"body":{"nodeType":"YulBlock","src":"12155:142:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12177:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"12185:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12173:3:26"},"nodeType":"YulFunctionCall","src":"12173:14:26"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"12189:34:26","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12166:6:26"},"nodeType":"YulFunctionCall","src":"12166:58:26"},"nodeType":"YulExpressionStatement","src":"12166:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12245:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"12253:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12241:3:26"},"nodeType":"YulFunctionCall","src":"12241:15:26"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"12258:31:26","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12234:6:26"},"nodeType":"YulFunctionCall","src":"12234:56:26"},"nodeType":"YulExpressionStatement","src":"12234:56:26"}]},"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12147:6:26","type":""}],"src":"12049:248:26"},{"body":{"nodeType":"YulBlock","src":"12449:220:26","statements":[{"nodeType":"YulAssignment","src":"12459:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12525:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"12530:2:26","type":"","value":"61"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12466:58:26"},"nodeType":"YulFunctionCall","src":"12466:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12459:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12631:3:26"}],"functionName":{"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulIdentifier","src":"12542:88:26"},"nodeType":"YulFunctionCall","src":"12542:93:26"},"nodeType":"YulExpressionStatement","src":"12542:93:26"},{"nodeType":"YulAssignment","src":"12644:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12655:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"12660:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12651:3:26"},"nodeType":"YulFunctionCall","src":"12651:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12644:3:26"}]}]},"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12437:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12445:3:26","type":""}],"src":"12303:366:26"},{"body":{"nodeType":"YulBlock","src":"12846:248:26","statements":[{"nodeType":"YulAssignment","src":"12856:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12868:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12879:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12864:3:26"},"nodeType":"YulFunctionCall","src":"12864:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12856:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12903:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12914:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12899:3:26"},"nodeType":"YulFunctionCall","src":"12899:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12922:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"12928:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12918:3:26"},"nodeType":"YulFunctionCall","src":"12918:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12892:6:26"},"nodeType":"YulFunctionCall","src":"12892:47:26"},"nodeType":"YulExpressionStatement","src":"12892:47:26"},{"nodeType":"YulAssignment","src":"12948:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13082:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12956:124:26"},"nodeType":"YulFunctionCall","src":"12956:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12948:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12826:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12841:4:26","type":""}],"src":"12675:419:26"},{"body":{"nodeType":"YulBlock","src":"13206:126:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13228:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"13236:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13224:3:26"},"nodeType":"YulFunctionCall","src":"13224:14:26"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"13240:34:26","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13217:6:26"},"nodeType":"YulFunctionCall","src":"13217:58:26"},"nodeType":"YulExpressionStatement","src":"13217:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13296:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"13304:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13292:3:26"},"nodeType":"YulFunctionCall","src":"13292:15:26"},{"hexValue":"72206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"13309:15:26","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13285:6:26"},"nodeType":"YulFunctionCall","src":"13285:40:26"},"nodeType":"YulExpressionStatement","src":"13285:40:26"}]},"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"13198:6:26","type":""}],"src":"13100:232:26"},{"body":{"nodeType":"YulBlock","src":"13484:220:26","statements":[{"nodeType":"YulAssignment","src":"13494:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13560:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"13565:2:26","type":"","value":"45"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13501:58:26"},"nodeType":"YulFunctionCall","src":"13501:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13494:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13666:3:26"}],"functionName":{"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulIdentifier","src":"13577:88:26"},"nodeType":"YulFunctionCall","src":"13577:93:26"},"nodeType":"YulExpressionStatement","src":"13577:93:26"},{"nodeType":"YulAssignment","src":"13679:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13690:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"13695:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13686:3:26"},"nodeType":"YulFunctionCall","src":"13686:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13679:3:26"}]}]},"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13472:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13480:3:26","type":""}],"src":"13338:366:26"},{"body":{"nodeType":"YulBlock","src":"13881:248:26","statements":[{"nodeType":"YulAssignment","src":"13891:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13903:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"13914:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13899:3:26"},"nodeType":"YulFunctionCall","src":"13899:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13891:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13938:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"13949:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13934:3:26"},"nodeType":"YulFunctionCall","src":"13934:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13957:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"13963:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13953:3:26"},"nodeType":"YulFunctionCall","src":"13953:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13927:6:26"},"nodeType":"YulFunctionCall","src":"13927:47:26"},"nodeType":"YulExpressionStatement","src":"13927:47:26"},{"nodeType":"YulAssignment","src":"13983:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14117:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13991:124:26"},"nodeType":"YulFunctionCall","src":"13991:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13983:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13861:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13876:4:26","type":""}],"src":"13710:419:26"},{"body":{"nodeType":"YulBlock","src":"14241:68:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14263:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"14271:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14259:3:26"},"nodeType":"YulFunctionCall","src":"14259:14:26"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"14275:26:26","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14252:6:26"},"nodeType":"YulFunctionCall","src":"14252:50:26"},"nodeType":"YulExpressionStatement","src":"14252:50:26"}]},"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14233:6:26","type":""}],"src":"14135:174:26"},{"body":{"nodeType":"YulBlock","src":"14461:220:26","statements":[{"nodeType":"YulAssignment","src":"14471:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14537:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"14542:2:26","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14478:58:26"},"nodeType":"YulFunctionCall","src":"14478:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14471:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14643:3:26"}],"functionName":{"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulIdentifier","src":"14554:88:26"},"nodeType":"YulFunctionCall","src":"14554:93:26"},"nodeType":"YulExpressionStatement","src":"14554:93:26"},{"nodeType":"YulAssignment","src":"14656:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14667:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"14672:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14663:3:26"},"nodeType":"YulFunctionCall","src":"14663:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14656:3:26"}]}]},"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14449:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14457:3:26","type":""}],"src":"14315:366:26"},{"body":{"nodeType":"YulBlock","src":"14858:248:26","statements":[{"nodeType":"YulAssignment","src":"14868:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14880:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"14891:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14876:3:26"},"nodeType":"YulFunctionCall","src":"14876:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14868:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14915:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"14926:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14911:3:26"},"nodeType":"YulFunctionCall","src":"14911:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14934:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"14940:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14930:3:26"},"nodeType":"YulFunctionCall","src":"14930:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14904:6:26"},"nodeType":"YulFunctionCall","src":"14904:47:26"},"nodeType":"YulExpressionStatement","src":"14904:47:26"},{"nodeType":"YulAssignment","src":"14960:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15094:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14968:124:26"},"nodeType":"YulFunctionCall","src":"14968:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14960:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14838:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14853:4:26","type":""}],"src":"14687:419:26"},{"body":{"nodeType":"YulBlock","src":"15218:122:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15240:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"15248:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15236:3:26"},"nodeType":"YulFunctionCall","src":"15236:14:26"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"15252:34:26","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15229:6:26"},"nodeType":"YulFunctionCall","src":"15229:58:26"},"nodeType":"YulExpressionStatement","src":"15229:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15308:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"15316:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15304:3:26"},"nodeType":"YulFunctionCall","src":"15304:15:26"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"15321:11:26","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15297:6:26"},"nodeType":"YulFunctionCall","src":"15297:36:26"},"nodeType":"YulExpressionStatement","src":"15297:36:26"}]},"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"15210:6:26","type":""}],"src":"15112:228:26"},{"body":{"nodeType":"YulBlock","src":"15492:220:26","statements":[{"nodeType":"YulAssignment","src":"15502:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15568:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"15573:2:26","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15509:58:26"},"nodeType":"YulFunctionCall","src":"15509:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15502:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15674:3:26"}],"functionName":{"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulIdentifier","src":"15585:88:26"},"nodeType":"YulFunctionCall","src":"15585:93:26"},"nodeType":"YulExpressionStatement","src":"15585:93:26"},{"nodeType":"YulAssignment","src":"15687:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15698:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"15703:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15694:3:26"},"nodeType":"YulFunctionCall","src":"15694:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15687:3:26"}]}]},"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15480:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15488:3:26","type":""}],"src":"15346:366:26"},{"body":{"nodeType":"YulBlock","src":"15889:248:26","statements":[{"nodeType":"YulAssignment","src":"15899:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15911:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"15922:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15907:3:26"},"nodeType":"YulFunctionCall","src":"15907:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15899:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15946:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"15957:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15942:3:26"},"nodeType":"YulFunctionCall","src":"15942:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15965:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"15971:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15961:3:26"},"nodeType":"YulFunctionCall","src":"15961:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15935:6:26"},"nodeType":"YulFunctionCall","src":"15935:47:26"},"nodeType":"YulExpressionStatement","src":"15935:47:26"},{"nodeType":"YulAssignment","src":"15991:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16125:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15999:124:26"},"nodeType":"YulFunctionCall","src":"15999:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15991:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15869:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15884:4:26","type":""}],"src":"15718:419:26"},{"body":{"nodeType":"YulBlock","src":"16257:34:26","statements":[{"nodeType":"YulAssignment","src":"16267:18:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"16282:3:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"16267:11:26"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16229:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"16234:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"16245:11:26","type":""}],"src":"16143:148:26"},{"body":{"nodeType":"YulBlock","src":"16407:267:26","statements":[{"nodeType":"YulVariableDeclaration","src":"16417:53:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16464:5:26"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"16431:32:26"},"nodeType":"YulFunctionCall","src":"16431:39:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"16421:6:26","type":""}]},{"nodeType":"YulAssignment","src":"16479:96:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16563:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"16568:6:26"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16486:76:26"},"nodeType":"YulFunctionCall","src":"16486:89:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16479:3:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16610:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"16617:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16606:3:26"},"nodeType":"YulFunctionCall","src":"16606:16:26"},{"name":"pos","nodeType":"YulIdentifier","src":"16624:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"16629:6:26"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"16584:21:26"},"nodeType":"YulFunctionCall","src":"16584:52:26"},"nodeType":"YulExpressionStatement","src":"16584:52:26"},{"nodeType":"YulAssignment","src":"16645:23:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16656:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"16661:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16652:3:26"},"nodeType":"YulFunctionCall","src":"16652:16:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16645:3:26"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16388:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16395:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16403:3:26","type":""}],"src":"16297:377:26"},{"body":{"nodeType":"YulBlock","src":"16864:251:26","statements":[{"nodeType":"YulAssignment","src":"16875:102:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16964:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"16973:3:26"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16882:81:26"},"nodeType":"YulFunctionCall","src":"16882:95:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16875:3:26"}]},{"nodeType":"YulAssignment","src":"16987:102:26","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17076:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"17085:3:26"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16994:81:26"},"nodeType":"YulFunctionCall","src":"16994:95:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16987:3:26"}]},{"nodeType":"YulAssignment","src":"17099:10:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"17106:3:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17099:3:26"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16835:3:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16841:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16849:6:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16860:3:26","type":""}],"src":"16680:435:26"},{"body":{"nodeType":"YulBlock","src":"17227:118:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17249:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"17257:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17245:3:26"},"nodeType":"YulFunctionCall","src":"17245:14:26"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"17261:34:26","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17238:6:26"},"nodeType":"YulFunctionCall","src":"17238:58:26"},"nodeType":"YulExpressionStatement","src":"17238:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17317:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"17325:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17313:3:26"},"nodeType":"YulFunctionCall","src":"17313:15:26"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"17330:7:26","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17306:6:26"},"nodeType":"YulFunctionCall","src":"17306:32:26"},"nodeType":"YulExpressionStatement","src":"17306:32:26"}]},"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17219:6:26","type":""}],"src":"17121:224:26"},{"body":{"nodeType":"YulBlock","src":"17497:220:26","statements":[{"nodeType":"YulAssignment","src":"17507:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17573:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"17578:2:26","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17514:58:26"},"nodeType":"YulFunctionCall","src":"17514:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17507:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17679:3:26"}],"functionName":{"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulIdentifier","src":"17590:88:26"},"nodeType":"YulFunctionCall","src":"17590:93:26"},"nodeType":"YulExpressionStatement","src":"17590:93:26"},{"nodeType":"YulAssignment","src":"17692:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17703:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"17708:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17699:3:26"},"nodeType":"YulFunctionCall","src":"17699:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17692:3:26"}]}]},"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17485:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17493:3:26","type":""}],"src":"17351:366:26"},{"body":{"nodeType":"YulBlock","src":"17894:248:26","statements":[{"nodeType":"YulAssignment","src":"17904:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17916:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"17927:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17912:3:26"},"nodeType":"YulFunctionCall","src":"17912:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17904:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17951:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"17962:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17947:3:26"},"nodeType":"YulFunctionCall","src":"17947:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17970:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"17976:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17966:3:26"},"nodeType":"YulFunctionCall","src":"17966:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17940:6:26"},"nodeType":"YulFunctionCall","src":"17940:47:26"},"nodeType":"YulExpressionStatement","src":"17940:47:26"},{"nodeType":"YulAssignment","src":"17996:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18130:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18004:124:26"},"nodeType":"YulFunctionCall","src":"18004:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17996:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17874:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17889:4:26","type":""}],"src":"17723:419:26"},{"body":{"nodeType":"YulBlock","src":"18254:117:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18276:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"18284:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18272:3:26"},"nodeType":"YulFunctionCall","src":"18272:14:26"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"18288:34:26","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18265:6:26"},"nodeType":"YulFunctionCall","src":"18265:58:26"},"nodeType":"YulExpressionStatement","src":"18265:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18344:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"18352:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18340:3:26"},"nodeType":"YulFunctionCall","src":"18340:15:26"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"18357:6:26","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18333:6:26"},"nodeType":"YulFunctionCall","src":"18333:31:26"},"nodeType":"YulExpressionStatement","src":"18333:31:26"}]},"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18246:6:26","type":""}],"src":"18148:223:26"},{"body":{"nodeType":"YulBlock","src":"18523:220:26","statements":[{"nodeType":"YulAssignment","src":"18533:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18599:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"18604:2:26","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18540:58:26"},"nodeType":"YulFunctionCall","src":"18540:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18533:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18705:3:26"}],"functionName":{"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulIdentifier","src":"18616:88:26"},"nodeType":"YulFunctionCall","src":"18616:93:26"},"nodeType":"YulExpressionStatement","src":"18616:93:26"},{"nodeType":"YulAssignment","src":"18718:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18729:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"18734:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18725:3:26"},"nodeType":"YulFunctionCall","src":"18725:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18718:3:26"}]}]},"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18511:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18519:3:26","type":""}],"src":"18377:366:26"},{"body":{"nodeType":"YulBlock","src":"18920:248:26","statements":[{"nodeType":"YulAssignment","src":"18930:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18942:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"18953:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18938:3:26"},"nodeType":"YulFunctionCall","src":"18938:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18930:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18977:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"18988:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18973:3:26"},"nodeType":"YulFunctionCall","src":"18973:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18996:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"19002:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18992:3:26"},"nodeType":"YulFunctionCall","src":"18992:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18966:6:26"},"nodeType":"YulFunctionCall","src":"18966:47:26"},"nodeType":"YulExpressionStatement","src":"18966:47:26"},{"nodeType":"YulAssignment","src":"19022:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19156:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19030:124:26"},"nodeType":"YulFunctionCall","src":"19030:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19022:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18900:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18915:4:26","type":""}],"src":"18749:419:26"},{"body":{"nodeType":"YulBlock","src":"19280:69:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19302:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"19310:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19298:3:26"},"nodeType":"YulFunctionCall","src":"19298:14:26"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"19314:27:26","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19291:6:26"},"nodeType":"YulFunctionCall","src":"19291:51:26"},"nodeType":"YulExpressionStatement","src":"19291:51:26"}]},"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19272:6:26","type":""}],"src":"19174:175:26"},{"body":{"nodeType":"YulBlock","src":"19501:220:26","statements":[{"nodeType":"YulAssignment","src":"19511:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19577:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"19582:2:26","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19518:58:26"},"nodeType":"YulFunctionCall","src":"19518:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19511:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19683:3:26"}],"functionName":{"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulIdentifier","src":"19594:88:26"},"nodeType":"YulFunctionCall","src":"19594:93:26"},"nodeType":"YulExpressionStatement","src":"19594:93:26"},{"nodeType":"YulAssignment","src":"19696:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19707:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"19712:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19703:3:26"},"nodeType":"YulFunctionCall","src":"19703:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19696:3:26"}]}]},"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19489:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19497:3:26","type":""}],"src":"19355:366:26"},{"body":{"nodeType":"YulBlock","src":"19898:248:26","statements":[{"nodeType":"YulAssignment","src":"19908:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19920:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"19931:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19916:3:26"},"nodeType":"YulFunctionCall","src":"19916:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19908:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19955:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"19966:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19951:3:26"},"nodeType":"YulFunctionCall","src":"19951:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19974:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"19980:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19970:3:26"},"nodeType":"YulFunctionCall","src":"19970:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19944:6:26"},"nodeType":"YulFunctionCall","src":"19944:47:26"},"nodeType":"YulExpressionStatement","src":"19944:47:26"},{"nodeType":"YulAssignment","src":"20000:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20134:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20008:124:26"},"nodeType":"YulFunctionCall","src":"20008:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20000:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19878:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19893:4:26","type":""}],"src":"19727:419:26"},{"body":{"nodeType":"YulBlock","src":"20258:131:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20280:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"20288:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20276:3:26"},"nodeType":"YulFunctionCall","src":"20276:14:26"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"20292:34:26","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20269:6:26"},"nodeType":"YulFunctionCall","src":"20269:58:26"},"nodeType":"YulExpressionStatement","src":"20269:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20348:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"20356:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20344:3:26"},"nodeType":"YulFunctionCall","src":"20344:15:26"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"20361:20:26","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20337:6:26"},"nodeType":"YulFunctionCall","src":"20337:45:26"},"nodeType":"YulExpressionStatement","src":"20337:45:26"}]},"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20250:6:26","type":""}],"src":"20152:237:26"},{"body":{"nodeType":"YulBlock","src":"20541:220:26","statements":[{"nodeType":"YulAssignment","src":"20551:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20617:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"20622:2:26","type":"","value":"50"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20558:58:26"},"nodeType":"YulFunctionCall","src":"20558:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20551:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20723:3:26"}],"functionName":{"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulIdentifier","src":"20634:88:26"},"nodeType":"YulFunctionCall","src":"20634:93:26"},"nodeType":"YulExpressionStatement","src":"20634:93:26"},{"nodeType":"YulAssignment","src":"20736:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20747:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"20752:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20743:3:26"},"nodeType":"YulFunctionCall","src":"20743:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20736:3:26"}]}]},"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20529:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20537:3:26","type":""}],"src":"20395:366:26"},{"body":{"nodeType":"YulBlock","src":"20938:248:26","statements":[{"nodeType":"YulAssignment","src":"20948:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20960:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"20971:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20956:3:26"},"nodeType":"YulFunctionCall","src":"20956:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20948:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20995:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21006:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20991:3:26"},"nodeType":"YulFunctionCall","src":"20991:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21014:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"21020:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21010:3:26"},"nodeType":"YulFunctionCall","src":"21010:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20984:6:26"},"nodeType":"YulFunctionCall","src":"20984:47:26"},"nodeType":"YulExpressionStatement","src":"20984:47:26"},{"nodeType":"YulAssignment","src":"21040:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21174:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21048:124:26"},"nodeType":"YulFunctionCall","src":"21048:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21040:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20918:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20933:4:26","type":""}],"src":"20767:419:26"},{"body":{"nodeType":"YulBlock","src":"21220:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21237:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21240:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21230:6:26"},"nodeType":"YulFunctionCall","src":"21230:88:26"},"nodeType":"YulExpressionStatement","src":"21230:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21334:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"21337:4:26","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21327:6:26"},"nodeType":"YulFunctionCall","src":"21327:15:26"},"nodeType":"YulExpressionStatement","src":"21327:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21358:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21361:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21351:6:26"},"nodeType":"YulFunctionCall","src":"21351:15:26"},"nodeType":"YulExpressionStatement","src":"21351:15:26"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"21192:180:26"},{"body":{"nodeType":"YulBlock","src":"21406:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21423:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21426:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21416:6:26"},"nodeType":"YulFunctionCall","src":"21416:88:26"},"nodeType":"YulExpressionStatement","src":"21416:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21520:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"21523:4:26","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21513:6:26"},"nodeType":"YulFunctionCall","src":"21513:15:26"},"nodeType":"YulExpressionStatement","src":"21513:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21544:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21547:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21537:6:26"},"nodeType":"YulFunctionCall","src":"21537:15:26"},"nodeType":"YulExpressionStatement","src":"21537:15:26"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"21378:180:26"},{"body":{"nodeType":"YulBlock","src":"21609:146:26","statements":[{"nodeType":"YulAssignment","src":"21619:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21642:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"21624:17:26"},"nodeType":"YulFunctionCall","src":"21624:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"21619:1:26"}]},{"nodeType":"YulAssignment","src":"21653:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"21676:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"21658:17:26"},"nodeType":"YulFunctionCall","src":"21658:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"21653:1:26"}]},{"body":{"nodeType":"YulBlock","src":"21700:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"21702:16:26"},"nodeType":"YulFunctionCall","src":"21702:18:26"},"nodeType":"YulExpressionStatement","src":"21702:18:26"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21694:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"21697:1:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"21691:2:26"},"nodeType":"YulFunctionCall","src":"21691:8:26"},"nodeType":"YulIf","src":"21688:34:26"},{"nodeType":"YulAssignment","src":"21732:17:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21744:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"21747:1:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21740:3:26"},"nodeType":"YulFunctionCall","src":"21740:9:26"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"21732:4:26"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"21595:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"21598:1:26","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"21604:4:26","type":""}],"src":"21564:191:26"},{"body":{"nodeType":"YulBlock","src":"21805:261:26","statements":[{"nodeType":"YulAssignment","src":"21815:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21838:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"21820:17:26"},"nodeType":"YulFunctionCall","src":"21820:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"21815:1:26"}]},{"nodeType":"YulAssignment","src":"21849:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"21872:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"21854:17:26"},"nodeType":"YulFunctionCall","src":"21854:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"21849:1:26"}]},{"body":{"nodeType":"YulBlock","src":"22012:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"22014:16:26"},"nodeType":"YulFunctionCall","src":"22014:18:26"},"nodeType":"YulExpressionStatement","src":"22014:18:26"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"21933:1:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21940:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"y","nodeType":"YulIdentifier","src":"22008:1:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21936:3:26"},"nodeType":"YulFunctionCall","src":"21936:74:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"21930:2:26"},"nodeType":"YulFunctionCall","src":"21930:81:26"},"nodeType":"YulIf","src":"21927:107:26"},{"nodeType":"YulAssignment","src":"22044:16:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"22055:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"22058:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22051:3:26"},"nodeType":"YulFunctionCall","src":"22051:9:26"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"22044:3:26"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"21792:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"21795:1:26","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"21801:3:26","type":""}],"src":"21761:305:26"},{"body":{"nodeType":"YulBlock","src":"22130:40:26","statements":[{"nodeType":"YulAssignment","src":"22141:22:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22157:5:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22151:5:26"},"nodeType":"YulFunctionCall","src":"22151:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"22141:6:26"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22113:5:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"22123:6:26","type":""}],"src":"22072:98:26"},{"body":{"nodeType":"YulBlock","src":"22271:73:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22288:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"22293:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22281:6:26"},"nodeType":"YulFunctionCall","src":"22281:19:26"},"nodeType":"YulExpressionStatement","src":"22281:19:26"},{"nodeType":"YulAssignment","src":"22309:29:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22328:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"22333:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22324:3:26"},"nodeType":"YulFunctionCall","src":"22324:14:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"22309:11:26"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22243:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"22248:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"22259:11:26","type":""}],"src":"22176:168:26"},{"body":{"nodeType":"YulBlock","src":"22440:270:26","statements":[{"nodeType":"YulVariableDeclaration","src":"22450:52:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22496:5:26"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"22464:31:26"},"nodeType":"YulFunctionCall","src":"22464:38:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"22454:6:26","type":""}]},{"nodeType":"YulAssignment","src":"22511:77:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22576:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"22581:6:26"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22518:57:26"},"nodeType":"YulFunctionCall","src":"22518:70:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22511:3:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22623:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"22630:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22619:3:26"},"nodeType":"YulFunctionCall","src":"22619:16:26"},{"name":"pos","nodeType":"YulIdentifier","src":"22637:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"22642:6:26"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"22597:21:26"},"nodeType":"YulFunctionCall","src":"22597:52:26"},"nodeType":"YulExpressionStatement","src":"22597:52:26"},{"nodeType":"YulAssignment","src":"22658:46:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22669:3:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"22696:6:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"22674:21:26"},"nodeType":"YulFunctionCall","src":"22674:29:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22665:3:26"},"nodeType":"YulFunctionCall","src":"22665:39:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22658:3:26"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22421:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"22428:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22436:3:26","type":""}],"src":"22350:360:26"},{"body":{"nodeType":"YulBlock","src":"22916:440:26","statements":[{"nodeType":"YulAssignment","src":"22926:27:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22938:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"22949:3:26","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22934:3:26"},"nodeType":"YulFunctionCall","src":"22934:19:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22926:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23007:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23020:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"23031:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23016:3:26"},"nodeType":"YulFunctionCall","src":"23016:17:26"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"22963:43:26"},"nodeType":"YulFunctionCall","src":"22963:71:26"},"nodeType":"YulExpressionStatement","src":"22963:71:26"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"23088:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23101:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"23112:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23097:3:26"},"nodeType":"YulFunctionCall","src":"23097:18:26"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"23044:43:26"},"nodeType":"YulFunctionCall","src":"23044:72:26"},"nodeType":"YulExpressionStatement","src":"23044:72:26"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"23170:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23183:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"23194:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23179:3:26"},"nodeType":"YulFunctionCall","src":"23179:18:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"23126:43:26"},"nodeType":"YulFunctionCall","src":"23126:72:26"},"nodeType":"YulExpressionStatement","src":"23126:72:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23219:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"23230:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23215:3:26"},"nodeType":"YulFunctionCall","src":"23215:18:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23239:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"23245:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23235:3:26"},"nodeType":"YulFunctionCall","src":"23235:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23208:6:26"},"nodeType":"YulFunctionCall","src":"23208:48:26"},"nodeType":"YulExpressionStatement","src":"23208:48:26"},{"nodeType":"YulAssignment","src":"23265:84:26","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"23335:6:26"},{"name":"tail","nodeType":"YulIdentifier","src":"23344:4:26"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23273:61:26"},"nodeType":"YulFunctionCall","src":"23273:76:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23265:4:26"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22864:9:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"22876:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"22884:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22892:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22900:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22911:4:26","type":""}],"src":"22716:640:26"},{"body":{"nodeType":"YulBlock","src":"23424:79:26","statements":[{"nodeType":"YulAssignment","src":"23434:22:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"23449:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23443:5:26"},"nodeType":"YulFunctionCall","src":"23443:13:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"23434:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23491:5:26"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"23465:25:26"},"nodeType":"YulFunctionCall","src":"23465:32:26"},"nodeType":"YulExpressionStatement","src":"23465:32:26"}]},"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"23402:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"23410:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"23418:5:26","type":""}],"src":"23362:141:26"},{"body":{"nodeType":"YulBlock","src":"23585:273:26","statements":[{"body":{"nodeType":"YulBlock","src":"23631:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"23633:77:26"},"nodeType":"YulFunctionCall","src":"23633:79:26"},"nodeType":"YulExpressionStatement","src":"23633:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"23606:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"23615:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23602:3:26"},"nodeType":"YulFunctionCall","src":"23602:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"23627:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"23598:3:26"},"nodeType":"YulFunctionCall","src":"23598:32:26"},"nodeType":"YulIf","src":"23595:119:26"},{"nodeType":"YulBlock","src":"23724:127:26","statements":[{"nodeType":"YulVariableDeclaration","src":"23739:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"23753:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"23743:6:26","type":""}]},{"nodeType":"YulAssignment","src":"23768:73:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23813:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"23824:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23809:3:26"},"nodeType":"YulFunctionCall","src":"23809:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"23833:7:26"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulIdentifier","src":"23778:30:26"},"nodeType":"YulFunctionCall","src":"23778:63:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"23768:6:26"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23555:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"23566:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"23578:6:26","type":""}],"src":"23509:349:26"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approval to current owne\")\n\n        mstore(add(memPtr, 32), \"r\")\n\n    }\n\n    function abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve caller is not to\")\n\n        mstore(add(memPtr, 32), \"ken owner or approved for all\")\n\n    }\n\n    function abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 61)\n        store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: caller is not token owne\")\n\n        mstore(add(memPtr, 32), \"r or approved\")\n\n    }\n\n    function abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n        store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: invalid token ID\")\n\n    }\n\n    function abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: address zero is not a va\")\n\n        mstore(add(memPtr, 32), \"lid owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer from incorrect \")\n\n        mstore(add(memPtr, 32), \"owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve to caller\")\n\n    }\n\n    function abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to non ERC721Re\")\n\n        mstore(add(memPtr, 32), \"ceiver implementer\")\n\n    }\n\n    function abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)\n        store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n","id":26,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb46514610224578063b88d4fde14610240578063c87b56dd1461025c578063e985e9c51461028c576100cf565b80636352211e146101a657806370a08231146101d657806395d89b4114610206576100cf565b806301ffc9a7146100d457806306fdde0314610104578063081812fc14610122578063095ea7b31461015257806323b872dd1461016e57806342842e0e1461018a575b600080fd5b6100ee60048036038101906100e99190611633565b6102bc565b6040516100fb919061167b565b60405180910390f35b61010c61039e565b604051610119919061172f565b60405180910390f35b61013c60048036038101906101379190611787565b610430565b60405161014991906117f5565b60405180910390f35b61016c6004803603810190610167919061183c565b610476565b005b6101886004803603810190610183919061187c565b61058e565b005b6101a4600480360381019061019f919061187c565b6105ee565b005b6101c060048036038101906101bb9190611787565b61060e565b6040516101cd91906117f5565b60405180910390f35b6101f060048036038101906101eb91906118cf565b610695565b6040516101fd919061190b565b60405180910390f35b61020e61074d565b60405161021b919061172f565b60405180910390f35b61023e60048036038101906102399190611952565b6107df565b005b61025a60048036038101906102559190611ac7565b6107f5565b005b61027660048036038101906102719190611787565b610857565b604051610283919061172f565b60405180910390f35b6102a660048036038101906102a19190611b4a565b6108bf565b6040516102b3919061167b565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061038757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610397575061039682610953565b5b9050919050565b6060600080546103ad90611bb9565b80601f01602080910402602001604051908101604052809291908181526020018280546103d990611bb9565b80156104265780601f106103fb57610100808354040283529160200191610426565b820191906000526020600020905b81548152906001019060200180831161040957829003601f168201915b5050505050905090565b600061043b826109bd565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104818261060e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156104f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e990611c5d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610511610a08565b73ffffffffffffffffffffffffffffffffffffffff161480610540575061053f8161053a610a08565b6108bf565b5b61057f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057690611cef565b60405180910390fd5b6105898383610a10565b505050565b61059f610599610a08565b82610ac9565b6105de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d590611d81565b60405180910390fd5b6105e9838383610b5e565b505050565b610609838383604051806020016040528060008152506107f5565b505050565b60008061061a83610e58565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561068c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068390611ded565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610706576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fd90611e7f565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461075c90611bb9565b80601f016020809104026020016040519081016040528092919081815260200182805461078890611bb9565b80156107d55780601f106107aa576101008083540402835291602001916107d5565b820191906000526020600020905b8154815290600101906020018083116107b857829003601f168201915b5050505050905090565b6107f16107ea610a08565b8383610e95565b5050565b610806610800610a08565b83610ac9565b610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c90611d81565b60405180910390fd5b61085184848484611002565b50505050565b6060610862826109bd565b600061086c61105e565b9050600081511161088c57604051806020016040528060008152506108b7565b8061089684611075565b6040516020016108a7929190611edb565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6109c68161114d565b610a05576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fc90611ded565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610a838361060e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610ad58361060e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610b175750610b1681856108bf565b5b80610b5557508373ffffffffffffffffffffffffffffffffffffffff16610b3d84610430565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610b7e8261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcb90611f71565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3b90612003565b60405180910390fd5b610c51838383600161118e565b8273ffffffffffffffffffffffffffffffffffffffff16610c718261060e565b73ffffffffffffffffffffffffffffffffffffffff1614610cc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbe90611f71565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610e5383838360016112b4565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efb9061206f565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ff5919061167b565b60405180910390a3505050565b61100d848484610b5e565b611019848484846112ba565b611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104f90612101565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000600161108484611451565b01905060008167ffffffffffffffff8111156110a3576110a261199c565b5b6040519080825280601f01601f1916602001820160405280156110d55781602001600182028036833780820191505090505b509050600082602001820190505b600115611142578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161112c5761112b612121565b5b049450600085141561113d57611142565b6110e3565b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661116f83610e58565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60018111156112ae57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146112225780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461121a919061217f565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146112ad5780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112a591906121b3565b925050819055505b5b50505050565b50505050565b60006112db8473ffffffffffffffffffffffffffffffffffffffff166115a4565b15611444578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611304610a08565b8786866040518563ffffffff1660e01b8152600401611326949392919061225e565b602060405180830381600087803b15801561134057600080fd5b505af192505050801561137157506040513d601f19601f8201168201806040525081019061136e91906122bf565b60015b6113f4573d80600081146113a1576040519150601f19603f3d011682016040523d82523d6000602084013e6113a6565b606091505b506000815114156113ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e390612101565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611449565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106114af577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816114a5576114a4612121565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106114ec576d04ee2d6d415b85acef810000000083816114e2576114e1612121565b5b0492506020810190505b662386f26fc10000831061151b57662386f26fc10000838161151157611510612121565b5b0492506010810190505b6305f5e1008310611544576305f5e100838161153a57611539612121565b5b0492506008810190505b612710831061156957612710838161155f5761155e612121565b5b0492506004810190505b6064831061158c576064838161158257611581612121565b5b0492506002810190505b600a831061159b576001810190505b80915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611610816115db565b811461161b57600080fd5b50565b60008135905061162d81611607565b92915050565b600060208284031215611649576116486115d1565b5b60006116578482850161161e565b91505092915050565b60008115159050919050565b61167581611660565b82525050565b6000602082019050611690600083018461166c565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156116d05780820151818401526020810190506116b5565b838111156116df576000848401525b50505050565b6000601f19601f8301169050919050565b600061170182611696565b61170b81856116a1565b935061171b8185602086016116b2565b611724816116e5565b840191505092915050565b6000602082019050818103600083015261174981846116f6565b905092915050565b6000819050919050565b61176481611751565b811461176f57600080fd5b50565b6000813590506117818161175b565b92915050565b60006020828403121561179d5761179c6115d1565b5b60006117ab84828501611772565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117df826117b4565b9050919050565b6117ef816117d4565b82525050565b600060208201905061180a60008301846117e6565b92915050565b611819816117d4565b811461182457600080fd5b50565b60008135905061183681611810565b92915050565b60008060408385031215611853576118526115d1565b5b600061186185828601611827565b925050602061187285828601611772565b9150509250929050565b600080600060608486031215611895576118946115d1565b5b60006118a386828701611827565b93505060206118b486828701611827565b92505060406118c586828701611772565b9150509250925092565b6000602082840312156118e5576118e46115d1565b5b60006118f384828501611827565b91505092915050565b61190581611751565b82525050565b600060208201905061192060008301846118fc565b92915050565b61192f81611660565b811461193a57600080fd5b50565b60008135905061194c81611926565b92915050565b60008060408385031215611969576119686115d1565b5b600061197785828601611827565b92505060206119888582860161193d565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6119d4826116e5565b810181811067ffffffffffffffff821117156119f3576119f261199c565b5b80604052505050565b6000611a066115c7565b9050611a1282826119cb565b919050565b600067ffffffffffffffff821115611a3257611a3161199c565b5b611a3b826116e5565b9050602081019050919050565b82818337600083830152505050565b6000611a6a611a6584611a17565b6119fc565b905082815260208101848484011115611a8657611a85611997565b5b611a91848285611a48565b509392505050565b600082601f830112611aae57611aad611992565b5b8135611abe848260208601611a57565b91505092915050565b60008060008060808587031215611ae157611ae06115d1565b5b6000611aef87828801611827565b9450506020611b0087828801611827565b9350506040611b1187828801611772565b925050606085013567ffffffffffffffff811115611b3257611b316115d6565b5b611b3e87828801611a99565b91505092959194509250565b60008060408385031215611b6157611b606115d1565b5b6000611b6f85828601611827565b9250506020611b8085828601611827565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611bd157607f821691505b60208210811415611be557611be4611b8a565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000611c476021836116a1565b9150611c5282611beb565b604082019050919050565b60006020820190508181036000830152611c7681611c3a565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000611cd9603d836116a1565b9150611ce482611c7d565b604082019050919050565b60006020820190508181036000830152611d0881611ccc565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000611d6b602d836116a1565b9150611d7682611d0f565b604082019050919050565b60006020820190508181036000830152611d9a81611d5e565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000611dd76018836116a1565b9150611de282611da1565b602082019050919050565b60006020820190508181036000830152611e0681611dca565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000611e696029836116a1565b9150611e7482611e0d565b604082019050919050565b60006020820190508181036000830152611e9881611e5c565b9050919050565b600081905092915050565b6000611eb582611696565b611ebf8185611e9f565b9350611ecf8185602086016116b2565b80840191505092915050565b6000611ee78285611eaa565b9150611ef38284611eaa565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000611f5b6025836116a1565b9150611f6682611eff565b604082019050919050565b60006020820190508181036000830152611f8a81611f4e565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611fed6024836116a1565b9150611ff882611f91565b604082019050919050565b6000602082019050818103600083015261201c81611fe0565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006120596019836116a1565b915061206482612023565b602082019050919050565b600060208201905081810360008301526120888161204c565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006120eb6032836116a1565b91506120f68261208f565b604082019050919050565b6000602082019050818103600083015261211a816120de565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061218a82611751565b915061219583611751565b9250828210156121a8576121a7612150565b5b828203905092915050565b60006121be82611751565b91506121c983611751565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156121fe576121fd612150565b5b828201905092915050565b600081519050919050565b600082825260208201905092915050565b600061223082612209565b61223a8185612214565b935061224a8185602086016116b2565b612253816116e5565b840191505092915050565b600060808201905061227360008301876117e6565b61228060208301866117e6565b61228d60408301856118fc565b818103606083015261229f8184612225565b905095945050505050565b6000815190506122b981611607565b92915050565b6000602082840312156122d5576122d46115d1565b5b60006122e3848285016122aa565b9150509291505056fea2646970667358221220a50925419473cc2c56322ce0cfa3d3ec5c3641371e437c4800e68b3475fd92c064736f6c63430008090033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x28C JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x206 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x18A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x1633 JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x167B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH2 0x39E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0x172F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x1787 JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x17F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x183C JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x183 SWAP2 SWAP1 PUSH2 0x187C JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x187C JUMP JUMPDEST PUSH2 0x5EE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BB SWAP2 SWAP1 PUSH2 0x1787 JUMP JUMPDEST PUSH2 0x60E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x17F5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x18CF JUMP JUMPDEST PUSH2 0x695 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x190B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20E PUSH2 0x74D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21B SWAP2 SWAP1 PUSH2 0x172F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x239 SWAP2 SWAP1 PUSH2 0x1952 JUMP JUMPDEST PUSH2 0x7DF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x1AC7 JUMP JUMPDEST PUSH2 0x7F5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x276 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x1787 JUMP JUMPDEST PUSH2 0x857 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x172F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x1B4A JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B3 SWAP2 SWAP1 PUSH2 0x167B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x387 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x397 JUMPI POP PUSH2 0x396 DUP3 PUSH2 0x953 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x3AD SWAP1 PUSH2 0x1BB9 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D9 SWAP1 PUSH2 0x1BB9 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x426 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x426 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x409 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43B DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x481 DUP3 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4F2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E9 SWAP1 PUSH2 0x1C5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x511 PUSH2 0xA08 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x540 JUMPI POP PUSH2 0x53F DUP2 PUSH2 0x53A PUSH2 0xA08 JUMP JUMPDEST PUSH2 0x8BF JUMP JUMPDEST JUMPDEST PUSH2 0x57F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x576 SWAP1 PUSH2 0x1CEF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x589 DUP4 DUP4 PUSH2 0xA10 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x59F PUSH2 0x599 PUSH2 0xA08 JUMP JUMPDEST DUP3 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x5DE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D5 SWAP1 PUSH2 0x1D81 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E9 DUP4 DUP4 DUP4 PUSH2 0xB5E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x609 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7F5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x61A DUP4 PUSH2 0xE58 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x68C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x683 SWAP1 PUSH2 0x1DED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x706 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FD SWAP1 PUSH2 0x1E7F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x75C SWAP1 PUSH2 0x1BB9 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x788 SWAP1 PUSH2 0x1BB9 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7AA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7F1 PUSH2 0x7EA PUSH2 0xA08 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xE95 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x806 PUSH2 0x800 PUSH2 0xA08 JUMP JUMPDEST DUP4 PUSH2 0xAC9 JUMP JUMPDEST PUSH2 0x845 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x83C SWAP1 PUSH2 0x1D81 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x851 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1002 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x862 DUP3 PUSH2 0x9BD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x86C PUSH2 0x105E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x88C JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x8B7 JUMP JUMPDEST DUP1 PUSH2 0x896 DUP5 PUSH2 0x1075 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8A7 SWAP3 SWAP2 SWAP1 PUSH2 0x1EDB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9C6 DUP2 PUSH2 0x114D JUMP JUMPDEST PUSH2 0xA05 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9FC SWAP1 PUSH2 0x1DED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA83 DUP4 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAD5 DUP4 PUSH2 0x60E JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB17 JUMPI POP PUSH2 0xB16 DUP2 DUP6 PUSH2 0x8BF JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xB55 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB3D DUP5 PUSH2 0x430 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB7E DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBD4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBCB SWAP1 PUSH2 0x1F71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC44 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC3B SWAP1 PUSH2 0x2003 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC51 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x118E JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC71 DUP3 PUSH2 0x60E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBE SWAP1 PUSH2 0x1F71 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xE53 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x12B4 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xF04 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEFB SWAP1 PUSH2 0x206F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xFF5 SWAP2 SWAP1 PUSH2 0x167B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x100D DUP5 DUP5 DUP5 PUSH2 0xB5E JUMP JUMPDEST PUSH2 0x1019 DUP5 DUP5 DUP5 DUP5 PUSH2 0x12BA JUMP JUMPDEST PUSH2 0x1058 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104F SWAP1 PUSH2 0x2101 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1084 DUP5 PUSH2 0x1451 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10A3 JUMPI PUSH2 0x10A2 PUSH2 0x199C JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10D5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1142 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x112C JUMPI PUSH2 0x112B PUSH2 0x2121 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 EQ ISZERO PUSH2 0x113D JUMPI PUSH2 0x1142 JUMP JUMPDEST PUSH2 0x10E3 JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x116F DUP4 PUSH2 0xE58 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x12AE JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1222 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x121A SWAP2 SWAP1 PUSH2 0x217F JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12AD JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x12A5 SWAP2 SWAP1 PUSH2 0x21B3 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12DB DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x15A4 JUMP JUMPDEST ISZERO PUSH2 0x1444 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1304 PUSH2 0xA08 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1326 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x225E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1340 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1371 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x136E SWAP2 SWAP1 PUSH2 0x22BF JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x13F4 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x13A1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x13A6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x13EC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13E3 SWAP1 PUSH2 0x2101 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x1449 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x14AF JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x14A5 JUMPI PUSH2 0x14A4 PUSH2 0x2121 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x14EC JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x14E2 JUMPI PUSH2 0x14E1 PUSH2 0x2121 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x151B JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x1511 JUMPI PUSH2 0x1510 PUSH2 0x2121 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1544 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x153A JUMPI PUSH2 0x1539 PUSH2 0x2121 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x1569 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x155F JUMPI PUSH2 0x155E PUSH2 0x2121 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x158C JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1582 JUMPI PUSH2 0x1581 PUSH2 0x2121 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x159B JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1610 DUP2 PUSH2 0x15DB JUMP JUMPDEST DUP2 EQ PUSH2 0x161B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x162D DUP2 PUSH2 0x1607 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1649 JUMPI PUSH2 0x1648 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1657 DUP5 DUP3 DUP6 ADD PUSH2 0x161E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1675 DUP2 PUSH2 0x1660 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1690 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x166C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x16D0 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x16B5 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x16DF JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1701 DUP3 PUSH2 0x1696 JUMP JUMPDEST PUSH2 0x170B DUP2 DUP6 PUSH2 0x16A1 JUMP JUMPDEST SWAP4 POP PUSH2 0x171B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x16B2 JUMP JUMPDEST PUSH2 0x1724 DUP2 PUSH2 0x16E5 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1749 DUP2 DUP5 PUSH2 0x16F6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1764 DUP2 PUSH2 0x1751 JUMP JUMPDEST DUP2 EQ PUSH2 0x176F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1781 DUP2 PUSH2 0x175B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x179D JUMPI PUSH2 0x179C PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x17AB DUP5 DUP3 DUP6 ADD PUSH2 0x1772 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17DF DUP3 PUSH2 0x17B4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x17EF DUP2 PUSH2 0x17D4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x180A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x17E6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1819 DUP2 PUSH2 0x17D4 JUMP JUMPDEST DUP2 EQ PUSH2 0x1824 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1836 DUP2 PUSH2 0x1810 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1853 JUMPI PUSH2 0x1852 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1861 DUP6 DUP3 DUP7 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1872 DUP6 DUP3 DUP7 ADD PUSH2 0x1772 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1895 JUMPI PUSH2 0x1894 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18A3 DUP7 DUP3 DUP8 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x18B4 DUP7 DUP3 DUP8 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x18C5 DUP7 DUP3 DUP8 ADD PUSH2 0x1772 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18E5 JUMPI PUSH2 0x18E4 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18F3 DUP5 DUP3 DUP6 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1905 DUP2 PUSH2 0x1751 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1920 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x18FC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x192F DUP2 PUSH2 0x1660 JUMP JUMPDEST DUP2 EQ PUSH2 0x193A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x194C DUP2 PUSH2 0x1926 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1969 JUMPI PUSH2 0x1968 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1977 DUP6 DUP3 DUP7 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1988 DUP6 DUP3 DUP7 ADD PUSH2 0x193D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x19D4 DUP3 PUSH2 0x16E5 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x19F3 JUMPI PUSH2 0x19F2 PUSH2 0x199C JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A06 PUSH2 0x15C7 JUMP JUMPDEST SWAP1 POP PUSH2 0x1A12 DUP3 DUP3 PUSH2 0x19CB JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1A32 JUMPI PUSH2 0x1A31 PUSH2 0x199C JUMP JUMPDEST JUMPDEST PUSH2 0x1A3B DUP3 PUSH2 0x16E5 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A6A PUSH2 0x1A65 DUP5 PUSH2 0x1A17 JUMP JUMPDEST PUSH2 0x19FC JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1A86 JUMPI PUSH2 0x1A85 PUSH2 0x1997 JUMP JUMPDEST JUMPDEST PUSH2 0x1A91 DUP5 DUP3 DUP6 PUSH2 0x1A48 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1AAE JUMPI PUSH2 0x1AAD PUSH2 0x1992 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1ABE DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1A57 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1AE1 JUMPI PUSH2 0x1AE0 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1AEF DUP8 DUP3 DUP9 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1B00 DUP8 DUP3 DUP9 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1B11 DUP8 DUP3 DUP9 ADD PUSH2 0x1772 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B32 JUMPI PUSH2 0x1B31 PUSH2 0x15D6 JUMP JUMPDEST JUMPDEST PUSH2 0x1B3E DUP8 DUP3 DUP9 ADD PUSH2 0x1A99 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B61 JUMPI PUSH2 0x1B60 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B6F DUP6 DUP3 DUP7 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1B80 DUP6 DUP3 DUP7 ADD PUSH2 0x1827 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1BD1 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1BE5 JUMPI PUSH2 0x1BE4 PUSH2 0x1B8A JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C47 PUSH1 0x21 DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C52 DUP3 PUSH2 0x1BEB JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C76 DUP2 PUSH2 0x1C3A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CD9 PUSH1 0x3D DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1CE4 DUP3 PUSH2 0x1C7D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D08 DUP2 PUSH2 0x1CCC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D6B PUSH1 0x2D DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D76 DUP3 PUSH2 0x1D0F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D9A DUP2 PUSH2 0x1D5E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DD7 PUSH1 0x18 DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DE2 DUP3 PUSH2 0x1DA1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E06 DUP2 PUSH2 0x1DCA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E69 PUSH1 0x29 DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1E74 DUP3 PUSH2 0x1E0D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E98 DUP2 PUSH2 0x1E5C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EB5 DUP3 PUSH2 0x1696 JUMP JUMPDEST PUSH2 0x1EBF DUP2 DUP6 PUSH2 0x1E9F JUMP JUMPDEST SWAP4 POP PUSH2 0x1ECF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x16B2 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EE7 DUP3 DUP6 PUSH2 0x1EAA JUMP JUMPDEST SWAP2 POP PUSH2 0x1EF3 DUP3 DUP5 PUSH2 0x1EAA JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F5B PUSH1 0x25 DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F66 DUP3 PUSH2 0x1EFF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F8A DUP2 PUSH2 0x1F4E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FED PUSH1 0x24 DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FF8 DUP3 PUSH2 0x1F91 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x201C DUP2 PUSH2 0x1FE0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2059 PUSH1 0x19 DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x2064 DUP3 PUSH2 0x2023 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2088 DUP2 PUSH2 0x204C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20EB PUSH1 0x32 DUP4 PUSH2 0x16A1 JUMP JUMPDEST SWAP2 POP PUSH2 0x20F6 DUP3 PUSH2 0x208F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x211A DUP2 PUSH2 0x20DE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x218A DUP3 PUSH2 0x1751 JUMP JUMPDEST SWAP2 POP PUSH2 0x2195 DUP4 PUSH2 0x1751 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x21A8 JUMPI PUSH2 0x21A7 PUSH2 0x2150 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21BE DUP3 PUSH2 0x1751 JUMP JUMPDEST SWAP2 POP PUSH2 0x21C9 DUP4 PUSH2 0x1751 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x21FE JUMPI PUSH2 0x21FD PUSH2 0x2150 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2230 DUP3 PUSH2 0x2209 JUMP JUMPDEST PUSH2 0x223A DUP2 DUP6 PUSH2 0x2214 JUMP JUMPDEST SWAP4 POP PUSH2 0x224A DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x16B2 JUMP JUMPDEST PUSH2 0x2253 DUP2 PUSH2 0x16E5 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2273 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x17E6 JUMP JUMPDEST PUSH2 0x2280 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x17E6 JUMP JUMPDEST PUSH2 0x228D PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x18FC JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x229F DUP2 DUP5 PUSH2 0x2225 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x22B9 DUP2 PUSH2 0x1607 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x22D5 JUMPI PUSH2 0x22D4 PUSH2 0x15D1 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x22E3 DUP5 DUP3 DUP6 ADD PUSH2 0x22AA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA5 MULMOD 0x25 COINBASE SWAP5 PUSH20 0xCC2C56322CE0CFA3D3EC5C3641371E437C4800E6 DUP12 CALLVALUE PUSH22 0xFD92C064736F6C634300080900330000000000000000 ","sourceMap":"628:16327:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2471:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3935:167;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3468:406;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4612:326;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5004:179;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2190:219;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1929:204;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2633:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4169:153;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5249:314;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2801:276;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4388:162;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1570:300;1672:4;1722:25;1707:40;;;:11;:40;;;;:104;;;;1778:33;1763:48;;;:11;:48;;;;1707:104;:156;;;;1827:36;1851:11;1827:23;:36::i;:::-;1707:156;1688:175;;1570:300;;;:::o;2471:98::-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;4071:15;:24;4087:7;4071:24;;;;;;;;;;;;;;;;;;;;;4064:31;;3935:167;;;:::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;3605:11;;:2;:11;;;;3597:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;3702:5;3686:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;3711:37;3728:5;3735:12;:10;:12::i;:::-;3711:16;:37::i;:::-;3686:62;3665:170;;;;;;;;;;;;:::i;:::-;;;;;;;;;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;4612:326::-;4801:41;4820:12;:10;:12::i;:::-;4834:7;4801:18;:41::i;:::-;4793:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;4903:28;4913:4;4919:2;4923:7;4903:9;:28::i;:::-;4612:326;;;:::o;5004:179::-;5137:39;5154:4;5160:2;5164:7;5137:39;;;;;;;;;;;;:16;:39::i;:::-;5004:179;;;:::o;2190:219::-;2262:7;2281:13;2297:17;2306:7;2297:8;:17::i;:::-;2281:33;;2349:1;2332:19;;:5;:19;;;;2324:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;2397:5;2390:12;;;2190:219;;;:::o;1929:204::-;2001:7;2045:1;2028:19;;:5;:19;;;;2020:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2110:9;:16;2120:5;2110:16;;;;;;;;;;;;;;;;2103:23;;1929:204;;;:::o;2633:102::-;2689:13;2721:7;2714:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2633:102;:::o;4169:153::-;4263:52;4282:12;:10;:12::i;:::-;4296:8;4306;4263:18;:52::i;:::-;4169:153;;:::o;5249:314::-;5417:41;5436:12;:10;:12::i;:::-;5450:7;5417:18;:41::i;:::-;5409:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;5518:38;5532:4;5538:2;5542:7;5551:4;5518:13;:38::i;:::-;5249:314;;;;:::o;2801:276::-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;:8;:10::i;:::-;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;;;2801:276;;;:::o;4388:162::-;4485:4;4508:18;:25;4527:5;4508:25;;;;;;;;;;;;;;;:35;4534:8;4508:35;;;;;;;;;;;;;;;;;;;;;;;;;4501:42;;4388:162;;;;:::o;829:155:20:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;13466:133:7:-;13547:16;13555:7;13547;:16::i;:::-;13539:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;13466:133;:::o;640:96:15:-;693:7;719:10;712:17;;640:96;:::o;12768:171:7:-;12869:2;12842:15;:24;12858:7;12842:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;12924:7;12920:2;12886:46;;12895:23;12910:7;12895:14;:23::i;:::-;12886:46;;;;;;;;;;;;12768:171;;:::o;7540:261::-;7633:4;7649:13;7665:23;7680:7;7665:14;:23::i;:::-;7649:39;;7717:5;7706:16;;:7;:16;;;:52;;;;7726:32;7743:5;7750:7;7726:16;:32::i;:::-;7706:52;:87;;;;7786:7;7762:31;;:20;7774:7;7762:11;:20::i;:::-;:31;;;7706:87;7698:96;;;7540:261;;;;:::o;11423:1233::-;11577:4;11550:31;;:23;11565:7;11550:14;:23::i;:::-;:31;;;11542:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11655:1;11641:16;;:2;:16;;;;11633:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;11709:42;11730:4;11736:2;11740:7;11749:1;11709:20;:42::i;:::-;11878:4;11851:31;;:23;11866:7;11851:14;:23::i;:::-;:31;;;11843:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11993:15;:24;12009:7;11993:24;;;;;;;;;;;;11986:31;;;;;;;;;;;12480:1;12461:9;:15;12471:4;12461:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;12512:1;12495:9;:13;12505:2;12495:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;12552:2;12533:7;:16;12541:7;12533:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;12589:7;12585:2;12570:27;;12579:4;12570:27;;;;;;;;;;;;12608:41;12628:4;12634:2;12638:7;12647:1;12608:19;:41::i;:::-;11423:1233;;;:::o;6838:115::-;6904:7;6930;:16;6938:7;6930:16;;;;;;;;;;;;;;;;;;;;;6923:23;;6838:115;;;:::o;13075:307::-;13225:8;13216:17;;:5;:17;;;;13208:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;13311:8;13273:18;:25;13292:5;13273:25;;;;;;;;;;;;;;;:35;13299:8;13273:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;13356:8;13334:41;;13349:5;13334:41;;;13366:8;13334:41;;;;;;:::i;:::-;;;;;;;;13075:307;;;:::o;6424:305::-;6574:28;6584:4;6590:2;6594:7;6574:9;:28::i;:::-;6620:47;6643:4;6649:2;6653:7;6662:4;6620:22;:47::i;:::-;6612:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;6424:305;;;;:::o;3319:92::-;3370:13;3395:9;;;;;;;;;;;;;;3319:92;:::o;415:696:17:-;471:13;520:14;557:1;537:17;548:5;537:10;:17::i;:::-;:21;520:38;;572:20;606:6;595:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;572:41;;627:11;753:6;749:2;745:15;737:6;733:28;726:35;;788:280;795:4;788:280;;;819:5;;;;;;;;958:8;953:2;946:5;942:14;937:30;932:3;924:44;1012:2;1003:11;;;;;;:::i;:::-;;;;;1045:1;1036:5;:10;1032:21;;;1048:5;;1032:21;788:280;;;1088:6;1081:13;;;;;415:696;;;:::o;7256:126:7:-;7321:4;7373:1;7344:31;;:17;7353:7;7344:8;:17::i;:::-;:31;;;;7337:38;;7256:126;;;:::o;15698:396::-;15882:1;15870:9;:13;15866:222;;;15919:1;15903:18;;:4;:18;;;15899:85;;15960:9;15941;:15;15951:4;15941:15;;;;;;;;;;;;;;;;:28;;;;;;;:::i;:::-;;;;;;;;15899:85;16015:1;16001:16;;:2;:16;;;15997:81;;16054:9;16037;:13;16047:2;16037:13;;;;;;;;;;;;;;;;:26;;;;;;;:::i;:::-;;;;;;;;15997:81;15866:222;15698:396;;;;:::o;16800:153::-;;;;;:::o;14151:831::-;14300:4;14320:15;:2;:13;;;:15::i;:::-;14316:660;;;14371:2;14355:36;;;14392:12;:10;:12::i;:::-;14406:4;14412:7;14421:4;14355:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14351:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14610:1;14593:6;:13;:18;14589:321;;;14635:60;;;;;;;;;;:::i;:::-;;;;;;;;14589:321;14862:6;14856:13;14847:6;14843:2;14839:15;14832:38;14351:573;14486:41;;;14476:51;;;:6;:51;;;;14469:58;;;;;14316:660;14961:4;14954:11;;14151:831;;;;;;;:::o;9889:890:22:-;9942:7;9961:14;9978:1;9961:18;;10026:6;10017:5;:15;10013:99;;10061:6;10052:15;;;;;;:::i;:::-;;;;;10095:2;10085:12;;;;10013:99;10138:6;10129:5;:15;10125:99;;10173:6;10164:15;;;;;;:::i;:::-;;;;;10207:2;10197:12;;;;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;;;;:::i;:::-;;;;;10319:2;10309:12;;;;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;;;;:::i;:::-;;;;;10429:1;10419:11;;;;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;;;;:::i;:::-;;;;;10538:1;10528:11;;;;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;;;;:::i;:::-;;;;;10647:1;10637:11;;;;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;;;;10676:64;10766:6;10759:13;;;9889:890;;;:::o;1175:320:14:-;1235:4;1487:1;1465:7;:19;;;:23;1458:30;;1175:320;;;:::o;7:75:26:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:99::-;1570:6;1604:5;1598:12;1588:22;;1518:99;;;:::o;1623:169::-;1707:11;1741:6;1736:3;1729:19;1781:4;1776:3;1772:14;1757:29;;1623:169;;;;:::o;1798:307::-;1866:1;1876:113;1890:6;1887:1;1884:13;1876:113;;;1975:1;1970:3;1966:11;1960:18;1956:1;1951:3;1947:11;1940:39;1912:2;1909:1;1905:10;1900:15;;1876:113;;;2007:6;2004:1;2001:13;1998:101;;;2087:1;2078:6;2073:3;2069:16;2062:27;1998:101;1847:258;1798:307;;;:::o;2111:102::-;2152:6;2203:2;2199:7;2194:2;2187:5;2183:14;2179:28;2169:38;;2111:102;;;:::o;2219:364::-;2307:3;2335:39;2368:5;2335:39;:::i;:::-;2390:71;2454:6;2449:3;2390:71;:::i;:::-;2383:78;;2470:52;2515:6;2510:3;2503:4;2496:5;2492:16;2470:52;:::i;:::-;2547:29;2569:6;2547:29;:::i;:::-;2542:3;2538:39;2531:46;;2311:272;2219:364;;;;:::o;2589:313::-;2702:4;2740:2;2729:9;2725:18;2717:26;;2789:9;2783:4;2779:20;2775:1;2764:9;2760:17;2753:47;2817:78;2890:4;2881:6;2817:78;:::i;:::-;2809:86;;2589:313;;;;:::o;2908:77::-;2945:7;2974:5;2963:16;;2908:77;;;:::o;2991:122::-;3064:24;3082:5;3064:24;:::i;:::-;3057:5;3054:35;3044:63;;3103:1;3100;3093:12;3044:63;2991:122;:::o;3119:139::-;3165:5;3203:6;3190:20;3181:29;;3219:33;3246:5;3219:33;:::i;:::-;3119:139;;;;:::o;3264:329::-;3323:6;3372:2;3360:9;3351:7;3347:23;3343:32;3340:119;;;3378:79;;:::i;:::-;3340:119;3498:1;3523:53;3568:7;3559:6;3548:9;3544:22;3523:53;:::i;:::-;3513:63;;3469:117;3264:329;;;;:::o;3599:126::-;3636:7;3676:42;3669:5;3665:54;3654:65;;3599:126;;;:::o;3731:96::-;3768:7;3797:24;3815:5;3797:24;:::i;:::-;3786:35;;3731:96;;;:::o;3833:118::-;3920:24;3938:5;3920:24;:::i;:::-;3915:3;3908:37;3833:118;;:::o;3957:222::-;4050:4;4088:2;4077:9;4073:18;4065:26;;4101:71;4169:1;4158:9;4154:17;4145:6;4101:71;:::i;:::-;3957:222;;;;:::o;4185:122::-;4258:24;4276:5;4258:24;:::i;:::-;4251:5;4248:35;4238:63;;4297:1;4294;4287:12;4238:63;4185:122;:::o;4313:139::-;4359:5;4397:6;4384:20;4375:29;;4413:33;4440:5;4413:33;:::i;:::-;4313:139;;;;:::o;4458:474::-;4526:6;4534;4583:2;4571:9;4562:7;4558:23;4554:32;4551:119;;;4589:79;;:::i;:::-;4551:119;4709:1;4734:53;4779:7;4770:6;4759:9;4755:22;4734:53;:::i;:::-;4724:63;;4680:117;4836:2;4862:53;4907:7;4898:6;4887:9;4883:22;4862:53;:::i;:::-;4852:63;;4807:118;4458:474;;;;;:::o;4938:619::-;5015:6;5023;5031;5080:2;5068:9;5059:7;5055:23;5051:32;5048:119;;;5086:79;;:::i;:::-;5048:119;5206:1;5231:53;5276:7;5267:6;5256:9;5252:22;5231:53;:::i;:::-;5221:63;;5177:117;5333:2;5359:53;5404:7;5395:6;5384:9;5380:22;5359:53;:::i;:::-;5349:63;;5304:118;5461:2;5487:53;5532:7;5523:6;5512:9;5508:22;5487:53;:::i;:::-;5477:63;;5432:118;4938:619;;;;;:::o;5563:329::-;5622:6;5671:2;5659:9;5650:7;5646:23;5642:32;5639:119;;;5677:79;;:::i;:::-;5639:119;5797:1;5822:53;5867:7;5858:6;5847:9;5843:22;5822:53;:::i;:::-;5812:63;;5768:117;5563:329;;;;:::o;5898:118::-;5985:24;6003:5;5985:24;:::i;:::-;5980:3;5973:37;5898:118;;:::o;6022:222::-;6115:4;6153:2;6142:9;6138:18;6130:26;;6166:71;6234:1;6223:9;6219:17;6210:6;6166:71;:::i;:::-;6022:222;;;;:::o;6250:116::-;6320:21;6335:5;6320:21;:::i;:::-;6313:5;6310:32;6300:60;;6356:1;6353;6346:12;6300:60;6250:116;:::o;6372:133::-;6415:5;6453:6;6440:20;6431:29;;6469:30;6493:5;6469:30;:::i;:::-;6372:133;;;;:::o;6511:468::-;6576:6;6584;6633:2;6621:9;6612:7;6608:23;6604:32;6601:119;;;6639:79;;:::i;:::-;6601:119;6759:1;6784:53;6829:7;6820:6;6809:9;6805:22;6784:53;:::i;:::-;6774:63;;6730:117;6886:2;6912:50;6954:7;6945:6;6934:9;6930:22;6912:50;:::i;:::-;6902:60;;6857:115;6511:468;;;;;:::o;6985:117::-;7094:1;7091;7084:12;7108:117;7217:1;7214;7207:12;7231:180;7279:77;7276:1;7269:88;7376:4;7373:1;7366:15;7400:4;7397:1;7390:15;7417:281;7500:27;7522:4;7500:27;:::i;:::-;7492:6;7488:40;7630:6;7618:10;7615:22;7594:18;7582:10;7579:34;7576:62;7573:88;;;7641:18;;:::i;:::-;7573:88;7681:10;7677:2;7670:22;7460:238;7417:281;;:::o;7704:129::-;7738:6;7765:20;;:::i;:::-;7755:30;;7794:33;7822:4;7814:6;7794:33;:::i;:::-;7704:129;;;:::o;7839:307::-;7900:4;7990:18;7982:6;7979:30;7976:56;;;8012:18;;:::i;:::-;7976:56;8050:29;8072:6;8050:29;:::i;:::-;8042:37;;8134:4;8128;8124:15;8116:23;;7839:307;;;:::o;8152:154::-;8236:6;8231:3;8226;8213:30;8298:1;8289:6;8284:3;8280:16;8273:27;8152:154;;;:::o;8312:410::-;8389:5;8414:65;8430:48;8471:6;8430:48;:::i;:::-;8414:65;:::i;:::-;8405:74;;8502:6;8495:5;8488:21;8540:4;8533:5;8529:16;8578:3;8569:6;8564:3;8560:16;8557:25;8554:112;;;8585:79;;:::i;:::-;8554:112;8675:41;8709:6;8704:3;8699;8675:41;:::i;:::-;8395:327;8312:410;;;;;:::o;8741:338::-;8796:5;8845:3;8838:4;8830:6;8826:17;8822:27;8812:122;;8853:79;;:::i;:::-;8812:122;8970:6;8957:20;8995:78;9069:3;9061:6;9054:4;9046:6;9042:17;8995:78;:::i;:::-;8986:87;;8802:277;8741:338;;;;:::o;9085:943::-;9180:6;9188;9196;9204;9253:3;9241:9;9232:7;9228:23;9224:33;9221:120;;;9260:79;;:::i;:::-;9221:120;9380:1;9405:53;9450:7;9441:6;9430:9;9426:22;9405:53;:::i;:::-;9395:63;;9351:117;9507:2;9533:53;9578:7;9569:6;9558:9;9554:22;9533:53;:::i;:::-;9523:63;;9478:118;9635:2;9661:53;9706:7;9697:6;9686:9;9682:22;9661:53;:::i;:::-;9651:63;;9606:118;9791:2;9780:9;9776:18;9763:32;9822:18;9814:6;9811:30;9808:117;;;9844:79;;:::i;:::-;9808:117;9949:62;10003:7;9994:6;9983:9;9979:22;9949:62;:::i;:::-;9939:72;;9734:287;9085:943;;;;;;;:::o;10034:474::-;10102:6;10110;10159:2;10147:9;10138:7;10134:23;10130:32;10127:119;;;10165:79;;:::i;:::-;10127:119;10285:1;10310:53;10355:7;10346:6;10335:9;10331:22;10310:53;:::i;:::-;10300:63;;10256:117;10412:2;10438:53;10483:7;10474:6;10463:9;10459:22;10438:53;:::i;:::-;10428:63;;10383:118;10034:474;;;;;:::o;10514:180::-;10562:77;10559:1;10552:88;10659:4;10656:1;10649:15;10683:4;10680:1;10673:15;10700:320;10744:6;10781:1;10775:4;10771:12;10761:22;;10828:1;10822:4;10818:12;10849:18;10839:81;;10905:4;10897:6;10893:17;10883:27;;10839:81;10967:2;10959:6;10956:14;10936:18;10933:38;10930:84;;;10986:18;;:::i;:::-;10930:84;10751:269;10700:320;;;:::o;11026:220::-;11166:34;11162:1;11154:6;11150:14;11143:58;11235:3;11230:2;11222:6;11218:15;11211:28;11026:220;:::o;11252:366::-;11394:3;11415:67;11479:2;11474:3;11415:67;:::i;:::-;11408:74;;11491:93;11580:3;11491:93;:::i;:::-;11609:2;11604:3;11600:12;11593:19;;11252:366;;;:::o;11624:419::-;11790:4;11828:2;11817:9;11813:18;11805:26;;11877:9;11871:4;11867:20;11863:1;11852:9;11848:17;11841:47;11905:131;12031:4;11905:131;:::i;:::-;11897:139;;11624:419;;;:::o;12049:248::-;12189:34;12185:1;12177:6;12173:14;12166:58;12258:31;12253:2;12245:6;12241:15;12234:56;12049:248;:::o;12303:366::-;12445:3;12466:67;12530:2;12525:3;12466:67;:::i;:::-;12459:74;;12542:93;12631:3;12542:93;:::i;:::-;12660:2;12655:3;12651:12;12644:19;;12303:366;;;:::o;12675:419::-;12841:4;12879:2;12868:9;12864:18;12856:26;;12928:9;12922:4;12918:20;12914:1;12903:9;12899:17;12892:47;12956:131;13082:4;12956:131;:::i;:::-;12948:139;;12675:419;;;:::o;13100:232::-;13240:34;13236:1;13228:6;13224:14;13217:58;13309:15;13304:2;13296:6;13292:15;13285:40;13100:232;:::o;13338:366::-;13480:3;13501:67;13565:2;13560:3;13501:67;:::i;:::-;13494:74;;13577:93;13666:3;13577:93;:::i;:::-;13695:2;13690:3;13686:12;13679:19;;13338:366;;;:::o;13710:419::-;13876:4;13914:2;13903:9;13899:18;13891:26;;13963:9;13957:4;13953:20;13949:1;13938:9;13934:17;13927:47;13991:131;14117:4;13991:131;:::i;:::-;13983:139;;13710:419;;;:::o;14135:174::-;14275:26;14271:1;14263:6;14259:14;14252:50;14135:174;:::o;14315:366::-;14457:3;14478:67;14542:2;14537:3;14478:67;:::i;:::-;14471:74;;14554:93;14643:3;14554:93;:::i;:::-;14672:2;14667:3;14663:12;14656:19;;14315:366;;;:::o;14687:419::-;14853:4;14891:2;14880:9;14876:18;14868:26;;14940:9;14934:4;14930:20;14926:1;14915:9;14911:17;14904:47;14968:131;15094:4;14968:131;:::i;:::-;14960:139;;14687:419;;;:::o;15112:228::-;15252:34;15248:1;15240:6;15236:14;15229:58;15321:11;15316:2;15308:6;15304:15;15297:36;15112:228;:::o;15346:366::-;15488:3;15509:67;15573:2;15568:3;15509:67;:::i;:::-;15502:74;;15585:93;15674:3;15585:93;:::i;:::-;15703:2;15698:3;15694:12;15687:19;;15346:366;;;:::o;15718:419::-;15884:4;15922:2;15911:9;15907:18;15899:26;;15971:9;15965:4;15961:20;15957:1;15946:9;15942:17;15935:47;15999:131;16125:4;15999:131;:::i;:::-;15991:139;;15718:419;;;:::o;16143:148::-;16245:11;16282:3;16267:18;;16143:148;;;;:::o;16297:377::-;16403:3;16431:39;16464:5;16431:39;:::i;:::-;16486:89;16568:6;16563:3;16486:89;:::i;:::-;16479:96;;16584:52;16629:6;16624:3;16617:4;16610:5;16606:16;16584:52;:::i;:::-;16661:6;16656:3;16652:16;16645:23;;16407:267;16297:377;;;;:::o;16680:435::-;16860:3;16882:95;16973:3;16964:6;16882:95;:::i;:::-;16875:102;;16994:95;17085:3;17076:6;16994:95;:::i;:::-;16987:102;;17106:3;17099:10;;16680:435;;;;;:::o;17121:224::-;17261:34;17257:1;17249:6;17245:14;17238:58;17330:7;17325:2;17317:6;17313:15;17306:32;17121:224;:::o;17351:366::-;17493:3;17514:67;17578:2;17573:3;17514:67;:::i;:::-;17507:74;;17590:93;17679:3;17590:93;:::i;:::-;17708:2;17703:3;17699:12;17692:19;;17351:366;;;:::o;17723:419::-;17889:4;17927:2;17916:9;17912:18;17904:26;;17976:9;17970:4;17966:20;17962:1;17951:9;17947:17;17940:47;18004:131;18130:4;18004:131;:::i;:::-;17996:139;;17723:419;;;:::o;18148:223::-;18288:34;18284:1;18276:6;18272:14;18265:58;18357:6;18352:2;18344:6;18340:15;18333:31;18148:223;:::o;18377:366::-;18519:3;18540:67;18604:2;18599:3;18540:67;:::i;:::-;18533:74;;18616:93;18705:3;18616:93;:::i;:::-;18734:2;18729:3;18725:12;18718:19;;18377:366;;;:::o;18749:419::-;18915:4;18953:2;18942:9;18938:18;18930:26;;19002:9;18996:4;18992:20;18988:1;18977:9;18973:17;18966:47;19030:131;19156:4;19030:131;:::i;:::-;19022:139;;18749:419;;;:::o;19174:175::-;19314:27;19310:1;19302:6;19298:14;19291:51;19174:175;:::o;19355:366::-;19497:3;19518:67;19582:2;19577:3;19518:67;:::i;:::-;19511:74;;19594:93;19683:3;19594:93;:::i;:::-;19712:2;19707:3;19703:12;19696:19;;19355:366;;;:::o;19727:419::-;19893:4;19931:2;19920:9;19916:18;19908:26;;19980:9;19974:4;19970:20;19966:1;19955:9;19951:17;19944:47;20008:131;20134:4;20008:131;:::i;:::-;20000:139;;19727:419;;;:::o;20152:237::-;20292:34;20288:1;20280:6;20276:14;20269:58;20361:20;20356:2;20348:6;20344:15;20337:45;20152:237;:::o;20395:366::-;20537:3;20558:67;20622:2;20617:3;20558:67;:::i;:::-;20551:74;;20634:93;20723:3;20634:93;:::i;:::-;20752:2;20747:3;20743:12;20736:19;;20395:366;;;:::o;20767:419::-;20933:4;20971:2;20960:9;20956:18;20948:26;;21020:9;21014:4;21010:20;21006:1;20995:9;20991:17;20984:47;21048:131;21174:4;21048:131;:::i;:::-;21040:139;;20767:419;;;:::o;21192:180::-;21240:77;21237:1;21230:88;21337:4;21334:1;21327:15;21361:4;21358:1;21351:15;21378:180;21426:77;21423:1;21416:88;21523:4;21520:1;21513:15;21547:4;21544:1;21537:15;21564:191;21604:4;21624:20;21642:1;21624:20;:::i;:::-;21619:25;;21658:20;21676:1;21658:20;:::i;:::-;21653:25;;21697:1;21694;21691:8;21688:34;;;21702:18;;:::i;:::-;21688:34;21747:1;21744;21740:9;21732:17;;21564:191;;;;:::o;21761:305::-;21801:3;21820:20;21838:1;21820:20;:::i;:::-;21815:25;;21854:20;21872:1;21854:20;:::i;:::-;21849:25;;22008:1;21940:66;21936:74;21933:1;21930:81;21927:107;;;22014:18;;:::i;:::-;21927:107;22058:1;22055;22051:9;22044:16;;21761:305;;;;:::o;22072:98::-;22123:6;22157:5;22151:12;22141:22;;22072:98;;;:::o;22176:168::-;22259:11;22293:6;22288:3;22281:19;22333:4;22328:3;22324:14;22309:29;;22176:168;;;;:::o;22350:360::-;22436:3;22464:38;22496:5;22464:38;:::i;:::-;22518:70;22581:6;22576:3;22518:70;:::i;:::-;22511:77;;22597:52;22642:6;22637:3;22630:4;22623:5;22619:16;22597:52;:::i;:::-;22674:29;22696:6;22674:29;:::i;:::-;22669:3;22665:39;22658:46;;22440:270;22350:360;;;;:::o;22716:640::-;22911:4;22949:3;22938:9;22934:19;22926:27;;22963:71;23031:1;23020:9;23016:17;23007:6;22963:71;:::i;:::-;23044:72;23112:2;23101:9;23097:18;23088:6;23044:72;:::i;:::-;23126;23194:2;23183:9;23179:18;23170:6;23126:72;:::i;:::-;23245:9;23239:4;23235:20;23230:2;23219:9;23215:18;23208:48;23273:76;23344:4;23335:6;23273:76;:::i;:::-;23265:84;;22716:640;;;;;;;:::o;23362:141::-;23418:5;23449:6;23443:13;23434:22;;23465:32;23491:5;23465:32;:::i;:::-;23362:141;;;;:::o;23509:349::-;23578:6;23627:2;23615:9;23606:7;23602:23;23598:32;23595:119;;;23633:79;;:::i;:::-;23595:119;23753:1;23778:63;23833:7;23824:6;23813:9;23809:22;23778:63;:::i;:::-;23768:73;;23724:127;23509:349;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1798800","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2924","getApproved(uint256)":"5277","isApprovedForAll(address,address)":"infinite","name()":"infinite","ownerOf(uint256)":"3025","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","supportsInterface(bytes4)":"774","symbol()":"infinite","tokenURI(uint256)":"3467","transferFrom(address,address,uint256)":"infinite"},"internal":{"_afterTokenTransfer(address,address,uint256,uint256)":"17","_approve(address,uint256)":"infinite","_baseURI()":"infinite","_beforeTokenTransfer(address,address,uint256,uint256)":"infinite","_burn(uint256)":"infinite","_checkOnERC721Received(address,address,uint256,bytes memory)":"infinite","_exists(uint256)":"2312","_isApprovedOrOwner(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_ownerOf(uint256)":"2248","_requireMinted(uint256)":"infinite","_safeMint(address,uint256)":"infinite","_safeMint(address,uint256,bytes memory)":"infinite","_safeTransfer(address,address,uint256,bytes memory)":"infinite","_setApprovalForAll(address,address,bool)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1080,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":1082,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":1086,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":1090,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":1094,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":1100,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol":{"ERC721Enumerable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This implements an optional extension of {ERC721} defined in the EIP that adds enumerability of all the token ids in the contract as well as all token ids owned by each account.","kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenByIndex(uint256)":{"details":"See {IERC721Enumerable-tokenByIndex}."},"tokenOfOwnerByIndex(address,uint256)":{"details":"See {IERC721Enumerable-tokenOfOwnerByIndex}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"totalSupply()":{"details":"See {IERC721Enumerable-totalSupply}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenByIndex(uint256)":"4f6ccce7","tokenOfOwnerByIndex(address,uint256)":"2f745c59","tokenURI(uint256)":"c87b56dd","totalSupply()":"18160ddd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This implements an optional extension of {ERC721} defined in the EIP that adds enumerability of all the token ids in the contract as well as all token ids owned by each account.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":\"ERC721Enumerable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1080,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":1082,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":1086,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":1090,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":1094,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":1100,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":2148,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable","label":"_ownedTokens","offset":0,"slot":"6","type":"t_mapping(t_address,t_mapping(t_uint256,t_uint256))"},{"astId":2152,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable","label":"_ownedTokensIndex","offset":0,"slot":"7","type":"t_mapping(t_uint256,t_uint256)"},{"astId":2155,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable","label":"_allTokens","offset":0,"slot":"8","type":"t_array(t_uint256)dyn_storage"},{"astId":2159,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable","label":"_allTokensIndex","offset":0,"slot":"9","type":"t_mapping(t_uint256,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)dyn_storage":{"base":"t_uint256","encoding":"dynamic_array","label":"uint256[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_mapping(t_uint256,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"ERC721URIStorage":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"ERC721 token with storage based token URI management.","kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC721 token with storage based token URI management.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":\"ERC721URIStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1080,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":1082,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":1086,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":1090,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":1094,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":1100,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":2500,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_tokenURIs","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_string_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol":{"IERC721Enumerable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"tokenByIndex(uint256)":{"details":"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."},"tokenOfOwnerByIndex(address,uint256)":{"details":"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."},"totalSupply()":{"details":"Returns the total amount of tokens stored by the contract."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional enumeration extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","tokenByIndex(uint256)":"4f6ccce7","tokenOfOwnerByIndex(address,uint256)":"2f745c59","totalSupply()":"18160ddd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional enumeration extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":\"IERC721Enumerable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cf6c811b73f45a5c9bd3d3e7d7fac4cc7e3bd32a2bff7c419b6826bb1cb7ac0664736f6c63430008090033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCF PUSH13 0x811B73F45A5C9BD3D3E7D7FAC4 0xCC PUSH31 0x3BD32A2BFF7C419B6826BB1CB7AC0664736F6C634300080900330000000000 ","sourceMap":"194:8964:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cf6c811b73f45a5c9bd3d3e7d7fac4cc7e3bd32a2bff7c419b6826bb1cb7ac0664736f6c63430008090033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCF PUSH13 0x811B73F45A5C9BD3D3E7D7FAC4 0xCC PUSH31 0x3BD32A2BFF7C419B6826BB1CB7AC0664736F6C634300080900330000000000 ","sourceMap":"194:8964:14:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Counters.sol":{"Counters":{"abi":[],"devdoc":{"author":"Matt Condon (@shrugs)","details":"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`","kind":"dev","methods":{},"title":"Counters","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122087ec481d548c31a4c03a31de4c649b02bfe64cfd130b7ccbfa74e0adfc3f225964736f6c63430008090033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP8 0xEC BASEFEE SAR SLOAD DUP13 BALANCE LOG4 0xC0 GASPRICE BALANCE 0xDE 0x4C PUSH5 0x9B02BFE64C REVERT SGT SIGNEXTEND PUSH29 0xCBFA74E0ADFC3F225964736F6C63430008090033000000000000000000 ","sourceMap":"424:971:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122087ec481d548c31a4c03a31de4c649b02bfe64cfd130b7ccbfa74e0adfc3f225964736f6c63430008090033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP8 0xEC BASEFEE SAR SLOAD DUP13 BALANCE LOG4 0xC0 GASPRICE BALANCE 0xDE 0x4C PUSH5 0x9B02BFE64C REVERT SGT SIGNEXTEND PUSH29 0xCBFA74E0ADFC3F225964736F6C63430008090033000000000000000000 ","sourceMap":"424:971:16:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"current(struct Counters.Counter storage pointer)":"infinite","decrement(struct Counters.Counter storage pointer)":"infinite","increment(struct Counters.Counter storage pointer)":"infinite","reset(struct Counters.Counter storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Counters.sol\":\"Counters\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203b14711f206dda738c9e246f609c80e65f0b925a9242f486d9e518b550a0a0bc64736f6c63430008090033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODESIZE EQ PUSH18 0x1F206DDA738C9E246F609C80E65F0B925A92 TIMESTAMP DELEGATECALL DUP7 0xD9 0xE5 XOR 0xB5 POP LOG0 LOG0 0xBC PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ","sourceMap":"188:2065:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203b14711f206dda738c9e246f609c80e65f0b925a9242f486d9e518b550a0a0bc64736f6c63430008090033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODESIZE EQ PUSH18 0x1F206DDA738C9E246F609C80E65F0B925A92 TIMESTAMP DELEGATECALL DUP7 0xD9 0xE5 XOR 0xB5 POP LOG0 LOG0 0xBC PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ","sourceMap":"188:2065:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ECDSA":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220117474242e321cd7323624749a0065d06a612e40c127a74032d59bcc0041574b64736f6c63430008090033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT PUSH21 0x74242E321CD7323624749A0065D06A612E40C127A7 BLOCKHASH ORIGIN 0xD5 SWAP12 0xCC STOP COINBASE JUMPI 0x4B PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ","sourceMap":"369:8168:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220117474242e321cd7323624749a0065d06a612e40c127a74032d59bcc0041574b64736f6c63430008090033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GT PUSH21 0x74242E321CD7323624749A0065D06A612E40C127A7 BLOCKHASH ORIGIN 0xD5 SWAP12 0xCC STOP COINBASE JUMPI 0x4B PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ","sourceMap":"369:8168:18:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_throwError(enum ECDSA.RecoverError)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/EIP712.sol":{"EIP712":{"abi":[],"devdoc":{"details":"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. _Available since v3.4._","kind":"dev","methods":{"constructor":{"details":"Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade]."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. _Available since v3.4._\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":\"EIP712\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x948d8b2d18f38141ec78c5229d770d950ebc781ed3f44cc9e3ccbb9fded5846a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122023347be43f6463e0864ecd7d79cb1cde57cdd06d100a0c39284809729bec5a7c64736f6c63430008090033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x23 CALLVALUE PUSH28 0xE43F6463E0864ECD7D79CB1CDE57CDD06D100A0C39284809729BEC5A PUSH29 0x64736F6C63430008090033000000000000000000000000000000000000 ","sourceMap":"202:12302:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122023347be43f6463e0864ecd7d79cb1cde57cdd06d100a0c39284809729bec5a7c64736f6c63430008090033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x23 CALLVALUE PUSH28 0xE43F6463E0864ECD7D79CB1CDE57CDD06D100A0C39284809729BEC5A PUSH29 0x64736F6C63430008090033000000000000000000000000000000000000 ","sourceMap":"202:12302:22:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ERC20_BASE.sol":{"Token":{"abi":[{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"uint256","name":"max_supply","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"burn(uint256)":{"details":"Destroys `amount` tokens from the caller. See {ERC20-_burn}."},"burnFrom(address,uint256)":{"details":"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_157":{"entryPoint":null,"id":157,"parameterSlots":2,"returnSlots":0},"@_4720":{"entryPoint":null,"id":4720,"parameterSlots":3,"returnSlots":0},"@_afterTokenTransfer_698":{"entryPoint":558,"id":698,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_687":{"entryPoint":553,"id":687,"parameterSlots":3,"returnSlots":0},"@_mint_516":{"entryPoint":187,"id":516,"parameterSlots":2,"returnSlots":0},"@decimals_187":{"entryPoint":178,"id":187,"parameterSlots":0,"returnSlots":1},"abi_decode_available_length_t_string_memory_ptr_fromMemory":{"entryPoint":1026,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_string_memory_ptr_fromMemory":{"entryPoint":1101,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":1188,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_uint256_fromMemory":{"entryPoint":1211,"id":null,"parameterSlots":2,"returnSlots":3},"abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack":{"entryPoint":2001,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":2167,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2040,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":2184,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":887,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":739,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":918,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":1943,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":2074,"id":null,"parameterSlots":2,"returnSlots":1},"checked_exp_helper":{"entryPoint":1425,"id":null,"parameterSlots":4,"returnSlots":2},"checked_exp_t_uint256_t_uint8":{"entryPoint":1765,"id":null,"parameterSlots":2,"returnSlots":1},"checked_exp_unsigned":{"entryPoint":1516,"id":null,"parameterSlots":3,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":1846,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":1152,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":1752,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":972,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":2260,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":833,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x11":{"entryPoint":1365,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":2213,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":786,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":759,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":764,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":754,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":749,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":769,"id":null,"parameterSlots":1,"returnSlots":1},"shift_right_1_unsigned":{"entryPoint":1412,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e":{"entryPoint":1960,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":1162,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:9391:26","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:26","statements":[{"nodeType":"YulAssignment","src":"57:19:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:26","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:26"},"nodeType":"YulFunctionCall","src":"67:9:26"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:26"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:26","type":""}],"src":"7:75:26"},{"body":{"nodeType":"YulBlock","src":"177:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:26"},"nodeType":"YulFunctionCall","src":"187:12:26"},"nodeType":"YulExpressionStatement","src":"187:12:26"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:26"},{"body":{"nodeType":"YulBlock","src":"300:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:26"},"nodeType":"YulFunctionCall","src":"310:12:26"},"nodeType":"YulExpressionStatement","src":"310:12:26"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:26"},{"body":{"nodeType":"YulBlock","src":"423:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"440:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"443:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"433:6:26"},"nodeType":"YulFunctionCall","src":"433:12:26"},"nodeType":"YulExpressionStatement","src":"433:12:26"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"334:117:26"},{"body":{"nodeType":"YulBlock","src":"546:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"563:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"566:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"556:6:26"},"nodeType":"YulFunctionCall","src":"556:12:26"},"nodeType":"YulExpressionStatement","src":"556:12:26"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"457:117:26"},{"body":{"nodeType":"YulBlock","src":"628:54:26","statements":[{"nodeType":"YulAssignment","src":"638:38:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"656:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"663:2:26","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"652:3:26"},"nodeType":"YulFunctionCall","src":"652:14:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"672:2:26","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"668:3:26"},"nodeType":"YulFunctionCall","src":"668:7:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"648:3:26"},"nodeType":"YulFunctionCall","src":"648:28:26"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"638:6:26"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"611:5:26","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"621:6:26","type":""}],"src":"580:102:26"},{"body":{"nodeType":"YulBlock","src":"716:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"733:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"736:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"726:6:26"},"nodeType":"YulFunctionCall","src":"726:88:26"},"nodeType":"YulExpressionStatement","src":"726:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"830:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"833:4:26","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"823:6:26"},"nodeType":"YulFunctionCall","src":"823:15:26"},"nodeType":"YulExpressionStatement","src":"823:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"854:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"857:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"847:6:26"},"nodeType":"YulFunctionCall","src":"847:15:26"},"nodeType":"YulExpressionStatement","src":"847:15:26"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"688:180:26"},{"body":{"nodeType":"YulBlock","src":"917:238:26","statements":[{"nodeType":"YulVariableDeclaration","src":"927:58:26","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"949:6:26"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"979:4:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"957:21:26"},"nodeType":"YulFunctionCall","src":"957:27:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"945:3:26"},"nodeType":"YulFunctionCall","src":"945:40:26"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"931:10:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"1096:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1098:16:26"},"nodeType":"YulFunctionCall","src":"1098:18:26"},"nodeType":"YulExpressionStatement","src":"1098:18:26"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1039:10:26"},{"kind":"number","nodeType":"YulLiteral","src":"1051:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1036:2:26"},"nodeType":"YulFunctionCall","src":"1036:34:26"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1075:10:26"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1087:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1072:2:26"},"nodeType":"YulFunctionCall","src":"1072:22:26"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1033:2:26"},"nodeType":"YulFunctionCall","src":"1033:62:26"},"nodeType":"YulIf","src":"1030:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1134:2:26","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1138:10:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1127:6:26"},"nodeType":"YulFunctionCall","src":"1127:22:26"},"nodeType":"YulExpressionStatement","src":"1127:22:26"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"903:6:26","type":""},{"name":"size","nodeType":"YulTypedName","src":"911:4:26","type":""}],"src":"874:281:26"},{"body":{"nodeType":"YulBlock","src":"1202:88:26","statements":[{"nodeType":"YulAssignment","src":"1212:30:26","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1222:18:26"},"nodeType":"YulFunctionCall","src":"1222:20:26"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1212:6:26"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1271:6:26"},{"name":"size","nodeType":"YulIdentifier","src":"1279:4:26"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1251:19:26"},"nodeType":"YulFunctionCall","src":"1251:33:26"},"nodeType":"YulExpressionStatement","src":"1251:33:26"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1186:4:26","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1195:6:26","type":""}],"src":"1161:129:26"},{"body":{"nodeType":"YulBlock","src":"1363:241:26","statements":[{"body":{"nodeType":"YulBlock","src":"1468:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1470:16:26"},"nodeType":"YulFunctionCall","src":"1470:18:26"},"nodeType":"YulExpressionStatement","src":"1470:18:26"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1440:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"1448:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1437:2:26"},"nodeType":"YulFunctionCall","src":"1437:30:26"},"nodeType":"YulIf","src":"1434:56:26"},{"nodeType":"YulAssignment","src":"1500:37:26","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1530:6:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1508:21:26"},"nodeType":"YulFunctionCall","src":"1508:29:26"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1500:4:26"}]},{"nodeType":"YulAssignment","src":"1574:23:26","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1586:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"1592:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1582:3:26"},"nodeType":"YulFunctionCall","src":"1582:15:26"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1574:4:26"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1347:6:26","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1358:4:26","type":""}],"src":"1296:308:26"},{"body":{"nodeType":"YulBlock","src":"1659:258:26","statements":[{"nodeType":"YulVariableDeclaration","src":"1669:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"1678:1:26","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1673:1:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"1738:63:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1763:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"1768:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1759:3:26"},"nodeType":"YulFunctionCall","src":"1759:11:26"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1782:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"1787:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1778:3:26"},"nodeType":"YulFunctionCall","src":"1778:11:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1772:5:26"},"nodeType":"YulFunctionCall","src":"1772:18:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1752:6:26"},"nodeType":"YulFunctionCall","src":"1752:39:26"},"nodeType":"YulExpressionStatement","src":"1752:39:26"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1699:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"1702:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1696:2:26"},"nodeType":"YulFunctionCall","src":"1696:13:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1710:19:26","statements":[{"nodeType":"YulAssignment","src":"1712:15:26","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1721:1:26"},{"kind":"number","nodeType":"YulLiteral","src":"1724:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1717:3:26"},"nodeType":"YulFunctionCall","src":"1717:10:26"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1712:1:26"}]}]},"pre":{"nodeType":"YulBlock","src":"1692:3:26","statements":[]},"src":"1688:113:26"},{"body":{"nodeType":"YulBlock","src":"1835:76:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1885:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"1890:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1881:3:26"},"nodeType":"YulFunctionCall","src":"1881:16:26"},{"kind":"number","nodeType":"YulLiteral","src":"1899:1:26","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1874:6:26"},"nodeType":"YulFunctionCall","src":"1874:27:26"},"nodeType":"YulExpressionStatement","src":"1874:27:26"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1816:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"1819:6:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1813:2:26"},"nodeType":"YulFunctionCall","src":"1813:13:26"},"nodeType":"YulIf","src":"1810:101:26"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1641:3:26","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1646:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"1651:6:26","type":""}],"src":"1610:307:26"},{"body":{"nodeType":"YulBlock","src":"2018:326:26","statements":[{"nodeType":"YulAssignment","src":"2028:75:26","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2095:6:26"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2053:41:26"},"nodeType":"YulFunctionCall","src":"2053:49:26"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2037:15:26"},"nodeType":"YulFunctionCall","src":"2037:66:26"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2028:5:26"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2119:5:26"},{"name":"length","nodeType":"YulIdentifier","src":"2126:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2112:6:26"},"nodeType":"YulFunctionCall","src":"2112:21:26"},"nodeType":"YulExpressionStatement","src":"2112:21:26"},{"nodeType":"YulVariableDeclaration","src":"2142:27:26","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2157:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"2164:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2153:3:26"},"nodeType":"YulFunctionCall","src":"2153:16:26"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2146:3:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"2207:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"2209:77:26"},"nodeType":"YulFunctionCall","src":"2209:79:26"},"nodeType":"YulExpressionStatement","src":"2209:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2188:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"2193:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2184:3:26"},"nodeType":"YulFunctionCall","src":"2184:16:26"},{"name":"end","nodeType":"YulIdentifier","src":"2202:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2181:2:26"},"nodeType":"YulFunctionCall","src":"2181:25:26"},"nodeType":"YulIf","src":"2178:112:26"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2321:3:26"},{"name":"dst","nodeType":"YulIdentifier","src":"2326:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"2331:6:26"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"2299:21:26"},"nodeType":"YulFunctionCall","src":"2299:39:26"},"nodeType":"YulExpressionStatement","src":"2299:39:26"}]},"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1991:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"1996:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"2004:3:26","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2012:5:26","type":""}],"src":"1923:421:26"},{"body":{"nodeType":"YulBlock","src":"2437:282:26","statements":[{"body":{"nodeType":"YulBlock","src":"2486:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"2488:77:26"},"nodeType":"YulFunctionCall","src":"2488:79:26"},"nodeType":"YulExpressionStatement","src":"2488:79:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2465:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"2473:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2461:3:26"},"nodeType":"YulFunctionCall","src":"2461:17:26"},{"name":"end","nodeType":"YulIdentifier","src":"2480:3:26"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2457:3:26"},"nodeType":"YulFunctionCall","src":"2457:27:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2450:6:26"},"nodeType":"YulFunctionCall","src":"2450:35:26"},"nodeType":"YulIf","src":"2447:122:26"},{"nodeType":"YulVariableDeclaration","src":"2578:27:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2598:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2592:5:26"},"nodeType":"YulFunctionCall","src":"2592:13:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2582:6:26","type":""}]},{"nodeType":"YulAssignment","src":"2614:99:26","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2686:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"2694:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2682:3:26"},"nodeType":"YulFunctionCall","src":"2682:17:26"},{"name":"length","nodeType":"YulIdentifier","src":"2701:6:26"},{"name":"end","nodeType":"YulIdentifier","src":"2709:3:26"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"2623:58:26"},"nodeType":"YulFunctionCall","src":"2623:90:26"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2614:5:26"}]}]},"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2415:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"2423:3:26","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2431:5:26","type":""}],"src":"2364:355:26"},{"body":{"nodeType":"YulBlock","src":"2770:32:26","statements":[{"nodeType":"YulAssignment","src":"2780:16:26","value":{"name":"value","nodeType":"YulIdentifier","src":"2791:5:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2780:7:26"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2752:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2762:7:26","type":""}],"src":"2725:77:26"},{"body":{"nodeType":"YulBlock","src":"2851:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"2908:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2917:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2920:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2910:6:26"},"nodeType":"YulFunctionCall","src":"2910:12:26"},"nodeType":"YulExpressionStatement","src":"2910:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2874:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2899:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2881:17:26"},"nodeType":"YulFunctionCall","src":"2881:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2871:2:26"},"nodeType":"YulFunctionCall","src":"2871:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2864:6:26"},"nodeType":"YulFunctionCall","src":"2864:43:26"},"nodeType":"YulIf","src":"2861:63:26"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2844:5:26","type":""}],"src":"2808:122:26"},{"body":{"nodeType":"YulBlock","src":"2999:80:26","statements":[{"nodeType":"YulAssignment","src":"3009:22:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3024:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3018:5:26"},"nodeType":"YulFunctionCall","src":"3018:13:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3009:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3067:5:26"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"3040:26:26"},"nodeType":"YulFunctionCall","src":"3040:33:26"},"nodeType":"YulExpressionStatement","src":"3040:33:26"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2977:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"2985:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2993:5:26","type":""}],"src":"2936:143:26"},{"body":{"nodeType":"YulBlock","src":"3216:878:26","statements":[{"body":{"nodeType":"YulBlock","src":"3262:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3264:77:26"},"nodeType":"YulFunctionCall","src":"3264:79:26"},"nodeType":"YulExpressionStatement","src":"3264:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3237:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"3246:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3233:3:26"},"nodeType":"YulFunctionCall","src":"3233:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"3258:2:26","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3229:3:26"},"nodeType":"YulFunctionCall","src":"3229:32:26"},"nodeType":"YulIf","src":"3226:119:26"},{"nodeType":"YulBlock","src":"3355:291:26","statements":[{"nodeType":"YulVariableDeclaration","src":"3370:38:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3394:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3405:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3390:3:26"},"nodeType":"YulFunctionCall","src":"3390:17:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3384:5:26"},"nodeType":"YulFunctionCall","src":"3384:24:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3374:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"3455:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3457:77:26"},"nodeType":"YulFunctionCall","src":"3457:79:26"},"nodeType":"YulExpressionStatement","src":"3457:79:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3427:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"3435:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3424:2:26"},"nodeType":"YulFunctionCall","src":"3424:30:26"},"nodeType":"YulIf","src":"3421:117:26"},{"nodeType":"YulAssignment","src":"3552:84:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3608:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"3619:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3604:3:26"},"nodeType":"YulFunctionCall","src":"3604:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3628:7:26"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3562:41:26"},"nodeType":"YulFunctionCall","src":"3562:74:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3552:6:26"}]}]},{"nodeType":"YulBlock","src":"3656:292:26","statements":[{"nodeType":"YulVariableDeclaration","src":"3671:39:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3695:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3706:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3691:3:26"},"nodeType":"YulFunctionCall","src":"3691:18:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3685:5:26"},"nodeType":"YulFunctionCall","src":"3685:25:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3675:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"3757:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3759:77:26"},"nodeType":"YulFunctionCall","src":"3759:79:26"},"nodeType":"YulExpressionStatement","src":"3759:79:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3729:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"3737:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3726:2:26"},"nodeType":"YulFunctionCall","src":"3726:30:26"},"nodeType":"YulIf","src":"3723:117:26"},{"nodeType":"YulAssignment","src":"3854:84:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3910:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"3921:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3906:3:26"},"nodeType":"YulFunctionCall","src":"3906:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3930:7:26"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3864:41:26"},"nodeType":"YulFunctionCall","src":"3864:74:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3854:6:26"}]}]},{"nodeType":"YulBlock","src":"3958:129:26","statements":[{"nodeType":"YulVariableDeclaration","src":"3973:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"3987:2:26","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3977:6:26","type":""}]},{"nodeType":"YulAssignment","src":"4003:74:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4049:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"4060:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4045:3:26"},"nodeType":"YulFunctionCall","src":"4045:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4069:7:26"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"4013:31:26"},"nodeType":"YulFunctionCall","src":"4013:64:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4003:6:26"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3170:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3181:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3193:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3201:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3209:6:26","type":""}],"src":"3085:1009:26"},{"body":{"nodeType":"YulBlock","src":"4128:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4145:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4148:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4138:6:26"},"nodeType":"YulFunctionCall","src":"4138:88:26"},"nodeType":"YulExpressionStatement","src":"4138:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4242:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4245:4:26","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4235:6:26"},"nodeType":"YulFunctionCall","src":"4235:15:26"},"nodeType":"YulExpressionStatement","src":"4235:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4266:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4269:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4259:6:26"},"nodeType":"YulFunctionCall","src":"4259:15:26"},"nodeType":"YulExpressionStatement","src":"4259:15:26"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"4100:180:26"},{"body":{"nodeType":"YulBlock","src":"4337:51:26","statements":[{"nodeType":"YulAssignment","src":"4347:34:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4372:1:26","type":"","value":"1"},{"name":"value","nodeType":"YulIdentifier","src":"4375:5:26"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4368:3:26"},"nodeType":"YulFunctionCall","src":"4368:13:26"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"4347:8:26"}]}]},"name":"shift_right_1_unsigned","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4318:5:26","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"4328:8:26","type":""}],"src":"4286:102:26"},{"body":{"nodeType":"YulBlock","src":"4467:775:26","statements":[{"nodeType":"YulAssignment","src":"4477:15:26","value":{"name":"_power","nodeType":"YulIdentifier","src":"4486:6:26"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"4477:5:26"}]},{"nodeType":"YulAssignment","src":"4501:14:26","value":{"name":"_base","nodeType":"YulIdentifier","src":"4510:5:26"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"4501:4:26"}]},{"body":{"nodeType":"YulBlock","src":"4559:677:26","statements":[{"body":{"nodeType":"YulBlock","src":"4647:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"4649:16:26"},"nodeType":"YulFunctionCall","src":"4649:18:26"},"nodeType":"YulExpressionStatement","src":"4649:18:26"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"4625:4:26"},{"arguments":[{"name":"max","nodeType":"YulIdentifier","src":"4635:3:26"},{"name":"base","nodeType":"YulIdentifier","src":"4640:4:26"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4631:3:26"},"nodeType":"YulFunctionCall","src":"4631:14:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4622:2:26"},"nodeType":"YulFunctionCall","src":"4622:24:26"},"nodeType":"YulIf","src":"4619:50:26"},{"body":{"nodeType":"YulBlock","src":"4714:419:26","statements":[{"nodeType":"YulAssignment","src":"5094:25:26","value":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"5107:5:26"},{"name":"base","nodeType":"YulIdentifier","src":"5114:4:26"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"5103:3:26"},"nodeType":"YulFunctionCall","src":"5103:16:26"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"5094:5:26"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"4689:8:26"},{"kind":"number","nodeType":"YulLiteral","src":"4699:1:26","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4685:3:26"},"nodeType":"YulFunctionCall","src":"4685:16:26"},"nodeType":"YulIf","src":"4682:451:26"},{"nodeType":"YulAssignment","src":"5146:23:26","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"5158:4:26"},{"name":"base","nodeType":"YulIdentifier","src":"5164:4:26"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"5154:3:26"},"nodeType":"YulFunctionCall","src":"5154:15:26"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"5146:4:26"}]},{"nodeType":"YulAssignment","src":"5182:44:26","value":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"5217:8:26"}],"functionName":{"name":"shift_right_1_unsigned","nodeType":"YulIdentifier","src":"5194:22:26"},"nodeType":"YulFunctionCall","src":"5194:32:26"},"variableNames":[{"name":"exponent","nodeType":"YulIdentifier","src":"5182:8:26"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"4535:8:26"},{"kind":"number","nodeType":"YulLiteral","src":"4545:1:26","type":"","value":"1"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4532:2:26"},"nodeType":"YulFunctionCall","src":"4532:15:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4548:2:26","statements":[]},"pre":{"nodeType":"YulBlock","src":"4528:3:26","statements":[]},"src":"4524:712:26"}]},"name":"checked_exp_helper","nodeType":"YulFunctionDefinition","parameters":[{"name":"_power","nodeType":"YulTypedName","src":"4422:6:26","type":""},{"name":"_base","nodeType":"YulTypedName","src":"4430:5:26","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"4437:8:26","type":""},{"name":"max","nodeType":"YulTypedName","src":"4447:3:26","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"4455:5:26","type":""},{"name":"base","nodeType":"YulTypedName","src":"4462:4:26","type":""}],"src":"4394:848:26"},{"body":{"nodeType":"YulBlock","src":"5308:1013:26","statements":[{"body":{"nodeType":"YulBlock","src":"5503:20:26","statements":[{"nodeType":"YulAssignment","src":"5505:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"5514:1:26","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"5505:5:26"}]},{"nodeType":"YulLeave","src":"5516:5:26"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"5493:8:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5486:6:26"},"nodeType":"YulFunctionCall","src":"5486:16:26"},"nodeType":"YulIf","src":"5483:40:26"},{"body":{"nodeType":"YulBlock","src":"5548:20:26","statements":[{"nodeType":"YulAssignment","src":"5550:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"5559:1:26","type":"","value":"0"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"5550:5:26"}]},{"nodeType":"YulLeave","src":"5561:5:26"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"5542:4:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5535:6:26"},"nodeType":"YulFunctionCall","src":"5535:12:26"},"nodeType":"YulIf","src":"5532:36:26"},{"cases":[{"body":{"nodeType":"YulBlock","src":"5678:20:26","statements":[{"nodeType":"YulAssignment","src":"5680:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"5689:1:26","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"5680:5:26"}]},{"nodeType":"YulLeave","src":"5691:5:26"}]},"nodeType":"YulCase","src":"5671:27:26","value":{"kind":"number","nodeType":"YulLiteral","src":"5676:1:26","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"5722:176:26","statements":[{"body":{"nodeType":"YulBlock","src":"5757:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"5759:16:26"},"nodeType":"YulFunctionCall","src":"5759:18:26"},"nodeType":"YulExpressionStatement","src":"5759:18:26"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"5742:8:26"},{"kind":"number","nodeType":"YulLiteral","src":"5752:3:26","type":"","value":"255"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5739:2:26"},"nodeType":"YulFunctionCall","src":"5739:17:26"},"nodeType":"YulIf","src":"5736:43:26"},{"nodeType":"YulAssignment","src":"5792:25:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5805:1:26","type":"","value":"2"},{"name":"exponent","nodeType":"YulIdentifier","src":"5808:8:26"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"5801:3:26"},"nodeType":"YulFunctionCall","src":"5801:16:26"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"5792:5:26"}]},{"body":{"nodeType":"YulBlock","src":"5848:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"5850:16:26"},"nodeType":"YulFunctionCall","src":"5850:18:26"},"nodeType":"YulExpressionStatement","src":"5850:18:26"}]},"condition":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"5836:5:26"},{"name":"max","nodeType":"YulIdentifier","src":"5843:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5833:2:26"},"nodeType":"YulFunctionCall","src":"5833:14:26"},"nodeType":"YulIf","src":"5830:40:26"},{"nodeType":"YulLeave","src":"5883:5:26"}]},"nodeType":"YulCase","src":"5707:191:26","value":{"kind":"number","nodeType":"YulLiteral","src":"5712:1:26","type":"","value":"2"}}],"expression":{"name":"base","nodeType":"YulIdentifier","src":"5628:4:26"},"nodeType":"YulSwitch","src":"5621:277:26"},{"body":{"nodeType":"YulBlock","src":"6030:123:26","statements":[{"nodeType":"YulAssignment","src":"6044:28:26","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"6057:4:26"},{"name":"exponent","nodeType":"YulIdentifier","src":"6063:8:26"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"6053:3:26"},"nodeType":"YulFunctionCall","src":"6053:19:26"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"6044:5:26"}]},{"body":{"nodeType":"YulBlock","src":"6103:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6105:16:26"},"nodeType":"YulFunctionCall","src":"6105:18:26"},"nodeType":"YulExpressionStatement","src":"6105:18:26"}]},"condition":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"6091:5:26"},{"name":"max","nodeType":"YulIdentifier","src":"6098:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6088:2:26"},"nodeType":"YulFunctionCall","src":"6088:14:26"},"nodeType":"YulIf","src":"6085:40:26"},{"nodeType":"YulLeave","src":"6138:5:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"5933:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"5939:2:26","type":"","value":"11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5930:2:26"},"nodeType":"YulFunctionCall","src":"5930:12:26"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"5947:8:26"},{"kind":"number","nodeType":"YulLiteral","src":"5957:2:26","type":"","value":"78"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5944:2:26"},"nodeType":"YulFunctionCall","src":"5944:16:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5926:3:26"},"nodeType":"YulFunctionCall","src":"5926:35:26"},{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"5982:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"5988:3:26","type":"","value":"307"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5979:2:26"},"nodeType":"YulFunctionCall","src":"5979:13:26"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"5997:8:26"},{"kind":"number","nodeType":"YulLiteral","src":"6007:2:26","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5994:2:26"},"nodeType":"YulFunctionCall","src":"5994:16:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5975:3:26"},"nodeType":"YulFunctionCall","src":"5975:36:26"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5910:2:26"},"nodeType":"YulFunctionCall","src":"5910:111:26"},"nodeType":"YulIf","src":"5907:246:26"},{"nodeType":"YulAssignment","src":"6163:57:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6197:1:26","type":"","value":"1"},{"name":"base","nodeType":"YulIdentifier","src":"6200:4:26"},{"name":"exponent","nodeType":"YulIdentifier","src":"6206:8:26"},{"name":"max","nodeType":"YulIdentifier","src":"6216:3:26"}],"functionName":{"name":"checked_exp_helper","nodeType":"YulIdentifier","src":"6178:18:26"},"nodeType":"YulFunctionCall","src":"6178:42:26"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"6163:5:26"},{"name":"base","nodeType":"YulIdentifier","src":"6170:4:26"}]},{"body":{"nodeType":"YulBlock","src":"6259:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6261:16:26"},"nodeType":"YulFunctionCall","src":"6261:18:26"},"nodeType":"YulExpressionStatement","src":"6261:18:26"}]},"condition":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"6236:5:26"},{"arguments":[{"name":"max","nodeType":"YulIdentifier","src":"6247:3:26"},{"name":"base","nodeType":"YulIdentifier","src":"6252:4:26"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6243:3:26"},"nodeType":"YulFunctionCall","src":"6243:14:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6233:2:26"},"nodeType":"YulFunctionCall","src":"6233:25:26"},"nodeType":"YulIf","src":"6230:51:26"},{"nodeType":"YulAssignment","src":"6290:25:26","value":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"6303:5:26"},{"name":"base","nodeType":"YulIdentifier","src":"6310:4:26"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6299:3:26"},"nodeType":"YulFunctionCall","src":"6299:16:26"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"6290:5:26"}]}]},"name":"checked_exp_unsigned","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"5278:4:26","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"5284:8:26","type":""},{"name":"max","nodeType":"YulTypedName","src":"5294:3:26","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"5302:5:26","type":""}],"src":"5248:1073:26"},{"body":{"nodeType":"YulBlock","src":"6370:43:26","statements":[{"nodeType":"YulAssignment","src":"6380:27:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6395:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"6402:4:26","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6391:3:26"},"nodeType":"YulFunctionCall","src":"6391:16:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"6380:7:26"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6352:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"6362:7:26","type":""}],"src":"6327:86:26"},{"body":{"nodeType":"YulBlock","src":"6483:217:26","statements":[{"nodeType":"YulAssignment","src":"6493:31:26","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"6519:4:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6501:17:26"},"nodeType":"YulFunctionCall","src":"6501:23:26"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"6493:4:26"}]},{"nodeType":"YulAssignment","src":"6533:37:26","value":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"6561:8:26"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"6545:15:26"},"nodeType":"YulFunctionCall","src":"6545:25:26"},"variableNames":[{"name":"exponent","nodeType":"YulIdentifier","src":"6533:8:26"}]},{"nodeType":"YulAssignment","src":"6580:113:26","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"6610:4:26"},{"name":"exponent","nodeType":"YulIdentifier","src":"6616:8:26"},{"kind":"number","nodeType":"YulLiteral","src":"6626:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"checked_exp_unsigned","nodeType":"YulIdentifier","src":"6589:20:26"},"nodeType":"YulFunctionCall","src":"6589:104:26"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"6580:5:26"}]}]},"name":"checked_exp_t_uint256_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"6458:4:26","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"6464:8:26","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"6477:5:26","type":""}],"src":"6419:281:26"},{"body":{"nodeType":"YulBlock","src":"6754:300:26","statements":[{"nodeType":"YulAssignment","src":"6764:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6787:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6769:17:26"},"nodeType":"YulFunctionCall","src":"6769:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"6764:1:26"}]},{"nodeType":"YulAssignment","src":"6798:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"6821:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6803:17:26"},"nodeType":"YulFunctionCall","src":"6803:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"6798:1:26"}]},{"body":{"nodeType":"YulBlock","src":"6996:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6998:16:26"},"nodeType":"YulFunctionCall","src":"6998:18:26"},"nodeType":"YulExpressionStatement","src":"6998:18:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6908:1:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6901:6:26"},"nodeType":"YulFunctionCall","src":"6901:9:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6894:6:26"},"nodeType":"YulFunctionCall","src":"6894:17:26"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"6916:1:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6923:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"x","nodeType":"YulIdentifier","src":"6991:1:26"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6919:3:26"},"nodeType":"YulFunctionCall","src":"6919:74:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6913:2:26"},"nodeType":"YulFunctionCall","src":"6913:81:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6890:3:26"},"nodeType":"YulFunctionCall","src":"6890:105:26"},"nodeType":"YulIf","src":"6887:131:26"},{"nodeType":"YulAssignment","src":"7028:20:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7043:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"7046:1:26"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7039:3:26"},"nodeType":"YulFunctionCall","src":"7039:9:26"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"7028:7:26"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"6737:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"6740:1:26","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"6746:7:26","type":""}],"src":"6706:348:26"},{"body":{"nodeType":"YulBlock","src":"7156:73:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7173:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"7178:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7166:6:26"},"nodeType":"YulFunctionCall","src":"7166:19:26"},"nodeType":"YulExpressionStatement","src":"7166:19:26"},{"nodeType":"YulAssignment","src":"7194:29:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7213:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"7218:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7209:3:26"},"nodeType":"YulFunctionCall","src":"7209:14:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"7194:11:26"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7128:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"7133:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"7144:11:26","type":""}],"src":"7060:169:26"},{"body":{"nodeType":"YulBlock","src":"7341:75:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7363:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"7371:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7359:3:26"},"nodeType":"YulFunctionCall","src":"7359:14:26"},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"7375:33:26","type":"","value":"ERC20: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7352:6:26"},"nodeType":"YulFunctionCall","src":"7352:57:26"},"nodeType":"YulExpressionStatement","src":"7352:57:26"}]},"name":"store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7333:6:26","type":""}],"src":"7235:181:26"},{"body":{"nodeType":"YulBlock","src":"7568:220:26","statements":[{"nodeType":"YulAssignment","src":"7578:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7644:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"7649:2:26","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7585:58:26"},"nodeType":"YulFunctionCall","src":"7585:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7578:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7750:3:26"}],"functionName":{"name":"store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","nodeType":"YulIdentifier","src":"7661:88:26"},"nodeType":"YulFunctionCall","src":"7661:93:26"},"nodeType":"YulExpressionStatement","src":"7661:93:26"},{"nodeType":"YulAssignment","src":"7763:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7774:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"7779:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7770:3:26"},"nodeType":"YulFunctionCall","src":"7770:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7763:3:26"}]}]},"name":"abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7556:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7564:3:26","type":""}],"src":"7422:366:26"},{"body":{"nodeType":"YulBlock","src":"7965:248:26","statements":[{"nodeType":"YulAssignment","src":"7975:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7987:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"7998:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7983:3:26"},"nodeType":"YulFunctionCall","src":"7983:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7975:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8022:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"8033:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8018:3:26"},"nodeType":"YulFunctionCall","src":"8018:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8041:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"8047:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8037:3:26"},"nodeType":"YulFunctionCall","src":"8037:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8011:6:26"},"nodeType":"YulFunctionCall","src":"8011:47:26"},"nodeType":"YulExpressionStatement","src":"8011:47:26"},{"nodeType":"YulAssignment","src":"8067:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8201:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8075:124:26"},"nodeType":"YulFunctionCall","src":"8075:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8067:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7945:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7960:4:26","type":""}],"src":"7794:419:26"},{"body":{"nodeType":"YulBlock","src":"8263:261:26","statements":[{"nodeType":"YulAssignment","src":"8273:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8296:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"8278:17:26"},"nodeType":"YulFunctionCall","src":"8278:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"8273:1:26"}]},{"nodeType":"YulAssignment","src":"8307:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"8330:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"8312:17:26"},"nodeType":"YulFunctionCall","src":"8312:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"8307:1:26"}]},{"body":{"nodeType":"YulBlock","src":"8470:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"8472:16:26"},"nodeType":"YulFunctionCall","src":"8472:18:26"},"nodeType":"YulExpressionStatement","src":"8472:18:26"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8391:1:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8398:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"y","nodeType":"YulIdentifier","src":"8466:1:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8394:3:26"},"nodeType":"YulFunctionCall","src":"8394:74:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8388:2:26"},"nodeType":"YulFunctionCall","src":"8388:81:26"},"nodeType":"YulIf","src":"8385:107:26"},{"nodeType":"YulAssignment","src":"8502:16:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"8513:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"8516:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8509:3:26"},"nodeType":"YulFunctionCall","src":"8509:9:26"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"8502:3:26"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"8250:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"8253:1:26","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"8259:3:26","type":""}],"src":"8219:305:26"},{"body":{"nodeType":"YulBlock","src":"8595:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8612:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8635:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"8617:17:26"},"nodeType":"YulFunctionCall","src":"8617:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8605:6:26"},"nodeType":"YulFunctionCall","src":"8605:37:26"},"nodeType":"YulExpressionStatement","src":"8605:37:26"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8583:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"8590:3:26","type":""}],"src":"8530:118:26"},{"body":{"nodeType":"YulBlock","src":"8752:124:26","statements":[{"nodeType":"YulAssignment","src":"8762:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8774:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"8785:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8770:3:26"},"nodeType":"YulFunctionCall","src":"8770:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8762:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8842:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8855:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"8866:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8851:3:26"},"nodeType":"YulFunctionCall","src":"8851:17:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"8798:43:26"},"nodeType":"YulFunctionCall","src":"8798:71:26"},"nodeType":"YulExpressionStatement","src":"8798:71:26"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8724:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8736:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8747:4:26","type":""}],"src":"8654:222:26"},{"body":{"nodeType":"YulBlock","src":"8910:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8927:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8930:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8920:6:26"},"nodeType":"YulFunctionCall","src":"8920:88:26"},"nodeType":"YulExpressionStatement","src":"8920:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9024:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9027:4:26","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9017:6:26"},"nodeType":"YulFunctionCall","src":"9017:15:26"},"nodeType":"YulExpressionStatement","src":"9017:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9048:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9051:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9041:6:26"},"nodeType":"YulFunctionCall","src":"9041:15:26"},"nodeType":"YulExpressionStatement","src":"9041:15:26"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"8882:180:26"},{"body":{"nodeType":"YulBlock","src":"9119:269:26","statements":[{"nodeType":"YulAssignment","src":"9129:22:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"9143:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"9149:1:26","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"9139:3:26"},"nodeType":"YulFunctionCall","src":"9139:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"9129:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"9160:38:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"9190:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"9196:1:26","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9186:3:26"},"nodeType":"YulFunctionCall","src":"9186:12:26"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"9164:18:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"9237:51:26","statements":[{"nodeType":"YulAssignment","src":"9251:27:26","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9265:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"9273:4:26","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9261:3:26"},"nodeType":"YulFunctionCall","src":"9261:17:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"9251:6:26"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"9217:18:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"9210:6:26"},"nodeType":"YulFunctionCall","src":"9210:26:26"},"nodeType":"YulIf","src":"9207:81:26"},{"body":{"nodeType":"YulBlock","src":"9340:42:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"9354:16:26"},"nodeType":"YulFunctionCall","src":"9354:18:26"},"nodeType":"YulExpressionStatement","src":"9354:18:26"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"9304:18:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9327:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"9335:2:26","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9324:2:26"},"nodeType":"YulFunctionCall","src":"9324:14:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"9301:2:26"},"nodeType":"YulFunctionCall","src":"9301:38:26"},"nodeType":"YulIf","src":"9298:84:26"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"9103:4:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"9112:6:26","type":""}],"src":"9068:320:26"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function shift_right_1_unsigned(value) -> newValue {\n        newValue :=\n\n        shr(1, value)\n\n    }\n\n    function checked_exp_helper(_power, _base, exponent, max) -> power, base {\n        power := _power\n        base  := _base\n        for { } gt(exponent, 1) {}\n        {\n            // overflow check for base * base\n            if gt(base, div(max, base)) { panic_error_0x11() }\n            if and(exponent, 1)\n            {\n                // No checks for power := mul(power, base) needed, because the check\n                // for base * base above is sufficient, since:\n                // |power| <= base (proof by induction) and thus:\n                // |power * base| <= base * base <= max <= |min| (for signed)\n                // (this is equally true for signed and unsigned exp)\n                power := mul(power, base)\n            }\n            base := mul(base, base)\n            exponent := shift_right_1_unsigned(exponent)\n        }\n    }\n\n    function checked_exp_unsigned(base, exponent, max) -> power {\n        // This function currently cannot be inlined because of the\n        // \"leave\" statements. We have to improve the optimizer.\n\n        // Note that 0**0 == 1\n        if iszero(exponent) { power := 1 leave }\n        if iszero(base) { power := 0 leave }\n\n        // Specializations for small bases\n        switch base\n        // 0 is handled above\n        case 1 { power := 1 leave }\n        case 2\n        {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := exp(2, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n        if or(\n            and(lt(base, 11), lt(exponent, 78)),\n            and(lt(base, 307), lt(exponent, 32))\n        )\n        {\n            power := exp(base, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n\n        power, base := checked_exp_helper(1, base, exponent, max)\n\n        if gt(power, div(max, base)) { panic_error_0x11() }\n        power := mul(power, base)\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power {\n        base := cleanup_t_uint256(base)\n        exponent := cleanup_t_uint8(exponent)\n\n        power := checked_exp_unsigned(base, exponent, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: mint to the zero address\")\n\n    }\n\n    function abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n}\n","id":26,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b5060405162001f2a38038062001f2a8339818101604052810190620000379190620004bb565b828281600390805190602001906200005192919062000233565b5080600490805190602001906200006a92919062000233565b505050620000a93362000082620000b260201b60201c565b600a620000909190620006e5565b836200009d919062000736565b620000bb60201b60201c565b5050506200090a565b60006012905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156200012e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200012590620007f8565b60405180910390fd5b62000142600083836200022960201b60201c565b80600260008282546200015691906200081a565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405162000209919062000888565b60405180910390a362000225600083836200022e60201b60201c565b5050565b505050565b505050565b8280546200024190620008d4565b90600052602060002090601f016020900481019282620002655760008555620002b1565b82601f106200028057805160ff1916838001178555620002b1565b82800160010185558215620002b1579182015b82811115620002b057825182559160200191906001019062000293565b5b509050620002c09190620002c4565b5090565b5b80821115620002df576000816000905550600101620002c5565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200034c8262000301565b810181811067ffffffffffffffff821117156200036e576200036d62000312565b5b80604052505050565b600062000383620002e3565b905062000391828262000341565b919050565b600067ffffffffffffffff821115620003b457620003b362000312565b5b620003bf8262000301565b9050602081019050919050565b60005b83811015620003ec578082015181840152602081019050620003cf565b83811115620003fc576000848401525b50505050565b600062000419620004138462000396565b62000377565b905082815260208101848484011115620004385762000437620002fc565b5b62000445848285620003cc565b509392505050565b600082601f830112620004655762000464620002f7565b5b81516200047784826020860162000402565b91505092915050565b6000819050919050565b620004958162000480565b8114620004a157600080fd5b50565b600081519050620004b5816200048a565b92915050565b600080600060608486031215620004d757620004d6620002ed565b5b600084015167ffffffffffffffff811115620004f857620004f7620002f2565b5b62000506868287016200044d565b935050602084015167ffffffffffffffff8111156200052a5762000529620002f2565b5b62000538868287016200044d565b92505060406200054b86828701620004a4565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115620005e357808604811115620005bb57620005ba62000555565b5b6001851615620005cb5780820291505b8081029050620005db8562000584565b94506200059b565b94509492505050565b600082620005fe5760019050620006d1565b816200060e5760009050620006d1565b8160018114620006275760028114620006325762000668565b6001915050620006d1565b60ff84111562000647576200064662000555565b5b8360020a91508482111562000661576200066062000555565b5b50620006d1565b5060208310610133831016604e8410600b8410161715620006a25782820a9050838111156200069c576200069b62000555565b5b620006d1565b620006b1848484600162000591565b92509050818404811115620006cb57620006ca62000555565b5b81810290505b9392505050565b600060ff82169050919050565b6000620006f28262000480565b9150620006ff83620006d8565b92506200072e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484620005ec565b905092915050565b6000620007438262000480565b9150620007508362000480565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156200078c576200078b62000555565b5b828202905092915050565b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000620007e0601f8362000797565b9150620007ed82620007a8565b602082019050919050565b600060208201905081810360008301526200081381620007d1565b9050919050565b6000620008278262000480565b9150620008348362000480565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156200086c576200086b62000555565b5b828201905092915050565b620008828162000480565b82525050565b60006020820190506200089f600083018462000877565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620008ed57607f821691505b60208210811415620009045762000903620008a5565b5b50919050565b611610806200091a6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806342966c681161008c57806395d89b411161006657806395d89b4114610226578063a457c2d714610244578063a9059cbb14610274578063dd62ed3e146102a4576100cf565b806342966c68146101be57806370a08231146101da57806379cc67901461020a576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461012257806323b872dd14610140578063313ce56714610170578063395093511461018e575b600080fd5b6100dc6102d4565b6040516100e99190610d79565b60405180910390f35b61010c60048036038101906101079190610e34565b610366565b6040516101199190610e8f565b60405180910390f35b61012a610389565b6040516101379190610eb9565b60405180910390f35b61015a60048036038101906101559190610ed4565b610393565b6040516101679190610e8f565b60405180910390f35b6101786103c2565b6040516101859190610f43565b60405180910390f35b6101a860048036038101906101a39190610e34565b6103cb565b6040516101b59190610e8f565b60405180910390f35b6101d860048036038101906101d39190610f5e565b610402565b005b6101f460048036038101906101ef9190610f8b565b610416565b6040516102019190610eb9565b60405180910390f35b610224600480360381019061021f9190610e34565b61045e565b005b61022e61047e565b60405161023b9190610d79565b60405180910390f35b61025e60048036038101906102599190610e34565b610510565b60405161026b9190610e8f565b60405180910390f35b61028e60048036038101906102899190610e34565b610587565b60405161029b9190610e8f565b60405180910390f35b6102be60048036038101906102b99190610fb8565b6105aa565b6040516102cb9190610eb9565b60405180910390f35b6060600380546102e390611027565b80601f016020809104026020016040519081016040528092919081815260200182805461030f90611027565b801561035c5780601f106103315761010080835404028352916020019161035c565b820191906000526020600020905b81548152906001019060200180831161033f57829003601f168201915b5050505050905090565b600080610371610631565b905061037e818585610639565b600191505092915050565b6000600254905090565b60008061039e610631565b90506103ab858285610804565b6103b6858585610890565b60019150509392505050565b60006012905090565b6000806103d6610631565b90506103f78185856103e885896105aa565b6103f29190611088565b610639565b600191505092915050565b61041361040d610631565b82610b08565b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6104708261046a610631565b83610804565b61047a8282610b08565b5050565b60606004805461048d90611027565b80601f01602080910402602001604051908101604052809291908181526020018280546104b990611027565b80156105065780601f106104db57610100808354040283529160200191610506565b820191906000526020600020905b8154815290600101906020018083116104e957829003601f168201915b5050505050905090565b60008061051b610631565b9050600061052982866105aa565b90508381101561056e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056590611150565b60405180910390fd5b61057b8286868403610639565b60019250505092915050565b600080610592610631565b905061059f818585610890565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a0906111e2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610719576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071090611274565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107f79190610eb9565b60405180910390a3505050565b600061081084846105aa565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461088a578181101561087c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610873906112e0565b60405180910390fd5b6108898484848403610639565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610900576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f790611372565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610970576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096790611404565b60405180910390fd5b61097b838383610cd6565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610a01576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f890611496565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610aef9190610eb9565b60405180910390a3610b02848484610cdb565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6f90611528565b60405180910390fd5b610b8482600083610cd6565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610c0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c01906115ba565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610cbd9190610eb9565b60405180910390a3610cd183600084610cdb565b505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d1a578082015181840152602081019050610cff565b83811115610d29576000848401525b50505050565b6000601f19601f8301169050919050565b6000610d4b82610ce0565b610d558185610ceb565b9350610d65818560208601610cfc565b610d6e81610d2f565b840191505092915050565b60006020820190508181036000830152610d938184610d40565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610dcb82610da0565b9050919050565b610ddb81610dc0565b8114610de657600080fd5b50565b600081359050610df881610dd2565b92915050565b6000819050919050565b610e1181610dfe565b8114610e1c57600080fd5b50565b600081359050610e2e81610e08565b92915050565b60008060408385031215610e4b57610e4a610d9b565b5b6000610e5985828601610de9565b9250506020610e6a85828601610e1f565b9150509250929050565b60008115159050919050565b610e8981610e74565b82525050565b6000602082019050610ea46000830184610e80565b92915050565b610eb381610dfe565b82525050565b6000602082019050610ece6000830184610eaa565b92915050565b600080600060608486031215610eed57610eec610d9b565b5b6000610efb86828701610de9565b9350506020610f0c86828701610de9565b9250506040610f1d86828701610e1f565b9150509250925092565b600060ff82169050919050565b610f3d81610f27565b82525050565b6000602082019050610f586000830184610f34565b92915050565b600060208284031215610f7457610f73610d9b565b5b6000610f8284828501610e1f565b91505092915050565b600060208284031215610fa157610fa0610d9b565b5b6000610faf84828501610de9565b91505092915050565b60008060408385031215610fcf57610fce610d9b565b5b6000610fdd85828601610de9565b9250506020610fee85828601610de9565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061103f57607f821691505b6020821081141561105357611052610ff8565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061109382610dfe565b915061109e83610dfe565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156110d3576110d2611059565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b600061113a602583610ceb565b9150611145826110de565b604082019050919050565b600060208201905081810360008301526111698161112d565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006111cc602483610ceb565b91506111d782611170565b604082019050919050565b600060208201905081810360008301526111fb816111bf565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061125e602283610ceb565b915061126982611202565b604082019050919050565b6000602082019050818103600083015261128d81611251565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006112ca601d83610ceb565b91506112d582611294565b602082019050919050565b600060208201905081810360008301526112f9816112bd565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061135c602583610ceb565b915061136782611300565b604082019050919050565b6000602082019050818103600083015261138b8161134f565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006113ee602383610ceb565b91506113f982611392565b604082019050919050565b6000602082019050818103600083015261141d816113e1565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000611480602683610ceb565b915061148b82611424565b604082019050919050565b600060208201905081810360008301526114af81611473565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000611512602183610ceb565b915061151d826114b6565b604082019050919050565b6000602082019050818103600083015261154181611505565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b60006115a4602283610ceb565b91506115af82611548565b604082019050919050565b600060208201905081810360008301526115d381611597565b905091905056fea2646970667358221220aa640aca9785bfc9d7cb4dd4c455e401309dfd3ac9baa41fc86be0b97e6345a964736f6c63430008090033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1F2A CODESIZE SUB DUP1 PUSH3 0x1F2A DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x4BB JUMP JUMPDEST DUP3 DUP3 DUP2 PUSH1 0x3 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x51 SWAP3 SWAP2 SWAP1 PUSH3 0x233 JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x6A SWAP3 SWAP2 SWAP1 PUSH3 0x233 JUMP JUMPDEST POP POP POP PUSH3 0xA9 CALLER PUSH3 0x82 PUSH3 0xB2 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0xA PUSH3 0x90 SWAP2 SWAP1 PUSH3 0x6E5 JUMP JUMPDEST DUP4 PUSH3 0x9D SWAP2 SWAP1 PUSH3 0x736 JUMP JUMPDEST PUSH3 0xBB PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP POP POP PUSH3 0x90A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH3 0x12E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x125 SWAP1 PUSH3 0x7F8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x142 PUSH1 0x0 DUP4 DUP4 PUSH3 0x229 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH3 0x156 SWAP2 SWAP1 PUSH3 0x81A JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH3 0x209 SWAP2 SWAP1 PUSH3 0x888 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH3 0x225 PUSH1 0x0 DUP4 DUP4 PUSH3 0x22E PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x241 SWAP1 PUSH3 0x8D4 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x265 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x2B1 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x280 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x2B1 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x2B1 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x2B0 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x293 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0x2C0 SWAP2 SWAP1 PUSH3 0x2C4 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x2DF JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x2C5 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0x34C DUP3 PUSH3 0x301 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x36E JUMPI PUSH3 0x36D PUSH3 0x312 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x383 PUSH3 0x2E3 JUMP JUMPDEST SWAP1 POP PUSH3 0x391 DUP3 DUP3 PUSH3 0x341 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x3B4 JUMPI PUSH3 0x3B3 PUSH3 0x312 JUMP JUMPDEST JUMPDEST PUSH3 0x3BF DUP3 PUSH3 0x301 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x3EC JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x3CF JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x3FC JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x419 PUSH3 0x413 DUP5 PUSH3 0x396 JUMP JUMPDEST PUSH3 0x377 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x438 JUMPI PUSH3 0x437 PUSH3 0x2FC JUMP JUMPDEST JUMPDEST PUSH3 0x445 DUP5 DUP3 DUP6 PUSH3 0x3CC JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x465 JUMPI PUSH3 0x464 PUSH3 0x2F7 JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x477 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x402 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x495 DUP2 PUSH3 0x480 JUMP JUMPDEST DUP2 EQ PUSH3 0x4A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x4B5 DUP2 PUSH3 0x48A JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x4D7 JUMPI PUSH3 0x4D6 PUSH3 0x2ED JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP5 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x4F8 JUMPI PUSH3 0x4F7 PUSH3 0x2F2 JUMP JUMPDEST JUMPDEST PUSH3 0x506 DUP7 DUP3 DUP8 ADD PUSH3 0x44D JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x52A JUMPI PUSH3 0x529 PUSH3 0x2F2 JUMP JUMPDEST JUMPDEST PUSH3 0x538 DUP7 DUP3 DUP8 ADD PUSH3 0x44D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH3 0x54B DUP7 DUP3 DUP8 ADD PUSH3 0x4A4 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP2 POP DUP4 SWAP1 POP JUMPDEST PUSH1 0x1 DUP6 GT ISZERO PUSH3 0x5E3 JUMPI DUP1 DUP7 DIV DUP2 GT ISZERO PUSH3 0x5BB JUMPI PUSH3 0x5BA PUSH3 0x555 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP6 AND ISZERO PUSH3 0x5CB JUMPI DUP1 DUP3 MUL SWAP2 POP JUMPDEST DUP1 DUP2 MUL SWAP1 POP PUSH3 0x5DB DUP6 PUSH3 0x584 JUMP JUMPDEST SWAP5 POP PUSH3 0x59B JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH3 0x5FE JUMPI PUSH1 0x1 SWAP1 POP PUSH3 0x6D1 JUMP JUMPDEST DUP2 PUSH3 0x60E JUMPI PUSH1 0x0 SWAP1 POP PUSH3 0x6D1 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH3 0x627 JUMPI PUSH1 0x2 DUP2 EQ PUSH3 0x632 JUMPI PUSH3 0x668 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH3 0x6D1 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH3 0x647 JUMPI PUSH3 0x646 PUSH3 0x555 JUMP JUMPDEST JUMPDEST DUP4 PUSH1 0x2 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH3 0x661 JUMPI PUSH3 0x660 PUSH3 0x555 JUMP JUMPDEST JUMPDEST POP PUSH3 0x6D1 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH3 0x6A2 JUMPI DUP3 DUP3 EXP SWAP1 POP DUP4 DUP2 GT ISZERO PUSH3 0x69C JUMPI PUSH3 0x69B PUSH3 0x555 JUMP JUMPDEST JUMPDEST PUSH3 0x6D1 JUMP JUMPDEST PUSH3 0x6B1 DUP5 DUP5 DUP5 PUSH1 0x1 PUSH3 0x591 JUMP JUMPDEST SWAP3 POP SWAP1 POP DUP2 DUP5 DIV DUP2 GT ISZERO PUSH3 0x6CB JUMPI PUSH3 0x6CA PUSH3 0x555 JUMP JUMPDEST JUMPDEST DUP2 DUP2 MUL SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x6F2 DUP3 PUSH3 0x480 JUMP JUMPDEST SWAP2 POP PUSH3 0x6FF DUP4 PUSH3 0x6D8 JUMP JUMPDEST SWAP3 POP PUSH3 0x72E PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP5 PUSH3 0x5EC JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x743 DUP3 PUSH3 0x480 JUMP JUMPDEST SWAP2 POP PUSH3 0x750 DUP4 PUSH3 0x480 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH3 0x78C JUMPI PUSH3 0x78B PUSH3 0x555 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x7E0 PUSH1 0x1F DUP4 PUSH3 0x797 JUMP JUMPDEST SWAP2 POP PUSH3 0x7ED DUP3 PUSH3 0x7A8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x813 DUP2 PUSH3 0x7D1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x827 DUP3 PUSH3 0x480 JUMP JUMPDEST SWAP2 POP PUSH3 0x834 DUP4 PUSH3 0x480 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH3 0x86C JUMPI PUSH3 0x86B PUSH3 0x555 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x882 DUP2 PUSH3 0x480 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x89F PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x877 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x8ED JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x904 JUMPI PUSH3 0x903 PUSH3 0x8A5 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1610 DUP1 PUSH3 0x91A PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x42966C68 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x226 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x244 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x274 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x2A4 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x42966C68 EQ PUSH2 0x1BE JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1DA JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x20A JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x140 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x170 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x18E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDC PUSH2 0x2D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0xD79 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x107 SWAP2 SWAP1 PUSH2 0xE34 JUMP JUMPDEST PUSH2 0x366 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0xE8F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x12A PUSH2 0x389 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x137 SWAP2 SWAP1 PUSH2 0xEB9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x15A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x155 SWAP2 SWAP1 PUSH2 0xED4 JUMP JUMPDEST PUSH2 0x393 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x167 SWAP2 SWAP1 PUSH2 0xE8F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x178 PUSH2 0x3C2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x185 SWAP2 SWAP1 PUSH2 0xF43 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A3 SWAP2 SWAP1 PUSH2 0xE34 JUMP JUMPDEST PUSH2 0x3CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B5 SWAP2 SWAP1 PUSH2 0xE8F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D3 SWAP2 SWAP1 PUSH2 0xF5E JUMP JUMPDEST PUSH2 0x402 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1F4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EF SWAP2 SWAP1 PUSH2 0xF8B JUMP JUMPDEST PUSH2 0x416 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x201 SWAP2 SWAP1 PUSH2 0xEB9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x224 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x21F SWAP2 SWAP1 PUSH2 0xE34 JUMP JUMPDEST PUSH2 0x45E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x22E PUSH2 0x47E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23B SWAP2 SWAP1 PUSH2 0xD79 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x25E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x259 SWAP2 SWAP1 PUSH2 0xE34 JUMP JUMPDEST PUSH2 0x510 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26B SWAP2 SWAP1 PUSH2 0xE8F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x28E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x289 SWAP2 SWAP1 PUSH2 0xE34 JUMP JUMPDEST PUSH2 0x587 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29B SWAP2 SWAP1 PUSH2 0xE8F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2BE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2B9 SWAP2 SWAP1 PUSH2 0xFB8 JUMP JUMPDEST PUSH2 0x5AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2CB SWAP2 SWAP1 PUSH2 0xEB9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x2E3 SWAP1 PUSH2 0x1027 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x30F SWAP1 PUSH2 0x1027 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x35C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x331 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x35C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x33F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x371 PUSH2 0x631 JUMP JUMPDEST SWAP1 POP PUSH2 0x37E DUP2 DUP6 DUP6 PUSH2 0x639 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x39E PUSH2 0x631 JUMP JUMPDEST SWAP1 POP PUSH2 0x3AB DUP6 DUP3 DUP6 PUSH2 0x804 JUMP JUMPDEST PUSH2 0x3B6 DUP6 DUP6 DUP6 PUSH2 0x890 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3D6 PUSH2 0x631 JUMP JUMPDEST SWAP1 POP PUSH2 0x3F7 DUP2 DUP6 DUP6 PUSH2 0x3E8 DUP6 DUP10 PUSH2 0x5AA JUMP JUMPDEST PUSH2 0x3F2 SWAP2 SWAP1 PUSH2 0x1088 JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x413 PUSH2 0x40D PUSH2 0x631 JUMP JUMPDEST DUP3 PUSH2 0xB08 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x470 DUP3 PUSH2 0x46A PUSH2 0x631 JUMP JUMPDEST DUP4 PUSH2 0x804 JUMP JUMPDEST PUSH2 0x47A DUP3 DUP3 PUSH2 0xB08 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x48D SWAP1 PUSH2 0x1027 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4B9 SWAP1 PUSH2 0x1027 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x506 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4DB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x506 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4E9 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x51B PUSH2 0x631 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x529 DUP3 DUP7 PUSH2 0x5AA JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x56E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x565 SWAP1 PUSH2 0x1150 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x57B DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x639 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x592 PUSH2 0x631 JUMP JUMPDEST SWAP1 POP PUSH2 0x59F DUP2 DUP6 DUP6 PUSH2 0x890 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x6A9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A0 SWAP1 PUSH2 0x11E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x719 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP1 PUSH2 0x1274 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x7F7 SWAP2 SWAP1 PUSH2 0xEB9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x810 DUP5 DUP5 PUSH2 0x5AA JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x88A JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x87C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x873 SWAP1 PUSH2 0x12E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x889 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x639 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x900 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8F7 SWAP1 PUSH2 0x1372 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x970 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x967 SWAP1 PUSH2 0x1404 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x97B DUP4 DUP4 DUP4 PUSH2 0xCD6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xA01 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F8 SWAP1 PUSH2 0x1496 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xAEF SWAP2 SWAP1 PUSH2 0xEB9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xB02 DUP5 DUP5 DUP5 PUSH2 0xCDB JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xB78 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB6F SWAP1 PUSH2 0x1528 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB84 DUP3 PUSH1 0x0 DUP4 PUSH2 0xCD6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xC0A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC01 SWAP1 PUSH2 0x15BA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xCBD SWAP2 SWAP1 PUSH2 0xEB9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xCD1 DUP4 PUSH1 0x0 DUP5 PUSH2 0xCDB JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD1A JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xCFF JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xD29 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD4B DUP3 PUSH2 0xCE0 JUMP JUMPDEST PUSH2 0xD55 DUP2 DUP6 PUSH2 0xCEB JUMP JUMPDEST SWAP4 POP PUSH2 0xD65 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xCFC JUMP JUMPDEST PUSH2 0xD6E DUP2 PUSH2 0xD2F JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD93 DUP2 DUP5 PUSH2 0xD40 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDCB DUP3 PUSH2 0xDA0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDDB DUP2 PUSH2 0xDC0 JUMP JUMPDEST DUP2 EQ PUSH2 0xDE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xDF8 DUP2 PUSH2 0xDD2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE11 DUP2 PUSH2 0xDFE JUMP JUMPDEST DUP2 EQ PUSH2 0xE1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xE2E DUP2 PUSH2 0xE08 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE4B JUMPI PUSH2 0xE4A PUSH2 0xD9B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xE59 DUP6 DUP3 DUP7 ADD PUSH2 0xDE9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xE6A DUP6 DUP3 DUP7 ADD PUSH2 0xE1F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE89 DUP2 PUSH2 0xE74 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xEA4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xE80 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xEB3 DUP2 PUSH2 0xDFE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xECE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xEAA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xEED JUMPI PUSH2 0xEEC PUSH2 0xD9B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xEFB DUP7 DUP3 DUP8 ADD PUSH2 0xDE9 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xF0C DUP7 DUP3 DUP8 ADD PUSH2 0xDE9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xF1D DUP7 DUP3 DUP8 ADD PUSH2 0xE1F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF3D DUP2 PUSH2 0xF27 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xF58 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xF34 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF74 JUMPI PUSH2 0xF73 PUSH2 0xD9B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xF82 DUP5 DUP3 DUP6 ADD PUSH2 0xE1F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFA1 JUMPI PUSH2 0xFA0 PUSH2 0xD9B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xFAF DUP5 DUP3 DUP6 ADD PUSH2 0xDE9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xFCF JUMPI PUSH2 0xFCE PUSH2 0xD9B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xFDD DUP6 DUP3 DUP7 ADD PUSH2 0xDE9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xFEE DUP6 DUP3 DUP7 ADD PUSH2 0xDE9 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x103F JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1053 JUMPI PUSH2 0x1052 PUSH2 0xFF8 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1093 DUP3 PUSH2 0xDFE JUMP JUMPDEST SWAP2 POP PUSH2 0x109E DUP4 PUSH2 0xDFE JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x10D3 JUMPI PUSH2 0x10D2 PUSH2 0x1059 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x113A PUSH1 0x25 DUP4 PUSH2 0xCEB JUMP JUMPDEST SWAP2 POP PUSH2 0x1145 DUP3 PUSH2 0x10DE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1169 DUP2 PUSH2 0x112D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11CC PUSH1 0x24 DUP4 PUSH2 0xCEB JUMP JUMPDEST SWAP2 POP PUSH2 0x11D7 DUP3 PUSH2 0x1170 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x11FB DUP2 PUSH2 0x11BF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x125E PUSH1 0x22 DUP4 PUSH2 0xCEB JUMP JUMPDEST SWAP2 POP PUSH2 0x1269 DUP3 PUSH2 0x1202 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x128D DUP2 PUSH2 0x1251 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12CA PUSH1 0x1D DUP4 PUSH2 0xCEB JUMP JUMPDEST SWAP2 POP PUSH2 0x12D5 DUP3 PUSH2 0x1294 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x12F9 DUP2 PUSH2 0x12BD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x135C PUSH1 0x25 DUP4 PUSH2 0xCEB JUMP JUMPDEST SWAP2 POP PUSH2 0x1367 DUP3 PUSH2 0x1300 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x138B DUP2 PUSH2 0x134F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13EE PUSH1 0x23 DUP4 PUSH2 0xCEB JUMP JUMPDEST SWAP2 POP PUSH2 0x13F9 DUP3 PUSH2 0x1392 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x141D DUP2 PUSH2 0x13E1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1480 PUSH1 0x26 DUP4 PUSH2 0xCEB JUMP JUMPDEST SWAP2 POP PUSH2 0x148B DUP3 PUSH2 0x1424 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x14AF DUP2 PUSH2 0x1473 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7300000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1512 PUSH1 0x21 DUP4 PUSH2 0xCEB JUMP JUMPDEST SWAP2 POP PUSH2 0x151D DUP3 PUSH2 0x14B6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1541 DUP2 PUSH2 0x1505 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6365000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15A4 PUSH1 0x22 DUP4 PUSH2 0xCEB JUMP JUMPDEST SWAP2 POP PUSH2 0x15AF DUP3 PUSH2 0x1548 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x15D3 DUP2 PUSH2 0x1597 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAA PUSH5 0xACA9785BF 0xC9 0xD7 0xCB 0x4D 0xD4 0xC4 SSTORE 0xE4 ADD ADDRESS SWAP14 REVERT GASPRICE 0xC9 0xBA LOG4 0x1F 0xC8 PUSH12 0xE0B97E6345A964736F6C6343 STOP ADDMOD MULMOD STOP CALLER ","sourceMap":"189:234:23:-:0;;;234:187;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;344:4;350:6;2050:5:1;2042;:13;;;;;;;;;;;;:::i;:::-;;2075:7;2065;:17;;;;;;;;;;;;:::i;:::-;;1976:113;;368:46:23::1;374:10;403;:8;;;:10;;:::i;:::-;399:2;:14;;;;:::i;:::-;386:10;:27;;;;:::i;:::-;368:5;;;:46;;:::i;:::-;234:187:::0;;;189:234;;3091:91:1;3149:5;3173:2;3166:9;;3091:91;:::o;8567:535::-;8669:1;8650:21;;:7;:21;;;;8642:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;8718:49;8747:1;8751:7;8760:6;8718:20;;;:49;;:::i;:::-;8794:6;8778:12;;:22;;;;;;;:::i;:::-;;;;;;;;8968:6;8946:9;:18;8956:7;8946:18;;;;;;;;;;;;;;;;:28;;;;;;;;;;;9020:7;8999:37;;9016:1;8999:37;;;9029:6;8999:37;;;;;;:::i;:::-;;;;;;;;9047:48;9075:1;9079:7;9088:6;9047:19;;;:48;;:::i;:::-;8567:535;;:::o;12180:121::-;;;;:::o;12889:120::-;;;;:::o;189:234:23:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:75:26:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:117;566:1;563;556:12;580:102;621:6;672:2;668:7;663:2;656:5;652:14;648:28;638:38;;580:102;;;:::o;688:180::-;736:77;733:1;726:88;833:4;830:1;823:15;857:4;854:1;847:15;874:281;957:27;979:4;957:27;:::i;:::-;949:6;945:40;1087:6;1075:10;1072:22;1051:18;1039:10;1036:34;1033:62;1030:88;;;1098:18;;:::i;:::-;1030:88;1138:10;1134:2;1127:22;917:238;874:281;;:::o;1161:129::-;1195:6;1222:20;;:::i;:::-;1212:30;;1251:33;1279:4;1271:6;1251:33;:::i;:::-;1161:129;;;:::o;1296:308::-;1358:4;1448:18;1440:6;1437:30;1434:56;;;1470:18;;:::i;:::-;1434:56;1508:29;1530:6;1508:29;:::i;:::-;1500:37;;1592:4;1586;1582:15;1574:23;;1296:308;;;:::o;1610:307::-;1678:1;1688:113;1702:6;1699:1;1696:13;1688:113;;;1787:1;1782:3;1778:11;1772:18;1768:1;1763:3;1759:11;1752:39;1724:2;1721:1;1717:10;1712:15;;1688:113;;;1819:6;1816:1;1813:13;1810:101;;;1899:1;1890:6;1885:3;1881:16;1874:27;1810:101;1659:258;1610:307;;;:::o;1923:421::-;2012:5;2037:66;2053:49;2095:6;2053:49;:::i;:::-;2037:66;:::i;:::-;2028:75;;2126:6;2119:5;2112:21;2164:4;2157:5;2153:16;2202:3;2193:6;2188:3;2184:16;2181:25;2178:112;;;2209:79;;:::i;:::-;2178:112;2299:39;2331:6;2326:3;2321;2299:39;:::i;:::-;2018:326;1923:421;;;;;:::o;2364:355::-;2431:5;2480:3;2473:4;2465:6;2461:17;2457:27;2447:122;;2488:79;;:::i;:::-;2447:122;2598:6;2592:13;2623:90;2709:3;2701:6;2694:4;2686:6;2682:17;2623:90;:::i;:::-;2614:99;;2437:282;2364:355;;;;:::o;2725:77::-;2762:7;2791:5;2780:16;;2725:77;;;:::o;2808:122::-;2881:24;2899:5;2881:24;:::i;:::-;2874:5;2871:35;2861:63;;2920:1;2917;2910:12;2861:63;2808:122;:::o;2936:143::-;2993:5;3024:6;3018:13;3009:22;;3040:33;3067:5;3040:33;:::i;:::-;2936:143;;;;:::o;3085:1009::-;3193:6;3201;3209;3258:2;3246:9;3237:7;3233:23;3229:32;3226:119;;;3264:79;;:::i;:::-;3226:119;3405:1;3394:9;3390:17;3384:24;3435:18;3427:6;3424:30;3421:117;;;3457:79;;:::i;:::-;3421:117;3562:74;3628:7;3619:6;3608:9;3604:22;3562:74;:::i;:::-;3552:84;;3355:291;3706:2;3695:9;3691:18;3685:25;3737:18;3729:6;3726:30;3723:117;;;3759:79;;:::i;:::-;3723:117;3864:74;3930:7;3921:6;3910:9;3906:22;3864:74;:::i;:::-;3854:84;;3656:292;3987:2;4013:64;4069:7;4060:6;4049:9;4045:22;4013:64;:::i;:::-;4003:74;;3958:129;3085:1009;;;;;:::o;4100:180::-;4148:77;4145:1;4138:88;4245:4;4242:1;4235:15;4269:4;4266:1;4259:15;4286:102;4328:8;4375:5;4372:1;4368:13;4347:34;;4286:102;;;:::o;4394:848::-;4455:5;4462:4;4486:6;4477:15;;4510:5;4501:14;;4524:712;4545:1;4535:8;4532:15;4524:712;;;4640:4;4635:3;4631:14;4625:4;4622:24;4619:50;;;4649:18;;:::i;:::-;4619:50;4699:1;4689:8;4685:16;4682:451;;;5114:4;5107:5;5103:16;5094:25;;4682:451;5164:4;5158;5154:15;5146:23;;5194:32;5217:8;5194:32;:::i;:::-;5182:44;;4524:712;;;4394:848;;;;;;;:::o;5248:1073::-;5302:5;5493:8;5483:40;;5514:1;5505:10;;5516:5;;5483:40;5542:4;5532:36;;5559:1;5550:10;;5561:5;;5532:36;5628:4;5676:1;5671:27;;;;5712:1;5707:191;;;;5621:277;;5671:27;5689:1;5680:10;;5691:5;;;5707:191;5752:3;5742:8;5739:17;5736:43;;;5759:18;;:::i;:::-;5736:43;5808:8;5805:1;5801:16;5792:25;;5843:3;5836:5;5833:14;5830:40;;;5850:18;;:::i;:::-;5830:40;5883:5;;;5621:277;;6007:2;5997:8;5994:16;5988:3;5982:4;5979:13;5975:36;5957:2;5947:8;5944:16;5939:2;5933:4;5930:12;5926:35;5910:111;5907:246;;;6063:8;6057:4;6053:19;6044:28;;6098:3;6091:5;6088:14;6085:40;;;6105:18;;:::i;:::-;6085:40;6138:5;;5907:246;6178:42;6216:3;6206:8;6200:4;6197:1;6178:42;:::i;:::-;6163:57;;;;6252:4;6247:3;6243:14;6236:5;6233:25;6230:51;;;6261:18;;:::i;:::-;6230:51;6310:4;6303:5;6299:16;6290:25;;5248:1073;;;;;;:::o;6327:86::-;6362:7;6402:4;6395:5;6391:16;6380:27;;6327:86;;;:::o;6419:281::-;6477:5;6501:23;6519:4;6501:23;:::i;:::-;6493:31;;6545:25;6561:8;6545:25;:::i;:::-;6533:37;;6589:104;6626:66;6616:8;6610:4;6589:104;:::i;:::-;6580:113;;6419:281;;;;:::o;6706:348::-;6746:7;6769:20;6787:1;6769:20;:::i;:::-;6764:25;;6803:20;6821:1;6803:20;:::i;:::-;6798:25;;6991:1;6923:66;6919:74;6916:1;6913:81;6908:1;6901:9;6894:17;6890:105;6887:131;;;6998:18;;:::i;:::-;6887:131;7046:1;7043;7039:9;7028:20;;6706:348;;;;:::o;7060:169::-;7144:11;7178:6;7173:3;7166:19;7218:4;7213:3;7209:14;7194:29;;7060:169;;;;:::o;7235:181::-;7375:33;7371:1;7363:6;7359:14;7352:57;7235:181;:::o;7422:366::-;7564:3;7585:67;7649:2;7644:3;7585:67;:::i;:::-;7578:74;;7661:93;7750:3;7661:93;:::i;:::-;7779:2;7774:3;7770:12;7763:19;;7422:366;;;:::o;7794:419::-;7960:4;7998:2;7987:9;7983:18;7975:26;;8047:9;8041:4;8037:20;8033:1;8022:9;8018:17;8011:47;8075:131;8201:4;8075:131;:::i;:::-;8067:139;;7794:419;;;:::o;8219:305::-;8259:3;8278:20;8296:1;8278:20;:::i;:::-;8273:25;;8312:20;8330:1;8312:20;:::i;:::-;8307:25;;8466:1;8398:66;8394:74;8391:1;8388:81;8385:107;;;8472:18;;:::i;:::-;8385:107;8516:1;8513;8509:9;8502:16;;8219:305;;;;:::o;8530:118::-;8617:24;8635:5;8617:24;:::i;:::-;8612:3;8605:37;8530:118;;:::o;8654:222::-;8747:4;8785:2;8774:9;8770:18;8762:26;;8798:71;8866:1;8855:9;8851:17;8842:6;8798:71;:::i;:::-;8654:222;;;;:::o;8882:180::-;8930:77;8927:1;8920:88;9027:4;9024:1;9017:15;9051:4;9048:1;9041:15;9068:320;9112:6;9149:1;9143:4;9139:12;9129:22;;9196:1;9190:4;9186:12;9217:18;9207:81;;9273:4;9265:6;9261:17;9251:27;;9207:81;9335:2;9327:6;9324:14;9304:18;9301:38;9298:84;;;9354:18;;:::i;:::-;9298:84;9119:269;9068:320;;;:::o;189:234:23:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_698":{"entryPoint":3291,"id":698,"parameterSlots":3,"returnSlots":0},"@_approve_633":{"entryPoint":1593,"id":633,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_687":{"entryPoint":3286,"id":687,"parameterSlots":3,"returnSlots":0},"@_burn_588":{"entryPoint":2824,"id":588,"parameterSlots":2,"returnSlots":0},"@_msgSender_3012":{"entryPoint":1585,"id":3012,"parameterSlots":0,"returnSlots":1},"@_spendAllowance_676":{"entryPoint":2052,"id":676,"parameterSlots":3,"returnSlots":0},"@_transfer_459":{"entryPoint":2192,"id":459,"parameterSlots":3,"returnSlots":0},"@allowance_254":{"entryPoint":1450,"id":254,"parameterSlots":2,"returnSlots":1},"@approve_279":{"entryPoint":870,"id":279,"parameterSlots":2,"returnSlots":1},"@balanceOf_211":{"entryPoint":1046,"id":211,"parameterSlots":1,"returnSlots":1},"@burnFrom_820":{"entryPoint":1118,"id":820,"parameterSlots":2,"returnSlots":0},"@burn_799":{"entryPoint":1026,"id":799,"parameterSlots":1,"returnSlots":0},"@decimals_187":{"entryPoint":962,"id":187,"parameterSlots":0,"returnSlots":1},"@decreaseAllowance_382":{"entryPoint":1296,"id":382,"parameterSlots":2,"returnSlots":1},"@increaseAllowance_341":{"entryPoint":971,"id":341,"parameterSlots":2,"returnSlots":1},"@name_167":{"entryPoint":724,"id":167,"parameterSlots":0,"returnSlots":1},"@symbol_177":{"entryPoint":1150,"id":177,"parameterSlots":0,"returnSlots":1},"@totalSupply_197":{"entryPoint":905,"id":197,"parameterSlots":0,"returnSlots":1},"@transferFrom_312":{"entryPoint":915,"id":312,"parameterSlots":3,"returnSlots":1},"@transfer_236":{"entryPoint":1415,"id":236,"parameterSlots":2,"returnSlots":1},"abi_decode_t_address":{"entryPoint":3561,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":3615,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3979,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":4024,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":3796,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":3636,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256":{"entryPoint":3934,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":3712,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":3392,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack":{"entryPoint":5089,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd_to_t_string_memory_ptr_fromStack":{"entryPoint":5527,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack":{"entryPoint":4689,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack":{"entryPoint":4797,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack":{"entryPoint":5235,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f_to_t_string_memory_ptr_fromStack":{"entryPoint":5381,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack":{"entryPoint":4943,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack":{"entryPoint":4543,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack":{"entryPoint":4397,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":3754,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":3892,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":3727,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3449,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5124,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5562,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4724,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4832,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5270,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5416,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4978,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4578,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4432,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":3769,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":3907,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":3296,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":3307,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":4232,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":3520,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":3700,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":3488,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":3582,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":3879,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":3324,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":4135,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":4185,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":4088,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":3483,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":3375,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f":{"entryPoint":5010,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd":{"entryPoint":5448,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029":{"entryPoint":4610,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe":{"entryPoint":4756,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6":{"entryPoint":5156,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f":{"entryPoint":5302,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea":{"entryPoint":4864,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208":{"entryPoint":4464,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8":{"entryPoint":4318,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":3538,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":3592,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:16243:26","statements":[{"body":{"nodeType":"YulBlock","src":"66:40:26","statements":[{"nodeType":"YulAssignment","src":"77:22:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"93:5:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"87:5:26"},"nodeType":"YulFunctionCall","src":"87:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"77:6:26"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"49:5:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"59:6:26","type":""}],"src":"7:99:26"},{"body":{"nodeType":"YulBlock","src":"208:73:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"225:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"230:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"218:6:26"},"nodeType":"YulFunctionCall","src":"218:19:26"},"nodeType":"YulExpressionStatement","src":"218:19:26"},{"nodeType":"YulAssignment","src":"246:29:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"265:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"270:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"261:3:26"},"nodeType":"YulFunctionCall","src":"261:14:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"246:11:26"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"180:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"185:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"196:11:26","type":""}],"src":"112:169:26"},{"body":{"nodeType":"YulBlock","src":"336:258:26","statements":[{"nodeType":"YulVariableDeclaration","src":"346:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"355:1:26","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"350:1:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"415:63:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"440:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"445:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"436:3:26"},"nodeType":"YulFunctionCall","src":"436:11:26"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"459:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"464:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"455:3:26"},"nodeType":"YulFunctionCall","src":"455:11:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"449:5:26"},"nodeType":"YulFunctionCall","src":"449:18:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"429:6:26"},"nodeType":"YulFunctionCall","src":"429:39:26"},"nodeType":"YulExpressionStatement","src":"429:39:26"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"376:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"379:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"373:2:26"},"nodeType":"YulFunctionCall","src":"373:13:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"387:19:26","statements":[{"nodeType":"YulAssignment","src":"389:15:26","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"398:1:26"},{"kind":"number","nodeType":"YulLiteral","src":"401:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"394:3:26"},"nodeType":"YulFunctionCall","src":"394:10:26"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"389:1:26"}]}]},"pre":{"nodeType":"YulBlock","src":"369:3:26","statements":[]},"src":"365:113:26"},{"body":{"nodeType":"YulBlock","src":"512:76:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"562:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"567:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"558:3:26"},"nodeType":"YulFunctionCall","src":"558:16:26"},{"kind":"number","nodeType":"YulLiteral","src":"576:1:26","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"551:6:26"},"nodeType":"YulFunctionCall","src":"551:27:26"},"nodeType":"YulExpressionStatement","src":"551:27:26"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"493:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"496:6:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"490:2:26"},"nodeType":"YulFunctionCall","src":"490:13:26"},"nodeType":"YulIf","src":"487:101:26"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"318:3:26","type":""},{"name":"dst","nodeType":"YulTypedName","src":"323:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"328:6:26","type":""}],"src":"287:307:26"},{"body":{"nodeType":"YulBlock","src":"648:54:26","statements":[{"nodeType":"YulAssignment","src":"658:38:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"683:2:26","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"672:3:26"},"nodeType":"YulFunctionCall","src":"672:14:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"692:2:26","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"688:3:26"},"nodeType":"YulFunctionCall","src":"688:7:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"668:3:26"},"nodeType":"YulFunctionCall","src":"668:28:26"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"658:6:26"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"631:5:26","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"641:6:26","type":""}],"src":"600:102:26"},{"body":{"nodeType":"YulBlock","src":"800:272:26","statements":[{"nodeType":"YulVariableDeclaration","src":"810:53:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"857:5:26"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"824:32:26"},"nodeType":"YulFunctionCall","src":"824:39:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"814:6:26","type":""}]},{"nodeType":"YulAssignment","src":"872:78:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"938:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"943:6:26"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"879:58:26"},"nodeType":"YulFunctionCall","src":"879:71:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"872:3:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"985:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"992:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"981:3:26"},"nodeType":"YulFunctionCall","src":"981:16:26"},{"name":"pos","nodeType":"YulIdentifier","src":"999:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"1004:6:26"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"959:21:26"},"nodeType":"YulFunctionCall","src":"959:52:26"},"nodeType":"YulExpressionStatement","src":"959:52:26"},{"nodeType":"YulAssignment","src":"1020:46:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1031:3:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1058:6:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1036:21:26"},"nodeType":"YulFunctionCall","src":"1036:29:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1027:3:26"},"nodeType":"YulFunctionCall","src":"1027:39:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1020:3:26"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"781:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"788:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"796:3:26","type":""}],"src":"708:364:26"},{"body":{"nodeType":"YulBlock","src":"1196:195:26","statements":[{"nodeType":"YulAssignment","src":"1206:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1218:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1229:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1214:3:26"},"nodeType":"YulFunctionCall","src":"1214:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1206:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1253:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1264:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1249:3:26"},"nodeType":"YulFunctionCall","src":"1249:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1272:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"1278:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1268:3:26"},"nodeType":"YulFunctionCall","src":"1268:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1242:6:26"},"nodeType":"YulFunctionCall","src":"1242:47:26"},"nodeType":"YulExpressionStatement","src":"1242:47:26"},{"nodeType":"YulAssignment","src":"1298:86:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1370:6:26"},{"name":"tail","nodeType":"YulIdentifier","src":"1379:4:26"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"1306:63:26"},"nodeType":"YulFunctionCall","src":"1306:78:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1298:4:26"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1168:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1180:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1191:4:26","type":""}],"src":"1078:313:26"},{"body":{"nodeType":"YulBlock","src":"1437:35:26","statements":[{"nodeType":"YulAssignment","src":"1447:19:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1463:2:26","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1457:5:26"},"nodeType":"YulFunctionCall","src":"1457:9:26"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1447:6:26"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1430:6:26","type":""}],"src":"1397:75:26"},{"body":{"nodeType":"YulBlock","src":"1567:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1584:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1587:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1577:6:26"},"nodeType":"YulFunctionCall","src":"1577:12:26"},"nodeType":"YulExpressionStatement","src":"1577:12:26"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"1478:117:26"},{"body":{"nodeType":"YulBlock","src":"1690:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1707:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1710:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1700:6:26"},"nodeType":"YulFunctionCall","src":"1700:12:26"},"nodeType":"YulExpressionStatement","src":"1700:12:26"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"1601:117:26"},{"body":{"nodeType":"YulBlock","src":"1769:81:26","statements":[{"nodeType":"YulAssignment","src":"1779:65:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1794:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"1801:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1790:3:26"},"nodeType":"YulFunctionCall","src":"1790:54:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1779:7:26"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1751:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1761:7:26","type":""}],"src":"1724:126:26"},{"body":{"nodeType":"YulBlock","src":"1901:51:26","statements":[{"nodeType":"YulAssignment","src":"1911:35:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1940:5:26"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"1922:17:26"},"nodeType":"YulFunctionCall","src":"1922:24:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1911:7:26"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1883:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1893:7:26","type":""}],"src":"1856:96:26"},{"body":{"nodeType":"YulBlock","src":"2001:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"2058:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2067:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2070:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2060:6:26"},"nodeType":"YulFunctionCall","src":"2060:12:26"},"nodeType":"YulExpressionStatement","src":"2060:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2024:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2049:5:26"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"2031:17:26"},"nodeType":"YulFunctionCall","src":"2031:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2021:2:26"},"nodeType":"YulFunctionCall","src":"2021:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2014:6:26"},"nodeType":"YulFunctionCall","src":"2014:43:26"},"nodeType":"YulIf","src":"2011:63:26"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1994:5:26","type":""}],"src":"1958:122:26"},{"body":{"nodeType":"YulBlock","src":"2138:87:26","statements":[{"nodeType":"YulAssignment","src":"2148:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2170:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2157:12:26"},"nodeType":"YulFunctionCall","src":"2157:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2148:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2213:5:26"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"2186:26:26"},"nodeType":"YulFunctionCall","src":"2186:33:26"},"nodeType":"YulExpressionStatement","src":"2186:33:26"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2116:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"2124:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2132:5:26","type":""}],"src":"2086:139:26"},{"body":{"nodeType":"YulBlock","src":"2276:32:26","statements":[{"nodeType":"YulAssignment","src":"2286:16:26","value":{"name":"value","nodeType":"YulIdentifier","src":"2297:5:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2286:7:26"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2258:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2268:7:26","type":""}],"src":"2231:77:26"},{"body":{"nodeType":"YulBlock","src":"2357:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"2414:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2423:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2426:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2416:6:26"},"nodeType":"YulFunctionCall","src":"2416:12:26"},"nodeType":"YulExpressionStatement","src":"2416:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2380:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2405:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2387:17:26"},"nodeType":"YulFunctionCall","src":"2387:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2377:2:26"},"nodeType":"YulFunctionCall","src":"2377:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2370:6:26"},"nodeType":"YulFunctionCall","src":"2370:43:26"},"nodeType":"YulIf","src":"2367:63:26"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2350:5:26","type":""}],"src":"2314:122:26"},{"body":{"nodeType":"YulBlock","src":"2494:87:26","statements":[{"nodeType":"YulAssignment","src":"2504:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2526:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2513:12:26"},"nodeType":"YulFunctionCall","src":"2513:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2504:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2569:5:26"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"2542:26:26"},"nodeType":"YulFunctionCall","src":"2542:33:26"},"nodeType":"YulExpressionStatement","src":"2542:33:26"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2472:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"2480:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2488:5:26","type":""}],"src":"2442:139:26"},{"body":{"nodeType":"YulBlock","src":"2670:391:26","statements":[{"body":{"nodeType":"YulBlock","src":"2716:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2718:77:26"},"nodeType":"YulFunctionCall","src":"2718:79:26"},"nodeType":"YulExpressionStatement","src":"2718:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2691:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"2700:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2687:3:26"},"nodeType":"YulFunctionCall","src":"2687:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"2712:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2683:3:26"},"nodeType":"YulFunctionCall","src":"2683:32:26"},"nodeType":"YulIf","src":"2680:119:26"},{"nodeType":"YulBlock","src":"2809:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"2824:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"2838:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2828:6:26","type":""}]},{"nodeType":"YulAssignment","src":"2853:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2888:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"2899:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2884:3:26"},"nodeType":"YulFunctionCall","src":"2884:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2908:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2863:20:26"},"nodeType":"YulFunctionCall","src":"2863:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2853:6:26"}]}]},{"nodeType":"YulBlock","src":"2936:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"2951:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"2965:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2955:6:26","type":""}]},{"nodeType":"YulAssignment","src":"2981:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3016:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"3027:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3012:3:26"},"nodeType":"YulFunctionCall","src":"3012:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3036:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2991:20:26"},"nodeType":"YulFunctionCall","src":"2991:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2981:6:26"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2632:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2643:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2655:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2663:6:26","type":""}],"src":"2587:474:26"},{"body":{"nodeType":"YulBlock","src":"3109:48:26","statements":[{"nodeType":"YulAssignment","src":"3119:32:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3144:5:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3137:6:26"},"nodeType":"YulFunctionCall","src":"3137:13:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3130:6:26"},"nodeType":"YulFunctionCall","src":"3130:21:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3119:7:26"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3091:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3101:7:26","type":""}],"src":"3067:90:26"},{"body":{"nodeType":"YulBlock","src":"3222:50:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3239:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3259:5:26"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"3244:14:26"},"nodeType":"YulFunctionCall","src":"3244:21:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3232:6:26"},"nodeType":"YulFunctionCall","src":"3232:34:26"},"nodeType":"YulExpressionStatement","src":"3232:34:26"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3210:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3217:3:26","type":""}],"src":"3163:109:26"},{"body":{"nodeType":"YulBlock","src":"3370:118:26","statements":[{"nodeType":"YulAssignment","src":"3380:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3392:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3403:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3388:3:26"},"nodeType":"YulFunctionCall","src":"3388:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3380:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3454:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3467:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3478:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3463:3:26"},"nodeType":"YulFunctionCall","src":"3463:17:26"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"3416:37:26"},"nodeType":"YulFunctionCall","src":"3416:65:26"},"nodeType":"YulExpressionStatement","src":"3416:65:26"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3342:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3354:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3365:4:26","type":""}],"src":"3278:210:26"},{"body":{"nodeType":"YulBlock","src":"3559:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3576:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3599:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3581:17:26"},"nodeType":"YulFunctionCall","src":"3581:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3569:6:26"},"nodeType":"YulFunctionCall","src":"3569:37:26"},"nodeType":"YulExpressionStatement","src":"3569:37:26"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3547:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3554:3:26","type":""}],"src":"3494:118:26"},{"body":{"nodeType":"YulBlock","src":"3716:124:26","statements":[{"nodeType":"YulAssignment","src":"3726:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3738:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3749:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3734:3:26"},"nodeType":"YulFunctionCall","src":"3734:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3726:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3806:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3819:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3830:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3815:3:26"},"nodeType":"YulFunctionCall","src":"3815:17:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"3762:43:26"},"nodeType":"YulFunctionCall","src":"3762:71:26"},"nodeType":"YulExpressionStatement","src":"3762:71:26"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3688:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3700:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3711:4:26","type":""}],"src":"3618:222:26"},{"body":{"nodeType":"YulBlock","src":"3946:519:26","statements":[{"body":{"nodeType":"YulBlock","src":"3992:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3994:77:26"},"nodeType":"YulFunctionCall","src":"3994:79:26"},"nodeType":"YulExpressionStatement","src":"3994:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3967:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"3976:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3963:3:26"},"nodeType":"YulFunctionCall","src":"3963:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"3988:2:26","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3959:3:26"},"nodeType":"YulFunctionCall","src":"3959:32:26"},"nodeType":"YulIf","src":"3956:119:26"},{"nodeType":"YulBlock","src":"4085:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"4100:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"4114:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4104:6:26","type":""}]},{"nodeType":"YulAssignment","src":"4129:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4164:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"4175:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4160:3:26"},"nodeType":"YulFunctionCall","src":"4160:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4184:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4139:20:26"},"nodeType":"YulFunctionCall","src":"4139:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4129:6:26"}]}]},{"nodeType":"YulBlock","src":"4212:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"4227:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"4241:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4231:6:26","type":""}]},{"nodeType":"YulAssignment","src":"4257:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4292:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"4303:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4288:3:26"},"nodeType":"YulFunctionCall","src":"4288:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4312:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4267:20:26"},"nodeType":"YulFunctionCall","src":"4267:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4257:6:26"}]}]},{"nodeType":"YulBlock","src":"4340:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"4355:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"4369:2:26","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4359:6:26","type":""}]},{"nodeType":"YulAssignment","src":"4385:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4420:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"4431:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4416:3:26"},"nodeType":"YulFunctionCall","src":"4416:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4440:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4395:20:26"},"nodeType":"YulFunctionCall","src":"4395:53:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4385:6:26"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3900:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3911:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3923:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3931:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3939:6:26","type":""}],"src":"3846:619:26"},{"body":{"nodeType":"YulBlock","src":"4514:43:26","statements":[{"nodeType":"YulAssignment","src":"4524:27:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4539:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"4546:4:26","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4535:3:26"},"nodeType":"YulFunctionCall","src":"4535:16:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4524:7:26"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4496:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4506:7:26","type":""}],"src":"4471:86:26"},{"body":{"nodeType":"YulBlock","src":"4624:51:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4641:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4662:5:26"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"4646:15:26"},"nodeType":"YulFunctionCall","src":"4646:22:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4634:6:26"},"nodeType":"YulFunctionCall","src":"4634:35:26"},"nodeType":"YulExpressionStatement","src":"4634:35:26"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4612:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4619:3:26","type":""}],"src":"4563:112:26"},{"body":{"nodeType":"YulBlock","src":"4775:120:26","statements":[{"nodeType":"YulAssignment","src":"4785:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4797:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4808:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4793:3:26"},"nodeType":"YulFunctionCall","src":"4793:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4785:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4861:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4874:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4885:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4870:3:26"},"nodeType":"YulFunctionCall","src":"4870:17:26"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"4821:39:26"},"nodeType":"YulFunctionCall","src":"4821:67:26"},"nodeType":"YulExpressionStatement","src":"4821:67:26"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4747:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4759:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4770:4:26","type":""}],"src":"4681:214:26"},{"body":{"nodeType":"YulBlock","src":"4967:263:26","statements":[{"body":{"nodeType":"YulBlock","src":"5013:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5015:77:26"},"nodeType":"YulFunctionCall","src":"5015:79:26"},"nodeType":"YulExpressionStatement","src":"5015:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4988:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"4997:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4984:3:26"},"nodeType":"YulFunctionCall","src":"4984:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"5009:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4980:3:26"},"nodeType":"YulFunctionCall","src":"4980:32:26"},"nodeType":"YulIf","src":"4977:119:26"},{"nodeType":"YulBlock","src":"5106:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"5121:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"5135:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5125:6:26","type":""}]},{"nodeType":"YulAssignment","src":"5150:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5185:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"5196:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5181:3:26"},"nodeType":"YulFunctionCall","src":"5181:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5205:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5160:20:26"},"nodeType":"YulFunctionCall","src":"5160:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5150:6:26"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4937:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4948:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4960:6:26","type":""}],"src":"4901:329:26"},{"body":{"nodeType":"YulBlock","src":"5302:263:26","statements":[{"body":{"nodeType":"YulBlock","src":"5348:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5350:77:26"},"nodeType":"YulFunctionCall","src":"5350:79:26"},"nodeType":"YulExpressionStatement","src":"5350:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5323:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"5332:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5319:3:26"},"nodeType":"YulFunctionCall","src":"5319:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"5344:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5315:3:26"},"nodeType":"YulFunctionCall","src":"5315:32:26"},"nodeType":"YulIf","src":"5312:119:26"},{"nodeType":"YulBlock","src":"5441:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"5456:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"5470:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5460:6:26","type":""}]},{"nodeType":"YulAssignment","src":"5485:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5520:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"5531:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5516:3:26"},"nodeType":"YulFunctionCall","src":"5516:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5540:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5495:20:26"},"nodeType":"YulFunctionCall","src":"5495:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5485:6:26"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5272:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5283:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5295:6:26","type":""}],"src":"5236:329:26"},{"body":{"nodeType":"YulBlock","src":"5654:391:26","statements":[{"body":{"nodeType":"YulBlock","src":"5700:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5702:77:26"},"nodeType":"YulFunctionCall","src":"5702:79:26"},"nodeType":"YulExpressionStatement","src":"5702:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5675:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"5684:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5671:3:26"},"nodeType":"YulFunctionCall","src":"5671:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"5696:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5667:3:26"},"nodeType":"YulFunctionCall","src":"5667:32:26"},"nodeType":"YulIf","src":"5664:119:26"},{"nodeType":"YulBlock","src":"5793:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"5808:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"5822:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5812:6:26","type":""}]},{"nodeType":"YulAssignment","src":"5837:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5872:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"5883:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5868:3:26"},"nodeType":"YulFunctionCall","src":"5868:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5892:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5847:20:26"},"nodeType":"YulFunctionCall","src":"5847:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5837:6:26"}]}]},{"nodeType":"YulBlock","src":"5920:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"5935:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"5949:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5939:6:26","type":""}]},{"nodeType":"YulAssignment","src":"5965:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6000:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"6011:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5996:3:26"},"nodeType":"YulFunctionCall","src":"5996:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6020:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5975:20:26"},"nodeType":"YulFunctionCall","src":"5975:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5965:6:26"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5616:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5627:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5639:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5647:6:26","type":""}],"src":"5571:474:26"},{"body":{"nodeType":"YulBlock","src":"6079:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6096:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6099:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6089:6:26"},"nodeType":"YulFunctionCall","src":"6089:88:26"},"nodeType":"YulExpressionStatement","src":"6089:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6193:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6196:4:26","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6186:6:26"},"nodeType":"YulFunctionCall","src":"6186:15:26"},"nodeType":"YulExpressionStatement","src":"6186:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6217:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6220:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6210:6:26"},"nodeType":"YulFunctionCall","src":"6210:15:26"},"nodeType":"YulExpressionStatement","src":"6210:15:26"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"6051:180:26"},{"body":{"nodeType":"YulBlock","src":"6288:269:26","statements":[{"nodeType":"YulAssignment","src":"6298:22:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6312:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"6318:1:26","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6308:3:26"},"nodeType":"YulFunctionCall","src":"6308:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6298:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"6329:38:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6359:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"6365:1:26","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6355:3:26"},"nodeType":"YulFunctionCall","src":"6355:12:26"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"6333:18:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"6406:51:26","statements":[{"nodeType":"YulAssignment","src":"6420:27:26","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6434:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"6442:4:26","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6430:3:26"},"nodeType":"YulFunctionCall","src":"6430:17:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6420:6:26"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6386:18:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6379:6:26"},"nodeType":"YulFunctionCall","src":"6379:26:26"},"nodeType":"YulIf","src":"6376:81:26"},{"body":{"nodeType":"YulBlock","src":"6509:42:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"6523:16:26"},"nodeType":"YulFunctionCall","src":"6523:18:26"},"nodeType":"YulExpressionStatement","src":"6523:18:26"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6473:18:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6496:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"6504:2:26","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6493:2:26"},"nodeType":"YulFunctionCall","src":"6493:14:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6470:2:26"},"nodeType":"YulFunctionCall","src":"6470:38:26"},"nodeType":"YulIf","src":"6467:84:26"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"6272:4:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"6281:6:26","type":""}],"src":"6237:320:26"},{"body":{"nodeType":"YulBlock","src":"6591:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6608:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6611:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6601:6:26"},"nodeType":"YulFunctionCall","src":"6601:88:26"},"nodeType":"YulExpressionStatement","src":"6601:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6705:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6708:4:26","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6698:6:26"},"nodeType":"YulFunctionCall","src":"6698:15:26"},"nodeType":"YulExpressionStatement","src":"6698:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6729:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6732:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6722:6:26"},"nodeType":"YulFunctionCall","src":"6722:15:26"},"nodeType":"YulExpressionStatement","src":"6722:15:26"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"6563:180:26"},{"body":{"nodeType":"YulBlock","src":"6793:261:26","statements":[{"nodeType":"YulAssignment","src":"6803:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6826:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6808:17:26"},"nodeType":"YulFunctionCall","src":"6808:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"6803:1:26"}]},{"nodeType":"YulAssignment","src":"6837:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"6860:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6842:17:26"},"nodeType":"YulFunctionCall","src":"6842:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"6837:1:26"}]},{"body":{"nodeType":"YulBlock","src":"7000:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"7002:16:26"},"nodeType":"YulFunctionCall","src":"7002:18:26"},"nodeType":"YulExpressionStatement","src":"7002:18:26"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6921:1:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6928:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"y","nodeType":"YulIdentifier","src":"6996:1:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6924:3:26"},"nodeType":"YulFunctionCall","src":"6924:74:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6918:2:26"},"nodeType":"YulFunctionCall","src":"6918:81:26"},"nodeType":"YulIf","src":"6915:107:26"},{"nodeType":"YulAssignment","src":"7032:16:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7043:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"7046:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7039:3:26"},"nodeType":"YulFunctionCall","src":"7039:9:26"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"7032:3:26"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"6780:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"6783:1:26","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"6789:3:26","type":""}],"src":"6749:305:26"},{"body":{"nodeType":"YulBlock","src":"7166:118:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7188:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"7196:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7184:3:26"},"nodeType":"YulFunctionCall","src":"7184:14:26"},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77","kind":"string","nodeType":"YulLiteral","src":"7200:34:26","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7177:6:26"},"nodeType":"YulFunctionCall","src":"7177:58:26"},"nodeType":"YulExpressionStatement","src":"7177:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7256:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"7264:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7252:3:26"},"nodeType":"YulFunctionCall","src":"7252:15:26"},{"hexValue":"207a65726f","kind":"string","nodeType":"YulLiteral","src":"7269:7:26","type":"","value":" zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7245:6:26"},"nodeType":"YulFunctionCall","src":"7245:32:26"},"nodeType":"YulExpressionStatement","src":"7245:32:26"}]},"name":"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7158:6:26","type":""}],"src":"7060:224:26"},{"body":{"nodeType":"YulBlock","src":"7436:220:26","statements":[{"nodeType":"YulAssignment","src":"7446:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7512:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"7517:2:26","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7453:58:26"},"nodeType":"YulFunctionCall","src":"7453:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7446:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7618:3:26"}],"functionName":{"name":"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","nodeType":"YulIdentifier","src":"7529:88:26"},"nodeType":"YulFunctionCall","src":"7529:93:26"},"nodeType":"YulExpressionStatement","src":"7529:93:26"},{"nodeType":"YulAssignment","src":"7631:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7642:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"7647:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7638:3:26"},"nodeType":"YulFunctionCall","src":"7638:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7631:3:26"}]}]},"name":"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7424:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7432:3:26","type":""}],"src":"7290:366:26"},{"body":{"nodeType":"YulBlock","src":"7833:248:26","statements":[{"nodeType":"YulAssignment","src":"7843:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7855:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"7866:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7851:3:26"},"nodeType":"YulFunctionCall","src":"7851:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7843:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7890:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"7901:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7886:3:26"},"nodeType":"YulFunctionCall","src":"7886:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7909:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"7915:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7905:3:26"},"nodeType":"YulFunctionCall","src":"7905:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7879:6:26"},"nodeType":"YulFunctionCall","src":"7879:47:26"},"nodeType":"YulExpressionStatement","src":"7879:47:26"},{"nodeType":"YulAssignment","src":"7935:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8069:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7943:124:26"},"nodeType":"YulFunctionCall","src":"7943:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7935:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7813:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7828:4:26","type":""}],"src":"7662:419:26"},{"body":{"nodeType":"YulBlock","src":"8193:117:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8215:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"8223:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8211:3:26"},"nodeType":"YulFunctionCall","src":"8211:14:26"},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"8227:34:26","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8204:6:26"},"nodeType":"YulFunctionCall","src":"8204:58:26"},"nodeType":"YulExpressionStatement","src":"8204:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8283:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"8291:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8279:3:26"},"nodeType":"YulFunctionCall","src":"8279:15:26"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"8296:6:26","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8272:6:26"},"nodeType":"YulFunctionCall","src":"8272:31:26"},"nodeType":"YulExpressionStatement","src":"8272:31:26"}]},"name":"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"8185:6:26","type":""}],"src":"8087:223:26"},{"body":{"nodeType":"YulBlock","src":"8462:220:26","statements":[{"nodeType":"YulAssignment","src":"8472:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8538:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"8543:2:26","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8479:58:26"},"nodeType":"YulFunctionCall","src":"8479:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8472:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8644:3:26"}],"functionName":{"name":"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","nodeType":"YulIdentifier","src":"8555:88:26"},"nodeType":"YulFunctionCall","src":"8555:93:26"},"nodeType":"YulExpressionStatement","src":"8555:93:26"},{"nodeType":"YulAssignment","src":"8657:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8668:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"8673:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8664:3:26"},"nodeType":"YulFunctionCall","src":"8664:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8657:3:26"}]}]},"name":"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8450:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8458:3:26","type":""}],"src":"8316:366:26"},{"body":{"nodeType":"YulBlock","src":"8859:248:26","statements":[{"nodeType":"YulAssignment","src":"8869:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8881:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"8892:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8877:3:26"},"nodeType":"YulFunctionCall","src":"8877:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8869:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8916:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"8927:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8912:3:26"},"nodeType":"YulFunctionCall","src":"8912:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8935:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"8941:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8931:3:26"},"nodeType":"YulFunctionCall","src":"8931:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8905:6:26"},"nodeType":"YulFunctionCall","src":"8905:47:26"},"nodeType":"YulExpressionStatement","src":"8905:47:26"},{"nodeType":"YulAssignment","src":"8961:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9095:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8969:124:26"},"nodeType":"YulFunctionCall","src":"8969:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8961:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8839:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8854:4:26","type":""}],"src":"8688:419:26"},{"body":{"nodeType":"YulBlock","src":"9219:115:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9241:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"9249:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9237:3:26"},"nodeType":"YulFunctionCall","src":"9237:14:26"},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f206164647265","kind":"string","nodeType":"YulLiteral","src":"9253:34:26","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9230:6:26"},"nodeType":"YulFunctionCall","src":"9230:58:26"},"nodeType":"YulExpressionStatement","src":"9230:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9309:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"9317:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9305:3:26"},"nodeType":"YulFunctionCall","src":"9305:15:26"},{"hexValue":"7373","kind":"string","nodeType":"YulLiteral","src":"9322:4:26","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9298:6:26"},"nodeType":"YulFunctionCall","src":"9298:29:26"},"nodeType":"YulExpressionStatement","src":"9298:29:26"}]},"name":"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"9211:6:26","type":""}],"src":"9113:221:26"},{"body":{"nodeType":"YulBlock","src":"9486:220:26","statements":[{"nodeType":"YulAssignment","src":"9496:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9562:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"9567:2:26","type":"","value":"34"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9503:58:26"},"nodeType":"YulFunctionCall","src":"9503:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9496:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9668:3:26"}],"functionName":{"name":"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","nodeType":"YulIdentifier","src":"9579:88:26"},"nodeType":"YulFunctionCall","src":"9579:93:26"},"nodeType":"YulExpressionStatement","src":"9579:93:26"},{"nodeType":"YulAssignment","src":"9681:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9692:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"9697:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9688:3:26"},"nodeType":"YulFunctionCall","src":"9688:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9681:3:26"}]}]},"name":"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9474:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9482:3:26","type":""}],"src":"9340:366:26"},{"body":{"nodeType":"YulBlock","src":"9883:248:26","statements":[{"nodeType":"YulAssignment","src":"9893:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9905:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"9916:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9901:3:26"},"nodeType":"YulFunctionCall","src":"9901:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9893:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9940:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"9951:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9936:3:26"},"nodeType":"YulFunctionCall","src":"9936:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9959:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"9965:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9955:3:26"},"nodeType":"YulFunctionCall","src":"9955:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9929:6:26"},"nodeType":"YulFunctionCall","src":"9929:47:26"},"nodeType":"YulExpressionStatement","src":"9929:47:26"},{"nodeType":"YulAssignment","src":"9985:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10119:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9993:124:26"},"nodeType":"YulFunctionCall","src":"9993:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9985:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9863:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9878:4:26","type":""}],"src":"9712:419:26"},{"body":{"nodeType":"YulBlock","src":"10243:73:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10265:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"10273:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10261:3:26"},"nodeType":"YulFunctionCall","src":"10261:14:26"},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","kind":"string","nodeType":"YulLiteral","src":"10277:31:26","type":"","value":"ERC20: insufficient allowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10254:6:26"},"nodeType":"YulFunctionCall","src":"10254:55:26"},"nodeType":"YulExpressionStatement","src":"10254:55:26"}]},"name":"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"10235:6:26","type":""}],"src":"10137:179:26"},{"body":{"nodeType":"YulBlock","src":"10468:220:26","statements":[{"nodeType":"YulAssignment","src":"10478:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10544:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"10549:2:26","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10485:58:26"},"nodeType":"YulFunctionCall","src":"10485:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10478:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10650:3:26"}],"functionName":{"name":"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","nodeType":"YulIdentifier","src":"10561:88:26"},"nodeType":"YulFunctionCall","src":"10561:93:26"},"nodeType":"YulExpressionStatement","src":"10561:93:26"},{"nodeType":"YulAssignment","src":"10663:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10674:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"10679:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10670:3:26"},"nodeType":"YulFunctionCall","src":"10670:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10663:3:26"}]}]},"name":"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10456:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10464:3:26","type":""}],"src":"10322:366:26"},{"body":{"nodeType":"YulBlock","src":"10865:248:26","statements":[{"nodeType":"YulAssignment","src":"10875:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10887:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"10898:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10883:3:26"},"nodeType":"YulFunctionCall","src":"10883:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10875:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10922:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"10933:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10918:3:26"},"nodeType":"YulFunctionCall","src":"10918:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10941:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"10947:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10937:3:26"},"nodeType":"YulFunctionCall","src":"10937:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10911:6:26"},"nodeType":"YulFunctionCall","src":"10911:47:26"},"nodeType":"YulExpressionStatement","src":"10911:47:26"},{"nodeType":"YulAssignment","src":"10967:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11101:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10975:124:26"},"nodeType":"YulFunctionCall","src":"10975:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10967:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10845:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10860:4:26","type":""}],"src":"10694:419:26"},{"body":{"nodeType":"YulBlock","src":"11225:118:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11247:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"11255:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11243:3:26"},"nodeType":"YulFunctionCall","src":"11243:14:26"},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"11259:34:26","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11236:6:26"},"nodeType":"YulFunctionCall","src":"11236:58:26"},"nodeType":"YulExpressionStatement","src":"11236:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11315:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"11323:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11311:3:26"},"nodeType":"YulFunctionCall","src":"11311:15:26"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"11328:7:26","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11304:6:26"},"nodeType":"YulFunctionCall","src":"11304:32:26"},"nodeType":"YulExpressionStatement","src":"11304:32:26"}]},"name":"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11217:6:26","type":""}],"src":"11119:224:26"},{"body":{"nodeType":"YulBlock","src":"11495:220:26","statements":[{"nodeType":"YulAssignment","src":"11505:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11571:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"11576:2:26","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11512:58:26"},"nodeType":"YulFunctionCall","src":"11512:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11505:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11677:3:26"}],"functionName":{"name":"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","nodeType":"YulIdentifier","src":"11588:88:26"},"nodeType":"YulFunctionCall","src":"11588:93:26"},"nodeType":"YulExpressionStatement","src":"11588:93:26"},{"nodeType":"YulAssignment","src":"11690:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11701:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"11706:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11697:3:26"},"nodeType":"YulFunctionCall","src":"11697:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11690:3:26"}]}]},"name":"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11483:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11491:3:26","type":""}],"src":"11349:366:26"},{"body":{"nodeType":"YulBlock","src":"11892:248:26","statements":[{"nodeType":"YulAssignment","src":"11902:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11914:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"11925:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11910:3:26"},"nodeType":"YulFunctionCall","src":"11910:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11902:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11949:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"11960:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11945:3:26"},"nodeType":"YulFunctionCall","src":"11945:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11968:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"11974:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11964:3:26"},"nodeType":"YulFunctionCall","src":"11964:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11938:6:26"},"nodeType":"YulFunctionCall","src":"11938:47:26"},"nodeType":"YulExpressionStatement","src":"11938:47:26"},{"nodeType":"YulAssignment","src":"11994:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12128:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12002:124:26"},"nodeType":"YulFunctionCall","src":"12002:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11994:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11872:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11887:4:26","type":""}],"src":"11721:419:26"},{"body":{"nodeType":"YulBlock","src":"12252:116:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12274:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"12282:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12270:3:26"},"nodeType":"YulFunctionCall","src":"12270:14:26"},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472","kind":"string","nodeType":"YulLiteral","src":"12286:34:26","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12263:6:26"},"nodeType":"YulFunctionCall","src":"12263:58:26"},"nodeType":"YulExpressionStatement","src":"12263:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12342:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"12350:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12338:3:26"},"nodeType":"YulFunctionCall","src":"12338:15:26"},{"hexValue":"657373","kind":"string","nodeType":"YulLiteral","src":"12355:5:26","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12331:6:26"},"nodeType":"YulFunctionCall","src":"12331:30:26"},"nodeType":"YulExpressionStatement","src":"12331:30:26"}]},"name":"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12244:6:26","type":""}],"src":"12146:222:26"},{"body":{"nodeType":"YulBlock","src":"12520:220:26","statements":[{"nodeType":"YulAssignment","src":"12530:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12596:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"12601:2:26","type":"","value":"35"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12537:58:26"},"nodeType":"YulFunctionCall","src":"12537:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12530:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12702:3:26"}],"functionName":{"name":"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","nodeType":"YulIdentifier","src":"12613:88:26"},"nodeType":"YulFunctionCall","src":"12613:93:26"},"nodeType":"YulExpressionStatement","src":"12613:93:26"},{"nodeType":"YulAssignment","src":"12715:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12726:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"12731:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12722:3:26"},"nodeType":"YulFunctionCall","src":"12722:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12715:3:26"}]}]},"name":"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12508:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12516:3:26","type":""}],"src":"12374:366:26"},{"body":{"nodeType":"YulBlock","src":"12917:248:26","statements":[{"nodeType":"YulAssignment","src":"12927:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12939:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12950:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12935:3:26"},"nodeType":"YulFunctionCall","src":"12935:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12927:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12974:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12985:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12970:3:26"},"nodeType":"YulFunctionCall","src":"12970:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12993:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"12999:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12989:3:26"},"nodeType":"YulFunctionCall","src":"12989:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12963:6:26"},"nodeType":"YulFunctionCall","src":"12963:47:26"},"nodeType":"YulExpressionStatement","src":"12963:47:26"},{"nodeType":"YulAssignment","src":"13019:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13153:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13027:124:26"},"nodeType":"YulFunctionCall","src":"13027:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13019:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12897:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12912:4:26","type":""}],"src":"12746:419:26"},{"body":{"nodeType":"YulBlock","src":"13277:119:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13299:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"13307:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13295:3:26"},"nodeType":"YulFunctionCall","src":"13295:14:26"},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062","kind":"string","nodeType":"YulLiteral","src":"13311:34:26","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13288:6:26"},"nodeType":"YulFunctionCall","src":"13288:58:26"},"nodeType":"YulExpressionStatement","src":"13288:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13367:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"13375:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13363:3:26"},"nodeType":"YulFunctionCall","src":"13363:15:26"},{"hexValue":"616c616e6365","kind":"string","nodeType":"YulLiteral","src":"13380:8:26","type":"","value":"alance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13356:6:26"},"nodeType":"YulFunctionCall","src":"13356:33:26"},"nodeType":"YulExpressionStatement","src":"13356:33:26"}]},"name":"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"13269:6:26","type":""}],"src":"13171:225:26"},{"body":{"nodeType":"YulBlock","src":"13548:220:26","statements":[{"nodeType":"YulAssignment","src":"13558:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13624:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"13629:2:26","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13565:58:26"},"nodeType":"YulFunctionCall","src":"13565:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13558:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13730:3:26"}],"functionName":{"name":"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","nodeType":"YulIdentifier","src":"13641:88:26"},"nodeType":"YulFunctionCall","src":"13641:93:26"},"nodeType":"YulExpressionStatement","src":"13641:93:26"},{"nodeType":"YulAssignment","src":"13743:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13754:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"13759:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13750:3:26"},"nodeType":"YulFunctionCall","src":"13750:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13743:3:26"}]}]},"name":"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13536:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13544:3:26","type":""}],"src":"13402:366:26"},{"body":{"nodeType":"YulBlock","src":"13945:248:26","statements":[{"nodeType":"YulAssignment","src":"13955:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13967:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"13978:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13963:3:26"},"nodeType":"YulFunctionCall","src":"13963:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13955:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14002:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"14013:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13998:3:26"},"nodeType":"YulFunctionCall","src":"13998:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14021:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"14027:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14017:3:26"},"nodeType":"YulFunctionCall","src":"14017:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13991:6:26"},"nodeType":"YulFunctionCall","src":"13991:47:26"},"nodeType":"YulExpressionStatement","src":"13991:47:26"},{"nodeType":"YulAssignment","src":"14047:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14181:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14055:124:26"},"nodeType":"YulFunctionCall","src":"14055:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14047:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13925:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13940:4:26","type":""}],"src":"13774:419:26"},{"body":{"nodeType":"YulBlock","src":"14305:114:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14327:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"14335:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14323:3:26"},"nodeType":"YulFunctionCall","src":"14323:14:26"},{"hexValue":"45524332303a206275726e2066726f6d20746865207a65726f20616464726573","kind":"string","nodeType":"YulLiteral","src":"14339:34:26","type":"","value":"ERC20: burn from the zero addres"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14316:6:26"},"nodeType":"YulFunctionCall","src":"14316:58:26"},"nodeType":"YulExpressionStatement","src":"14316:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14395:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"14403:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14391:3:26"},"nodeType":"YulFunctionCall","src":"14391:15:26"},{"hexValue":"73","kind":"string","nodeType":"YulLiteral","src":"14408:3:26","type":"","value":"s"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14384:6:26"},"nodeType":"YulFunctionCall","src":"14384:28:26"},"nodeType":"YulExpressionStatement","src":"14384:28:26"}]},"name":"store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14297:6:26","type":""}],"src":"14199:220:26"},{"body":{"nodeType":"YulBlock","src":"14571:220:26","statements":[{"nodeType":"YulAssignment","src":"14581:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14647:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"14652:2:26","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14588:58:26"},"nodeType":"YulFunctionCall","src":"14588:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14581:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14753:3:26"}],"functionName":{"name":"store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","nodeType":"YulIdentifier","src":"14664:88:26"},"nodeType":"YulFunctionCall","src":"14664:93:26"},"nodeType":"YulExpressionStatement","src":"14664:93:26"},{"nodeType":"YulAssignment","src":"14766:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14777:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"14782:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14773:3:26"},"nodeType":"YulFunctionCall","src":"14773:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14766:3:26"}]}]},"name":"abi_encode_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14559:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14567:3:26","type":""}],"src":"14425:366:26"},{"body":{"nodeType":"YulBlock","src":"14968:248:26","statements":[{"nodeType":"YulAssignment","src":"14978:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14990:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"15001:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14986:3:26"},"nodeType":"YulFunctionCall","src":"14986:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14978:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15025:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"15036:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15021:3:26"},"nodeType":"YulFunctionCall","src":"15021:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15044:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"15050:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15040:3:26"},"nodeType":"YulFunctionCall","src":"15040:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15014:6:26"},"nodeType":"YulFunctionCall","src":"15014:47:26"},"nodeType":"YulExpressionStatement","src":"15014:47:26"},{"nodeType":"YulAssignment","src":"15070:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15204:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15078:124:26"},"nodeType":"YulFunctionCall","src":"15078:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15070:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14948:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14963:4:26","type":""}],"src":"14797:419:26"},{"body":{"nodeType":"YulBlock","src":"15328:115:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15350:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"15358:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15346:3:26"},"nodeType":"YulFunctionCall","src":"15346:14:26"},{"hexValue":"45524332303a206275726e20616d6f756e7420657863656564732062616c616e","kind":"string","nodeType":"YulLiteral","src":"15362:34:26","type":"","value":"ERC20: burn amount exceeds balan"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15339:6:26"},"nodeType":"YulFunctionCall","src":"15339:58:26"},"nodeType":"YulExpressionStatement","src":"15339:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15418:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"15426:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15414:3:26"},"nodeType":"YulFunctionCall","src":"15414:15:26"},{"hexValue":"6365","kind":"string","nodeType":"YulLiteral","src":"15431:4:26","type":"","value":"ce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15407:6:26"},"nodeType":"YulFunctionCall","src":"15407:29:26"},"nodeType":"YulExpressionStatement","src":"15407:29:26"}]},"name":"store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"15320:6:26","type":""}],"src":"15222:221:26"},{"body":{"nodeType":"YulBlock","src":"15595:220:26","statements":[{"nodeType":"YulAssignment","src":"15605:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15671:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"15676:2:26","type":"","value":"34"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15612:58:26"},"nodeType":"YulFunctionCall","src":"15612:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15605:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15777:3:26"}],"functionName":{"name":"store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","nodeType":"YulIdentifier","src":"15688:88:26"},"nodeType":"YulFunctionCall","src":"15688:93:26"},"nodeType":"YulExpressionStatement","src":"15688:93:26"},{"nodeType":"YulAssignment","src":"15790:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15801:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"15806:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15797:3:26"},"nodeType":"YulFunctionCall","src":"15797:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15790:3:26"}]}]},"name":"abi_encode_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15583:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15591:3:26","type":""}],"src":"15449:366:26"},{"body":{"nodeType":"YulBlock","src":"15992:248:26","statements":[{"nodeType":"YulAssignment","src":"16002:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16014:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"16025:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16010:3:26"},"nodeType":"YulFunctionCall","src":"16010:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16002:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16049:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"16060:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16045:3:26"},"nodeType":"YulFunctionCall","src":"16045:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16068:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"16074:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16064:3:26"},"nodeType":"YulFunctionCall","src":"16064:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16038:6:26"},"nodeType":"YulFunctionCall","src":"16038:47:26"},"nodeType":"YulExpressionStatement","src":"16038:47:26"},{"nodeType":"YulAssignment","src":"16094:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16228:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16102:124:26"},"nodeType":"YulFunctionCall","src":"16102:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16094:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15972:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15987:4:26","type":""}],"src":"15821:419:26"}]},"contents":"{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: decreased allowance below\")\n\n        mstore(add(memPtr, 32), \" zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve from the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve to the zero addre\")\n\n        mstore(add(memPtr, 32), \"ss\")\n\n    }\n\n    function abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: insufficient allowance\")\n\n    }\n\n    function abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer from the zero ad\")\n\n        mstore(add(memPtr, 32), \"dress\")\n\n    }\n\n    function abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer to the zero addr\")\n\n        mstore(add(memPtr, 32), \"ess\")\n\n    }\n\n    function abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 35)\n        store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer amount exceeds b\")\n\n        mstore(add(memPtr, 32), \"alance\")\n\n    }\n\n    function abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: burn from the zero addres\")\n\n        mstore(add(memPtr, 32), \"s\")\n\n    }\n\n    function abi_encode_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: burn amount exceeds balan\")\n\n        mstore(add(memPtr, 32), \"ce\")\n\n    }\n\n    function abi_encode_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":26,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100cf5760003560e01c806342966c681161008c57806395d89b411161006657806395d89b4114610226578063a457c2d714610244578063a9059cbb14610274578063dd62ed3e146102a4576100cf565b806342966c68146101be57806370a08231146101da57806379cc67901461020a576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461012257806323b872dd14610140578063313ce56714610170578063395093511461018e575b600080fd5b6100dc6102d4565b6040516100e99190610d79565b60405180910390f35b61010c60048036038101906101079190610e34565b610366565b6040516101199190610e8f565b60405180910390f35b61012a610389565b6040516101379190610eb9565b60405180910390f35b61015a60048036038101906101559190610ed4565b610393565b6040516101679190610e8f565b60405180910390f35b6101786103c2565b6040516101859190610f43565b60405180910390f35b6101a860048036038101906101a39190610e34565b6103cb565b6040516101b59190610e8f565b60405180910390f35b6101d860048036038101906101d39190610f5e565b610402565b005b6101f460048036038101906101ef9190610f8b565b610416565b6040516102019190610eb9565b60405180910390f35b610224600480360381019061021f9190610e34565b61045e565b005b61022e61047e565b60405161023b9190610d79565b60405180910390f35b61025e60048036038101906102599190610e34565b610510565b60405161026b9190610e8f565b60405180910390f35b61028e60048036038101906102899190610e34565b610587565b60405161029b9190610e8f565b60405180910390f35b6102be60048036038101906102b99190610fb8565b6105aa565b6040516102cb9190610eb9565b60405180910390f35b6060600380546102e390611027565b80601f016020809104026020016040519081016040528092919081815260200182805461030f90611027565b801561035c5780601f106103315761010080835404028352916020019161035c565b820191906000526020600020905b81548152906001019060200180831161033f57829003601f168201915b5050505050905090565b600080610371610631565b905061037e818585610639565b600191505092915050565b6000600254905090565b60008061039e610631565b90506103ab858285610804565b6103b6858585610890565b60019150509392505050565b60006012905090565b6000806103d6610631565b90506103f78185856103e885896105aa565b6103f29190611088565b610639565b600191505092915050565b61041361040d610631565b82610b08565b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6104708261046a610631565b83610804565b61047a8282610b08565b5050565b60606004805461048d90611027565b80601f01602080910402602001604051908101604052809291908181526020018280546104b990611027565b80156105065780601f106104db57610100808354040283529160200191610506565b820191906000526020600020905b8154815290600101906020018083116104e957829003601f168201915b5050505050905090565b60008061051b610631565b9050600061052982866105aa565b90508381101561056e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056590611150565b60405180910390fd5b61057b8286868403610639565b60019250505092915050565b600080610592610631565b905061059f818585610890565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a0906111e2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610719576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071090611274565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107f79190610eb9565b60405180910390a3505050565b600061081084846105aa565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461088a578181101561087c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610873906112e0565b60405180910390fd5b6108898484848403610639565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610900576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f790611372565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610970576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096790611404565b60405180910390fd5b61097b838383610cd6565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610a01576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f890611496565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610aef9190610eb9565b60405180910390a3610b02848484610cdb565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6f90611528565b60405180910390fd5b610b8482600083610cd6565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610c0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c01906115ba565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610cbd9190610eb9565b60405180910390a3610cd183600084610cdb565b505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d1a578082015181840152602081019050610cff565b83811115610d29576000848401525b50505050565b6000601f19601f8301169050919050565b6000610d4b82610ce0565b610d558185610ceb565b9350610d65818560208601610cfc565b610d6e81610d2f565b840191505092915050565b60006020820190508181036000830152610d938184610d40565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610dcb82610da0565b9050919050565b610ddb81610dc0565b8114610de657600080fd5b50565b600081359050610df881610dd2565b92915050565b6000819050919050565b610e1181610dfe565b8114610e1c57600080fd5b50565b600081359050610e2e81610e08565b92915050565b60008060408385031215610e4b57610e4a610d9b565b5b6000610e5985828601610de9565b9250506020610e6a85828601610e1f565b9150509250929050565b60008115159050919050565b610e8981610e74565b82525050565b6000602082019050610ea46000830184610e80565b92915050565b610eb381610dfe565b82525050565b6000602082019050610ece6000830184610eaa565b92915050565b600080600060608486031215610eed57610eec610d9b565b5b6000610efb86828701610de9565b9350506020610f0c86828701610de9565b9250506040610f1d86828701610e1f565b9150509250925092565b600060ff82169050919050565b610f3d81610f27565b82525050565b6000602082019050610f586000830184610f34565b92915050565b600060208284031215610f7457610f73610d9b565b5b6000610f8284828501610e1f565b91505092915050565b600060208284031215610fa157610fa0610d9b565b5b6000610faf84828501610de9565b91505092915050565b60008060408385031215610fcf57610fce610d9b565b5b6000610fdd85828601610de9565b9250506020610fee85828601610de9565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061103f57607f821691505b6020821081141561105357611052610ff8565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061109382610dfe565b915061109e83610dfe565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156110d3576110d2611059565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b600061113a602583610ceb565b9150611145826110de565b604082019050919050565b600060208201905081810360008301526111698161112d565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006111cc602483610ceb565b91506111d782611170565b604082019050919050565b600060208201905081810360008301526111fb816111bf565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061125e602283610ceb565b915061126982611202565b604082019050919050565b6000602082019050818103600083015261128d81611251565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006112ca601d83610ceb565b91506112d582611294565b602082019050919050565b600060208201905081810360008301526112f9816112bd565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061135c602583610ceb565b915061136782611300565b604082019050919050565b6000602082019050818103600083015261138b8161134f565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006113ee602383610ceb565b91506113f982611392565b604082019050919050565b6000602082019050818103600083015261141d816113e1565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000611480602683610ceb565b915061148b82611424565b604082019050919050565b600060208201905081810360008301526114af81611473565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000611512602183610ceb565b915061151d826114b6565b604082019050919050565b6000602082019050818103600083015261154181611505565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b60006115a4602283610ceb565b91506115af82611548565b604082019050919050565b600060208201905081810360008301526115d381611597565b905091905056fea2646970667358221220aa640aca9785bfc9d7cb4dd4c455e401309dfd3ac9baa41fc86be0b97e6345a964736f6c63430008090033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x42966C68 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x226 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x244 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x274 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x2A4 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x42966C68 EQ PUSH2 0x1BE JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1DA JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x20A JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xF2 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x140 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x170 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x18E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDC PUSH2 0x2D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0xD79 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x107 SWAP2 SWAP1 PUSH2 0xE34 JUMP JUMPDEST PUSH2 0x366 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0xE8F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x12A PUSH2 0x389 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x137 SWAP2 SWAP1 PUSH2 0xEB9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x15A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x155 SWAP2 SWAP1 PUSH2 0xED4 JUMP JUMPDEST PUSH2 0x393 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x167 SWAP2 SWAP1 PUSH2 0xE8F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x178 PUSH2 0x3C2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x185 SWAP2 SWAP1 PUSH2 0xF43 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1A3 SWAP2 SWAP1 PUSH2 0xE34 JUMP JUMPDEST PUSH2 0x3CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B5 SWAP2 SWAP1 PUSH2 0xE8F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1D8 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D3 SWAP2 SWAP1 PUSH2 0xF5E JUMP JUMPDEST PUSH2 0x402 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1F4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EF SWAP2 SWAP1 PUSH2 0xF8B JUMP JUMPDEST PUSH2 0x416 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x201 SWAP2 SWAP1 PUSH2 0xEB9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x224 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x21F SWAP2 SWAP1 PUSH2 0xE34 JUMP JUMPDEST PUSH2 0x45E JUMP JUMPDEST STOP JUMPDEST PUSH2 0x22E PUSH2 0x47E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23B SWAP2 SWAP1 PUSH2 0xD79 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x25E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x259 SWAP2 SWAP1 PUSH2 0xE34 JUMP JUMPDEST PUSH2 0x510 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x26B SWAP2 SWAP1 PUSH2 0xE8F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x28E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x289 SWAP2 SWAP1 PUSH2 0xE34 JUMP JUMPDEST PUSH2 0x587 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29B SWAP2 SWAP1 PUSH2 0xE8F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2BE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2B9 SWAP2 SWAP1 PUSH2 0xFB8 JUMP JUMPDEST PUSH2 0x5AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2CB SWAP2 SWAP1 PUSH2 0xEB9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x2E3 SWAP1 PUSH2 0x1027 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x30F SWAP1 PUSH2 0x1027 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x35C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x331 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x35C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x33F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x371 PUSH2 0x631 JUMP JUMPDEST SWAP1 POP PUSH2 0x37E DUP2 DUP6 DUP6 PUSH2 0x639 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x39E PUSH2 0x631 JUMP JUMPDEST SWAP1 POP PUSH2 0x3AB DUP6 DUP3 DUP6 PUSH2 0x804 JUMP JUMPDEST PUSH2 0x3B6 DUP6 DUP6 DUP6 PUSH2 0x890 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3D6 PUSH2 0x631 JUMP JUMPDEST SWAP1 POP PUSH2 0x3F7 DUP2 DUP6 DUP6 PUSH2 0x3E8 DUP6 DUP10 PUSH2 0x5AA JUMP JUMPDEST PUSH2 0x3F2 SWAP2 SWAP1 PUSH2 0x1088 JUMP JUMPDEST PUSH2 0x639 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x413 PUSH2 0x40D PUSH2 0x631 JUMP JUMPDEST DUP3 PUSH2 0xB08 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x470 DUP3 PUSH2 0x46A PUSH2 0x631 JUMP JUMPDEST DUP4 PUSH2 0x804 JUMP JUMPDEST PUSH2 0x47A DUP3 DUP3 PUSH2 0xB08 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x48D SWAP1 PUSH2 0x1027 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4B9 SWAP1 PUSH2 0x1027 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x506 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4DB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x506 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4E9 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x51B PUSH2 0x631 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x529 DUP3 DUP7 PUSH2 0x5AA JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x56E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x565 SWAP1 PUSH2 0x1150 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x57B DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x639 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x592 PUSH2 0x631 JUMP JUMPDEST SWAP1 POP PUSH2 0x59F DUP2 DUP6 DUP6 PUSH2 0x890 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x6A9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6A0 SWAP1 PUSH2 0x11E2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x719 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x710 SWAP1 PUSH2 0x1274 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0x7F7 SWAP2 SWAP1 PUSH2 0xEB9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x810 DUP5 DUP5 PUSH2 0x5AA JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0x88A JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x87C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x873 SWAP1 PUSH2 0x12E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x889 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x639 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x900 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8F7 SWAP1 PUSH2 0x1372 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x970 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x967 SWAP1 PUSH2 0x1404 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x97B DUP4 DUP4 DUP4 PUSH2 0xCD6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xA01 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F8 SWAP1 PUSH2 0x1496 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xAEF SWAP2 SWAP1 PUSH2 0xEB9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xB02 DUP5 DUP5 DUP5 PUSH2 0xCDB JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xB78 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB6F SWAP1 PUSH2 0x1528 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB84 DUP3 PUSH1 0x0 DUP4 PUSH2 0xCD6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xC0A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC01 SWAP1 PUSH2 0x15BA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xCBD SWAP2 SWAP1 PUSH2 0xEB9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xCD1 DUP4 PUSH1 0x0 DUP5 PUSH2 0xCDB JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD1A JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0xCFF JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xD29 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD4B DUP3 PUSH2 0xCE0 JUMP JUMPDEST PUSH2 0xD55 DUP2 DUP6 PUSH2 0xCEB JUMP JUMPDEST SWAP4 POP PUSH2 0xD65 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0xCFC JUMP JUMPDEST PUSH2 0xD6E DUP2 PUSH2 0xD2F JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD93 DUP2 DUP5 PUSH2 0xD40 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDCB DUP3 PUSH2 0xDA0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xDDB DUP2 PUSH2 0xDC0 JUMP JUMPDEST DUP2 EQ PUSH2 0xDE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xDF8 DUP2 PUSH2 0xDD2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE11 DUP2 PUSH2 0xDFE JUMP JUMPDEST DUP2 EQ PUSH2 0xE1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xE2E DUP2 PUSH2 0xE08 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE4B JUMPI PUSH2 0xE4A PUSH2 0xD9B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xE59 DUP6 DUP3 DUP7 ADD PUSH2 0xDE9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xE6A DUP6 DUP3 DUP7 ADD PUSH2 0xE1F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xE89 DUP2 PUSH2 0xE74 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xEA4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xE80 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xEB3 DUP2 PUSH2 0xDFE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xECE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xEAA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xEED JUMPI PUSH2 0xEEC PUSH2 0xD9B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xEFB DUP7 DUP3 DUP8 ADD PUSH2 0xDE9 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0xF0C DUP7 DUP3 DUP8 ADD PUSH2 0xDE9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0xF1D DUP7 DUP3 DUP8 ADD PUSH2 0xE1F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF3D DUP2 PUSH2 0xF27 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xF58 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xF34 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF74 JUMPI PUSH2 0xF73 PUSH2 0xD9B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xF82 DUP5 DUP3 DUP6 ADD PUSH2 0xE1F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFA1 JUMPI PUSH2 0xFA0 PUSH2 0xD9B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xFAF DUP5 DUP3 DUP6 ADD PUSH2 0xDE9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xFCF JUMPI PUSH2 0xFCE PUSH2 0xD9B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xFDD DUP6 DUP3 DUP7 ADD PUSH2 0xDE9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xFEE DUP6 DUP3 DUP7 ADD PUSH2 0xDE9 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x103F JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x1053 JUMPI PUSH2 0x1052 PUSH2 0xFF8 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1093 DUP3 PUSH2 0xDFE JUMP JUMPDEST SWAP2 POP PUSH2 0x109E DUP4 PUSH2 0xDFE JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x10D3 JUMPI PUSH2 0x10D2 PUSH2 0x1059 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x113A PUSH1 0x25 DUP4 PUSH2 0xCEB JUMP JUMPDEST SWAP2 POP PUSH2 0x1145 DUP3 PUSH2 0x10DE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1169 DUP2 PUSH2 0x112D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11CC PUSH1 0x24 DUP4 PUSH2 0xCEB JUMP JUMPDEST SWAP2 POP PUSH2 0x11D7 DUP3 PUSH2 0x1170 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x11FB DUP2 PUSH2 0x11BF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x125E PUSH1 0x22 DUP4 PUSH2 0xCEB JUMP JUMPDEST SWAP2 POP PUSH2 0x1269 DUP3 PUSH2 0x1202 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x128D DUP2 PUSH2 0x1251 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12CA PUSH1 0x1D DUP4 PUSH2 0xCEB JUMP JUMPDEST SWAP2 POP PUSH2 0x12D5 DUP3 PUSH2 0x1294 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x12F9 DUP2 PUSH2 0x12BD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x135C PUSH1 0x25 DUP4 PUSH2 0xCEB JUMP JUMPDEST SWAP2 POP PUSH2 0x1367 DUP3 PUSH2 0x1300 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x138B DUP2 PUSH2 0x134F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13EE PUSH1 0x23 DUP4 PUSH2 0xCEB JUMP JUMPDEST SWAP2 POP PUSH2 0x13F9 DUP3 PUSH2 0x1392 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x141D DUP2 PUSH2 0x13E1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1480 PUSH1 0x26 DUP4 PUSH2 0xCEB JUMP JUMPDEST SWAP2 POP PUSH2 0x148B DUP3 PUSH2 0x1424 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x14AF DUP2 PUSH2 0x1473 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7300000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1512 PUSH1 0x21 DUP4 PUSH2 0xCEB JUMP JUMPDEST SWAP2 POP PUSH2 0x151D DUP3 PUSH2 0x14B6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1541 DUP2 PUSH2 0x1505 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6365000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15A4 PUSH1 0x22 DUP4 PUSH2 0xCEB JUMP JUMPDEST SWAP2 POP PUSH2 0x15AF DUP3 PUSH2 0x1548 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x15D3 DUP2 PUSH2 0x1597 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAA PUSH5 0xACA9785BF 0xC9 0xD7 0xCB 0x4D 0xD4 0xC4 SSTORE 0xE4 ADD ADDRESS SWAP14 REVERT GASPRICE 0xC9 0xBA LOG4 0x1F 0xC8 PUSH12 0xE0B97E6345A964736F6C6343 STOP ADDMOD MULMOD STOP CALLER ","sourceMap":"189:234:23:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4431:197;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3242:106;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5190:286;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3091:91;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5871:234;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;578:89:3;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3406:125:1;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;973:161:3;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2365:102:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6592:427;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3727:189;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3974:149;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2154:98;2208:13;2240:5;2233:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98;:::o;4431:197::-;4514:4;4530:13;4546:12;:10;:12::i;:::-;4530:28;;4568:32;4577:5;4584:7;4593:6;4568:8;:32::i;:::-;4617:4;4610:11;;;4431:197;;;;:::o;3242:106::-;3303:7;3329:12;;3322:19;;3242:106;:::o;5190:286::-;5317:4;5333:15;5351:12;:10;:12::i;:::-;5333:30;;5373:38;5389:4;5395:7;5404:6;5373:15;:38::i;:::-;5421:27;5431:4;5437:2;5441:6;5421:9;:27::i;:::-;5465:4;5458:11;;;5190:286;;;;;:::o;3091:91::-;3149:5;3173:2;3166:9;;3091:91;:::o;5871:234::-;5959:4;5975:13;5991:12;:10;:12::i;:::-;5975:28;;6013:64;6022:5;6029:7;6066:10;6038:25;6048:5;6055:7;6038:9;:25::i;:::-;:38;;;;:::i;:::-;6013:8;:64::i;:::-;6094:4;6087:11;;;5871:234;;;;:::o;578:89:3:-;633:27;639:12;:10;:12::i;:::-;653:6;633:5;:27::i;:::-;578:89;:::o;3406:125:1:-;3480:7;3506:9;:18;3516:7;3506:18;;;;;;;;;;;;;;;;3499:25;;3406:125;;;:::o;973:161:3:-;1049:46;1065:7;1074:12;:10;:12::i;:::-;1088:6;1049:15;:46::i;:::-;1105:22;1111:7;1120:6;1105:5;:22::i;:::-;973:161;;:::o;2365:102:1:-;2421:13;2453:7;2446:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2365:102;:::o;6592:427::-;6685:4;6701:13;6717:12;:10;:12::i;:::-;6701:28;;6739:24;6766:25;6776:5;6783:7;6766:9;:25::i;:::-;6739:52;;6829:15;6809:16;:35;;6801:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;6920:60;6929:5;6936:7;6964:15;6945:16;:34;6920:8;:60::i;:::-;7008:4;7001:11;;;;6592:427;;;;:::o;3727:189::-;3806:4;3822:13;3838:12;:10;:12::i;:::-;3822:28;;3860;3870:5;3877:2;3881:6;3860:9;:28::i;:::-;3905:4;3898:11;;;3727:189;;;;:::o;3974:149::-;4063:7;4089:11;:18;4101:5;4089:18;;;;;;;;;;;;;;;:27;4108:7;4089:27;;;;;;;;;;;;;;;;4082:34;;3974:149;;;;:::o;640:96:15:-;693:7;719:10;712:17;;640:96;:::o;10504:370:1:-;10652:1;10635:19;;:5;:19;;;;10627:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;10732:1;10713:21;;:7;:21;;;;10705:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;10814:6;10784:11;:18;10796:5;10784:18;;;;;;;;;;;;;;;:27;10803:7;10784:27;;;;;;;;;;;;;;;:36;;;;10851:7;10835:32;;10844:5;10835:32;;;10860:6;10835:32;;;;;;:::i;:::-;;;;;;;;10504:370;;;:::o;11155:441::-;11285:24;11312:25;11322:5;11329:7;11312:9;:25::i;:::-;11285:52;;11371:17;11351:16;:37;11347:243;;11432:6;11412:16;:26;;11404:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11514:51;11523:5;11530:7;11558:6;11539:16;:25;11514:8;:51::i;:::-;11347:243;11275:321;11155:441;;;:::o;7473:818::-;7615:1;7599:18;;:4;:18;;;;7591:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;7691:1;7677:16;;:2;:16;;;;7669:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;7744:38;7765:4;7771:2;7775:6;7744:20;:38::i;:::-;7793:19;7815:9;:15;7825:4;7815:15;;;;;;;;;;;;;;;;7793:37;;7863:6;7848:11;:21;;7840:72;;;;;;;;;;;;:::i;:::-;;;;;;;;;7978:6;7964:11;:20;7946:9;:15;7956:4;7946:15;;;;;;;;;;;;;;;:38;;;;8178:6;8161:9;:13;8171:2;8161:13;;;;;;;;;;;;;;;;:23;;;;;;;;;;;8225:2;8210:26;;8219:4;8210:26;;;8229:6;8210:26;;;;;;:::i;:::-;;;;;;;;8247:37;8267:4;8273:2;8277:6;8247:19;:37::i;:::-;7581:710;7473:818;;;:::o;9422:659::-;9524:1;9505:21;;:7;:21;;;;9497:67;;;;;;;;;;;;:::i;:::-;;;;;;;;;9575:49;9596:7;9613:1;9617:6;9575:20;:49::i;:::-;9635:22;9660:9;:18;9670:7;9660:18;;;;;;;;;;;;;;;;9635:43;;9714:6;9696:14;:24;;9688:71;;;;;;;;;;;;:::i;:::-;;;;;;;;;9831:6;9814:14;:23;9793:9;:18;9803:7;9793:18;;;;;;;;;;;;;;;:44;;;;9946:6;9930:12;;:22;;;;;;;;;;;10004:1;9978:37;;9987:7;9978:37;;;10008:6;9978:37;;;;;;:::i;:::-;;;;;;;;10026:48;10046:7;10063:1;10067:6;10026:19;:48::i;:::-;9487:594;9422:659;;:::o;12180:121::-;;;;:::o;12889:120::-;;;;:::o;7:99:26:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:169::-;196:11;230:6;225:3;218:19;270:4;265:3;261:14;246:29;;112:169;;;;:::o;287:307::-;355:1;365:113;379:6;376:1;373:13;365:113;;;464:1;459:3;455:11;449:18;445:1;440:3;436:11;429:39;401:2;398:1;394:10;389:15;;365:113;;;496:6;493:1;490:13;487:101;;;576:1;567:6;562:3;558:16;551:27;487:101;336:258;287:307;;;:::o;600:102::-;641:6;692:2;688:7;683:2;676:5;672:14;668:28;658:38;;600:102;;;:::o;708:364::-;796:3;824:39;857:5;824:39;:::i;:::-;879:71;943:6;938:3;879:71;:::i;:::-;872:78;;959:52;1004:6;999:3;992:4;985:5;981:16;959:52;:::i;:::-;1036:29;1058:6;1036:29;:::i;:::-;1031:3;1027:39;1020:46;;800:272;708:364;;;;:::o;1078:313::-;1191:4;1229:2;1218:9;1214:18;1206:26;;1278:9;1272:4;1268:20;1264:1;1253:9;1249:17;1242:47;1306:78;1379:4;1370:6;1306:78;:::i;:::-;1298:86;;1078:313;;;;:::o;1478:117::-;1587:1;1584;1577:12;1724:126;1761:7;1801:42;1794:5;1790:54;1779:65;;1724:126;;;:::o;1856:96::-;1893:7;1922:24;1940:5;1922:24;:::i;:::-;1911:35;;1856:96;;;:::o;1958:122::-;2031:24;2049:5;2031:24;:::i;:::-;2024:5;2021:35;2011:63;;2070:1;2067;2060:12;2011:63;1958:122;:::o;2086:139::-;2132:5;2170:6;2157:20;2148:29;;2186:33;2213:5;2186:33;:::i;:::-;2086:139;;;;:::o;2231:77::-;2268:7;2297:5;2286:16;;2231:77;;;:::o;2314:122::-;2387:24;2405:5;2387:24;:::i;:::-;2380:5;2377:35;2367:63;;2426:1;2423;2416:12;2367:63;2314:122;:::o;2442:139::-;2488:5;2526:6;2513:20;2504:29;;2542:33;2569:5;2542:33;:::i;:::-;2442:139;;;;:::o;2587:474::-;2655:6;2663;2712:2;2700:9;2691:7;2687:23;2683:32;2680:119;;;2718:79;;:::i;:::-;2680:119;2838:1;2863:53;2908:7;2899:6;2888:9;2884:22;2863:53;:::i;:::-;2853:63;;2809:117;2965:2;2991:53;3036:7;3027:6;3016:9;3012:22;2991:53;:::i;:::-;2981:63;;2936:118;2587:474;;;;;:::o;3067:90::-;3101:7;3144:5;3137:13;3130:21;3119:32;;3067:90;;;:::o;3163:109::-;3244:21;3259:5;3244:21;:::i;:::-;3239:3;3232:34;3163:109;;:::o;3278:210::-;3365:4;3403:2;3392:9;3388:18;3380:26;;3416:65;3478:1;3467:9;3463:17;3454:6;3416:65;:::i;:::-;3278:210;;;;:::o;3494:118::-;3581:24;3599:5;3581:24;:::i;:::-;3576:3;3569:37;3494:118;;:::o;3618:222::-;3711:4;3749:2;3738:9;3734:18;3726:26;;3762:71;3830:1;3819:9;3815:17;3806:6;3762:71;:::i;:::-;3618:222;;;;:::o;3846:619::-;3923:6;3931;3939;3988:2;3976:9;3967:7;3963:23;3959:32;3956:119;;;3994:79;;:::i;:::-;3956:119;4114:1;4139:53;4184:7;4175:6;4164:9;4160:22;4139:53;:::i;:::-;4129:63;;4085:117;4241:2;4267:53;4312:7;4303:6;4292:9;4288:22;4267:53;:::i;:::-;4257:63;;4212:118;4369:2;4395:53;4440:7;4431:6;4420:9;4416:22;4395:53;:::i;:::-;4385:63;;4340:118;3846:619;;;;;:::o;4471:86::-;4506:7;4546:4;4539:5;4535:16;4524:27;;4471:86;;;:::o;4563:112::-;4646:22;4662:5;4646:22;:::i;:::-;4641:3;4634:35;4563:112;;:::o;4681:214::-;4770:4;4808:2;4797:9;4793:18;4785:26;;4821:67;4885:1;4874:9;4870:17;4861:6;4821:67;:::i;:::-;4681:214;;;;:::o;4901:329::-;4960:6;5009:2;4997:9;4988:7;4984:23;4980:32;4977:119;;;5015:79;;:::i;:::-;4977:119;5135:1;5160:53;5205:7;5196:6;5185:9;5181:22;5160:53;:::i;:::-;5150:63;;5106:117;4901:329;;;;:::o;5236:::-;5295:6;5344:2;5332:9;5323:7;5319:23;5315:32;5312:119;;;5350:79;;:::i;:::-;5312:119;5470:1;5495:53;5540:7;5531:6;5520:9;5516:22;5495:53;:::i;:::-;5485:63;;5441:117;5236:329;;;;:::o;5571:474::-;5639:6;5647;5696:2;5684:9;5675:7;5671:23;5667:32;5664:119;;;5702:79;;:::i;:::-;5664:119;5822:1;5847:53;5892:7;5883:6;5872:9;5868:22;5847:53;:::i;:::-;5837:63;;5793:117;5949:2;5975:53;6020:7;6011:6;6000:9;5996:22;5975:53;:::i;:::-;5965:63;;5920:118;5571:474;;;;;:::o;6051:180::-;6099:77;6096:1;6089:88;6196:4;6193:1;6186:15;6220:4;6217:1;6210:15;6237:320;6281:6;6318:1;6312:4;6308:12;6298:22;;6365:1;6359:4;6355:12;6386:18;6376:81;;6442:4;6434:6;6430:17;6420:27;;6376:81;6504:2;6496:6;6493:14;6473:18;6470:38;6467:84;;;6523:18;;:::i;:::-;6467:84;6288:269;6237:320;;;:::o;6563:180::-;6611:77;6608:1;6601:88;6708:4;6705:1;6698:15;6732:4;6729:1;6722:15;6749:305;6789:3;6808:20;6826:1;6808:20;:::i;:::-;6803:25;;6842:20;6860:1;6842:20;:::i;:::-;6837:25;;6996:1;6928:66;6924:74;6921:1;6918:81;6915:107;;;7002:18;;:::i;:::-;6915:107;7046:1;7043;7039:9;7032:16;;6749:305;;;;:::o;7060:224::-;7200:34;7196:1;7188:6;7184:14;7177:58;7269:7;7264:2;7256:6;7252:15;7245:32;7060:224;:::o;7290:366::-;7432:3;7453:67;7517:2;7512:3;7453:67;:::i;:::-;7446:74;;7529:93;7618:3;7529:93;:::i;:::-;7647:2;7642:3;7638:12;7631:19;;7290:366;;;:::o;7662:419::-;7828:4;7866:2;7855:9;7851:18;7843:26;;7915:9;7909:4;7905:20;7901:1;7890:9;7886:17;7879:47;7943:131;8069:4;7943:131;:::i;:::-;7935:139;;7662:419;;;:::o;8087:223::-;8227:34;8223:1;8215:6;8211:14;8204:58;8296:6;8291:2;8283:6;8279:15;8272:31;8087:223;:::o;8316:366::-;8458:3;8479:67;8543:2;8538:3;8479:67;:::i;:::-;8472:74;;8555:93;8644:3;8555:93;:::i;:::-;8673:2;8668:3;8664:12;8657:19;;8316:366;;;:::o;8688:419::-;8854:4;8892:2;8881:9;8877:18;8869:26;;8941:9;8935:4;8931:20;8927:1;8916:9;8912:17;8905:47;8969:131;9095:4;8969:131;:::i;:::-;8961:139;;8688:419;;;:::o;9113:221::-;9253:34;9249:1;9241:6;9237:14;9230:58;9322:4;9317:2;9309:6;9305:15;9298:29;9113:221;:::o;9340:366::-;9482:3;9503:67;9567:2;9562:3;9503:67;:::i;:::-;9496:74;;9579:93;9668:3;9579:93;:::i;:::-;9697:2;9692:3;9688:12;9681:19;;9340:366;;;:::o;9712:419::-;9878:4;9916:2;9905:9;9901:18;9893:26;;9965:9;9959:4;9955:20;9951:1;9940:9;9936:17;9929:47;9993:131;10119:4;9993:131;:::i;:::-;9985:139;;9712:419;;;:::o;10137:179::-;10277:31;10273:1;10265:6;10261:14;10254:55;10137:179;:::o;10322:366::-;10464:3;10485:67;10549:2;10544:3;10485:67;:::i;:::-;10478:74;;10561:93;10650:3;10561:93;:::i;:::-;10679:2;10674:3;10670:12;10663:19;;10322:366;;;:::o;10694:419::-;10860:4;10898:2;10887:9;10883:18;10875:26;;10947:9;10941:4;10937:20;10933:1;10922:9;10918:17;10911:47;10975:131;11101:4;10975:131;:::i;:::-;10967:139;;10694:419;;;:::o;11119:224::-;11259:34;11255:1;11247:6;11243:14;11236:58;11328:7;11323:2;11315:6;11311:15;11304:32;11119:224;:::o;11349:366::-;11491:3;11512:67;11576:2;11571:3;11512:67;:::i;:::-;11505:74;;11588:93;11677:3;11588:93;:::i;:::-;11706:2;11701:3;11697:12;11690:19;;11349:366;;;:::o;11721:419::-;11887:4;11925:2;11914:9;11910:18;11902:26;;11974:9;11968:4;11964:20;11960:1;11949:9;11945:17;11938:47;12002:131;12128:4;12002:131;:::i;:::-;11994:139;;11721:419;;;:::o;12146:222::-;12286:34;12282:1;12274:6;12270:14;12263:58;12355:5;12350:2;12342:6;12338:15;12331:30;12146:222;:::o;12374:366::-;12516:3;12537:67;12601:2;12596:3;12537:67;:::i;:::-;12530:74;;12613:93;12702:3;12613:93;:::i;:::-;12731:2;12726:3;12722:12;12715:19;;12374:366;;;:::o;12746:419::-;12912:4;12950:2;12939:9;12935:18;12927:26;;12999:9;12993:4;12989:20;12985:1;12974:9;12970:17;12963:47;13027:131;13153:4;13027:131;:::i;:::-;13019:139;;12746:419;;;:::o;13171:225::-;13311:34;13307:1;13299:6;13295:14;13288:58;13380:8;13375:2;13367:6;13363:15;13356:33;13171:225;:::o;13402:366::-;13544:3;13565:67;13629:2;13624:3;13565:67;:::i;:::-;13558:74;;13641:93;13730:3;13641:93;:::i;:::-;13759:2;13754:3;13750:12;13743:19;;13402:366;;;:::o;13774:419::-;13940:4;13978:2;13967:9;13963:18;13955:26;;14027:9;14021:4;14017:20;14013:1;14002:9;13998:17;13991:47;14055:131;14181:4;14055:131;:::i;:::-;14047:139;;13774:419;;;:::o;14199:220::-;14339:34;14335:1;14327:6;14323:14;14316:58;14408:3;14403:2;14395:6;14391:15;14384:28;14199:220;:::o;14425:366::-;14567:3;14588:67;14652:2;14647:3;14588:67;:::i;:::-;14581:74;;14664:93;14753:3;14664:93;:::i;:::-;14782:2;14777:3;14773:12;14766:19;;14425:366;;;:::o;14797:419::-;14963:4;15001:2;14990:9;14986:18;14978:26;;15050:9;15044:4;15040:20;15036:1;15025:9;15021:17;15014:47;15078:131;15204:4;15078:131;:::i;:::-;15070:139;;14797:419;;;:::o;15222:221::-;15362:34;15358:1;15350:6;15346:14;15339:58;15431:4;15426:2;15418:6;15414:15;15407:29;15222:221;:::o;15449:366::-;15591:3;15612:67;15676:2;15671:3;15612:67;:::i;:::-;15605:74;;15688:93;15777:3;15688:93;:::i;:::-;15806:2;15801:3;15797:12;15790:19;;15449:366;;;:::o;15821:419::-;15987:4;16025:2;16014:9;16010:18;16002:26;;16074:9;16068:4;16064:20;16060:1;16049:9;16045:17;16038:47;16102:131;16228:4;16102:131;:::i;:::-;16094:139;;15821:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1129600","executionCost":"infinite","totalCost":"infinite"},"external":{"allowance(address,address)":"infinite","approve(address,uint256)":"infinite","balanceOf(address)":"2886","burn(uint256)":"infinite","burnFrom(address,uint256)":"infinite","decimals()":"432","decreaseAllowance(address,uint256)":"infinite","increaseAllowance(address,uint256)":"infinite","name()":"infinite","symbol()":"infinite","totalSupply()":"2482","transfer(address,uint256)":"infinite","transferFrom(address,address,uint256)":"infinite"}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(uint256)":"42966c68","burnFrom(address,uint256)":"79cc6790","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"max_supply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20_BASE.sol\":\"Token\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ERC20_BASE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\n\\ncontract Token is ERC20, ERC20Burnable {\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint256 max_supply\\n    ) ERC20(name, symbol) {\\n        _mint(msg.sender, max_supply * 10**decimals());\\n    }\\n}\\n\",\"keccak256\":\"0xe016b32d036eb684df80a8754de89bb9d6f5db2c1bda774b93f54d7d42e719fd\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":128,"contract":"contracts/ERC20_BASE.sol:Token","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":134,"contract":"contracts/ERC20_BASE.sol:Token","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":136,"contract":"contracts/ERC20_BASE.sol:Token","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":138,"contract":"contracts/ERC20_BASE.sol:Token","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":140,"contract":"contracts/ERC20_BASE.sol:Token","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ERC20_BASE_PERMIT.sol":{"Token":{"abi":[{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"uint256","name":"max_supply","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"See {IERC20Permit-DOMAIN_SEPARATOR}."},"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"burn(uint256)":{"details":"Destroys `amount` tokens from the caller. See {ERC20-_burn}."},"burnFrom(address,uint256)":{"details":"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"nonces(address)":{"details":"See {IERC20Permit-nonces}."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"See {IERC20Permit-permit}."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_157":{"entryPoint":null,"id":157,"parameterSlots":2,"returnSlots":0},"@_3713":{"entryPoint":null,"id":3713,"parameterSlots":2,"returnSlots":0},"@_4760":{"entryPoint":null,"id":4760,"parameterSlots":3,"returnSlots":0},"@_888":{"entryPoint":null,"id":888,"parameterSlots":1,"returnSlots":0},"@_afterTokenTransfer_698":{"entryPoint":854,"id":698,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_687":{"entryPoint":849,"id":687,"parameterSlots":3,"returnSlots":0},"@_buildDomainSeparator_3769":{"entryPoint":414,"id":3769,"parameterSlots":3,"returnSlots":1},"@_mint_516":{"entryPoint":483,"id":516,"parameterSlots":2,"returnSlots":0},"@decimals_187":{"entryPoint":474,"id":187,"parameterSlots":0,"returnSlots":1},"abi_decode_available_length_t_string_memory_ptr_fromMemory":{"entryPoint":1322,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_string_memory_ptr_fromMemory":{"entryPoint":1397,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":1484,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_uint256_fromMemory":{"entryPoint":1507,"id":null,"parameterSlots":2,"returnSlots":3},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":2335,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":2249,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack":{"entryPoint":2503,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":2266,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed":{"entryPoint":2352,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2542,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":2669,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":1183,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":1035,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":1214,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":2445,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":2576,"id":null,"parameterSlots":2,"returnSlots":1},"checked_exp_helper":{"entryPoint":1721,"id":null,"parameterSlots":4,"returnSlots":2},"checked_exp_t_uint256_t_uint8":{"entryPoint":2061,"id":null,"parameterSlots":2,"returnSlots":1},"checked_exp_unsigned":{"entryPoint":1812,"id":null,"parameterSlots":3,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":2142,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":2315,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":2239,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":2283,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":1448,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":2048,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":1268,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":2745,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":1129,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x11":{"entryPoint":1661,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":2698,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":1082,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":1055,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":1060,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":1050,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":1045,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":1065,"id":null,"parameterSlots":1,"returnSlots":1},"shift_right_1_unsigned":{"entryPoint":1708,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e":{"entryPoint":2462,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":1458,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:10626:26","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:26","statements":[{"nodeType":"YulAssignment","src":"57:19:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:26","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:26"},"nodeType":"YulFunctionCall","src":"67:9:26"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:26"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:26","type":""}],"src":"7:75:26"},{"body":{"nodeType":"YulBlock","src":"177:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:26"},"nodeType":"YulFunctionCall","src":"187:12:26"},"nodeType":"YulExpressionStatement","src":"187:12:26"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:26"},{"body":{"nodeType":"YulBlock","src":"300:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:26"},"nodeType":"YulFunctionCall","src":"310:12:26"},"nodeType":"YulExpressionStatement","src":"310:12:26"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:26"},{"body":{"nodeType":"YulBlock","src":"423:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"440:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"443:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"433:6:26"},"nodeType":"YulFunctionCall","src":"433:12:26"},"nodeType":"YulExpressionStatement","src":"433:12:26"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"334:117:26"},{"body":{"nodeType":"YulBlock","src":"546:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"563:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"566:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"556:6:26"},"nodeType":"YulFunctionCall","src":"556:12:26"},"nodeType":"YulExpressionStatement","src":"556:12:26"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"457:117:26"},{"body":{"nodeType":"YulBlock","src":"628:54:26","statements":[{"nodeType":"YulAssignment","src":"638:38:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"656:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"663:2:26","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"652:3:26"},"nodeType":"YulFunctionCall","src":"652:14:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"672:2:26","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"668:3:26"},"nodeType":"YulFunctionCall","src":"668:7:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"648:3:26"},"nodeType":"YulFunctionCall","src":"648:28:26"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"638:6:26"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"611:5:26","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"621:6:26","type":""}],"src":"580:102:26"},{"body":{"nodeType":"YulBlock","src":"716:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"733:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"736:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"726:6:26"},"nodeType":"YulFunctionCall","src":"726:88:26"},"nodeType":"YulExpressionStatement","src":"726:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"830:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"833:4:26","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"823:6:26"},"nodeType":"YulFunctionCall","src":"823:15:26"},"nodeType":"YulExpressionStatement","src":"823:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"854:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"857:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"847:6:26"},"nodeType":"YulFunctionCall","src":"847:15:26"},"nodeType":"YulExpressionStatement","src":"847:15:26"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"688:180:26"},{"body":{"nodeType":"YulBlock","src":"917:238:26","statements":[{"nodeType":"YulVariableDeclaration","src":"927:58:26","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"949:6:26"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"979:4:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"957:21:26"},"nodeType":"YulFunctionCall","src":"957:27:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"945:3:26"},"nodeType":"YulFunctionCall","src":"945:40:26"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"931:10:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"1096:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1098:16:26"},"nodeType":"YulFunctionCall","src":"1098:18:26"},"nodeType":"YulExpressionStatement","src":"1098:18:26"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1039:10:26"},{"kind":"number","nodeType":"YulLiteral","src":"1051:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1036:2:26"},"nodeType":"YulFunctionCall","src":"1036:34:26"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1075:10:26"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1087:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1072:2:26"},"nodeType":"YulFunctionCall","src":"1072:22:26"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1033:2:26"},"nodeType":"YulFunctionCall","src":"1033:62:26"},"nodeType":"YulIf","src":"1030:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1134:2:26","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1138:10:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1127:6:26"},"nodeType":"YulFunctionCall","src":"1127:22:26"},"nodeType":"YulExpressionStatement","src":"1127:22:26"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"903:6:26","type":""},{"name":"size","nodeType":"YulTypedName","src":"911:4:26","type":""}],"src":"874:281:26"},{"body":{"nodeType":"YulBlock","src":"1202:88:26","statements":[{"nodeType":"YulAssignment","src":"1212:30:26","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1222:18:26"},"nodeType":"YulFunctionCall","src":"1222:20:26"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1212:6:26"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1271:6:26"},{"name":"size","nodeType":"YulIdentifier","src":"1279:4:26"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1251:19:26"},"nodeType":"YulFunctionCall","src":"1251:33:26"},"nodeType":"YulExpressionStatement","src":"1251:33:26"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1186:4:26","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1195:6:26","type":""}],"src":"1161:129:26"},{"body":{"nodeType":"YulBlock","src":"1363:241:26","statements":[{"body":{"nodeType":"YulBlock","src":"1468:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1470:16:26"},"nodeType":"YulFunctionCall","src":"1470:18:26"},"nodeType":"YulExpressionStatement","src":"1470:18:26"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1440:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"1448:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1437:2:26"},"nodeType":"YulFunctionCall","src":"1437:30:26"},"nodeType":"YulIf","src":"1434:56:26"},{"nodeType":"YulAssignment","src":"1500:37:26","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1530:6:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1508:21:26"},"nodeType":"YulFunctionCall","src":"1508:29:26"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1500:4:26"}]},{"nodeType":"YulAssignment","src":"1574:23:26","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1586:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"1592:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1582:3:26"},"nodeType":"YulFunctionCall","src":"1582:15:26"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1574:4:26"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1347:6:26","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1358:4:26","type":""}],"src":"1296:308:26"},{"body":{"nodeType":"YulBlock","src":"1659:258:26","statements":[{"nodeType":"YulVariableDeclaration","src":"1669:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"1678:1:26","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1673:1:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"1738:63:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1763:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"1768:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1759:3:26"},"nodeType":"YulFunctionCall","src":"1759:11:26"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1782:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"1787:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1778:3:26"},"nodeType":"YulFunctionCall","src":"1778:11:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1772:5:26"},"nodeType":"YulFunctionCall","src":"1772:18:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1752:6:26"},"nodeType":"YulFunctionCall","src":"1752:39:26"},"nodeType":"YulExpressionStatement","src":"1752:39:26"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1699:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"1702:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1696:2:26"},"nodeType":"YulFunctionCall","src":"1696:13:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1710:19:26","statements":[{"nodeType":"YulAssignment","src":"1712:15:26","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1721:1:26"},{"kind":"number","nodeType":"YulLiteral","src":"1724:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1717:3:26"},"nodeType":"YulFunctionCall","src":"1717:10:26"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1712:1:26"}]}]},"pre":{"nodeType":"YulBlock","src":"1692:3:26","statements":[]},"src":"1688:113:26"},{"body":{"nodeType":"YulBlock","src":"1835:76:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1885:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"1890:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1881:3:26"},"nodeType":"YulFunctionCall","src":"1881:16:26"},{"kind":"number","nodeType":"YulLiteral","src":"1899:1:26","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1874:6:26"},"nodeType":"YulFunctionCall","src":"1874:27:26"},"nodeType":"YulExpressionStatement","src":"1874:27:26"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1816:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"1819:6:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1813:2:26"},"nodeType":"YulFunctionCall","src":"1813:13:26"},"nodeType":"YulIf","src":"1810:101:26"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1641:3:26","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1646:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"1651:6:26","type":""}],"src":"1610:307:26"},{"body":{"nodeType":"YulBlock","src":"2018:326:26","statements":[{"nodeType":"YulAssignment","src":"2028:75:26","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2095:6:26"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2053:41:26"},"nodeType":"YulFunctionCall","src":"2053:49:26"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2037:15:26"},"nodeType":"YulFunctionCall","src":"2037:66:26"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2028:5:26"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2119:5:26"},{"name":"length","nodeType":"YulIdentifier","src":"2126:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2112:6:26"},"nodeType":"YulFunctionCall","src":"2112:21:26"},"nodeType":"YulExpressionStatement","src":"2112:21:26"},{"nodeType":"YulVariableDeclaration","src":"2142:27:26","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2157:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"2164:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2153:3:26"},"nodeType":"YulFunctionCall","src":"2153:16:26"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2146:3:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"2207:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"2209:77:26"},"nodeType":"YulFunctionCall","src":"2209:79:26"},"nodeType":"YulExpressionStatement","src":"2209:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2188:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"2193:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2184:3:26"},"nodeType":"YulFunctionCall","src":"2184:16:26"},{"name":"end","nodeType":"YulIdentifier","src":"2202:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2181:2:26"},"nodeType":"YulFunctionCall","src":"2181:25:26"},"nodeType":"YulIf","src":"2178:112:26"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2321:3:26"},{"name":"dst","nodeType":"YulIdentifier","src":"2326:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"2331:6:26"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"2299:21:26"},"nodeType":"YulFunctionCall","src":"2299:39:26"},"nodeType":"YulExpressionStatement","src":"2299:39:26"}]},"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1991:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"1996:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"2004:3:26","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2012:5:26","type":""}],"src":"1923:421:26"},{"body":{"nodeType":"YulBlock","src":"2437:282:26","statements":[{"body":{"nodeType":"YulBlock","src":"2486:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"2488:77:26"},"nodeType":"YulFunctionCall","src":"2488:79:26"},"nodeType":"YulExpressionStatement","src":"2488:79:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2465:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"2473:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2461:3:26"},"nodeType":"YulFunctionCall","src":"2461:17:26"},{"name":"end","nodeType":"YulIdentifier","src":"2480:3:26"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2457:3:26"},"nodeType":"YulFunctionCall","src":"2457:27:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2450:6:26"},"nodeType":"YulFunctionCall","src":"2450:35:26"},"nodeType":"YulIf","src":"2447:122:26"},{"nodeType":"YulVariableDeclaration","src":"2578:27:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2598:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2592:5:26"},"nodeType":"YulFunctionCall","src":"2592:13:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2582:6:26","type":""}]},{"nodeType":"YulAssignment","src":"2614:99:26","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2686:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"2694:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2682:3:26"},"nodeType":"YulFunctionCall","src":"2682:17:26"},{"name":"length","nodeType":"YulIdentifier","src":"2701:6:26"},{"name":"end","nodeType":"YulIdentifier","src":"2709:3:26"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"2623:58:26"},"nodeType":"YulFunctionCall","src":"2623:90:26"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2614:5:26"}]}]},"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2415:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"2423:3:26","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2431:5:26","type":""}],"src":"2364:355:26"},{"body":{"nodeType":"YulBlock","src":"2770:32:26","statements":[{"nodeType":"YulAssignment","src":"2780:16:26","value":{"name":"value","nodeType":"YulIdentifier","src":"2791:5:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2780:7:26"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2752:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2762:7:26","type":""}],"src":"2725:77:26"},{"body":{"nodeType":"YulBlock","src":"2851:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"2908:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2917:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2920:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2910:6:26"},"nodeType":"YulFunctionCall","src":"2910:12:26"},"nodeType":"YulExpressionStatement","src":"2910:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2874:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2899:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2881:17:26"},"nodeType":"YulFunctionCall","src":"2881:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2871:2:26"},"nodeType":"YulFunctionCall","src":"2871:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2864:6:26"},"nodeType":"YulFunctionCall","src":"2864:43:26"},"nodeType":"YulIf","src":"2861:63:26"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2844:5:26","type":""}],"src":"2808:122:26"},{"body":{"nodeType":"YulBlock","src":"2999:80:26","statements":[{"nodeType":"YulAssignment","src":"3009:22:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3024:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3018:5:26"},"nodeType":"YulFunctionCall","src":"3018:13:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3009:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3067:5:26"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"3040:26:26"},"nodeType":"YulFunctionCall","src":"3040:33:26"},"nodeType":"YulExpressionStatement","src":"3040:33:26"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2977:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"2985:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2993:5:26","type":""}],"src":"2936:143:26"},{"body":{"nodeType":"YulBlock","src":"3216:878:26","statements":[{"body":{"nodeType":"YulBlock","src":"3262:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3264:77:26"},"nodeType":"YulFunctionCall","src":"3264:79:26"},"nodeType":"YulExpressionStatement","src":"3264:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3237:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"3246:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3233:3:26"},"nodeType":"YulFunctionCall","src":"3233:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"3258:2:26","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3229:3:26"},"nodeType":"YulFunctionCall","src":"3229:32:26"},"nodeType":"YulIf","src":"3226:119:26"},{"nodeType":"YulBlock","src":"3355:291:26","statements":[{"nodeType":"YulVariableDeclaration","src":"3370:38:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3394:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3405:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3390:3:26"},"nodeType":"YulFunctionCall","src":"3390:17:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3384:5:26"},"nodeType":"YulFunctionCall","src":"3384:24:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3374:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"3455:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3457:77:26"},"nodeType":"YulFunctionCall","src":"3457:79:26"},"nodeType":"YulExpressionStatement","src":"3457:79:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3427:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"3435:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3424:2:26"},"nodeType":"YulFunctionCall","src":"3424:30:26"},"nodeType":"YulIf","src":"3421:117:26"},{"nodeType":"YulAssignment","src":"3552:84:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3608:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"3619:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3604:3:26"},"nodeType":"YulFunctionCall","src":"3604:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3628:7:26"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3562:41:26"},"nodeType":"YulFunctionCall","src":"3562:74:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3552:6:26"}]}]},{"nodeType":"YulBlock","src":"3656:292:26","statements":[{"nodeType":"YulVariableDeclaration","src":"3671:39:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3695:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3706:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3691:3:26"},"nodeType":"YulFunctionCall","src":"3691:18:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3685:5:26"},"nodeType":"YulFunctionCall","src":"3685:25:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3675:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"3757:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3759:77:26"},"nodeType":"YulFunctionCall","src":"3759:79:26"},"nodeType":"YulExpressionStatement","src":"3759:79:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3729:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"3737:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3726:2:26"},"nodeType":"YulFunctionCall","src":"3726:30:26"},"nodeType":"YulIf","src":"3723:117:26"},{"nodeType":"YulAssignment","src":"3854:84:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3910:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"3921:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3906:3:26"},"nodeType":"YulFunctionCall","src":"3906:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3930:7:26"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3864:41:26"},"nodeType":"YulFunctionCall","src":"3864:74:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3854:6:26"}]}]},{"nodeType":"YulBlock","src":"3958:129:26","statements":[{"nodeType":"YulVariableDeclaration","src":"3973:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"3987:2:26","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3977:6:26","type":""}]},{"nodeType":"YulAssignment","src":"4003:74:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4049:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"4060:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4045:3:26"},"nodeType":"YulFunctionCall","src":"4045:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4069:7:26"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"4013:31:26"},"nodeType":"YulFunctionCall","src":"4013:64:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4003:6:26"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3170:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3181:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3193:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3201:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3209:6:26","type":""}],"src":"3085:1009:26"},{"body":{"nodeType":"YulBlock","src":"4128:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4145:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4148:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4138:6:26"},"nodeType":"YulFunctionCall","src":"4138:88:26"},"nodeType":"YulExpressionStatement","src":"4138:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4242:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4245:4:26","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4235:6:26"},"nodeType":"YulFunctionCall","src":"4235:15:26"},"nodeType":"YulExpressionStatement","src":"4235:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4266:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4269:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4259:6:26"},"nodeType":"YulFunctionCall","src":"4259:15:26"},"nodeType":"YulExpressionStatement","src":"4259:15:26"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"4100:180:26"},{"body":{"nodeType":"YulBlock","src":"4337:51:26","statements":[{"nodeType":"YulAssignment","src":"4347:34:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4372:1:26","type":"","value":"1"},{"name":"value","nodeType":"YulIdentifier","src":"4375:5:26"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4368:3:26"},"nodeType":"YulFunctionCall","src":"4368:13:26"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"4347:8:26"}]}]},"name":"shift_right_1_unsigned","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4318:5:26","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"4328:8:26","type":""}],"src":"4286:102:26"},{"body":{"nodeType":"YulBlock","src":"4467:775:26","statements":[{"nodeType":"YulAssignment","src":"4477:15:26","value":{"name":"_power","nodeType":"YulIdentifier","src":"4486:6:26"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"4477:5:26"}]},{"nodeType":"YulAssignment","src":"4501:14:26","value":{"name":"_base","nodeType":"YulIdentifier","src":"4510:5:26"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"4501:4:26"}]},{"body":{"nodeType":"YulBlock","src":"4559:677:26","statements":[{"body":{"nodeType":"YulBlock","src":"4647:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"4649:16:26"},"nodeType":"YulFunctionCall","src":"4649:18:26"},"nodeType":"YulExpressionStatement","src":"4649:18:26"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"4625:4:26"},{"arguments":[{"name":"max","nodeType":"YulIdentifier","src":"4635:3:26"},{"name":"base","nodeType":"YulIdentifier","src":"4640:4:26"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4631:3:26"},"nodeType":"YulFunctionCall","src":"4631:14:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4622:2:26"},"nodeType":"YulFunctionCall","src":"4622:24:26"},"nodeType":"YulIf","src":"4619:50:26"},{"body":{"nodeType":"YulBlock","src":"4714:419:26","statements":[{"nodeType":"YulAssignment","src":"5094:25:26","value":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"5107:5:26"},{"name":"base","nodeType":"YulIdentifier","src":"5114:4:26"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"5103:3:26"},"nodeType":"YulFunctionCall","src":"5103:16:26"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"5094:5:26"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"4689:8:26"},{"kind":"number","nodeType":"YulLiteral","src":"4699:1:26","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4685:3:26"},"nodeType":"YulFunctionCall","src":"4685:16:26"},"nodeType":"YulIf","src":"4682:451:26"},{"nodeType":"YulAssignment","src":"5146:23:26","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"5158:4:26"},{"name":"base","nodeType":"YulIdentifier","src":"5164:4:26"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"5154:3:26"},"nodeType":"YulFunctionCall","src":"5154:15:26"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"5146:4:26"}]},{"nodeType":"YulAssignment","src":"5182:44:26","value":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"5217:8:26"}],"functionName":{"name":"shift_right_1_unsigned","nodeType":"YulIdentifier","src":"5194:22:26"},"nodeType":"YulFunctionCall","src":"5194:32:26"},"variableNames":[{"name":"exponent","nodeType":"YulIdentifier","src":"5182:8:26"}]}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"4535:8:26"},{"kind":"number","nodeType":"YulLiteral","src":"4545:1:26","type":"","value":"1"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4532:2:26"},"nodeType":"YulFunctionCall","src":"4532:15:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4548:2:26","statements":[]},"pre":{"nodeType":"YulBlock","src":"4528:3:26","statements":[]},"src":"4524:712:26"}]},"name":"checked_exp_helper","nodeType":"YulFunctionDefinition","parameters":[{"name":"_power","nodeType":"YulTypedName","src":"4422:6:26","type":""},{"name":"_base","nodeType":"YulTypedName","src":"4430:5:26","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"4437:8:26","type":""},{"name":"max","nodeType":"YulTypedName","src":"4447:3:26","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"4455:5:26","type":""},{"name":"base","nodeType":"YulTypedName","src":"4462:4:26","type":""}],"src":"4394:848:26"},{"body":{"nodeType":"YulBlock","src":"5308:1013:26","statements":[{"body":{"nodeType":"YulBlock","src":"5503:20:26","statements":[{"nodeType":"YulAssignment","src":"5505:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"5514:1:26","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"5505:5:26"}]},{"nodeType":"YulLeave","src":"5516:5:26"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"5493:8:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5486:6:26"},"nodeType":"YulFunctionCall","src":"5486:16:26"},"nodeType":"YulIf","src":"5483:40:26"},{"body":{"nodeType":"YulBlock","src":"5548:20:26","statements":[{"nodeType":"YulAssignment","src":"5550:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"5559:1:26","type":"","value":"0"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"5550:5:26"}]},{"nodeType":"YulLeave","src":"5561:5:26"}]},"condition":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"5542:4:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5535:6:26"},"nodeType":"YulFunctionCall","src":"5535:12:26"},"nodeType":"YulIf","src":"5532:36:26"},{"cases":[{"body":{"nodeType":"YulBlock","src":"5678:20:26","statements":[{"nodeType":"YulAssignment","src":"5680:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"5689:1:26","type":"","value":"1"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"5680:5:26"}]},{"nodeType":"YulLeave","src":"5691:5:26"}]},"nodeType":"YulCase","src":"5671:27:26","value":{"kind":"number","nodeType":"YulLiteral","src":"5676:1:26","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"5722:176:26","statements":[{"body":{"nodeType":"YulBlock","src":"5757:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"5759:16:26"},"nodeType":"YulFunctionCall","src":"5759:18:26"},"nodeType":"YulExpressionStatement","src":"5759:18:26"}]},"condition":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"5742:8:26"},{"kind":"number","nodeType":"YulLiteral","src":"5752:3:26","type":"","value":"255"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5739:2:26"},"nodeType":"YulFunctionCall","src":"5739:17:26"},"nodeType":"YulIf","src":"5736:43:26"},{"nodeType":"YulAssignment","src":"5792:25:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5805:1:26","type":"","value":"2"},{"name":"exponent","nodeType":"YulIdentifier","src":"5808:8:26"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"5801:3:26"},"nodeType":"YulFunctionCall","src":"5801:16:26"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"5792:5:26"}]},{"body":{"nodeType":"YulBlock","src":"5848:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"5850:16:26"},"nodeType":"YulFunctionCall","src":"5850:18:26"},"nodeType":"YulExpressionStatement","src":"5850:18:26"}]},"condition":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"5836:5:26"},{"name":"max","nodeType":"YulIdentifier","src":"5843:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5833:2:26"},"nodeType":"YulFunctionCall","src":"5833:14:26"},"nodeType":"YulIf","src":"5830:40:26"},{"nodeType":"YulLeave","src":"5883:5:26"}]},"nodeType":"YulCase","src":"5707:191:26","value":{"kind":"number","nodeType":"YulLiteral","src":"5712:1:26","type":"","value":"2"}}],"expression":{"name":"base","nodeType":"YulIdentifier","src":"5628:4:26"},"nodeType":"YulSwitch","src":"5621:277:26"},{"body":{"nodeType":"YulBlock","src":"6030:123:26","statements":[{"nodeType":"YulAssignment","src":"6044:28:26","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"6057:4:26"},{"name":"exponent","nodeType":"YulIdentifier","src":"6063:8:26"}],"functionName":{"name":"exp","nodeType":"YulIdentifier","src":"6053:3:26"},"nodeType":"YulFunctionCall","src":"6053:19:26"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"6044:5:26"}]},{"body":{"nodeType":"YulBlock","src":"6103:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6105:16:26"},"nodeType":"YulFunctionCall","src":"6105:18:26"},"nodeType":"YulExpressionStatement","src":"6105:18:26"}]},"condition":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"6091:5:26"},{"name":"max","nodeType":"YulIdentifier","src":"6098:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6088:2:26"},"nodeType":"YulFunctionCall","src":"6088:14:26"},"nodeType":"YulIf","src":"6085:40:26"},{"nodeType":"YulLeave","src":"6138:5:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"5933:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"5939:2:26","type":"","value":"11"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5930:2:26"},"nodeType":"YulFunctionCall","src":"5930:12:26"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"5947:8:26"},{"kind":"number","nodeType":"YulLiteral","src":"5957:2:26","type":"","value":"78"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5944:2:26"},"nodeType":"YulFunctionCall","src":"5944:16:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5926:3:26"},"nodeType":"YulFunctionCall","src":"5926:35:26"},{"arguments":[{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"5982:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"5988:3:26","type":"","value":"307"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5979:2:26"},"nodeType":"YulFunctionCall","src":"5979:13:26"},{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"5997:8:26"},{"kind":"number","nodeType":"YulLiteral","src":"6007:2:26","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5994:2:26"},"nodeType":"YulFunctionCall","src":"5994:16:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5975:3:26"},"nodeType":"YulFunctionCall","src":"5975:36:26"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5910:2:26"},"nodeType":"YulFunctionCall","src":"5910:111:26"},"nodeType":"YulIf","src":"5907:246:26"},{"nodeType":"YulAssignment","src":"6163:57:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6197:1:26","type":"","value":"1"},{"name":"base","nodeType":"YulIdentifier","src":"6200:4:26"},{"name":"exponent","nodeType":"YulIdentifier","src":"6206:8:26"},{"name":"max","nodeType":"YulIdentifier","src":"6216:3:26"}],"functionName":{"name":"checked_exp_helper","nodeType":"YulIdentifier","src":"6178:18:26"},"nodeType":"YulFunctionCall","src":"6178:42:26"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"6163:5:26"},{"name":"base","nodeType":"YulIdentifier","src":"6170:4:26"}]},{"body":{"nodeType":"YulBlock","src":"6259:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6261:16:26"},"nodeType":"YulFunctionCall","src":"6261:18:26"},"nodeType":"YulExpressionStatement","src":"6261:18:26"}]},"condition":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"6236:5:26"},{"arguments":[{"name":"max","nodeType":"YulIdentifier","src":"6247:3:26"},{"name":"base","nodeType":"YulIdentifier","src":"6252:4:26"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6243:3:26"},"nodeType":"YulFunctionCall","src":"6243:14:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6233:2:26"},"nodeType":"YulFunctionCall","src":"6233:25:26"},"nodeType":"YulIf","src":"6230:51:26"},{"nodeType":"YulAssignment","src":"6290:25:26","value":{"arguments":[{"name":"power","nodeType":"YulIdentifier","src":"6303:5:26"},{"name":"base","nodeType":"YulIdentifier","src":"6310:4:26"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6299:3:26"},"nodeType":"YulFunctionCall","src":"6299:16:26"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"6290:5:26"}]}]},"name":"checked_exp_unsigned","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"5278:4:26","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"5284:8:26","type":""},{"name":"max","nodeType":"YulTypedName","src":"5294:3:26","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"5302:5:26","type":""}],"src":"5248:1073:26"},{"body":{"nodeType":"YulBlock","src":"6370:43:26","statements":[{"nodeType":"YulAssignment","src":"6380:27:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6395:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"6402:4:26","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6391:3:26"},"nodeType":"YulFunctionCall","src":"6391:16:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"6380:7:26"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6352:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"6362:7:26","type":""}],"src":"6327:86:26"},{"body":{"nodeType":"YulBlock","src":"6483:217:26","statements":[{"nodeType":"YulAssignment","src":"6493:31:26","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"6519:4:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6501:17:26"},"nodeType":"YulFunctionCall","src":"6501:23:26"},"variableNames":[{"name":"base","nodeType":"YulIdentifier","src":"6493:4:26"}]},{"nodeType":"YulAssignment","src":"6533:37:26","value":{"arguments":[{"name":"exponent","nodeType":"YulIdentifier","src":"6561:8:26"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"6545:15:26"},"nodeType":"YulFunctionCall","src":"6545:25:26"},"variableNames":[{"name":"exponent","nodeType":"YulIdentifier","src":"6533:8:26"}]},{"nodeType":"YulAssignment","src":"6580:113:26","value":{"arguments":[{"name":"base","nodeType":"YulIdentifier","src":"6610:4:26"},{"name":"exponent","nodeType":"YulIdentifier","src":"6616:8:26"},{"kind":"number","nodeType":"YulLiteral","src":"6626:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"checked_exp_unsigned","nodeType":"YulIdentifier","src":"6589:20:26"},"nodeType":"YulFunctionCall","src":"6589:104:26"},"variableNames":[{"name":"power","nodeType":"YulIdentifier","src":"6580:5:26"}]}]},"name":"checked_exp_t_uint256_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"base","nodeType":"YulTypedName","src":"6458:4:26","type":""},{"name":"exponent","nodeType":"YulTypedName","src":"6464:8:26","type":""}],"returnVariables":[{"name":"power","nodeType":"YulTypedName","src":"6477:5:26","type":""}],"src":"6419:281:26"},{"body":{"nodeType":"YulBlock","src":"6754:300:26","statements":[{"nodeType":"YulAssignment","src":"6764:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6787:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6769:17:26"},"nodeType":"YulFunctionCall","src":"6769:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"6764:1:26"}]},{"nodeType":"YulAssignment","src":"6798:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"6821:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6803:17:26"},"nodeType":"YulFunctionCall","src":"6803:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"6798:1:26"}]},{"body":{"nodeType":"YulBlock","src":"6996:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6998:16:26"},"nodeType":"YulFunctionCall","src":"6998:18:26"},"nodeType":"YulExpressionStatement","src":"6998:18:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6908:1:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6901:6:26"},"nodeType":"YulFunctionCall","src":"6901:9:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6894:6:26"},"nodeType":"YulFunctionCall","src":"6894:17:26"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"6916:1:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6923:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"x","nodeType":"YulIdentifier","src":"6991:1:26"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6919:3:26"},"nodeType":"YulFunctionCall","src":"6919:74:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6913:2:26"},"nodeType":"YulFunctionCall","src":"6913:81:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6890:3:26"},"nodeType":"YulFunctionCall","src":"6890:105:26"},"nodeType":"YulIf","src":"6887:131:26"},{"nodeType":"YulAssignment","src":"7028:20:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7043:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"7046:1:26"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7039:3:26"},"nodeType":"YulFunctionCall","src":"7039:9:26"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"7028:7:26"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"6737:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"6740:1:26","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"6746:7:26","type":""}],"src":"6706:348:26"},{"body":{"nodeType":"YulBlock","src":"7105:32:26","statements":[{"nodeType":"YulAssignment","src":"7115:16:26","value":{"name":"value","nodeType":"YulIdentifier","src":"7126:5:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7115:7:26"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7087:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7097:7:26","type":""}],"src":"7060:77:26"},{"body":{"nodeType":"YulBlock","src":"7208:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7225:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7248:5:26"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"7230:17:26"},"nodeType":"YulFunctionCall","src":"7230:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7218:6:26"},"nodeType":"YulFunctionCall","src":"7218:37:26"},"nodeType":"YulExpressionStatement","src":"7218:37:26"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7196:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7203:3:26","type":""}],"src":"7143:118:26"},{"body":{"nodeType":"YulBlock","src":"7332:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7349:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7372:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"7354:17:26"},"nodeType":"YulFunctionCall","src":"7354:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7342:6:26"},"nodeType":"YulFunctionCall","src":"7342:37:26"},"nodeType":"YulExpressionStatement","src":"7342:37:26"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7320:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7327:3:26","type":""}],"src":"7267:118:26"},{"body":{"nodeType":"YulBlock","src":"7436:81:26","statements":[{"nodeType":"YulAssignment","src":"7446:65:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7461:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"7468:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7457:3:26"},"nodeType":"YulFunctionCall","src":"7457:54:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7446:7:26"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7418:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7428:7:26","type":""}],"src":"7391:126:26"},{"body":{"nodeType":"YulBlock","src":"7568:51:26","statements":[{"nodeType":"YulAssignment","src":"7578:35:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7607:5:26"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"7589:17:26"},"nodeType":"YulFunctionCall","src":"7589:24:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7578:7:26"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7550:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7560:7:26","type":""}],"src":"7523:96:26"},{"body":{"nodeType":"YulBlock","src":"7690:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7707:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7730:5:26"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"7712:17:26"},"nodeType":"YulFunctionCall","src":"7712:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7700:6:26"},"nodeType":"YulFunctionCall","src":"7700:37:26"},"nodeType":"YulExpressionStatement","src":"7700:37:26"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7678:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7685:3:26","type":""}],"src":"7625:118:26"},{"body":{"nodeType":"YulBlock","src":"7959:454:26","statements":[{"nodeType":"YulAssignment","src":"7969:27:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7981:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"7992:3:26","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7977:3:26"},"nodeType":"YulFunctionCall","src":"7977:19:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7969:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8050:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8063:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"8074:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8059:3:26"},"nodeType":"YulFunctionCall","src":"8059:17:26"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"8006:43:26"},"nodeType":"YulFunctionCall","src":"8006:71:26"},"nodeType":"YulExpressionStatement","src":"8006:71:26"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"8131:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8144:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"8155:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8140:3:26"},"nodeType":"YulFunctionCall","src":"8140:18:26"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"8087:43:26"},"nodeType":"YulFunctionCall","src":"8087:72:26"},"nodeType":"YulExpressionStatement","src":"8087:72:26"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"8213:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8226:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"8237:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8222:3:26"},"nodeType":"YulFunctionCall","src":"8222:18:26"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"8169:43:26"},"nodeType":"YulFunctionCall","src":"8169:72:26"},"nodeType":"YulExpressionStatement","src":"8169:72:26"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"8295:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8308:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"8319:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8304:3:26"},"nodeType":"YulFunctionCall","src":"8304:18:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"8251:43:26"},"nodeType":"YulFunctionCall","src":"8251:72:26"},"nodeType":"YulExpressionStatement","src":"8251:72:26"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"8377:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8390:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"8401:3:26","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8386:3:26"},"nodeType":"YulFunctionCall","src":"8386:19:26"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"8333:43:26"},"nodeType":"YulFunctionCall","src":"8333:73:26"},"nodeType":"YulExpressionStatement","src":"8333:73:26"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7899:9:26","type":""},{"name":"value4","nodeType":"YulTypedName","src":"7911:6:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7919:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7927:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7935:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7943:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7954:4:26","type":""}],"src":"7749:664:26"},{"body":{"nodeType":"YulBlock","src":"8515:73:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8532:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"8537:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8525:6:26"},"nodeType":"YulFunctionCall","src":"8525:19:26"},"nodeType":"YulExpressionStatement","src":"8525:19:26"},{"nodeType":"YulAssignment","src":"8553:29:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8572:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"8577:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8568:3:26"},"nodeType":"YulFunctionCall","src":"8568:14:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"8553:11:26"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8487:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"8492:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"8503:11:26","type":""}],"src":"8419:169:26"},{"body":{"nodeType":"YulBlock","src":"8700:75:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8722:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"8730:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8718:3:26"},"nodeType":"YulFunctionCall","src":"8718:14:26"},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"8734:33:26","type":"","value":"ERC20: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8711:6:26"},"nodeType":"YulFunctionCall","src":"8711:57:26"},"nodeType":"YulExpressionStatement","src":"8711:57:26"}]},"name":"store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"8692:6:26","type":""}],"src":"8594:181:26"},{"body":{"nodeType":"YulBlock","src":"8927:220:26","statements":[{"nodeType":"YulAssignment","src":"8937:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9003:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"9008:2:26","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8944:58:26"},"nodeType":"YulFunctionCall","src":"8944:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8937:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9109:3:26"}],"functionName":{"name":"store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","nodeType":"YulIdentifier","src":"9020:88:26"},"nodeType":"YulFunctionCall","src":"9020:93:26"},"nodeType":"YulExpressionStatement","src":"9020:93:26"},{"nodeType":"YulAssignment","src":"9122:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9133:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"9138:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9129:3:26"},"nodeType":"YulFunctionCall","src":"9129:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9122:3:26"}]}]},"name":"abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8915:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8923:3:26","type":""}],"src":"8781:366:26"},{"body":{"nodeType":"YulBlock","src":"9324:248:26","statements":[{"nodeType":"YulAssignment","src":"9334:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9346:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"9357:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9342:3:26"},"nodeType":"YulFunctionCall","src":"9342:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9334:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9381:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"9392:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9377:3:26"},"nodeType":"YulFunctionCall","src":"9377:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9400:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"9406:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9396:3:26"},"nodeType":"YulFunctionCall","src":"9396:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9370:6:26"},"nodeType":"YulFunctionCall","src":"9370:47:26"},"nodeType":"YulExpressionStatement","src":"9370:47:26"},{"nodeType":"YulAssignment","src":"9426:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9560:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9434:124:26"},"nodeType":"YulFunctionCall","src":"9434:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9426:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9304:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9319:4:26","type":""}],"src":"9153:419:26"},{"body":{"nodeType":"YulBlock","src":"9622:261:26","statements":[{"nodeType":"YulAssignment","src":"9632:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9655:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9637:17:26"},"nodeType":"YulFunctionCall","src":"9637:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"9632:1:26"}]},{"nodeType":"YulAssignment","src":"9666:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"9689:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9671:17:26"},"nodeType":"YulFunctionCall","src":"9671:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"9666:1:26"}]},{"body":{"nodeType":"YulBlock","src":"9829:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"9831:16:26"},"nodeType":"YulFunctionCall","src":"9831:18:26"},"nodeType":"YulExpressionStatement","src":"9831:18:26"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9750:1:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9757:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"y","nodeType":"YulIdentifier","src":"9825:1:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9753:3:26"},"nodeType":"YulFunctionCall","src":"9753:74:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9747:2:26"},"nodeType":"YulFunctionCall","src":"9747:81:26"},"nodeType":"YulIf","src":"9744:107:26"},{"nodeType":"YulAssignment","src":"9861:16:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9872:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"9875:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9868:3:26"},"nodeType":"YulFunctionCall","src":"9868:9:26"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"9861:3:26"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"9609:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"9612:1:26","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"9618:3:26","type":""}],"src":"9578:305:26"},{"body":{"nodeType":"YulBlock","src":"9987:124:26","statements":[{"nodeType":"YulAssignment","src":"9997:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10009:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"10020:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10005:3:26"},"nodeType":"YulFunctionCall","src":"10005:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9997:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"10077:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10090:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"10101:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10086:3:26"},"nodeType":"YulFunctionCall","src":"10086:17:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"10033:43:26"},"nodeType":"YulFunctionCall","src":"10033:71:26"},"nodeType":"YulExpressionStatement","src":"10033:71:26"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9959:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9971:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9982:4:26","type":""}],"src":"9889:222:26"},{"body":{"nodeType":"YulBlock","src":"10145:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10162:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10165:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10155:6:26"},"nodeType":"YulFunctionCall","src":"10155:88:26"},"nodeType":"YulExpressionStatement","src":"10155:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10259:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10262:4:26","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10252:6:26"},"nodeType":"YulFunctionCall","src":"10252:15:26"},"nodeType":"YulExpressionStatement","src":"10252:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10283:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10286:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10276:6:26"},"nodeType":"YulFunctionCall","src":"10276:15:26"},"nodeType":"YulExpressionStatement","src":"10276:15:26"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"10117:180:26"},{"body":{"nodeType":"YulBlock","src":"10354:269:26","statements":[{"nodeType":"YulAssignment","src":"10364:22:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10378:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"10384:1:26","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"10374:3:26"},"nodeType":"YulFunctionCall","src":"10374:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10364:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"10395:38:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10425:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"10431:1:26","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10421:3:26"},"nodeType":"YulFunctionCall","src":"10421:12:26"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"10399:18:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"10472:51:26","statements":[{"nodeType":"YulAssignment","src":"10486:27:26","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10500:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"10508:4:26","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10496:3:26"},"nodeType":"YulFunctionCall","src":"10496:17:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10486:6:26"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"10452:18:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10445:6:26"},"nodeType":"YulFunctionCall","src":"10445:26:26"},"nodeType":"YulIf","src":"10442:81:26"},{"body":{"nodeType":"YulBlock","src":"10575:42:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"10589:16:26"},"nodeType":"YulFunctionCall","src":"10589:18:26"},"nodeType":"YulExpressionStatement","src":"10589:18:26"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"10539:18:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10562:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"10570:2:26","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10559:2:26"},"nodeType":"YulFunctionCall","src":"10559:14:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10536:2:26"},"nodeType":"YulFunctionCall","src":"10536:38:26"},"nodeType":"YulIf","src":"10533:84:26"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"10338:4:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"10347:6:26","type":""}],"src":"10303:320:26"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function shift_right_1_unsigned(value) -> newValue {\n        newValue :=\n\n        shr(1, value)\n\n    }\n\n    function checked_exp_helper(_power, _base, exponent, max) -> power, base {\n        power := _power\n        base  := _base\n        for { } gt(exponent, 1) {}\n        {\n            // overflow check for base * base\n            if gt(base, div(max, base)) { panic_error_0x11() }\n            if and(exponent, 1)\n            {\n                // No checks for power := mul(power, base) needed, because the check\n                // for base * base above is sufficient, since:\n                // |power| <= base (proof by induction) and thus:\n                // |power * base| <= base * base <= max <= |min| (for signed)\n                // (this is equally true for signed and unsigned exp)\n                power := mul(power, base)\n            }\n            base := mul(base, base)\n            exponent := shift_right_1_unsigned(exponent)\n        }\n    }\n\n    function checked_exp_unsigned(base, exponent, max) -> power {\n        // This function currently cannot be inlined because of the\n        // \"leave\" statements. We have to improve the optimizer.\n\n        // Note that 0**0 == 1\n        if iszero(exponent) { power := 1 leave }\n        if iszero(base) { power := 0 leave }\n\n        // Specializations for small bases\n        switch base\n        // 0 is handled above\n        case 1 { power := 1 leave }\n        case 2\n        {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := exp(2, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n        if or(\n            and(lt(base, 11), lt(exponent, 78)),\n            and(lt(base, 307), lt(exponent, 32))\n        )\n        {\n            power := exp(base, exponent)\n            if gt(power, max) { panic_error_0x11() }\n            leave\n        }\n\n        power, base := checked_exp_helper(1, base, exponent, max)\n\n        if gt(power, div(max, base)) { panic_error_0x11() }\n        power := mul(power, base)\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power {\n        base := cleanup_t_uint256(base)\n        exponent := cleanup_t_uint8(exponent)\n\n        power := checked_exp_unsigned(base, exponent, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_address_to_t_address_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: mint to the zero address\")\n\n    }\n\n    function abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n}\n","id":26,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6101406040523480156200001257600080fd5b5060405162002d8038038062002d808339818101604052810190620000389190620005e3565b82806040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250858581600390805190602001906200008a9291906200035b565b508060049080519060200190620000a39291906200035b565b50505060008280519060200120905060008280519060200120905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90508260e081815250508161010081815250504660a081815250506200010f8184846200019e60201b60201c565b608081815250503073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505080610120818152505050505050505062000195336200016e620001da60201b60201c565b600a6200017c91906200080d565b836200018991906200085e565b620001e360201b60201c565b50505062000aef565b60008383834630604051602001620001bb95949392919062000930565b6040516020818303038152906040528051906020012090509392505050565b60006012905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562000256576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200024d90620009ee565b60405180910390fd5b6200026a600083836200035160201b60201c565b80600260008282546200027e919062000a10565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405162000331919062000a6d565b60405180910390a36200034d600083836200035660201b60201c565b5050565b505050565b505050565b828054620003699062000ab9565b90600052602060002090601f0160209004810192826200038d5760008555620003d9565b82601f10620003a857805160ff1916838001178555620003d9565b82800160010185558215620003d9579182015b82811115620003d8578251825591602001919060010190620003bb565b5b509050620003e89190620003ec565b5090565b5b8082111562000407576000816000905550600101620003ed565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620004748262000429565b810181811067ffffffffffffffff821117156200049657620004956200043a565b5b80604052505050565b6000620004ab6200040b565b9050620004b9828262000469565b919050565b600067ffffffffffffffff821115620004dc57620004db6200043a565b5b620004e78262000429565b9050602081019050919050565b60005b8381101562000514578082015181840152602081019050620004f7565b8381111562000524576000848401525b50505050565b6000620005416200053b84620004be565b6200049f565b90508281526020810184848401111562000560576200055f62000424565b5b6200056d848285620004f4565b509392505050565b600082601f8301126200058d576200058c6200041f565b5b81516200059f8482602086016200052a565b91505092915050565b6000819050919050565b620005bd81620005a8565b8114620005c957600080fd5b50565b600081519050620005dd81620005b2565b92915050565b600080600060608486031215620005ff57620005fe62000415565b5b600084015167ffffffffffffffff81111562000620576200061f6200041a565b5b6200062e8682870162000575565b935050602084015167ffffffffffffffff8111156200065257620006516200041a565b5b620006608682870162000575565b92505060406200067386828701620005cc565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156200070b57808604811115620006e357620006e26200067d565b5b6001851615620006f35780820291505b80810290506200070385620006ac565b9450620006c3565b94509492505050565b600082620007265760019050620007f9565b81620007365760009050620007f9565b81600181146200074f57600281146200075a5762000790565b6001915050620007f9565b60ff8411156200076f576200076e6200067d565b5b8360020a9150848211156200078957620007886200067d565b5b50620007f9565b5060208310610133831016604e8410600b8410161715620007ca5782820a905083811115620007c457620007c36200067d565b5b620007f9565b620007d98484846001620006b9565b92509050818404811115620007f357620007f26200067d565b5b81810290505b9392505050565b600060ff82169050919050565b60006200081a82620005a8565b9150620008278362000800565b9250620008567fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848462000714565b905092915050565b60006200086b82620005a8565b91506200087883620005a8565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620008b457620008b36200067d565b5b828202905092915050565b6000819050919050565b620008d481620008bf565b82525050565b620008e581620005a8565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200091882620008eb565b9050919050565b6200092a816200090b565b82525050565b600060a082019050620009476000830188620008c9565b620009566020830187620008c9565b620009656040830186620008c9565b620009746060830185620008da565b6200098360808301846200091f565b9695505050505050565b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000620009d6601f836200098d565b9150620009e3826200099e565b602082019050919050565b6000602082019050818103600083015262000a0981620009c7565b9050919050565b600062000a1d82620005a8565b915062000a2a83620005a8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000a625762000a616200067d565b5b828201905092915050565b600060208201905062000a846000830184620008da565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062000ad257607f821691505b6020821081141562000ae95762000ae862000a8a565b5b50919050565b60805160a05160c05160e051610100516101205161224162000b3f6000396000610df201526000610e3401526000610e1301526000610d4801526000610d9e01526000610dc701526122416000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806370a0823111610097578063a457c2d711610066578063a457c2d7146102c3578063a9059cbb146102f3578063d505accf14610323578063dd62ed3e1461033f57610100565b806370a082311461022957806379cc6790146102595780637ecebe001461027557806395d89b41146102a557610100565b8063313ce567116100d3578063313ce567146101a15780633644e515146101bf57806339509351146101dd57806342966c681461020d57610100565b806306fdde0314610105578063095ea7b31461012357806318160ddd1461015357806323b872dd14610171575b600080fd5b61010d61036f565b60405161011a9190611454565b60405180910390f35b61013d6004803603810190610138919061150f565b610401565b60405161014a919061156a565b60405180910390f35b61015b610424565b6040516101689190611594565b60405180910390f35b61018b600480360381019061018691906115af565b61042e565b604051610198919061156a565b60405180910390f35b6101a961045d565b6040516101b6919061161e565b60405180910390f35b6101c7610466565b6040516101d49190611652565b60405180910390f35b6101f760048036038101906101f2919061150f565b610475565b604051610204919061156a565b60405180910390f35b6102276004803603810190610222919061166d565b6104ac565b005b610243600480360381019061023e919061169a565b6104c0565b6040516102509190611594565b60405180910390f35b610273600480360381019061026e919061150f565b610508565b005b61028f600480360381019061028a919061169a565b610528565b60405161029c9190611594565b60405180910390f35b6102ad610578565b6040516102ba9190611454565b60405180910390f35b6102dd60048036038101906102d8919061150f565b61060a565b6040516102ea919061156a565b60405180910390f35b61030d6004803603810190610308919061150f565b610681565b60405161031a919061156a565b60405180910390f35b61033d6004803603810190610338919061171f565b6106a4565b005b610359600480360381019061035491906117c1565b6107e6565b6040516103669190611594565b60405180910390f35b60606003805461037e90611830565b80601f01602080910402602001604051908101604052809291908181526020018280546103aa90611830565b80156103f75780601f106103cc576101008083540402835291602001916103f7565b820191906000526020600020905b8154815290600101906020018083116103da57829003601f168201915b5050505050905090565b60008061040c61086d565b9050610419818585610875565b600191505092915050565b6000600254905090565b60008061043961086d565b9050610446858285610a40565b610451858585610acc565b60019150509392505050565b60006012905090565b6000610470610d44565b905090565b60008061048061086d565b90506104a181858561049285896107e6565b61049c9190611891565b610875565b600191505092915050565b6104bd6104b761086d565b82610e5e565b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61051a8261051461086d565b83610a40565b6105248282610e5e565b5050565b6000610571600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061102c565b9050919050565b60606004805461058790611830565b80601f01602080910402602001604051908101604052809291908181526020018280546105b390611830565b80156106005780601f106105d557610100808354040283529160200191610600565b820191906000526020600020905b8154815290600101906020018083116105e357829003601f168201915b5050505050905090565b60008061061561086d565b9050600061062382866107e6565b905083811015610668576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065f90611959565b60405180910390fd5b6106758286868403610875565b60019250505092915050565b60008061068c61086d565b9050610699818585610acc565b600191505092915050565b834211156106e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106de906119c5565b60405180910390fd5b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886107168c61103a565b8960405160200161072c969594939291906119f4565b604051602081830303815290604052805190602001209050600061074f82611098565b9050600061075f828787876110b2565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146107cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c690611aa1565b60405180910390fd5b6107da8a8a8a610875565b50505050505050505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108dc90611b33565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610955576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094c90611bc5565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610a339190611594565b60405180910390a3505050565b6000610a4c84846107e6565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610ac65781811015610ab8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aaf90611c31565b60405180910390fd5b610ac58484848403610875565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3390611cc3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610bac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba390611d55565b60405180910390fd5b610bb78383836110dd565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610c3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3490611de7565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d2b9190611594565b60405180910390a3610d3e8484846110e2565b50505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148015610dc057507f000000000000000000000000000000000000000000000000000000000000000046145b15610ded577f00000000000000000000000000000000000000000000000000000000000000009050610e5b565b610e587f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006110e7565b90505b90565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ece576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec590611e79565b60405180910390fd5b610eda826000836110dd565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610f60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5790611f0b565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516110139190611594565b60405180910390a3611027836000846110e2565b505050565b600081600001549050919050565b600080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506110878161102c565b915061109281611121565b50919050565b60006110ab6110a5610d44565b83611137565b9050919050565b60008060006110c38787878761116a565b915091506110d08161124d565b8192505050949350505050565b505050565b505050565b60008383834630604051602001611102959493929190611f2b565b6040516020818303038152906040528051906020012090509392505050565b6001816000016000828254019250508190555050565b6000828260405160200161114c929190611ff6565b60405160208183030381529060405280519060200120905092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156111a5576000600391509150611244565b6000600187878787604051600081526020016040526040516111ca949392919061202d565b6020604051602081039080840390855afa1580156111ec573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561123b57600060019250925050611244565b80600092509250505b94509492505050565b6000600481111561126157611260612072565b5b81600481111561127457611273612072565b5b141561127f576113b8565b6001600481111561129357611292612072565b5b8160048111156112a6576112a5612072565b5b14156112e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112de906120ed565b60405180910390fd5b600260048111156112fb576112fa612072565b5b81600481111561130e5761130d612072565b5b141561134f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134690612159565b60405180910390fd5b6003600481111561136357611362612072565b5b81600481111561137657611375612072565b5b14156113b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ae906121eb565b60405180910390fd5b5b50565b600081519050919050565b600082825260208201905092915050565b60005b838110156113f55780820151818401526020810190506113da565b83811115611404576000848401525b50505050565b6000601f19601f8301169050919050565b6000611426826113bb565b61143081856113c6565b93506114408185602086016113d7565b6114498161140a565b840191505092915050565b6000602082019050818103600083015261146e818461141b565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114a68261147b565b9050919050565b6114b68161149b565b81146114c157600080fd5b50565b6000813590506114d3816114ad565b92915050565b6000819050919050565b6114ec816114d9565b81146114f757600080fd5b50565b600081359050611509816114e3565b92915050565b6000806040838503121561152657611525611476565b5b6000611534858286016114c4565b9250506020611545858286016114fa565b9150509250929050565b60008115159050919050565b6115648161154f565b82525050565b600060208201905061157f600083018461155b565b92915050565b61158e816114d9565b82525050565b60006020820190506115a96000830184611585565b92915050565b6000806000606084860312156115c8576115c7611476565b5b60006115d6868287016114c4565b93505060206115e7868287016114c4565b92505060406115f8868287016114fa565b9150509250925092565b600060ff82169050919050565b61161881611602565b82525050565b6000602082019050611633600083018461160f565b92915050565b6000819050919050565b61164c81611639565b82525050565b60006020820190506116676000830184611643565b92915050565b60006020828403121561168357611682611476565b5b6000611691848285016114fa565b91505092915050565b6000602082840312156116b0576116af611476565b5b60006116be848285016114c4565b91505092915050565b6116d081611602565b81146116db57600080fd5b50565b6000813590506116ed816116c7565b92915050565b6116fc81611639565b811461170757600080fd5b50565b600081359050611719816116f3565b92915050565b600080600080600080600060e0888a03121561173e5761173d611476565b5b600061174c8a828b016114c4565b975050602061175d8a828b016114c4565b965050604061176e8a828b016114fa565b955050606061177f8a828b016114fa565b94505060806117908a828b016116de565b93505060a06117a18a828b0161170a565b92505060c06117b28a828b0161170a565b91505092959891949750929550565b600080604083850312156117d8576117d7611476565b5b60006117e6858286016114c4565b92505060206117f7858286016114c4565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061184857607f821691505b6020821081141561185c5761185b611801565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061189c826114d9565b91506118a7836114d9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156118dc576118db611862565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006119436025836113c6565b915061194e826118e7565b604082019050919050565b6000602082019050818103600083015261197281611936565b9050919050565b7f45524332305065726d69743a206578706972656420646561646c696e65000000600082015250565b60006119af601d836113c6565b91506119ba82611979565b602082019050919050565b600060208201905081810360008301526119de816119a2565b9050919050565b6119ee8161149b565b82525050565b600060c082019050611a096000830189611643565b611a1660208301886119e5565b611a2360408301876119e5565b611a306060830186611585565b611a3d6080830185611585565b611a4a60a0830184611585565b979650505050505050565b7f45524332305065726d69743a20696e76616c6964207369676e61747572650000600082015250565b6000611a8b601e836113c6565b9150611a9682611a55565b602082019050919050565b60006020820190508181036000830152611aba81611a7e565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611b1d6024836113c6565b9150611b2882611ac1565b604082019050919050565b60006020820190508181036000830152611b4c81611b10565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000611baf6022836113c6565b9150611bba82611b53565b604082019050919050565b60006020820190508181036000830152611bde81611ba2565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611c1b601d836113c6565b9150611c2682611be5565b602082019050919050565b60006020820190508181036000830152611c4a81611c0e565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000611cad6025836113c6565b9150611cb882611c51565b604082019050919050565b60006020820190508181036000830152611cdc81611ca0565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611d3f6023836113c6565b9150611d4a82611ce3565b604082019050919050565b60006020820190508181036000830152611d6e81611d32565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000611dd16026836113c6565b9150611ddc82611d75565b604082019050919050565b60006020820190508181036000830152611e0081611dc4565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000611e636021836113c6565b9150611e6e82611e07565b604082019050919050565b60006020820190508181036000830152611e9281611e56565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000611ef56022836113c6565b9150611f0082611e99565b604082019050919050565b60006020820190508181036000830152611f2481611ee8565b9050919050565b600060a082019050611f406000830188611643565b611f4d6020830187611643565b611f5a6040830186611643565b611f676060830185611585565b611f7460808301846119e5565b9695505050505050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000611fbf600283611f7e565b9150611fca82611f89565b600282019050919050565b6000819050919050565b611ff0611feb82611639565b611fd5565b82525050565b600061200182611fb2565b915061200d8285611fdf565b60208201915061201d8284611fdf565b6020820191508190509392505050565b60006080820190506120426000830187611643565b61204f602083018661160f565b61205c6040830185611643565b6120696060830184611643565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b60006120d76018836113c6565b91506120e2826120a1565b602082019050919050565b60006020820190508181036000830152612106816120ca565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000612143601f836113c6565b915061214e8261210d565b602082019050919050565b6000602082019050818103600083015261217281612136565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006121d56022836113c6565b91506121e082612179565b604082019050919050565b60006020820190508181036000830152612204816121c8565b905091905056fea26469706673582212209e24fb2f0b7313b0399ce8052a1576292abe1bb29060998c6b1d278209b7776d64736f6c63430008090033","opcodes":"PUSH2 0x140 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2D80 CODESIZE SUB DUP1 PUSH3 0x2D80 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x38 SWAP2 SWAP1 PUSH3 0x5E3 JUMP JUMPDEST DUP3 DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3100000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP6 DUP6 DUP2 PUSH1 0x3 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x8A SWAP3 SWAP2 SWAP1 PUSH3 0x35B JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0xA3 SWAP3 SWAP2 SWAP1 PUSH3 0x35B JUMP JUMPDEST POP POP POP PUSH1 0x0 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F SWAP1 POP DUP3 PUSH1 0xE0 DUP2 DUP2 MSTORE POP POP DUP2 PUSH2 0x100 DUP2 DUP2 MSTORE POP POP CHAINID PUSH1 0xA0 DUP2 DUP2 MSTORE POP POP PUSH3 0x10F DUP2 DUP5 DUP5 PUSH3 0x19E PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x80 DUP2 DUP2 MSTORE POP POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP1 PUSH2 0x120 DUP2 DUP2 MSTORE POP POP POP POP POP POP POP POP PUSH3 0x195 CALLER PUSH3 0x16E PUSH3 0x1DA PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0xA PUSH3 0x17C SWAP2 SWAP1 PUSH3 0x80D JUMP JUMPDEST DUP4 PUSH3 0x189 SWAP2 SWAP1 PUSH3 0x85E JUMP JUMPDEST PUSH3 0x1E3 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP POP POP PUSH3 0xAEF JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP4 CHAINID ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x1BB SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x930 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH3 0x256 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x24D SWAP1 PUSH3 0x9EE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x26A PUSH1 0x0 DUP4 DUP4 PUSH3 0x351 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH3 0x27E SWAP2 SWAP1 PUSH3 0xA10 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH3 0x331 SWAP2 SWAP1 PUSH3 0xA6D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH3 0x34D PUSH1 0x0 DUP4 DUP4 PUSH3 0x356 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x369 SWAP1 PUSH3 0xAB9 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x38D JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x3D9 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x3A8 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x3D9 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x3D9 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x3D8 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x3BB JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0x3E8 SWAP2 SWAP1 PUSH3 0x3EC JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x407 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x3ED JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0x474 DUP3 PUSH3 0x429 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x496 JUMPI PUSH3 0x495 PUSH3 0x43A JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x4AB PUSH3 0x40B JUMP JUMPDEST SWAP1 POP PUSH3 0x4B9 DUP3 DUP3 PUSH3 0x469 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x4DC JUMPI PUSH3 0x4DB PUSH3 0x43A JUMP JUMPDEST JUMPDEST PUSH3 0x4E7 DUP3 PUSH3 0x429 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x514 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x4F7 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x524 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x541 PUSH3 0x53B DUP5 PUSH3 0x4BE JUMP JUMPDEST PUSH3 0x49F JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x560 JUMPI PUSH3 0x55F PUSH3 0x424 JUMP JUMPDEST JUMPDEST PUSH3 0x56D DUP5 DUP3 DUP6 PUSH3 0x4F4 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x58D JUMPI PUSH3 0x58C PUSH3 0x41F JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x59F DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x52A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x5BD DUP2 PUSH3 0x5A8 JUMP JUMPDEST DUP2 EQ PUSH3 0x5C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x5DD DUP2 PUSH3 0x5B2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x5FF JUMPI PUSH3 0x5FE PUSH3 0x415 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP5 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x620 JUMPI PUSH3 0x61F PUSH3 0x41A JUMP JUMPDEST JUMPDEST PUSH3 0x62E DUP7 DUP3 DUP8 ADD PUSH3 0x575 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x652 JUMPI PUSH3 0x651 PUSH3 0x41A JUMP JUMPDEST JUMPDEST PUSH3 0x660 DUP7 DUP3 DUP8 ADD PUSH3 0x575 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH3 0x673 DUP7 DUP3 DUP8 ADD PUSH3 0x5CC JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP2 POP DUP4 SWAP1 POP JUMPDEST PUSH1 0x1 DUP6 GT ISZERO PUSH3 0x70B JUMPI DUP1 DUP7 DIV DUP2 GT ISZERO PUSH3 0x6E3 JUMPI PUSH3 0x6E2 PUSH3 0x67D JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP6 AND ISZERO PUSH3 0x6F3 JUMPI DUP1 DUP3 MUL SWAP2 POP JUMPDEST DUP1 DUP2 MUL SWAP1 POP PUSH3 0x703 DUP6 PUSH3 0x6AC JUMP JUMPDEST SWAP5 POP PUSH3 0x6C3 JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH3 0x726 JUMPI PUSH1 0x1 SWAP1 POP PUSH3 0x7F9 JUMP JUMPDEST DUP2 PUSH3 0x736 JUMPI PUSH1 0x0 SWAP1 POP PUSH3 0x7F9 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH3 0x74F JUMPI PUSH1 0x2 DUP2 EQ PUSH3 0x75A JUMPI PUSH3 0x790 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH3 0x7F9 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH3 0x76F JUMPI PUSH3 0x76E PUSH3 0x67D JUMP JUMPDEST JUMPDEST DUP4 PUSH1 0x2 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH3 0x789 JUMPI PUSH3 0x788 PUSH3 0x67D JUMP JUMPDEST JUMPDEST POP PUSH3 0x7F9 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH3 0x7CA JUMPI DUP3 DUP3 EXP SWAP1 POP DUP4 DUP2 GT ISZERO PUSH3 0x7C4 JUMPI PUSH3 0x7C3 PUSH3 0x67D JUMP JUMPDEST JUMPDEST PUSH3 0x7F9 JUMP JUMPDEST PUSH3 0x7D9 DUP5 DUP5 DUP5 PUSH1 0x1 PUSH3 0x6B9 JUMP JUMPDEST SWAP3 POP SWAP1 POP DUP2 DUP5 DIV DUP2 GT ISZERO PUSH3 0x7F3 JUMPI PUSH3 0x7F2 PUSH3 0x67D JUMP JUMPDEST JUMPDEST DUP2 DUP2 MUL SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x81A DUP3 PUSH3 0x5A8 JUMP JUMPDEST SWAP2 POP PUSH3 0x827 DUP4 PUSH3 0x800 JUMP JUMPDEST SWAP3 POP PUSH3 0x856 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP5 PUSH3 0x714 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x86B DUP3 PUSH3 0x5A8 JUMP JUMPDEST SWAP2 POP PUSH3 0x878 DUP4 PUSH3 0x5A8 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH3 0x8B4 JUMPI PUSH3 0x8B3 PUSH3 0x67D JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x8D4 DUP2 PUSH3 0x8BF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH3 0x8E5 DUP2 PUSH3 0x5A8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x918 DUP3 PUSH3 0x8EB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x92A DUP2 PUSH3 0x90B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH3 0x947 PUSH1 0x0 DUP4 ADD DUP9 PUSH3 0x8C9 JUMP JUMPDEST PUSH3 0x956 PUSH1 0x20 DUP4 ADD DUP8 PUSH3 0x8C9 JUMP JUMPDEST PUSH3 0x965 PUSH1 0x40 DUP4 ADD DUP7 PUSH3 0x8C9 JUMP JUMPDEST PUSH3 0x974 PUSH1 0x60 DUP4 ADD DUP6 PUSH3 0x8DA JUMP JUMPDEST PUSH3 0x983 PUSH1 0x80 DUP4 ADD DUP5 PUSH3 0x91F JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x9D6 PUSH1 0x1F DUP4 PUSH3 0x98D JUMP JUMPDEST SWAP2 POP PUSH3 0x9E3 DUP3 PUSH3 0x99E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0xA09 DUP2 PUSH3 0x9C7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xA1D DUP3 PUSH3 0x5A8 JUMP JUMPDEST SWAP2 POP PUSH3 0xA2A DUP4 PUSH3 0x5A8 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH3 0xA62 JUMPI PUSH3 0xA61 PUSH3 0x67D JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0xA84 PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x8DA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0xAD2 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0xAE9 JUMPI PUSH3 0xAE8 PUSH3 0xA8A JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x2241 PUSH3 0xB3F PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0xDF2 ADD MSTORE PUSH1 0x0 PUSH2 0xE34 ADD MSTORE PUSH1 0x0 PUSH2 0xE13 ADD MSTORE PUSH1 0x0 PUSH2 0xD48 ADD MSTORE PUSH1 0x0 PUSH2 0xD9E ADD MSTORE PUSH1 0x0 PUSH2 0xDC7 ADD MSTORE PUSH2 0x2241 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x100 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x2C3 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x2F3 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x323 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x33F JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x229 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x259 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x275 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x2A5 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x1BF JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x1DD JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x20D JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x171 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10D PUSH2 0x36F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11A SWAP2 SWAP1 PUSH2 0x1454 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x138 SWAP2 SWAP1 PUSH2 0x150F JUMP JUMPDEST PUSH2 0x401 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14A SWAP2 SWAP1 PUSH2 0x156A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x15B PUSH2 0x424 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x168 SWAP2 SWAP1 PUSH2 0x1594 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x18B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x186 SWAP2 SWAP1 PUSH2 0x15AF JUMP JUMPDEST PUSH2 0x42E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x198 SWAP2 SWAP1 PUSH2 0x156A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A9 PUSH2 0x45D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B6 SWAP2 SWAP1 PUSH2 0x161E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C7 PUSH2 0x466 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D4 SWAP2 SWAP1 PUSH2 0x1652 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F2 SWAP2 SWAP1 PUSH2 0x150F JUMP JUMPDEST PUSH2 0x475 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x204 SWAP2 SWAP1 PUSH2 0x156A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x227 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x222 SWAP2 SWAP1 PUSH2 0x166D JUMP JUMPDEST PUSH2 0x4AC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x243 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x23E SWAP2 SWAP1 PUSH2 0x169A JUMP JUMPDEST PUSH2 0x4C0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x250 SWAP2 SWAP1 PUSH2 0x1594 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x273 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x26E SWAP2 SWAP1 PUSH2 0x150F JUMP JUMPDEST PUSH2 0x508 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x28F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x28A SWAP2 SWAP1 PUSH2 0x169A JUMP JUMPDEST PUSH2 0x528 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29C SWAP2 SWAP1 PUSH2 0x1594 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AD PUSH2 0x578 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2BA SWAP2 SWAP1 PUSH2 0x1454 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2DD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2D8 SWAP2 SWAP1 PUSH2 0x150F JUMP JUMPDEST PUSH2 0x60A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2EA SWAP2 SWAP1 PUSH2 0x156A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x30D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x308 SWAP2 SWAP1 PUSH2 0x150F JUMP JUMPDEST PUSH2 0x681 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31A SWAP2 SWAP1 PUSH2 0x156A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x33D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x338 SWAP2 SWAP1 PUSH2 0x171F JUMP JUMPDEST PUSH2 0x6A4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x359 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x354 SWAP2 SWAP1 PUSH2 0x17C1 JUMP JUMPDEST PUSH2 0x7E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x366 SWAP2 SWAP1 PUSH2 0x1594 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x37E SWAP1 PUSH2 0x1830 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3AA SWAP1 PUSH2 0x1830 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3F7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3CC JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3F7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3DA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x40C PUSH2 0x86D JUMP JUMPDEST SWAP1 POP PUSH2 0x419 DUP2 DUP6 DUP6 PUSH2 0x875 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x439 PUSH2 0x86D JUMP JUMPDEST SWAP1 POP PUSH2 0x446 DUP6 DUP3 DUP6 PUSH2 0xA40 JUMP JUMPDEST PUSH2 0x451 DUP6 DUP6 DUP6 PUSH2 0xACC JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x470 PUSH2 0xD44 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x480 PUSH2 0x86D JUMP JUMPDEST SWAP1 POP PUSH2 0x4A1 DUP2 DUP6 DUP6 PUSH2 0x492 DUP6 DUP10 PUSH2 0x7E6 JUMP JUMPDEST PUSH2 0x49C SWAP2 SWAP1 PUSH2 0x1891 JUMP JUMPDEST PUSH2 0x875 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x4BD PUSH2 0x4B7 PUSH2 0x86D JUMP JUMPDEST DUP3 PUSH2 0xE5E JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x51A DUP3 PUSH2 0x514 PUSH2 0x86D JUMP JUMPDEST DUP4 PUSH2 0xA40 JUMP JUMPDEST PUSH2 0x524 DUP3 DUP3 PUSH2 0xE5E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x571 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x102C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x587 SWAP1 PUSH2 0x1830 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x5B3 SWAP1 PUSH2 0x1830 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x600 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5D5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x600 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x5E3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x615 PUSH2 0x86D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x623 DUP3 DUP7 PUSH2 0x7E6 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x668 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x65F SWAP1 PUSH2 0x1959 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x675 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x875 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x68C PUSH2 0x86D JUMP JUMPDEST SWAP1 POP PUSH2 0x699 DUP2 DUP6 DUP6 PUSH2 0xACC JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x6E7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6DE SWAP1 PUSH2 0x19C5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x716 DUP13 PUSH2 0x103A JUMP JUMPDEST DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x72C SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x19F4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x74F DUP3 PUSH2 0x1098 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x75F DUP3 DUP8 DUP8 DUP8 PUSH2 0x10B2 JUMP JUMPDEST SWAP1 POP DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x7CF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7C6 SWAP1 PUSH2 0x1AA1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7DA DUP11 DUP11 DUP11 PUSH2 0x875 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x8E5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8DC SWAP1 PUSH2 0x1B33 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x955 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x94C SWAP1 PUSH2 0x1BC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0xA33 SWAP2 SWAP1 PUSH2 0x1594 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA4C DUP5 DUP5 PUSH2 0x7E6 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0xAC6 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xAB8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAAF SWAP1 PUSH2 0x1C31 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xAC5 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x875 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xB3C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB33 SWAP1 PUSH2 0x1CC3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xBAC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA3 SWAP1 PUSH2 0x1D55 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xBB7 DUP4 DUP4 DUP4 PUSH2 0x10DD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xC3D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC34 SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xD2B SWAP2 SWAP1 PUSH2 0x1594 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xD3E DUP5 DUP5 DUP5 PUSH2 0x10E2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0xDC0 JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0xDED JUMPI PUSH32 0x0 SWAP1 POP PUSH2 0xE5B JUMP JUMPDEST PUSH2 0xE58 PUSH32 0x0 PUSH32 0x0 PUSH32 0x0 PUSH2 0x10E7 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xECE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEC5 SWAP1 PUSH2 0x1E79 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xEDA DUP3 PUSH1 0x0 DUP4 PUSH2 0x10DD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xF60 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF57 SWAP1 PUSH2 0x1F0B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x1013 SWAP2 SWAP1 PUSH2 0x1594 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x1027 DUP4 PUSH1 0x0 DUP5 PUSH2 0x10E2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH2 0x1087 DUP2 PUSH2 0x102C JUMP JUMPDEST SWAP2 POP PUSH2 0x1092 DUP2 PUSH2 0x1121 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10AB PUSH2 0x10A5 PUSH2 0xD44 JUMP JUMPDEST DUP4 PUSH2 0x1137 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x10C3 DUP8 DUP8 DUP8 DUP8 PUSH2 0x116A JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x10D0 DUP2 PUSH2 0x124D JUMP JUMPDEST DUP2 SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP4 CHAINID ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1102 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F2B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x114C SWAP3 SWAP2 SWAP1 PUSH2 0x1FF6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 PUSH1 0x0 SHR GT ISZERO PUSH2 0x11A5 JUMPI PUSH1 0x0 PUSH1 0x3 SWAP2 POP SWAP2 POP PUSH2 0x1244 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x11CA SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x202D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11EC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x123B JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x1244 JUMP JUMPDEST DUP1 PUSH1 0x0 SWAP3 POP SWAP3 POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1261 JUMPI PUSH2 0x1260 PUSH2 0x2072 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1274 JUMPI PUSH2 0x1273 PUSH2 0x2072 JUMP JUMPDEST JUMPDEST EQ ISZERO PUSH2 0x127F JUMPI PUSH2 0x13B8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1293 JUMPI PUSH2 0x1292 PUSH2 0x2072 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x12A6 JUMPI PUSH2 0x12A5 PUSH2 0x2072 JUMP JUMPDEST JUMPDEST EQ ISZERO PUSH2 0x12E7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12DE SWAP1 PUSH2 0x20ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x12FB JUMPI PUSH2 0x12FA PUSH2 0x2072 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x130E JUMPI PUSH2 0x130D PUSH2 0x2072 JUMP JUMPDEST JUMPDEST EQ ISZERO PUSH2 0x134F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1346 SWAP1 PUSH2 0x2159 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1363 JUMPI PUSH2 0x1362 PUSH2 0x2072 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1376 JUMPI PUSH2 0x1375 PUSH2 0x2072 JUMP JUMPDEST JUMPDEST EQ ISZERO PUSH2 0x13B7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13AE SWAP1 PUSH2 0x21EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x13F5 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x13DA JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1404 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1426 DUP3 PUSH2 0x13BB JUMP JUMPDEST PUSH2 0x1430 DUP2 DUP6 PUSH2 0x13C6 JUMP JUMPDEST SWAP4 POP PUSH2 0x1440 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x13D7 JUMP JUMPDEST PUSH2 0x1449 DUP2 PUSH2 0x140A JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x146E DUP2 DUP5 PUSH2 0x141B JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14A6 DUP3 PUSH2 0x147B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x14B6 DUP2 PUSH2 0x149B JUMP JUMPDEST DUP2 EQ PUSH2 0x14C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x14D3 DUP2 PUSH2 0x14AD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x14EC DUP2 PUSH2 0x14D9 JUMP JUMPDEST DUP2 EQ PUSH2 0x14F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1509 DUP2 PUSH2 0x14E3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1526 JUMPI PUSH2 0x1525 PUSH2 0x1476 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1534 DUP6 DUP3 DUP7 ADD PUSH2 0x14C4 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1545 DUP6 DUP3 DUP7 ADD PUSH2 0x14FA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1564 DUP2 PUSH2 0x154F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x157F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x155B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x158E DUP2 PUSH2 0x14D9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x15A9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1585 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x15C8 JUMPI PUSH2 0x15C7 PUSH2 0x1476 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x15D6 DUP7 DUP3 DUP8 ADD PUSH2 0x14C4 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x15E7 DUP7 DUP3 DUP8 ADD PUSH2 0x14C4 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x15F8 DUP7 DUP3 DUP8 ADD PUSH2 0x14FA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1618 DUP2 PUSH2 0x1602 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1633 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x160F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x164C DUP2 PUSH2 0x1639 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1667 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1643 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1683 JUMPI PUSH2 0x1682 PUSH2 0x1476 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1691 DUP5 DUP3 DUP6 ADD PUSH2 0x14FA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16B0 JUMPI PUSH2 0x16AF PUSH2 0x1476 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x16BE DUP5 DUP3 DUP6 ADD PUSH2 0x14C4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x16D0 DUP2 PUSH2 0x1602 JUMP JUMPDEST DUP2 EQ PUSH2 0x16DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x16ED DUP2 PUSH2 0x16C7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x16FC DUP2 PUSH2 0x1639 JUMP JUMPDEST DUP2 EQ PUSH2 0x1707 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1719 DUP2 PUSH2 0x16F3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x173E JUMPI PUSH2 0x173D PUSH2 0x1476 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x174C DUP11 DUP3 DUP12 ADD PUSH2 0x14C4 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0x175D DUP11 DUP3 DUP12 ADD PUSH2 0x14C4 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0x176E DUP11 DUP3 DUP12 ADD PUSH2 0x14FA JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH2 0x177F DUP11 DUP3 DUP12 ADD PUSH2 0x14FA JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x1790 DUP11 DUP3 DUP12 ADD PUSH2 0x16DE JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x17A1 DUP11 DUP3 DUP12 ADD PUSH2 0x170A JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x17B2 DUP11 DUP3 DUP12 ADD PUSH2 0x170A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x17D8 JUMPI PUSH2 0x17D7 PUSH2 0x1476 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x17E6 DUP6 DUP3 DUP7 ADD PUSH2 0x14C4 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x17F7 DUP6 DUP3 DUP7 ADD PUSH2 0x14C4 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1848 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x185C JUMPI PUSH2 0x185B PUSH2 0x1801 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x189C DUP3 PUSH2 0x14D9 JUMP JUMPDEST SWAP2 POP PUSH2 0x18A7 DUP4 PUSH2 0x14D9 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x18DC JUMPI PUSH2 0x18DB PUSH2 0x1862 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1943 PUSH1 0x25 DUP4 PUSH2 0x13C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x194E DUP3 PUSH2 0x18E7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1972 DUP2 PUSH2 0x1936 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332305065726D69743A206578706972656420646561646C696E65000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19AF PUSH1 0x1D DUP4 PUSH2 0x13C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x19BA DUP3 PUSH2 0x1979 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x19DE DUP2 PUSH2 0x19A2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x19EE DUP2 PUSH2 0x149B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x1A09 PUSH1 0x0 DUP4 ADD DUP10 PUSH2 0x1643 JUMP JUMPDEST PUSH2 0x1A16 PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x19E5 JUMP JUMPDEST PUSH2 0x1A23 PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x19E5 JUMP JUMPDEST PUSH2 0x1A30 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x1585 JUMP JUMPDEST PUSH2 0x1A3D PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x1585 JUMP JUMPDEST PUSH2 0x1A4A PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x1585 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x45524332305065726D69743A20696E76616C6964207369676E61747572650000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A8B PUSH1 0x1E DUP4 PUSH2 0x13C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A96 DUP3 PUSH2 0x1A55 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1ABA DUP2 PUSH2 0x1A7E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B1D PUSH1 0x24 DUP4 PUSH2 0x13C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B28 DUP3 PUSH2 0x1AC1 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B4C DUP2 PUSH2 0x1B10 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BAF PUSH1 0x22 DUP4 PUSH2 0x13C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x1BBA DUP3 PUSH2 0x1B53 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BDE DUP2 PUSH2 0x1BA2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C1B PUSH1 0x1D DUP4 PUSH2 0x13C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C26 DUP3 PUSH2 0x1BE5 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C4A DUP2 PUSH2 0x1C0E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CAD PUSH1 0x25 DUP4 PUSH2 0x13C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x1CB8 DUP3 PUSH2 0x1C51 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CDC DUP2 PUSH2 0x1CA0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D3F PUSH1 0x23 DUP4 PUSH2 0x13C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D4A DUP3 PUSH2 0x1CE3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D6E DUP2 PUSH2 0x1D32 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DD1 PUSH1 0x26 DUP4 PUSH2 0x13C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DDC DUP3 PUSH2 0x1D75 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E00 DUP2 PUSH2 0x1DC4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7300000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E63 PUSH1 0x21 DUP4 PUSH2 0x13C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x1E6E DUP3 PUSH2 0x1E07 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E92 DUP2 PUSH2 0x1E56 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6365000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EF5 PUSH1 0x22 DUP4 PUSH2 0x13C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F00 DUP3 PUSH2 0x1E99 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F24 DUP2 PUSH2 0x1EE8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x1F40 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x1643 JUMP JUMPDEST PUSH2 0x1F4D PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x1643 JUMP JUMPDEST PUSH2 0x1F5A PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x1643 JUMP JUMPDEST PUSH2 0x1F67 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x1585 JUMP JUMPDEST PUSH2 0x1F74 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x19E5 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FBF PUSH1 0x2 DUP4 PUSH2 0x1F7E JUMP JUMPDEST SWAP2 POP PUSH2 0x1FCA DUP3 PUSH2 0x1F89 JUMP JUMPDEST PUSH1 0x2 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1FF0 PUSH2 0x1FEB DUP3 PUSH2 0x1639 JUMP JUMPDEST PUSH2 0x1FD5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2001 DUP3 PUSH2 0x1FB2 JUMP JUMPDEST SWAP2 POP PUSH2 0x200D DUP3 DUP6 PUSH2 0x1FDF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x201D DUP3 DUP5 PUSH2 0x1FDF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2042 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x1643 JUMP JUMPDEST PUSH2 0x204F PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x160F JUMP JUMPDEST PUSH2 0x205C PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1643 JUMP JUMPDEST PUSH2 0x2069 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x1643 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20D7 PUSH1 0x18 DUP4 PUSH2 0x13C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x20E2 DUP3 PUSH2 0x20A1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2106 DUP2 PUSH2 0x20CA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2143 PUSH1 0x1F DUP4 PUSH2 0x13C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x214E DUP3 PUSH2 0x210D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2172 DUP2 PUSH2 0x2136 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21D5 PUSH1 0x22 DUP4 PUSH2 0x13C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x21E0 DUP3 PUSH2 0x2179 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2204 DUP2 PUSH2 0x21C8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP15 0x24 0xFB 0x2F SIGNEXTEND PUSH20 0x13B0399CE8052A1576292ABE1BB29060998C6B1D 0x27 DUP3 MULMOD 0xB7 PUSH24 0x6D64736F6C63430008090033000000000000000000000000 ","sourceMap":"268:265:24:-:0;;;326:205;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;462:4;1868::5;2464:602:19;;;;;;;;;;;;;;;;;436:4:24;442:6;2050:5:1;2042;:13;;;;;;;;;;;;:::i;:::-;;2075:7;2065;:17;;;;;;;;;;;;:::i;:::-;;1976:113;;2529:18:19;2566:4;2550:22;;;;;;2529:43;;2582:21;2622:7;2606:25;;;;;;2582:49;;2641:16;2660:117;2641:136;;2802:10;2787:25;;;;;;2840:13;2822:31;;;;;;2882:13;2863:32;;;;;;2932:58;2954:8;2964:10;2976:13;2932:21;;;:58;;:::i;:::-;2905:85;;;;;;3023:4;3000:28;;;;;;;;;;3051:8;3038:21;;;;;;2519:547;;;2464:602;;1829:52:5;478:46:24::2;484:10;513;:8;;;:10;;:::i;:::-;509:2;:14;;;;:::i;:::-;496:10;:27;;;;:::i;:::-;478:5;;;:46;;:::i;:::-;326:205:::0;;;268:265;;3466:257:19;3606:7;3653:8;3663;3673:11;3686:13;3709:4;3642:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3632:84;;;;;;3625:91;;3466:257;;;;;:::o;3091:91:1:-;3149:5;3173:2;3166:9;;3091:91;:::o;8567:535::-;8669:1;8650:21;;:7;:21;;;;8642:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;8718:49;8747:1;8751:7;8760:6;8718:20;;;:49;;:::i;:::-;8794:6;8778:12;;:22;;;;;;;:::i;:::-;;;;;;;;8968:6;8946:9;:18;8956:7;8946:18;;;;;;;;;;;;;;;;:28;;;;;;;;;;;9020:7;8999:37;;9016:1;8999:37;;;9029:6;8999:37;;;;;;:::i;:::-;;;;;;;;9047:48;9075:1;9079:7;9088:6;9047:19;;;:48;;:::i;:::-;8567:535;;:::o;12180:121::-;;;;:::o;12889:120::-;;;;:::o;268:265:24:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:75:26:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:117;566:1;563;556:12;580:102;621:6;672:2;668:7;663:2;656:5;652:14;648:28;638:38;;580:102;;;:::o;688:180::-;736:77;733:1;726:88;833:4;830:1;823:15;857:4;854:1;847:15;874:281;957:27;979:4;957:27;:::i;:::-;949:6;945:40;1087:6;1075:10;1072:22;1051:18;1039:10;1036:34;1033:62;1030:88;;;1098:18;;:::i;:::-;1030:88;1138:10;1134:2;1127:22;917:238;874:281;;:::o;1161:129::-;1195:6;1222:20;;:::i;:::-;1212:30;;1251:33;1279:4;1271:6;1251:33;:::i;:::-;1161:129;;;:::o;1296:308::-;1358:4;1448:18;1440:6;1437:30;1434:56;;;1470:18;;:::i;:::-;1434:56;1508:29;1530:6;1508:29;:::i;:::-;1500:37;;1592:4;1586;1582:15;1574:23;;1296:308;;;:::o;1610:307::-;1678:1;1688:113;1702:6;1699:1;1696:13;1688:113;;;1787:1;1782:3;1778:11;1772:18;1768:1;1763:3;1759:11;1752:39;1724:2;1721:1;1717:10;1712:15;;1688:113;;;1819:6;1816:1;1813:13;1810:101;;;1899:1;1890:6;1885:3;1881:16;1874:27;1810:101;1659:258;1610:307;;;:::o;1923:421::-;2012:5;2037:66;2053:49;2095:6;2053:49;:::i;:::-;2037:66;:::i;:::-;2028:75;;2126:6;2119:5;2112:21;2164:4;2157:5;2153:16;2202:3;2193:6;2188:3;2184:16;2181:25;2178:112;;;2209:79;;:::i;:::-;2178:112;2299:39;2331:6;2326:3;2321;2299:39;:::i;:::-;2018:326;1923:421;;;;;:::o;2364:355::-;2431:5;2480:3;2473:4;2465:6;2461:17;2457:27;2447:122;;2488:79;;:::i;:::-;2447:122;2598:6;2592:13;2623:90;2709:3;2701:6;2694:4;2686:6;2682:17;2623:90;:::i;:::-;2614:99;;2437:282;2364:355;;;;:::o;2725:77::-;2762:7;2791:5;2780:16;;2725:77;;;:::o;2808:122::-;2881:24;2899:5;2881:24;:::i;:::-;2874:5;2871:35;2861:63;;2920:1;2917;2910:12;2861:63;2808:122;:::o;2936:143::-;2993:5;3024:6;3018:13;3009:22;;3040:33;3067:5;3040:33;:::i;:::-;2936:143;;;;:::o;3085:1009::-;3193:6;3201;3209;3258:2;3246:9;3237:7;3233:23;3229:32;3226:119;;;3264:79;;:::i;:::-;3226:119;3405:1;3394:9;3390:17;3384:24;3435:18;3427:6;3424:30;3421:117;;;3457:79;;:::i;:::-;3421:117;3562:74;3628:7;3619:6;3608:9;3604:22;3562:74;:::i;:::-;3552:84;;3355:291;3706:2;3695:9;3691:18;3685:25;3737:18;3729:6;3726:30;3723:117;;;3759:79;;:::i;:::-;3723:117;3864:74;3930:7;3921:6;3910:9;3906:22;3864:74;:::i;:::-;3854:84;;3656:292;3987:2;4013:64;4069:7;4060:6;4049:9;4045:22;4013:64;:::i;:::-;4003:74;;3958:129;3085:1009;;;;;:::o;4100:180::-;4148:77;4145:1;4138:88;4245:4;4242:1;4235:15;4269:4;4266:1;4259:15;4286:102;4328:8;4375:5;4372:1;4368:13;4347:34;;4286:102;;;:::o;4394:848::-;4455:5;4462:4;4486:6;4477:15;;4510:5;4501:14;;4524:712;4545:1;4535:8;4532:15;4524:712;;;4640:4;4635:3;4631:14;4625:4;4622:24;4619:50;;;4649:18;;:::i;:::-;4619:50;4699:1;4689:8;4685:16;4682:451;;;5114:4;5107:5;5103:16;5094:25;;4682:451;5164:4;5158;5154:15;5146:23;;5194:32;5217:8;5194:32;:::i;:::-;5182:44;;4524:712;;;4394:848;;;;;;;:::o;5248:1073::-;5302:5;5493:8;5483:40;;5514:1;5505:10;;5516:5;;5483:40;5542:4;5532:36;;5559:1;5550:10;;5561:5;;5532:36;5628:4;5676:1;5671:27;;;;5712:1;5707:191;;;;5621:277;;5671:27;5689:1;5680:10;;5691:5;;;5707:191;5752:3;5742:8;5739:17;5736:43;;;5759:18;;:::i;:::-;5736:43;5808:8;5805:1;5801:16;5792:25;;5843:3;5836:5;5833:14;5830:40;;;5850:18;;:::i;:::-;5830:40;5883:5;;;5621:277;;6007:2;5997:8;5994:16;5988:3;5982:4;5979:13;5975:36;5957:2;5947:8;5944:16;5939:2;5933:4;5930:12;5926:35;5910:111;5907:246;;;6063:8;6057:4;6053:19;6044:28;;6098:3;6091:5;6088:14;6085:40;;;6105:18;;:::i;:::-;6085:40;6138:5;;5907:246;6178:42;6216:3;6206:8;6200:4;6197:1;6178:42;:::i;:::-;6163:57;;;;6252:4;6247:3;6243:14;6236:5;6233:25;6230:51;;;6261:18;;:::i;:::-;6230:51;6310:4;6303:5;6299:16;6290:25;;5248:1073;;;;;;:::o;6327:86::-;6362:7;6402:4;6395:5;6391:16;6380:27;;6327:86;;;:::o;6419:281::-;6477:5;6501:23;6519:4;6501:23;:::i;:::-;6493:31;;6545:25;6561:8;6545:25;:::i;:::-;6533:37;;6589:104;6626:66;6616:8;6610:4;6589:104;:::i;:::-;6580:113;;6419:281;;;;:::o;6706:348::-;6746:7;6769:20;6787:1;6769:20;:::i;:::-;6764:25;;6803:20;6821:1;6803:20;:::i;:::-;6798:25;;6991:1;6923:66;6919:74;6916:1;6913:81;6908:1;6901:9;6894:17;6890:105;6887:131;;;6998:18;;:::i;:::-;6887:131;7046:1;7043;7039:9;7028:20;;6706:348;;;;:::o;7060:77::-;7097:7;7126:5;7115:16;;7060:77;;;:::o;7143:118::-;7230:24;7248:5;7230:24;:::i;:::-;7225:3;7218:37;7143:118;;:::o;7267:::-;7354:24;7372:5;7354:24;:::i;:::-;7349:3;7342:37;7267:118;;:::o;7391:126::-;7428:7;7468:42;7461:5;7457:54;7446:65;;7391:126;;;:::o;7523:96::-;7560:7;7589:24;7607:5;7589:24;:::i;:::-;7578:35;;7523:96;;;:::o;7625:118::-;7712:24;7730:5;7712:24;:::i;:::-;7707:3;7700:37;7625:118;;:::o;7749:664::-;7954:4;7992:3;7981:9;7977:19;7969:27;;8006:71;8074:1;8063:9;8059:17;8050:6;8006:71;:::i;:::-;8087:72;8155:2;8144:9;8140:18;8131:6;8087:72;:::i;:::-;8169;8237:2;8226:9;8222:18;8213:6;8169:72;:::i;:::-;8251;8319:2;8308:9;8304:18;8295:6;8251:72;:::i;:::-;8333:73;8401:3;8390:9;8386:19;8377:6;8333:73;:::i;:::-;7749:664;;;;;;;;:::o;8419:169::-;8503:11;8537:6;8532:3;8525:19;8577:4;8572:3;8568:14;8553:29;;8419:169;;;;:::o;8594:181::-;8734:33;8730:1;8722:6;8718:14;8711:57;8594:181;:::o;8781:366::-;8923:3;8944:67;9008:2;9003:3;8944:67;:::i;:::-;8937:74;;9020:93;9109:3;9020:93;:::i;:::-;9138:2;9133:3;9129:12;9122:19;;8781:366;;;:::o;9153:419::-;9319:4;9357:2;9346:9;9342:18;9334:26;;9406:9;9400:4;9396:20;9392:1;9381:9;9377:17;9370:47;9434:131;9560:4;9434:131;:::i;:::-;9426:139;;9153:419;;;:::o;9578:305::-;9618:3;9637:20;9655:1;9637:20;:::i;:::-;9632:25;;9671:20;9689:1;9671:20;:::i;:::-;9666:25;;9825:1;9757:66;9753:74;9750:1;9747:81;9744:107;;;9831:18;;:::i;:::-;9744:107;9875:1;9872;9868:9;9861:16;;9578:305;;;;:::o;9889:222::-;9982:4;10020:2;10009:9;10005:18;9997:26;;10033:71;10101:1;10090:9;10086:17;10077:6;10033:71;:::i;:::-;9889:222;;;;:::o;10117:180::-;10165:77;10162:1;10155:88;10262:4;10259:1;10252:15;10286:4;10283:1;10276:15;10303:320;10347:6;10384:1;10378:4;10374:12;10364:22;;10431:1;10425:4;10421:12;10452:18;10442:81;;10508:4;10500:6;10496:17;10486:27;;10442:81;10570:2;10562:6;10559:14;10539:18;10536:38;10533:84;;;10589:18;;:::i;:::-;10533:84;10354:269;10303:320;;;:::o;268:265:24:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DOMAIN_SEPARATOR_988":{"entryPoint":1126,"id":988,"parameterSlots":0,"returnSlots":1},"@_afterTokenTransfer_698":{"entryPoint":4322,"id":698,"parameterSlots":3,"returnSlots":0},"@_approve_633":{"entryPoint":2165,"id":633,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_687":{"entryPoint":4317,"id":687,"parameterSlots":3,"returnSlots":0},"@_buildDomainSeparator_3769":{"entryPoint":4327,"id":3769,"parameterSlots":3,"returnSlots":1},"@_burn_588":{"entryPoint":3678,"id":588,"parameterSlots":2,"returnSlots":0},"@_domainSeparatorV4_3742":{"entryPoint":3396,"id":3742,"parameterSlots":0,"returnSlots":1},"@_hashTypedDataV4_3785":{"entryPoint":4248,"id":3785,"parameterSlots":1,"returnSlots":1},"@_msgSender_3012":{"entryPoint":2157,"id":3012,"parameterSlots":0,"returnSlots":1},"@_spendAllowance_676":{"entryPoint":2624,"id":676,"parameterSlots":3,"returnSlots":0},"@_throwError_3325":{"entryPoint":4685,"id":3325,"parameterSlots":1,"returnSlots":0},"@_transfer_459":{"entryPoint":2764,"id":459,"parameterSlots":3,"returnSlots":0},"@_useNonce_1017":{"entryPoint":4154,"id":1017,"parameterSlots":1,"returnSlots":1},"@allowance_254":{"entryPoint":2022,"id":254,"parameterSlots":2,"returnSlots":1},"@approve_279":{"entryPoint":1025,"id":279,"parameterSlots":2,"returnSlots":1},"@balanceOf_211":{"entryPoint":1216,"id":211,"parameterSlots":1,"returnSlots":1},"@burnFrom_820":{"entryPoint":1288,"id":820,"parameterSlots":2,"returnSlots":0},"@burn_799":{"entryPoint":1196,"id":799,"parameterSlots":1,"returnSlots":0},"@current_3040":{"entryPoint":4140,"id":3040,"parameterSlots":1,"returnSlots":1},"@decimals_187":{"entryPoint":1117,"id":187,"parameterSlots":0,"returnSlots":1},"@decreaseAllowance_382":{"entryPoint":1546,"id":382,"parameterSlots":2,"returnSlots":1},"@increaseAllowance_341":{"entryPoint":1141,"id":341,"parameterSlots":2,"returnSlots":1},"@increment_3054":{"entryPoint":4385,"id":3054,"parameterSlots":1,"returnSlots":0},"@name_167":{"entryPoint":879,"id":167,"parameterSlots":0,"returnSlots":1},"@nonces_977":{"entryPoint":1320,"id":977,"parameterSlots":1,"returnSlots":1},"@permit_961":{"entryPoint":1700,"id":961,"parameterSlots":7,"returnSlots":0},"@recover_3572":{"entryPoint":4274,"id":3572,"parameterSlots":4,"returnSlots":1},"@symbol_177":{"entryPoint":1400,"id":177,"parameterSlots":0,"returnSlots":1},"@toTypedDataHash_3631":{"entryPoint":4407,"id":3631,"parameterSlots":2,"returnSlots":1},"@totalSupply_197":{"entryPoint":1060,"id":197,"parameterSlots":0,"returnSlots":1},"@transferFrom_312":{"entryPoint":1070,"id":312,"parameterSlots":3,"returnSlots":1},"@transfer_236":{"entryPoint":1665,"id":236,"parameterSlots":2,"returnSlots":1},"@tryRecover_3539":{"entryPoint":4458,"id":3539,"parameterSlots":4,"returnSlots":2},"abi_decode_t_address":{"entryPoint":5316,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":5898,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":5370,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint8":{"entryPoint":5854,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":5786,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":6081,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":5551,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32":{"entryPoint":5919,"id":null,"parameterSlots":2,"returnSlots":7},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":5391,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256":{"entryPoint":5741,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":6629,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":5467,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":5699,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack":{"entryPoint":8159,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":5147,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack":{"entryPoint":8394,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack":{"entryPoint":7474,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd_to_t_string_memory_ptr_fromStack":{"entryPoint":7912,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack":{"entryPoint":8502,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack":{"entryPoint":7074,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":8114,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack":{"entryPoint":7182,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd_to_t_string_memory_ptr_fromStack":{"entryPoint":6562,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack":{"entryPoint":7620,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack":{"entryPoint":8648,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124_to_t_string_memory_ptr_fromStack":{"entryPoint":6782,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f_to_t_string_memory_ptr_fromStack":{"entryPoint":7766,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack":{"entryPoint":7328,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack":{"entryPoint":6928,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack":{"entryPoint":6454,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":5509,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint8_to_t_uint8_fromStack":{"entryPoint":5647,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":8182,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":5482,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":5714,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":6644,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed":{"entryPoint":7979,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":8237,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5204,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8429,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7509,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7947,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8537,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7109,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7217,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6597,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7655,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8683,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6817,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7801,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7363,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6963,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6489,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":5524,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":5662,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":5051,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":5062,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":8062,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":6289,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":5275,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":5455,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":5689,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":5243,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":5337,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint8":{"entryPoint":5634,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":5079,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":6192,"id":null,"parameterSlots":1,"returnSlots":1},"leftAlign_t_bytes32":{"entryPoint":8149,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":6242,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":8306,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":6145,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":5238,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":5130,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be":{"entryPoint":8353,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f":{"entryPoint":7395,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd":{"entryPoint":7833,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77":{"entryPoint":8461,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029":{"entryPoint":6995,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541":{"entryPoint":8073,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe":{"entryPoint":7141,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd":{"entryPoint":6521,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6":{"entryPoint":7541,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd":{"entryPoint":8569,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124":{"entryPoint":6741,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f":{"entryPoint":7687,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea":{"entryPoint":7249,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208":{"entryPoint":6849,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8":{"entryPoint":6375,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":5293,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":5875,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":5347,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint8":{"entryPoint":5831,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:27380:26","statements":[{"body":{"nodeType":"YulBlock","src":"66:40:26","statements":[{"nodeType":"YulAssignment","src":"77:22:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"93:5:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"87:5:26"},"nodeType":"YulFunctionCall","src":"87:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"77:6:26"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"49:5:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"59:6:26","type":""}],"src":"7:99:26"},{"body":{"nodeType":"YulBlock","src":"208:73:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"225:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"230:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"218:6:26"},"nodeType":"YulFunctionCall","src":"218:19:26"},"nodeType":"YulExpressionStatement","src":"218:19:26"},{"nodeType":"YulAssignment","src":"246:29:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"265:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"270:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"261:3:26"},"nodeType":"YulFunctionCall","src":"261:14:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"246:11:26"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"180:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"185:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"196:11:26","type":""}],"src":"112:169:26"},{"body":{"nodeType":"YulBlock","src":"336:258:26","statements":[{"nodeType":"YulVariableDeclaration","src":"346:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"355:1:26","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"350:1:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"415:63:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"440:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"445:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"436:3:26"},"nodeType":"YulFunctionCall","src":"436:11:26"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"459:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"464:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"455:3:26"},"nodeType":"YulFunctionCall","src":"455:11:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"449:5:26"},"nodeType":"YulFunctionCall","src":"449:18:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"429:6:26"},"nodeType":"YulFunctionCall","src":"429:39:26"},"nodeType":"YulExpressionStatement","src":"429:39:26"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"376:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"379:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"373:2:26"},"nodeType":"YulFunctionCall","src":"373:13:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"387:19:26","statements":[{"nodeType":"YulAssignment","src":"389:15:26","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"398:1:26"},{"kind":"number","nodeType":"YulLiteral","src":"401:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"394:3:26"},"nodeType":"YulFunctionCall","src":"394:10:26"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"389:1:26"}]}]},"pre":{"nodeType":"YulBlock","src":"369:3:26","statements":[]},"src":"365:113:26"},{"body":{"nodeType":"YulBlock","src":"512:76:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"562:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"567:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"558:3:26"},"nodeType":"YulFunctionCall","src":"558:16:26"},{"kind":"number","nodeType":"YulLiteral","src":"576:1:26","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"551:6:26"},"nodeType":"YulFunctionCall","src":"551:27:26"},"nodeType":"YulExpressionStatement","src":"551:27:26"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"493:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"496:6:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"490:2:26"},"nodeType":"YulFunctionCall","src":"490:13:26"},"nodeType":"YulIf","src":"487:101:26"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"318:3:26","type":""},{"name":"dst","nodeType":"YulTypedName","src":"323:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"328:6:26","type":""}],"src":"287:307:26"},{"body":{"nodeType":"YulBlock","src":"648:54:26","statements":[{"nodeType":"YulAssignment","src":"658:38:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"683:2:26","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"672:3:26"},"nodeType":"YulFunctionCall","src":"672:14:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"692:2:26","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"688:3:26"},"nodeType":"YulFunctionCall","src":"688:7:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"668:3:26"},"nodeType":"YulFunctionCall","src":"668:28:26"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"658:6:26"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"631:5:26","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"641:6:26","type":""}],"src":"600:102:26"},{"body":{"nodeType":"YulBlock","src":"800:272:26","statements":[{"nodeType":"YulVariableDeclaration","src":"810:53:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"857:5:26"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"824:32:26"},"nodeType":"YulFunctionCall","src":"824:39:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"814:6:26","type":""}]},{"nodeType":"YulAssignment","src":"872:78:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"938:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"943:6:26"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"879:58:26"},"nodeType":"YulFunctionCall","src":"879:71:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"872:3:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"985:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"992:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"981:3:26"},"nodeType":"YulFunctionCall","src":"981:16:26"},{"name":"pos","nodeType":"YulIdentifier","src":"999:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"1004:6:26"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"959:21:26"},"nodeType":"YulFunctionCall","src":"959:52:26"},"nodeType":"YulExpressionStatement","src":"959:52:26"},{"nodeType":"YulAssignment","src":"1020:46:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1031:3:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1058:6:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1036:21:26"},"nodeType":"YulFunctionCall","src":"1036:29:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1027:3:26"},"nodeType":"YulFunctionCall","src":"1027:39:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1020:3:26"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"781:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"788:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"796:3:26","type":""}],"src":"708:364:26"},{"body":{"nodeType":"YulBlock","src":"1196:195:26","statements":[{"nodeType":"YulAssignment","src":"1206:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1218:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1229:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1214:3:26"},"nodeType":"YulFunctionCall","src":"1214:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1206:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1253:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1264:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1249:3:26"},"nodeType":"YulFunctionCall","src":"1249:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"1272:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"1278:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1268:3:26"},"nodeType":"YulFunctionCall","src":"1268:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1242:6:26"},"nodeType":"YulFunctionCall","src":"1242:47:26"},"nodeType":"YulExpressionStatement","src":"1242:47:26"},{"nodeType":"YulAssignment","src":"1298:86:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1370:6:26"},{"name":"tail","nodeType":"YulIdentifier","src":"1379:4:26"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"1306:63:26"},"nodeType":"YulFunctionCall","src":"1306:78:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1298:4:26"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1168:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1180:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1191:4:26","type":""}],"src":"1078:313:26"},{"body":{"nodeType":"YulBlock","src":"1437:35:26","statements":[{"nodeType":"YulAssignment","src":"1447:19:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1463:2:26","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1457:5:26"},"nodeType":"YulFunctionCall","src":"1457:9:26"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1447:6:26"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1430:6:26","type":""}],"src":"1397:75:26"},{"body":{"nodeType":"YulBlock","src":"1567:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1584:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1587:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1577:6:26"},"nodeType":"YulFunctionCall","src":"1577:12:26"},"nodeType":"YulExpressionStatement","src":"1577:12:26"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"1478:117:26"},{"body":{"nodeType":"YulBlock","src":"1690:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1707:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1710:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1700:6:26"},"nodeType":"YulFunctionCall","src":"1700:12:26"},"nodeType":"YulExpressionStatement","src":"1700:12:26"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"1601:117:26"},{"body":{"nodeType":"YulBlock","src":"1769:81:26","statements":[{"nodeType":"YulAssignment","src":"1779:65:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1794:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"1801:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1790:3:26"},"nodeType":"YulFunctionCall","src":"1790:54:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1779:7:26"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1751:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1761:7:26","type":""}],"src":"1724:126:26"},{"body":{"nodeType":"YulBlock","src":"1901:51:26","statements":[{"nodeType":"YulAssignment","src":"1911:35:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1940:5:26"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"1922:17:26"},"nodeType":"YulFunctionCall","src":"1922:24:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1911:7:26"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1883:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1893:7:26","type":""}],"src":"1856:96:26"},{"body":{"nodeType":"YulBlock","src":"2001:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"2058:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2067:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2070:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2060:6:26"},"nodeType":"YulFunctionCall","src":"2060:12:26"},"nodeType":"YulExpressionStatement","src":"2060:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2024:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2049:5:26"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"2031:17:26"},"nodeType":"YulFunctionCall","src":"2031:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2021:2:26"},"nodeType":"YulFunctionCall","src":"2021:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2014:6:26"},"nodeType":"YulFunctionCall","src":"2014:43:26"},"nodeType":"YulIf","src":"2011:63:26"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1994:5:26","type":""}],"src":"1958:122:26"},{"body":{"nodeType":"YulBlock","src":"2138:87:26","statements":[{"nodeType":"YulAssignment","src":"2148:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2170:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2157:12:26"},"nodeType":"YulFunctionCall","src":"2157:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2148:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2213:5:26"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"2186:26:26"},"nodeType":"YulFunctionCall","src":"2186:33:26"},"nodeType":"YulExpressionStatement","src":"2186:33:26"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2116:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"2124:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2132:5:26","type":""}],"src":"2086:139:26"},{"body":{"nodeType":"YulBlock","src":"2276:32:26","statements":[{"nodeType":"YulAssignment","src":"2286:16:26","value":{"name":"value","nodeType":"YulIdentifier","src":"2297:5:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2286:7:26"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2258:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2268:7:26","type":""}],"src":"2231:77:26"},{"body":{"nodeType":"YulBlock","src":"2357:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"2414:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2423:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2426:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2416:6:26"},"nodeType":"YulFunctionCall","src":"2416:12:26"},"nodeType":"YulExpressionStatement","src":"2416:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2380:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2405:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"2387:17:26"},"nodeType":"YulFunctionCall","src":"2387:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2377:2:26"},"nodeType":"YulFunctionCall","src":"2377:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2370:6:26"},"nodeType":"YulFunctionCall","src":"2370:43:26"},"nodeType":"YulIf","src":"2367:63:26"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2350:5:26","type":""}],"src":"2314:122:26"},{"body":{"nodeType":"YulBlock","src":"2494:87:26","statements":[{"nodeType":"YulAssignment","src":"2504:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2526:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2513:12:26"},"nodeType":"YulFunctionCall","src":"2513:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2504:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2569:5:26"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"2542:26:26"},"nodeType":"YulFunctionCall","src":"2542:33:26"},"nodeType":"YulExpressionStatement","src":"2542:33:26"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2472:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"2480:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2488:5:26","type":""}],"src":"2442:139:26"},{"body":{"nodeType":"YulBlock","src":"2670:391:26","statements":[{"body":{"nodeType":"YulBlock","src":"2716:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2718:77:26"},"nodeType":"YulFunctionCall","src":"2718:79:26"},"nodeType":"YulExpressionStatement","src":"2718:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2691:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"2700:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2687:3:26"},"nodeType":"YulFunctionCall","src":"2687:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"2712:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2683:3:26"},"nodeType":"YulFunctionCall","src":"2683:32:26"},"nodeType":"YulIf","src":"2680:119:26"},{"nodeType":"YulBlock","src":"2809:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"2824:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"2838:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2828:6:26","type":""}]},{"nodeType":"YulAssignment","src":"2853:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2888:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"2899:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2884:3:26"},"nodeType":"YulFunctionCall","src":"2884:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2908:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"2863:20:26"},"nodeType":"YulFunctionCall","src":"2863:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2853:6:26"}]}]},{"nodeType":"YulBlock","src":"2936:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"2951:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"2965:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2955:6:26","type":""}]},{"nodeType":"YulAssignment","src":"2981:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3016:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"3027:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3012:3:26"},"nodeType":"YulFunctionCall","src":"3012:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3036:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2991:20:26"},"nodeType":"YulFunctionCall","src":"2991:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2981:6:26"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2632:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2643:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2655:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2663:6:26","type":""}],"src":"2587:474:26"},{"body":{"nodeType":"YulBlock","src":"3109:48:26","statements":[{"nodeType":"YulAssignment","src":"3119:32:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3144:5:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3137:6:26"},"nodeType":"YulFunctionCall","src":"3137:13:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3130:6:26"},"nodeType":"YulFunctionCall","src":"3130:21:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3119:7:26"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3091:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3101:7:26","type":""}],"src":"3067:90:26"},{"body":{"nodeType":"YulBlock","src":"3222:50:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3239:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3259:5:26"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"3244:14:26"},"nodeType":"YulFunctionCall","src":"3244:21:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3232:6:26"},"nodeType":"YulFunctionCall","src":"3232:34:26"},"nodeType":"YulExpressionStatement","src":"3232:34:26"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3210:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3217:3:26","type":""}],"src":"3163:109:26"},{"body":{"nodeType":"YulBlock","src":"3370:118:26","statements":[{"nodeType":"YulAssignment","src":"3380:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3392:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3403:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3388:3:26"},"nodeType":"YulFunctionCall","src":"3388:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3380:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3454:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3467:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3478:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3463:3:26"},"nodeType":"YulFunctionCall","src":"3463:17:26"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"3416:37:26"},"nodeType":"YulFunctionCall","src":"3416:65:26"},"nodeType":"YulExpressionStatement","src":"3416:65:26"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3342:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3354:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3365:4:26","type":""}],"src":"3278:210:26"},{"body":{"nodeType":"YulBlock","src":"3559:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3576:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3599:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3581:17:26"},"nodeType":"YulFunctionCall","src":"3581:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3569:6:26"},"nodeType":"YulFunctionCall","src":"3569:37:26"},"nodeType":"YulExpressionStatement","src":"3569:37:26"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3547:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3554:3:26","type":""}],"src":"3494:118:26"},{"body":{"nodeType":"YulBlock","src":"3716:124:26","statements":[{"nodeType":"YulAssignment","src":"3726:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3738:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3749:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3734:3:26"},"nodeType":"YulFunctionCall","src":"3734:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3726:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3806:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3819:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3830:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3815:3:26"},"nodeType":"YulFunctionCall","src":"3815:17:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"3762:43:26"},"nodeType":"YulFunctionCall","src":"3762:71:26"},"nodeType":"YulExpressionStatement","src":"3762:71:26"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3688:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3700:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3711:4:26","type":""}],"src":"3618:222:26"},{"body":{"nodeType":"YulBlock","src":"3946:519:26","statements":[{"body":{"nodeType":"YulBlock","src":"3992:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3994:77:26"},"nodeType":"YulFunctionCall","src":"3994:79:26"},"nodeType":"YulExpressionStatement","src":"3994:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3967:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"3976:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3963:3:26"},"nodeType":"YulFunctionCall","src":"3963:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"3988:2:26","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3959:3:26"},"nodeType":"YulFunctionCall","src":"3959:32:26"},"nodeType":"YulIf","src":"3956:119:26"},{"nodeType":"YulBlock","src":"4085:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"4100:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"4114:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4104:6:26","type":""}]},{"nodeType":"YulAssignment","src":"4129:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4164:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"4175:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4160:3:26"},"nodeType":"YulFunctionCall","src":"4160:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4184:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4139:20:26"},"nodeType":"YulFunctionCall","src":"4139:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4129:6:26"}]}]},{"nodeType":"YulBlock","src":"4212:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"4227:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"4241:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4231:6:26","type":""}]},{"nodeType":"YulAssignment","src":"4257:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4292:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"4303:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4288:3:26"},"nodeType":"YulFunctionCall","src":"4288:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4312:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4267:20:26"},"nodeType":"YulFunctionCall","src":"4267:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4257:6:26"}]}]},{"nodeType":"YulBlock","src":"4340:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"4355:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"4369:2:26","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4359:6:26","type":""}]},{"nodeType":"YulAssignment","src":"4385:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4420:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"4431:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4416:3:26"},"nodeType":"YulFunctionCall","src":"4416:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4440:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4395:20:26"},"nodeType":"YulFunctionCall","src":"4395:53:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4385:6:26"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3900:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3911:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3923:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3931:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3939:6:26","type":""}],"src":"3846:619:26"},{"body":{"nodeType":"YulBlock","src":"4514:43:26","statements":[{"nodeType":"YulAssignment","src":"4524:27:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4539:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"4546:4:26","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4535:3:26"},"nodeType":"YulFunctionCall","src":"4535:16:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4524:7:26"}]}]},"name":"cleanup_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4496:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4506:7:26","type":""}],"src":"4471:86:26"},{"body":{"nodeType":"YulBlock","src":"4624:51:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4641:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4662:5:26"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"4646:15:26"},"nodeType":"YulFunctionCall","src":"4646:22:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4634:6:26"},"nodeType":"YulFunctionCall","src":"4634:35:26"},"nodeType":"YulExpressionStatement","src":"4634:35:26"}]},"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4612:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4619:3:26","type":""}],"src":"4563:112:26"},{"body":{"nodeType":"YulBlock","src":"4775:120:26","statements":[{"nodeType":"YulAssignment","src":"4785:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4797:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4808:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4793:3:26"},"nodeType":"YulFunctionCall","src":"4793:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4785:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4861:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4874:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4885:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4870:3:26"},"nodeType":"YulFunctionCall","src":"4870:17:26"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"4821:39:26"},"nodeType":"YulFunctionCall","src":"4821:67:26"},"nodeType":"YulExpressionStatement","src":"4821:67:26"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4747:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4759:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4770:4:26","type":""}],"src":"4681:214:26"},{"body":{"nodeType":"YulBlock","src":"4946:32:26","statements":[{"nodeType":"YulAssignment","src":"4956:16:26","value":{"name":"value","nodeType":"YulIdentifier","src":"4967:5:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4956:7:26"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4928:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4938:7:26","type":""}],"src":"4901:77:26"},{"body":{"nodeType":"YulBlock","src":"5049:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5066:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5089:5:26"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"5071:17:26"},"nodeType":"YulFunctionCall","src":"5071:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5059:6:26"},"nodeType":"YulFunctionCall","src":"5059:37:26"},"nodeType":"YulExpressionStatement","src":"5059:37:26"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5037:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5044:3:26","type":""}],"src":"4984:118:26"},{"body":{"nodeType":"YulBlock","src":"5206:124:26","statements":[{"nodeType":"YulAssignment","src":"5216:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5228:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"5239:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5224:3:26"},"nodeType":"YulFunctionCall","src":"5224:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5216:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5296:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5309:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"5320:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5305:3:26"},"nodeType":"YulFunctionCall","src":"5305:17:26"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"5252:43:26"},"nodeType":"YulFunctionCall","src":"5252:71:26"},"nodeType":"YulExpressionStatement","src":"5252:71:26"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5178:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5190:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5201:4:26","type":""}],"src":"5108:222:26"},{"body":{"nodeType":"YulBlock","src":"5402:263:26","statements":[{"body":{"nodeType":"YulBlock","src":"5448:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5450:77:26"},"nodeType":"YulFunctionCall","src":"5450:79:26"},"nodeType":"YulExpressionStatement","src":"5450:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5423:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"5432:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5419:3:26"},"nodeType":"YulFunctionCall","src":"5419:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"5444:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5415:3:26"},"nodeType":"YulFunctionCall","src":"5415:32:26"},"nodeType":"YulIf","src":"5412:119:26"},{"nodeType":"YulBlock","src":"5541:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"5556:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"5570:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5560:6:26","type":""}]},{"nodeType":"YulAssignment","src":"5585:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5620:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"5631:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5616:3:26"},"nodeType":"YulFunctionCall","src":"5616:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5640:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5595:20:26"},"nodeType":"YulFunctionCall","src":"5595:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5585:6:26"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5372:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5383:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5395:6:26","type":""}],"src":"5336:329:26"},{"body":{"nodeType":"YulBlock","src":"5737:263:26","statements":[{"body":{"nodeType":"YulBlock","src":"5783:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5785:77:26"},"nodeType":"YulFunctionCall","src":"5785:79:26"},"nodeType":"YulExpressionStatement","src":"5785:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5758:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"5767:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5754:3:26"},"nodeType":"YulFunctionCall","src":"5754:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"5779:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5750:3:26"},"nodeType":"YulFunctionCall","src":"5750:32:26"},"nodeType":"YulIf","src":"5747:119:26"},{"nodeType":"YulBlock","src":"5876:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"5891:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"5905:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5895:6:26","type":""}]},{"nodeType":"YulAssignment","src":"5920:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5955:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"5966:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5951:3:26"},"nodeType":"YulFunctionCall","src":"5951:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5975:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5930:20:26"},"nodeType":"YulFunctionCall","src":"5930:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5920:6:26"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5707:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5718:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5730:6:26","type":""}],"src":"5671:329:26"},{"body":{"nodeType":"YulBlock","src":"6047:77:26","statements":[{"body":{"nodeType":"YulBlock","src":"6102:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6111:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6114:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6104:6:26"},"nodeType":"YulFunctionCall","src":"6104:12:26"},"nodeType":"YulExpressionStatement","src":"6104:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6070:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6093:5:26"}],"functionName":{"name":"cleanup_t_uint8","nodeType":"YulIdentifier","src":"6077:15:26"},"nodeType":"YulFunctionCall","src":"6077:22:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6067:2:26"},"nodeType":"YulFunctionCall","src":"6067:33:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6060:6:26"},"nodeType":"YulFunctionCall","src":"6060:41:26"},"nodeType":"YulIf","src":"6057:61:26"}]},"name":"validator_revert_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6040:5:26","type":""}],"src":"6006:118:26"},{"body":{"nodeType":"YulBlock","src":"6180:85:26","statements":[{"nodeType":"YulAssignment","src":"6190:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6212:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6199:12:26"},"nodeType":"YulFunctionCall","src":"6199:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6190:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6253:5:26"}],"functionName":{"name":"validator_revert_t_uint8","nodeType":"YulIdentifier","src":"6228:24:26"},"nodeType":"YulFunctionCall","src":"6228:31:26"},"nodeType":"YulExpressionStatement","src":"6228:31:26"}]},"name":"abi_decode_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6158:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"6166:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"6174:5:26","type":""}],"src":"6130:135:26"},{"body":{"nodeType":"YulBlock","src":"6314:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"6371:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6380:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6383:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6373:6:26"},"nodeType":"YulFunctionCall","src":"6373:12:26"},"nodeType":"YulExpressionStatement","src":"6373:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6337:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6362:5:26"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"6344:17:26"},"nodeType":"YulFunctionCall","src":"6344:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6334:2:26"},"nodeType":"YulFunctionCall","src":"6334:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6327:6:26"},"nodeType":"YulFunctionCall","src":"6327:43:26"},"nodeType":"YulIf","src":"6324:63:26"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6307:5:26","type":""}],"src":"6271:122:26"},{"body":{"nodeType":"YulBlock","src":"6451:87:26","statements":[{"nodeType":"YulAssignment","src":"6461:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6483:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6470:12:26"},"nodeType":"YulFunctionCall","src":"6470:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6461:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6526:5:26"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"6499:26:26"},"nodeType":"YulFunctionCall","src":"6499:33:26"},"nodeType":"YulExpressionStatement","src":"6499:33:26"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6429:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"6437:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"6445:5:26","type":""}],"src":"6399:139:26"},{"body":{"nodeType":"YulBlock","src":"6710:1033:26","statements":[{"body":{"nodeType":"YulBlock","src":"6757:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6759:77:26"},"nodeType":"YulFunctionCall","src":"6759:79:26"},"nodeType":"YulExpressionStatement","src":"6759:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6731:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"6740:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6727:3:26"},"nodeType":"YulFunctionCall","src":"6727:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"6752:3:26","type":"","value":"224"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6723:3:26"},"nodeType":"YulFunctionCall","src":"6723:33:26"},"nodeType":"YulIf","src":"6720:120:26"},{"nodeType":"YulBlock","src":"6850:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"6865:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"6879:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6869:6:26","type":""}]},{"nodeType":"YulAssignment","src":"6894:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6929:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"6940:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6925:3:26"},"nodeType":"YulFunctionCall","src":"6925:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6949:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6904:20:26"},"nodeType":"YulFunctionCall","src":"6904:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6894:6:26"}]}]},{"nodeType":"YulBlock","src":"6977:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"6992:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"7006:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6996:6:26","type":""}]},{"nodeType":"YulAssignment","src":"7022:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7057:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"7068:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7053:3:26"},"nodeType":"YulFunctionCall","src":"7053:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7077:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"7032:20:26"},"nodeType":"YulFunctionCall","src":"7032:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7022:6:26"}]}]},{"nodeType":"YulBlock","src":"7105:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"7120:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"7134:2:26","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7124:6:26","type":""}]},{"nodeType":"YulAssignment","src":"7150:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7185:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"7196:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7181:3:26"},"nodeType":"YulFunctionCall","src":"7181:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7205:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"7160:20:26"},"nodeType":"YulFunctionCall","src":"7160:53:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7150:6:26"}]}]},{"nodeType":"YulBlock","src":"7233:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"7248:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"7262:2:26","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7252:6:26","type":""}]},{"nodeType":"YulAssignment","src":"7278:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7313:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"7324:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7309:3:26"},"nodeType":"YulFunctionCall","src":"7309:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7333:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"7288:20:26"},"nodeType":"YulFunctionCall","src":"7288:53:26"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"7278:6:26"}]}]},{"nodeType":"YulBlock","src":"7361:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"7376:17:26","value":{"kind":"number","nodeType":"YulLiteral","src":"7390:3:26","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7380:6:26","type":""}]},{"nodeType":"YulAssignment","src":"7407:61:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7440:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"7451:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7436:3:26"},"nodeType":"YulFunctionCall","src":"7436:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7460:7:26"}],"functionName":{"name":"abi_decode_t_uint8","nodeType":"YulIdentifier","src":"7417:18:26"},"nodeType":"YulFunctionCall","src":"7417:51:26"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"7407:6:26"}]}]},{"nodeType":"YulBlock","src":"7488:119:26","statements":[{"nodeType":"YulVariableDeclaration","src":"7503:17:26","value":{"kind":"number","nodeType":"YulLiteral","src":"7517:3:26","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7507:6:26","type":""}]},{"nodeType":"YulAssignment","src":"7534:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7569:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"7580:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7565:3:26"},"nodeType":"YulFunctionCall","src":"7565:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7589:7:26"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"7544:20:26"},"nodeType":"YulFunctionCall","src":"7544:53:26"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"7534:6:26"}]}]},{"nodeType":"YulBlock","src":"7617:119:26","statements":[{"nodeType":"YulVariableDeclaration","src":"7632:17:26","value":{"kind":"number","nodeType":"YulLiteral","src":"7646:3:26","type":"","value":"192"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7636:6:26","type":""}]},{"nodeType":"YulAssignment","src":"7663:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7698:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"7709:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7694:3:26"},"nodeType":"YulFunctionCall","src":"7694:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7718:7:26"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"7673:20:26"},"nodeType":"YulFunctionCall","src":"7673:53:26"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"7663:6:26"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6632:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6643:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6655:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6663:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6671:6:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6679:6:26","type":""},{"name":"value4","nodeType":"YulTypedName","src":"6687:6:26","type":""},{"name":"value5","nodeType":"YulTypedName","src":"6695:6:26","type":""},{"name":"value6","nodeType":"YulTypedName","src":"6703:6:26","type":""}],"src":"6544:1199:26"},{"body":{"nodeType":"YulBlock","src":"7832:391:26","statements":[{"body":{"nodeType":"YulBlock","src":"7878:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"7880:77:26"},"nodeType":"YulFunctionCall","src":"7880:79:26"},"nodeType":"YulExpressionStatement","src":"7880:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7853:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"7862:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7849:3:26"},"nodeType":"YulFunctionCall","src":"7849:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"7874:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7845:3:26"},"nodeType":"YulFunctionCall","src":"7845:32:26"},"nodeType":"YulIf","src":"7842:119:26"},{"nodeType":"YulBlock","src":"7971:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"7986:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"8000:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7990:6:26","type":""}]},{"nodeType":"YulAssignment","src":"8015:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8050:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"8061:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8046:3:26"},"nodeType":"YulFunctionCall","src":"8046:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8070:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"8025:20:26"},"nodeType":"YulFunctionCall","src":"8025:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8015:6:26"}]}]},{"nodeType":"YulBlock","src":"8098:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"8113:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"8127:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8117:6:26","type":""}]},{"nodeType":"YulAssignment","src":"8143:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8178:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"8189:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8174:3:26"},"nodeType":"YulFunctionCall","src":"8174:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"8198:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"8153:20:26"},"nodeType":"YulFunctionCall","src":"8153:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8143:6:26"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7794:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7805:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7817:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7825:6:26","type":""}],"src":"7749:474:26"},{"body":{"nodeType":"YulBlock","src":"8257:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8274:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8277:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8267:6:26"},"nodeType":"YulFunctionCall","src":"8267:88:26"},"nodeType":"YulExpressionStatement","src":"8267:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8371:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8374:4:26","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8364:6:26"},"nodeType":"YulFunctionCall","src":"8364:15:26"},"nodeType":"YulExpressionStatement","src":"8364:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8395:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8398:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8388:6:26"},"nodeType":"YulFunctionCall","src":"8388:15:26"},"nodeType":"YulExpressionStatement","src":"8388:15:26"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"8229:180:26"},{"body":{"nodeType":"YulBlock","src":"8466:269:26","statements":[{"nodeType":"YulAssignment","src":"8476:22:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"8490:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"8496:1:26","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"8486:3:26"},"nodeType":"YulFunctionCall","src":"8486:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"8476:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"8507:38:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"8537:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"8543:1:26","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8533:3:26"},"nodeType":"YulFunctionCall","src":"8533:12:26"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"8511:18:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"8584:51:26","statements":[{"nodeType":"YulAssignment","src":"8598:27:26","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8612:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"8620:4:26","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8608:3:26"},"nodeType":"YulFunctionCall","src":"8608:17:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"8598:6:26"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"8564:18:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8557:6:26"},"nodeType":"YulFunctionCall","src":"8557:26:26"},"nodeType":"YulIf","src":"8554:81:26"},{"body":{"nodeType":"YulBlock","src":"8687:42:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"8701:16:26"},"nodeType":"YulFunctionCall","src":"8701:18:26"},"nodeType":"YulExpressionStatement","src":"8701:18:26"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"8651:18:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8674:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"8682:2:26","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8671:2:26"},"nodeType":"YulFunctionCall","src":"8671:14:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8648:2:26"},"nodeType":"YulFunctionCall","src":"8648:38:26"},"nodeType":"YulIf","src":"8645:84:26"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"8450:4:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"8459:6:26","type":""}],"src":"8415:320:26"},{"body":{"nodeType":"YulBlock","src":"8769:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8786:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8789:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8779:6:26"},"nodeType":"YulFunctionCall","src":"8779:88:26"},"nodeType":"YulExpressionStatement","src":"8779:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8883:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8886:4:26","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8876:6:26"},"nodeType":"YulFunctionCall","src":"8876:15:26"},"nodeType":"YulExpressionStatement","src":"8876:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8907:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8910:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8900:6:26"},"nodeType":"YulFunctionCall","src":"8900:15:26"},"nodeType":"YulExpressionStatement","src":"8900:15:26"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"8741:180:26"},{"body":{"nodeType":"YulBlock","src":"8971:261:26","statements":[{"nodeType":"YulAssignment","src":"8981:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9004:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"8986:17:26"},"nodeType":"YulFunctionCall","src":"8986:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"8981:1:26"}]},{"nodeType":"YulAssignment","src":"9015:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"9038:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"9020:17:26"},"nodeType":"YulFunctionCall","src":"9020:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"9015:1:26"}]},{"body":{"nodeType":"YulBlock","src":"9178:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"9180:16:26"},"nodeType":"YulFunctionCall","src":"9180:18:26"},"nodeType":"YulExpressionStatement","src":"9180:18:26"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9099:1:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9106:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"y","nodeType":"YulIdentifier","src":"9174:1:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9102:3:26"},"nodeType":"YulFunctionCall","src":"9102:74:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9096:2:26"},"nodeType":"YulFunctionCall","src":"9096:81:26"},"nodeType":"YulIf","src":"9093:107:26"},{"nodeType":"YulAssignment","src":"9210:16:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"9221:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"9224:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9217:3:26"},"nodeType":"YulFunctionCall","src":"9217:9:26"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"9210:3:26"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"8958:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"8961:1:26","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"8967:3:26","type":""}],"src":"8927:305:26"},{"body":{"nodeType":"YulBlock","src":"9344:118:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9366:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"9374:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9362:3:26"},"nodeType":"YulFunctionCall","src":"9362:14:26"},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77","kind":"string","nodeType":"YulLiteral","src":"9378:34:26","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9355:6:26"},"nodeType":"YulFunctionCall","src":"9355:58:26"},"nodeType":"YulExpressionStatement","src":"9355:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9434:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"9442:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9430:3:26"},"nodeType":"YulFunctionCall","src":"9430:15:26"},{"hexValue":"207a65726f","kind":"string","nodeType":"YulLiteral","src":"9447:7:26","type":"","value":" zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9423:6:26"},"nodeType":"YulFunctionCall","src":"9423:32:26"},"nodeType":"YulExpressionStatement","src":"9423:32:26"}]},"name":"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"9336:6:26","type":""}],"src":"9238:224:26"},{"body":{"nodeType":"YulBlock","src":"9614:220:26","statements":[{"nodeType":"YulAssignment","src":"9624:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9690:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"9695:2:26","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9631:58:26"},"nodeType":"YulFunctionCall","src":"9631:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9624:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9796:3:26"}],"functionName":{"name":"store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","nodeType":"YulIdentifier","src":"9707:88:26"},"nodeType":"YulFunctionCall","src":"9707:93:26"},"nodeType":"YulExpressionStatement","src":"9707:93:26"},{"nodeType":"YulAssignment","src":"9809:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9820:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"9825:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9816:3:26"},"nodeType":"YulFunctionCall","src":"9816:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9809:3:26"}]}]},"name":"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9602:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9610:3:26","type":""}],"src":"9468:366:26"},{"body":{"nodeType":"YulBlock","src":"10011:248:26","statements":[{"nodeType":"YulAssignment","src":"10021:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10033:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"10044:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10029:3:26"},"nodeType":"YulFunctionCall","src":"10029:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10021:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10068:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"10079:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10064:3:26"},"nodeType":"YulFunctionCall","src":"10064:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10087:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"10093:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10083:3:26"},"nodeType":"YulFunctionCall","src":"10083:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10057:6:26"},"nodeType":"YulFunctionCall","src":"10057:47:26"},"nodeType":"YulExpressionStatement","src":"10057:47:26"},{"nodeType":"YulAssignment","src":"10113:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10247:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10121:124:26"},"nodeType":"YulFunctionCall","src":"10121:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10113:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9991:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10006:4:26","type":""}],"src":"9840:419:26"},{"body":{"nodeType":"YulBlock","src":"10371:73:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10393:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"10401:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10389:3:26"},"nodeType":"YulFunctionCall","src":"10389:14:26"},{"hexValue":"45524332305065726d69743a206578706972656420646561646c696e65","kind":"string","nodeType":"YulLiteral","src":"10405:31:26","type":"","value":"ERC20Permit: expired deadline"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10382:6:26"},"nodeType":"YulFunctionCall","src":"10382:55:26"},"nodeType":"YulExpressionStatement","src":"10382:55:26"}]},"name":"store_literal_in_memory_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"10363:6:26","type":""}],"src":"10265:179:26"},{"body":{"nodeType":"YulBlock","src":"10596:220:26","statements":[{"nodeType":"YulAssignment","src":"10606:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10672:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"10677:2:26","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10613:58:26"},"nodeType":"YulFunctionCall","src":"10613:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10606:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10778:3:26"}],"functionName":{"name":"store_literal_in_memory_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd","nodeType":"YulIdentifier","src":"10689:88:26"},"nodeType":"YulFunctionCall","src":"10689:93:26"},"nodeType":"YulExpressionStatement","src":"10689:93:26"},{"nodeType":"YulAssignment","src":"10791:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10802:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"10807:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10798:3:26"},"nodeType":"YulFunctionCall","src":"10798:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10791:3:26"}]}]},"name":"abi_encode_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10584:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10592:3:26","type":""}],"src":"10450:366:26"},{"body":{"nodeType":"YulBlock","src":"10993:248:26","statements":[{"nodeType":"YulAssignment","src":"11003:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11015:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"11026:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11011:3:26"},"nodeType":"YulFunctionCall","src":"11011:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11003:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11050:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"11061:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11046:3:26"},"nodeType":"YulFunctionCall","src":"11046:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11069:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"11075:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11065:3:26"},"nodeType":"YulFunctionCall","src":"11065:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11039:6:26"},"nodeType":"YulFunctionCall","src":"11039:47:26"},"nodeType":"YulExpressionStatement","src":"11039:47:26"},{"nodeType":"YulAssignment","src":"11095:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11229:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11103:124:26"},"nodeType":"YulFunctionCall","src":"11103:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11095:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10973:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10988:4:26","type":""}],"src":"10822:419:26"},{"body":{"nodeType":"YulBlock","src":"11312:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11329:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11352:5:26"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"11334:17:26"},"nodeType":"YulFunctionCall","src":"11334:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11322:6:26"},"nodeType":"YulFunctionCall","src":"11322:37:26"},"nodeType":"YulExpressionStatement","src":"11322:37:26"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11300:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11307:3:26","type":""}],"src":"11247:118:26"},{"body":{"nodeType":"YulBlock","src":"11609:537:26","statements":[{"nodeType":"YulAssignment","src":"11619:27:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11631:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"11642:3:26","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11627:3:26"},"nodeType":"YulFunctionCall","src":"11627:19:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11619:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11700:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11713:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"11724:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11709:3:26"},"nodeType":"YulFunctionCall","src":"11709:17:26"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"11656:43:26"},"nodeType":"YulFunctionCall","src":"11656:71:26"},"nodeType":"YulExpressionStatement","src":"11656:71:26"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11781:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11794:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"11805:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11790:3:26"},"nodeType":"YulFunctionCall","src":"11790:18:26"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"11737:43:26"},"nodeType":"YulFunctionCall","src":"11737:72:26"},"nodeType":"YulExpressionStatement","src":"11737:72:26"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"11863:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11876:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"11887:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11872:3:26"},"nodeType":"YulFunctionCall","src":"11872:18:26"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"11819:43:26"},"nodeType":"YulFunctionCall","src":"11819:72:26"},"nodeType":"YulExpressionStatement","src":"11819:72:26"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"11945:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11958:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"11969:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11954:3:26"},"nodeType":"YulFunctionCall","src":"11954:18:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"11901:43:26"},"nodeType":"YulFunctionCall","src":"11901:72:26"},"nodeType":"YulExpressionStatement","src":"11901:72:26"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"12027:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12040:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12051:3:26","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12036:3:26"},"nodeType":"YulFunctionCall","src":"12036:19:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"11983:43:26"},"nodeType":"YulFunctionCall","src":"11983:73:26"},"nodeType":"YulExpressionStatement","src":"11983:73:26"},{"expression":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"12110:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12123:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12134:3:26","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12119:3:26"},"nodeType":"YulFunctionCall","src":"12119:19:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"12066:43:26"},"nodeType":"YulFunctionCall","src":"12066:73:26"},"nodeType":"YulExpressionStatement","src":"12066:73:26"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11541:9:26","type":""},{"name":"value5","nodeType":"YulTypedName","src":"11553:6:26","type":""},{"name":"value4","nodeType":"YulTypedName","src":"11561:6:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"11569:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11577:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11585:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11593:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11604:4:26","type":""}],"src":"11371:775:26"},{"body":{"nodeType":"YulBlock","src":"12258:74:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12280:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"12288:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12276:3:26"},"nodeType":"YulFunctionCall","src":"12276:14:26"},{"hexValue":"45524332305065726d69743a20696e76616c6964207369676e6174757265","kind":"string","nodeType":"YulLiteral","src":"12292:32:26","type":"","value":"ERC20Permit: invalid signature"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12269:6:26"},"nodeType":"YulFunctionCall","src":"12269:56:26"},"nodeType":"YulExpressionStatement","src":"12269:56:26"}]},"name":"store_literal_in_memory_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12250:6:26","type":""}],"src":"12152:180:26"},{"body":{"nodeType":"YulBlock","src":"12484:220:26","statements":[{"nodeType":"YulAssignment","src":"12494:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12560:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"12565:2:26","type":"","value":"30"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12501:58:26"},"nodeType":"YulFunctionCall","src":"12501:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12494:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12666:3:26"}],"functionName":{"name":"store_literal_in_memory_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124","nodeType":"YulIdentifier","src":"12577:88:26"},"nodeType":"YulFunctionCall","src":"12577:93:26"},"nodeType":"YulExpressionStatement","src":"12577:93:26"},{"nodeType":"YulAssignment","src":"12679:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12690:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"12695:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12686:3:26"},"nodeType":"YulFunctionCall","src":"12686:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12679:3:26"}]}]},"name":"abi_encode_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12472:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12480:3:26","type":""}],"src":"12338:366:26"},{"body":{"nodeType":"YulBlock","src":"12881:248:26","statements":[{"nodeType":"YulAssignment","src":"12891:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12903:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12914:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12899:3:26"},"nodeType":"YulFunctionCall","src":"12899:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12891:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12938:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"12949:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12934:3:26"},"nodeType":"YulFunctionCall","src":"12934:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12957:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"12963:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12953:3:26"},"nodeType":"YulFunctionCall","src":"12953:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12927:6:26"},"nodeType":"YulFunctionCall","src":"12927:47:26"},"nodeType":"YulExpressionStatement","src":"12927:47:26"},{"nodeType":"YulAssignment","src":"12983:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13117:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12991:124:26"},"nodeType":"YulFunctionCall","src":"12991:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12983:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12861:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12876:4:26","type":""}],"src":"12710:419:26"},{"body":{"nodeType":"YulBlock","src":"13241:117:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13263:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"13271:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13259:3:26"},"nodeType":"YulFunctionCall","src":"13259:14:26"},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"13275:34:26","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13252:6:26"},"nodeType":"YulFunctionCall","src":"13252:58:26"},"nodeType":"YulExpressionStatement","src":"13252:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13331:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"13339:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13327:3:26"},"nodeType":"YulFunctionCall","src":"13327:15:26"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"13344:6:26","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13320:6:26"},"nodeType":"YulFunctionCall","src":"13320:31:26"},"nodeType":"YulExpressionStatement","src":"13320:31:26"}]},"name":"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"13233:6:26","type":""}],"src":"13135:223:26"},{"body":{"nodeType":"YulBlock","src":"13510:220:26","statements":[{"nodeType":"YulAssignment","src":"13520:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13586:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"13591:2:26","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13527:58:26"},"nodeType":"YulFunctionCall","src":"13527:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13520:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13692:3:26"}],"functionName":{"name":"store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","nodeType":"YulIdentifier","src":"13603:88:26"},"nodeType":"YulFunctionCall","src":"13603:93:26"},"nodeType":"YulExpressionStatement","src":"13603:93:26"},{"nodeType":"YulAssignment","src":"13705:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13716:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"13721:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13712:3:26"},"nodeType":"YulFunctionCall","src":"13712:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13705:3:26"}]}]},"name":"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13498:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13506:3:26","type":""}],"src":"13364:366:26"},{"body":{"nodeType":"YulBlock","src":"13907:248:26","statements":[{"nodeType":"YulAssignment","src":"13917:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13929:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"13940:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13925:3:26"},"nodeType":"YulFunctionCall","src":"13925:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13917:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13964:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"13975:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13960:3:26"},"nodeType":"YulFunctionCall","src":"13960:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13983:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"13989:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13979:3:26"},"nodeType":"YulFunctionCall","src":"13979:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13953:6:26"},"nodeType":"YulFunctionCall","src":"13953:47:26"},"nodeType":"YulExpressionStatement","src":"13953:47:26"},{"nodeType":"YulAssignment","src":"14009:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14143:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14017:124:26"},"nodeType":"YulFunctionCall","src":"14017:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14009:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13887:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13902:4:26","type":""}],"src":"13736:419:26"},{"body":{"nodeType":"YulBlock","src":"14267:115:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14289:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"14297:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14285:3:26"},"nodeType":"YulFunctionCall","src":"14285:14:26"},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f206164647265","kind":"string","nodeType":"YulLiteral","src":"14301:34:26","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14278:6:26"},"nodeType":"YulFunctionCall","src":"14278:58:26"},"nodeType":"YulExpressionStatement","src":"14278:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14357:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"14365:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14353:3:26"},"nodeType":"YulFunctionCall","src":"14353:15:26"},{"hexValue":"7373","kind":"string","nodeType":"YulLiteral","src":"14370:4:26","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14346:6:26"},"nodeType":"YulFunctionCall","src":"14346:29:26"},"nodeType":"YulExpressionStatement","src":"14346:29:26"}]},"name":"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14259:6:26","type":""}],"src":"14161:221:26"},{"body":{"nodeType":"YulBlock","src":"14534:220:26","statements":[{"nodeType":"YulAssignment","src":"14544:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14610:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"14615:2:26","type":"","value":"34"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14551:58:26"},"nodeType":"YulFunctionCall","src":"14551:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14544:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14716:3:26"}],"functionName":{"name":"store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","nodeType":"YulIdentifier","src":"14627:88:26"},"nodeType":"YulFunctionCall","src":"14627:93:26"},"nodeType":"YulExpressionStatement","src":"14627:93:26"},{"nodeType":"YulAssignment","src":"14729:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14740:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"14745:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14736:3:26"},"nodeType":"YulFunctionCall","src":"14736:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14729:3:26"}]}]},"name":"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14522:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14530:3:26","type":""}],"src":"14388:366:26"},{"body":{"nodeType":"YulBlock","src":"14931:248:26","statements":[{"nodeType":"YulAssignment","src":"14941:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14953:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"14964:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14949:3:26"},"nodeType":"YulFunctionCall","src":"14949:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14941:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14988:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"14999:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14984:3:26"},"nodeType":"YulFunctionCall","src":"14984:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15007:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"15013:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15003:3:26"},"nodeType":"YulFunctionCall","src":"15003:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14977:6:26"},"nodeType":"YulFunctionCall","src":"14977:47:26"},"nodeType":"YulExpressionStatement","src":"14977:47:26"},{"nodeType":"YulAssignment","src":"15033:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15167:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15041:124:26"},"nodeType":"YulFunctionCall","src":"15041:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15033:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14911:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14926:4:26","type":""}],"src":"14760:419:26"},{"body":{"nodeType":"YulBlock","src":"15291:73:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15313:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"15321:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15309:3:26"},"nodeType":"YulFunctionCall","src":"15309:14:26"},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","kind":"string","nodeType":"YulLiteral","src":"15325:31:26","type":"","value":"ERC20: insufficient allowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15302:6:26"},"nodeType":"YulFunctionCall","src":"15302:55:26"},"nodeType":"YulExpressionStatement","src":"15302:55:26"}]},"name":"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"15283:6:26","type":""}],"src":"15185:179:26"},{"body":{"nodeType":"YulBlock","src":"15516:220:26","statements":[{"nodeType":"YulAssignment","src":"15526:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15592:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"15597:2:26","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15533:58:26"},"nodeType":"YulFunctionCall","src":"15533:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15526:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15698:3:26"}],"functionName":{"name":"store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","nodeType":"YulIdentifier","src":"15609:88:26"},"nodeType":"YulFunctionCall","src":"15609:93:26"},"nodeType":"YulExpressionStatement","src":"15609:93:26"},{"nodeType":"YulAssignment","src":"15711:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15722:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"15727:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15718:3:26"},"nodeType":"YulFunctionCall","src":"15718:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15711:3:26"}]}]},"name":"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15504:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15512:3:26","type":""}],"src":"15370:366:26"},{"body":{"nodeType":"YulBlock","src":"15913:248:26","statements":[{"nodeType":"YulAssignment","src":"15923:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15935:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"15946:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15931:3:26"},"nodeType":"YulFunctionCall","src":"15931:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15923:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15970:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"15981:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15966:3:26"},"nodeType":"YulFunctionCall","src":"15966:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15989:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"15995:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15985:3:26"},"nodeType":"YulFunctionCall","src":"15985:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15959:6:26"},"nodeType":"YulFunctionCall","src":"15959:47:26"},"nodeType":"YulExpressionStatement","src":"15959:47:26"},{"nodeType":"YulAssignment","src":"16015:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16149:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16023:124:26"},"nodeType":"YulFunctionCall","src":"16023:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16015:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15893:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15908:4:26","type":""}],"src":"15742:419:26"},{"body":{"nodeType":"YulBlock","src":"16273:118:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16295:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"16303:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16291:3:26"},"nodeType":"YulFunctionCall","src":"16291:14:26"},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"16307:34:26","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16284:6:26"},"nodeType":"YulFunctionCall","src":"16284:58:26"},"nodeType":"YulExpressionStatement","src":"16284:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16363:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"16371:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16359:3:26"},"nodeType":"YulFunctionCall","src":"16359:15:26"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"16376:7:26","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16352:6:26"},"nodeType":"YulFunctionCall","src":"16352:32:26"},"nodeType":"YulExpressionStatement","src":"16352:32:26"}]},"name":"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"16265:6:26","type":""}],"src":"16167:224:26"},{"body":{"nodeType":"YulBlock","src":"16543:220:26","statements":[{"nodeType":"YulAssignment","src":"16553:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16619:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"16624:2:26","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16560:58:26"},"nodeType":"YulFunctionCall","src":"16560:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16553:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16725:3:26"}],"functionName":{"name":"store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","nodeType":"YulIdentifier","src":"16636:88:26"},"nodeType":"YulFunctionCall","src":"16636:93:26"},"nodeType":"YulExpressionStatement","src":"16636:93:26"},{"nodeType":"YulAssignment","src":"16738:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16749:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"16754:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16745:3:26"},"nodeType":"YulFunctionCall","src":"16745:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16738:3:26"}]}]},"name":"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16531:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16539:3:26","type":""}],"src":"16397:366:26"},{"body":{"nodeType":"YulBlock","src":"16940:248:26","statements":[{"nodeType":"YulAssignment","src":"16950:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16962:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"16973:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16958:3:26"},"nodeType":"YulFunctionCall","src":"16958:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16950:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16997:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"17008:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16993:3:26"},"nodeType":"YulFunctionCall","src":"16993:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17016:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"17022:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17012:3:26"},"nodeType":"YulFunctionCall","src":"17012:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16986:6:26"},"nodeType":"YulFunctionCall","src":"16986:47:26"},"nodeType":"YulExpressionStatement","src":"16986:47:26"},{"nodeType":"YulAssignment","src":"17042:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17176:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17050:124:26"},"nodeType":"YulFunctionCall","src":"17050:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17042:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16920:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16935:4:26","type":""}],"src":"16769:419:26"},{"body":{"nodeType":"YulBlock","src":"17300:116:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17322:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"17330:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17318:3:26"},"nodeType":"YulFunctionCall","src":"17318:14:26"},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472","kind":"string","nodeType":"YulLiteral","src":"17334:34:26","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17311:6:26"},"nodeType":"YulFunctionCall","src":"17311:58:26"},"nodeType":"YulExpressionStatement","src":"17311:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17390:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"17398:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17386:3:26"},"nodeType":"YulFunctionCall","src":"17386:15:26"},{"hexValue":"657373","kind":"string","nodeType":"YulLiteral","src":"17403:5:26","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17379:6:26"},"nodeType":"YulFunctionCall","src":"17379:30:26"},"nodeType":"YulExpressionStatement","src":"17379:30:26"}]},"name":"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17292:6:26","type":""}],"src":"17194:222:26"},{"body":{"nodeType":"YulBlock","src":"17568:220:26","statements":[{"nodeType":"YulAssignment","src":"17578:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17644:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"17649:2:26","type":"","value":"35"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17585:58:26"},"nodeType":"YulFunctionCall","src":"17585:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17578:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17750:3:26"}],"functionName":{"name":"store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","nodeType":"YulIdentifier","src":"17661:88:26"},"nodeType":"YulFunctionCall","src":"17661:93:26"},"nodeType":"YulExpressionStatement","src":"17661:93:26"},{"nodeType":"YulAssignment","src":"17763:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17774:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"17779:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17770:3:26"},"nodeType":"YulFunctionCall","src":"17770:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17763:3:26"}]}]},"name":"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17556:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17564:3:26","type":""}],"src":"17422:366:26"},{"body":{"nodeType":"YulBlock","src":"17965:248:26","statements":[{"nodeType":"YulAssignment","src":"17975:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17987:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"17998:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17983:3:26"},"nodeType":"YulFunctionCall","src":"17983:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17975:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18022:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"18033:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18018:3:26"},"nodeType":"YulFunctionCall","src":"18018:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18041:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"18047:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18037:3:26"},"nodeType":"YulFunctionCall","src":"18037:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18011:6:26"},"nodeType":"YulFunctionCall","src":"18011:47:26"},"nodeType":"YulExpressionStatement","src":"18011:47:26"},{"nodeType":"YulAssignment","src":"18067:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18201:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18075:124:26"},"nodeType":"YulFunctionCall","src":"18075:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18067:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17945:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17960:4:26","type":""}],"src":"17794:419:26"},{"body":{"nodeType":"YulBlock","src":"18325:119:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18347:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"18355:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18343:3:26"},"nodeType":"YulFunctionCall","src":"18343:14:26"},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062","kind":"string","nodeType":"YulLiteral","src":"18359:34:26","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18336:6:26"},"nodeType":"YulFunctionCall","src":"18336:58:26"},"nodeType":"YulExpressionStatement","src":"18336:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18415:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"18423:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18411:3:26"},"nodeType":"YulFunctionCall","src":"18411:15:26"},{"hexValue":"616c616e6365","kind":"string","nodeType":"YulLiteral","src":"18428:8:26","type":"","value":"alance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18404:6:26"},"nodeType":"YulFunctionCall","src":"18404:33:26"},"nodeType":"YulExpressionStatement","src":"18404:33:26"}]},"name":"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18317:6:26","type":""}],"src":"18219:225:26"},{"body":{"nodeType":"YulBlock","src":"18596:220:26","statements":[{"nodeType":"YulAssignment","src":"18606:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18672:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"18677:2:26","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18613:58:26"},"nodeType":"YulFunctionCall","src":"18613:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18606:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18778:3:26"}],"functionName":{"name":"store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","nodeType":"YulIdentifier","src":"18689:88:26"},"nodeType":"YulFunctionCall","src":"18689:93:26"},"nodeType":"YulExpressionStatement","src":"18689:93:26"},{"nodeType":"YulAssignment","src":"18791:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18802:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"18807:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18798:3:26"},"nodeType":"YulFunctionCall","src":"18798:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18791:3:26"}]}]},"name":"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18584:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18592:3:26","type":""}],"src":"18450:366:26"},{"body":{"nodeType":"YulBlock","src":"18993:248:26","statements":[{"nodeType":"YulAssignment","src":"19003:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19015:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"19026:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19011:3:26"},"nodeType":"YulFunctionCall","src":"19011:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19003:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19050:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"19061:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19046:3:26"},"nodeType":"YulFunctionCall","src":"19046:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19069:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"19075:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19065:3:26"},"nodeType":"YulFunctionCall","src":"19065:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19039:6:26"},"nodeType":"YulFunctionCall","src":"19039:47:26"},"nodeType":"YulExpressionStatement","src":"19039:47:26"},{"nodeType":"YulAssignment","src":"19095:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19229:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19103:124:26"},"nodeType":"YulFunctionCall","src":"19103:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19095:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18973:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18988:4:26","type":""}],"src":"18822:419:26"},{"body":{"nodeType":"YulBlock","src":"19353:114:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19375:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"19383:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19371:3:26"},"nodeType":"YulFunctionCall","src":"19371:14:26"},{"hexValue":"45524332303a206275726e2066726f6d20746865207a65726f20616464726573","kind":"string","nodeType":"YulLiteral","src":"19387:34:26","type":"","value":"ERC20: burn from the zero addres"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19364:6:26"},"nodeType":"YulFunctionCall","src":"19364:58:26"},"nodeType":"YulExpressionStatement","src":"19364:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19443:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"19451:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19439:3:26"},"nodeType":"YulFunctionCall","src":"19439:15:26"},{"hexValue":"73","kind":"string","nodeType":"YulLiteral","src":"19456:3:26","type":"","value":"s"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19432:6:26"},"nodeType":"YulFunctionCall","src":"19432:28:26"},"nodeType":"YulExpressionStatement","src":"19432:28:26"}]},"name":"store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19345:6:26","type":""}],"src":"19247:220:26"},{"body":{"nodeType":"YulBlock","src":"19619:220:26","statements":[{"nodeType":"YulAssignment","src":"19629:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19695:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"19700:2:26","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19636:58:26"},"nodeType":"YulFunctionCall","src":"19636:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19629:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19801:3:26"}],"functionName":{"name":"store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","nodeType":"YulIdentifier","src":"19712:88:26"},"nodeType":"YulFunctionCall","src":"19712:93:26"},"nodeType":"YulExpressionStatement","src":"19712:93:26"},{"nodeType":"YulAssignment","src":"19814:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19825:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"19830:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19821:3:26"},"nodeType":"YulFunctionCall","src":"19821:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19814:3:26"}]}]},"name":"abi_encode_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19607:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19615:3:26","type":""}],"src":"19473:366:26"},{"body":{"nodeType":"YulBlock","src":"20016:248:26","statements":[{"nodeType":"YulAssignment","src":"20026:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20038:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"20049:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20034:3:26"},"nodeType":"YulFunctionCall","src":"20034:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20026:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20073:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"20084:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20069:3:26"},"nodeType":"YulFunctionCall","src":"20069:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20092:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"20098:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20088:3:26"},"nodeType":"YulFunctionCall","src":"20088:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20062:6:26"},"nodeType":"YulFunctionCall","src":"20062:47:26"},"nodeType":"YulExpressionStatement","src":"20062:47:26"},{"nodeType":"YulAssignment","src":"20118:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20252:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20126:124:26"},"nodeType":"YulFunctionCall","src":"20126:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20118:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19996:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20011:4:26","type":""}],"src":"19845:419:26"},{"body":{"nodeType":"YulBlock","src":"20376:115:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20398:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"20406:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20394:3:26"},"nodeType":"YulFunctionCall","src":"20394:14:26"},{"hexValue":"45524332303a206275726e20616d6f756e7420657863656564732062616c616e","kind":"string","nodeType":"YulLiteral","src":"20410:34:26","type":"","value":"ERC20: burn amount exceeds balan"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20387:6:26"},"nodeType":"YulFunctionCall","src":"20387:58:26"},"nodeType":"YulExpressionStatement","src":"20387:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20466:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"20474:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20462:3:26"},"nodeType":"YulFunctionCall","src":"20462:15:26"},{"hexValue":"6365","kind":"string","nodeType":"YulLiteral","src":"20479:4:26","type":"","value":"ce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20455:6:26"},"nodeType":"YulFunctionCall","src":"20455:29:26"},"nodeType":"YulExpressionStatement","src":"20455:29:26"}]},"name":"store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20368:6:26","type":""}],"src":"20270:221:26"},{"body":{"nodeType":"YulBlock","src":"20643:220:26","statements":[{"nodeType":"YulAssignment","src":"20653:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20719:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"20724:2:26","type":"","value":"34"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20660:58:26"},"nodeType":"YulFunctionCall","src":"20660:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20653:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20825:3:26"}],"functionName":{"name":"store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","nodeType":"YulIdentifier","src":"20736:88:26"},"nodeType":"YulFunctionCall","src":"20736:93:26"},"nodeType":"YulExpressionStatement","src":"20736:93:26"},{"nodeType":"YulAssignment","src":"20838:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20849:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"20854:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20845:3:26"},"nodeType":"YulFunctionCall","src":"20845:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20838:3:26"}]}]},"name":"abi_encode_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20631:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20639:3:26","type":""}],"src":"20497:366:26"},{"body":{"nodeType":"YulBlock","src":"21040:248:26","statements":[{"nodeType":"YulAssignment","src":"21050:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21062:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21073:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21058:3:26"},"nodeType":"YulFunctionCall","src":"21058:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21050:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21097:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21108:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21093:3:26"},"nodeType":"YulFunctionCall","src":"21093:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21116:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"21122:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21112:3:26"},"nodeType":"YulFunctionCall","src":"21112:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21086:6:26"},"nodeType":"YulFunctionCall","src":"21086:47:26"},"nodeType":"YulExpressionStatement","src":"21086:47:26"},{"nodeType":"YulAssignment","src":"21142:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21276:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21150:124:26"},"nodeType":"YulFunctionCall","src":"21150:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21142:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21020:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21035:4:26","type":""}],"src":"20869:419:26"},{"body":{"nodeType":"YulBlock","src":"21504:454:26","statements":[{"nodeType":"YulAssignment","src":"21514:27:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21526:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21537:3:26","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21522:3:26"},"nodeType":"YulFunctionCall","src":"21522:19:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21514:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"21595:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21608:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21619:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21604:3:26"},"nodeType":"YulFunctionCall","src":"21604:17:26"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"21551:43:26"},"nodeType":"YulFunctionCall","src":"21551:71:26"},"nodeType":"YulExpressionStatement","src":"21551:71:26"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"21676:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21689:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21700:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21685:3:26"},"nodeType":"YulFunctionCall","src":"21685:18:26"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"21632:43:26"},"nodeType":"YulFunctionCall","src":"21632:72:26"},"nodeType":"YulExpressionStatement","src":"21632:72:26"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"21758:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21771:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21782:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21767:3:26"},"nodeType":"YulFunctionCall","src":"21767:18:26"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"21714:43:26"},"nodeType":"YulFunctionCall","src":"21714:72:26"},"nodeType":"YulExpressionStatement","src":"21714:72:26"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"21840:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21853:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21864:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21849:3:26"},"nodeType":"YulFunctionCall","src":"21849:18:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"21796:43:26"},"nodeType":"YulFunctionCall","src":"21796:72:26"},"nodeType":"YulExpressionStatement","src":"21796:72:26"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"21922:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21935:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21946:3:26","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21931:3:26"},"nodeType":"YulFunctionCall","src":"21931:19:26"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"21878:43:26"},"nodeType":"YulFunctionCall","src":"21878:73:26"},"nodeType":"YulExpressionStatement","src":"21878:73:26"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21444:9:26","type":""},{"name":"value4","nodeType":"YulTypedName","src":"21456:6:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"21464:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"21472:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"21480:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"21488:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21499:4:26","type":""}],"src":"21294:664:26"},{"body":{"nodeType":"YulBlock","src":"22078:34:26","statements":[{"nodeType":"YulAssignment","src":"22088:18:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"22103:3:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"22088:11:26"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22050:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"22055:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"22066:11:26","type":""}],"src":"21964:148:26"},{"body":{"nodeType":"YulBlock","src":"22224:108:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22246:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"22254:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22242:3:26"},"nodeType":"YulFunctionCall","src":"22242:14:26"},{"kind":"number","nodeType":"YulLiteral","src":"22258:66:26","type":"","value":"0x1901000000000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22235:6:26"},"nodeType":"YulFunctionCall","src":"22235:90:26"},"nodeType":"YulExpressionStatement","src":"22235:90:26"}]},"name":"store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22216:6:26","type":""}],"src":"22118:214:26"},{"body":{"nodeType":"YulBlock","src":"22502:236:26","statements":[{"nodeType":"YulAssignment","src":"22512:91:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22596:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"22601:1:26","type":"","value":"2"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"22519:76:26"},"nodeType":"YulFunctionCall","src":"22519:84:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22512:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22701:3:26"}],"functionName":{"name":"store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","nodeType":"YulIdentifier","src":"22612:88:26"},"nodeType":"YulFunctionCall","src":"22612:93:26"},"nodeType":"YulExpressionStatement","src":"22612:93:26"},{"nodeType":"YulAssignment","src":"22714:18:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22725:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"22730:1:26","type":"","value":"2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22721:3:26"},"nodeType":"YulFunctionCall","src":"22721:11:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22714:3:26"}]}]},"name":"abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22490:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22498:3:26","type":""}],"src":"22338:400:26"},{"body":{"nodeType":"YulBlock","src":"22791:32:26","statements":[{"nodeType":"YulAssignment","src":"22801:16:26","value":{"name":"value","nodeType":"YulIdentifier","src":"22812:5:26"},"variableNames":[{"name":"aligned","nodeType":"YulIdentifier","src":"22801:7:26"}]}]},"name":"leftAlign_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22773:5:26","type":""}],"returnVariables":[{"name":"aligned","nodeType":"YulTypedName","src":"22783:7:26","type":""}],"src":"22744:79:26"},{"body":{"nodeType":"YulBlock","src":"22912:74:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22929:3:26"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22972:5:26"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"22954:17:26"},"nodeType":"YulFunctionCall","src":"22954:24:26"}],"functionName":{"name":"leftAlign_t_bytes32","nodeType":"YulIdentifier","src":"22934:19:26"},"nodeType":"YulFunctionCall","src":"22934:45:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22922:6:26"},"nodeType":"YulFunctionCall","src":"22922:58:26"},"nodeType":"YulExpressionStatement","src":"22922:58:26"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"22900:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"22907:3:26","type":""}],"src":"22829:157:26"},{"body":{"nodeType":"YulBlock","src":"23237:418:26","statements":[{"nodeType":"YulAssignment","src":"23248:155:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23399:3:26"}],"functionName":{"name":"abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"23255:142:26"},"nodeType":"YulFunctionCall","src":"23255:148:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23248:3:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23475:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"23484:3:26"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"23413:61:26"},"nodeType":"YulFunctionCall","src":"23413:75:26"},"nodeType":"YulExpressionStatement","src":"23413:75:26"},{"nodeType":"YulAssignment","src":"23497:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23508:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"23513:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23504:3:26"},"nodeType":"YulFunctionCall","src":"23504:12:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23497:3:26"}]},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"23588:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"23597:3:26"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"23526:61:26"},"nodeType":"YulFunctionCall","src":"23526:75:26"},"nodeType":"YulExpressionStatement","src":"23526:75:26"},{"nodeType":"YulAssignment","src":"23610:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23621:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"23626:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23617:3:26"},"nodeType":"YulFunctionCall","src":"23617:12:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23610:3:26"}]},{"nodeType":"YulAssignment","src":"23639:10:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"23646:3:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"23639:3:26"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"23208:3:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23214:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"23222:6:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"23233:3:26","type":""}],"src":"22992:663:26"},{"body":{"nodeType":"YulBlock","src":"23839:367:26","statements":[{"nodeType":"YulAssignment","src":"23849:27:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23861:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"23872:3:26","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23857:3:26"},"nodeType":"YulFunctionCall","src":"23857:19:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23849:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"23930:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23943:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"23954:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23939:3:26"},"nodeType":"YulFunctionCall","src":"23939:17:26"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"23886:43:26"},"nodeType":"YulFunctionCall","src":"23886:71:26"},"nodeType":"YulExpressionStatement","src":"23886:71:26"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"24007:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24020:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"24031:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24016:3:26"},"nodeType":"YulFunctionCall","src":"24016:18:26"}],"functionName":{"name":"abi_encode_t_uint8_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"23967:39:26"},"nodeType":"YulFunctionCall","src":"23967:68:26"},"nodeType":"YulExpressionStatement","src":"23967:68:26"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"24089:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24102:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"24113:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24098:3:26"},"nodeType":"YulFunctionCall","src":"24098:18:26"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"24045:43:26"},"nodeType":"YulFunctionCall","src":"24045:72:26"},"nodeType":"YulExpressionStatement","src":"24045:72:26"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"24171:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24184:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"24195:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24180:3:26"},"nodeType":"YulFunctionCall","src":"24180:18:26"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"24127:43:26"},"nodeType":"YulFunctionCall","src":"24127:72:26"},"nodeType":"YulExpressionStatement","src":"24127:72:26"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23787:9:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"23799:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"23807:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23815:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"23823:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23834:4:26","type":""}],"src":"23661:545:26"},{"body":{"nodeType":"YulBlock","src":"24240:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24257:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24260:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24250:6:26"},"nodeType":"YulFunctionCall","src":"24250:88:26"},"nodeType":"YulExpressionStatement","src":"24250:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24354:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"24357:4:26","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24347:6:26"},"nodeType":"YulFunctionCall","src":"24347:15:26"},"nodeType":"YulExpressionStatement","src":"24347:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24378:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24381:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"24371:6:26"},"nodeType":"YulFunctionCall","src":"24371:15:26"},"nodeType":"YulExpressionStatement","src":"24371:15:26"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"24212:180:26"},{"body":{"nodeType":"YulBlock","src":"24504:68:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24526:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"24534:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24522:3:26"},"nodeType":"YulFunctionCall","src":"24522:14:26"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","kind":"string","nodeType":"YulLiteral","src":"24538:26:26","type":"","value":"ECDSA: invalid signature"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24515:6:26"},"nodeType":"YulFunctionCall","src":"24515:50:26"},"nodeType":"YulExpressionStatement","src":"24515:50:26"}]},"name":"store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"24496:6:26","type":""}],"src":"24398:174:26"},{"body":{"nodeType":"YulBlock","src":"24724:220:26","statements":[{"nodeType":"YulAssignment","src":"24734:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24800:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"24805:2:26","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24741:58:26"},"nodeType":"YulFunctionCall","src":"24741:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24734:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24906:3:26"}],"functionName":{"name":"store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","nodeType":"YulIdentifier","src":"24817:88:26"},"nodeType":"YulFunctionCall","src":"24817:93:26"},"nodeType":"YulExpressionStatement","src":"24817:93:26"},{"nodeType":"YulAssignment","src":"24919:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24930:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"24935:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24926:3:26"},"nodeType":"YulFunctionCall","src":"24926:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24919:3:26"}]}]},"name":"abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24712:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24720:3:26","type":""}],"src":"24578:366:26"},{"body":{"nodeType":"YulBlock","src":"25121:248:26","statements":[{"nodeType":"YulAssignment","src":"25131:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25143:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"25154:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25139:3:26"},"nodeType":"YulFunctionCall","src":"25139:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25131:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25178:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"25189:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25174:3:26"},"nodeType":"YulFunctionCall","src":"25174:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25197:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"25203:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"25193:3:26"},"nodeType":"YulFunctionCall","src":"25193:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25167:6:26"},"nodeType":"YulFunctionCall","src":"25167:47:26"},"nodeType":"YulExpressionStatement","src":"25167:47:26"},{"nodeType":"YulAssignment","src":"25223:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"25357:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25231:124:26"},"nodeType":"YulFunctionCall","src":"25231:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25223:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25101:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25116:4:26","type":""}],"src":"24950:419:26"},{"body":{"nodeType":"YulBlock","src":"25481:75:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"25503:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"25511:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25499:3:26"},"nodeType":"YulFunctionCall","src":"25499:14:26"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","kind":"string","nodeType":"YulLiteral","src":"25515:33:26","type":"","value":"ECDSA: invalid signature length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25492:6:26"},"nodeType":"YulFunctionCall","src":"25492:57:26"},"nodeType":"YulExpressionStatement","src":"25492:57:26"}]},"name":"store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"25473:6:26","type":""}],"src":"25375:181:26"},{"body":{"nodeType":"YulBlock","src":"25708:220:26","statements":[{"nodeType":"YulAssignment","src":"25718:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25784:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"25789:2:26","type":"","value":"31"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"25725:58:26"},"nodeType":"YulFunctionCall","src":"25725:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25718:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25890:3:26"}],"functionName":{"name":"store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","nodeType":"YulIdentifier","src":"25801:88:26"},"nodeType":"YulFunctionCall","src":"25801:93:26"},"nodeType":"YulExpressionStatement","src":"25801:93:26"},{"nodeType":"YulAssignment","src":"25903:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25914:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"25919:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25910:3:26"},"nodeType":"YulFunctionCall","src":"25910:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"25903:3:26"}]}]},"name":"abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"25696:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"25704:3:26","type":""}],"src":"25562:366:26"},{"body":{"nodeType":"YulBlock","src":"26105:248:26","statements":[{"nodeType":"YulAssignment","src":"26115:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26127:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"26138:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26123:3:26"},"nodeType":"YulFunctionCall","src":"26123:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26115:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26162:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"26173:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26158:3:26"},"nodeType":"YulFunctionCall","src":"26158:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26181:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"26187:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"26177:3:26"},"nodeType":"YulFunctionCall","src":"26177:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26151:6:26"},"nodeType":"YulFunctionCall","src":"26151:47:26"},"nodeType":"YulExpressionStatement","src":"26151:47:26"},{"nodeType":"YulAssignment","src":"26207:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"26341:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26215:124:26"},"nodeType":"YulFunctionCall","src":"26215:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26207:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26085:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26100:4:26","type":""}],"src":"25934:419:26"},{"body":{"nodeType":"YulBlock","src":"26465:115:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"26487:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"26495:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26483:3:26"},"nodeType":"YulFunctionCall","src":"26483:14:26"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c","kind":"string","nodeType":"YulLiteral","src":"26499:34:26","type":"","value":"ECDSA: invalid signature 's' val"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26476:6:26"},"nodeType":"YulFunctionCall","src":"26476:58:26"},"nodeType":"YulExpressionStatement","src":"26476:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"26555:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"26563:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26551:3:26"},"nodeType":"YulFunctionCall","src":"26551:15:26"},{"hexValue":"7565","kind":"string","nodeType":"YulLiteral","src":"26568:4:26","type":"","value":"ue"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26544:6:26"},"nodeType":"YulFunctionCall","src":"26544:29:26"},"nodeType":"YulExpressionStatement","src":"26544:29:26"}]},"name":"store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"26457:6:26","type":""}],"src":"26359:221:26"},{"body":{"nodeType":"YulBlock","src":"26732:220:26","statements":[{"nodeType":"YulAssignment","src":"26742:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26808:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"26813:2:26","type":"","value":"34"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"26749:58:26"},"nodeType":"YulFunctionCall","src":"26749:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"26742:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26914:3:26"}],"functionName":{"name":"store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","nodeType":"YulIdentifier","src":"26825:88:26"},"nodeType":"YulFunctionCall","src":"26825:93:26"},"nodeType":"YulExpressionStatement","src":"26825:93:26"},{"nodeType":"YulAssignment","src":"26927:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26938:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"26943:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26934:3:26"},"nodeType":"YulFunctionCall","src":"26934:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"26927:3:26"}]}]},"name":"abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26720:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"26728:3:26","type":""}],"src":"26586:366:26"},{"body":{"nodeType":"YulBlock","src":"27129:248:26","statements":[{"nodeType":"YulAssignment","src":"27139:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27151:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"27162:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27147:3:26"},"nodeType":"YulFunctionCall","src":"27147:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27139:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27186:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"27197:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27182:3:26"},"nodeType":"YulFunctionCall","src":"27182:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27205:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"27211:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27201:3:26"},"nodeType":"YulFunctionCall","src":"27201:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27175:6:26"},"nodeType":"YulFunctionCall","src":"27175:47:26"},"nodeType":"YulExpressionStatement","src":"27175:47:26"},{"nodeType":"YulAssignment","src":"27231:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27365:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27239:124:26"},"nodeType":"YulFunctionCall","src":"27239:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27231:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27109:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27124:4:26","type":""}],"src":"26958:419:26"}]},"contents":"{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function validator_revert_t_uint8(value) {\n        if iszero(eq(value, cleanup_t_uint8(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint8(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint8(value)\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6 {\n        if slt(sub(dataEnd, headStart), 224) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint8(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 192\n\n            value6 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: decreased allowance below\")\n\n        mstore(add(memPtr, 32), \" zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20Permit: expired deadline\")\n\n    }\n\n    function abi_encode_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 192)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value4,  add(headStart, 128))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value5,  add(headStart, 160))\n\n    }\n\n    function store_literal_in_memory_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20Permit: invalid signature\")\n\n    }\n\n    function abi_encode_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 30)\n        store_literal_in_memory_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve from the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: approve to the zero addre\")\n\n        mstore(add(memPtr, 32), \"ss\")\n\n    }\n\n    function abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: insufficient allowance\")\n\n    }\n\n    function abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer from the zero ad\")\n\n        mstore(add(memPtr, 32), \"dress\")\n\n    }\n\n    function abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer to the zero addr\")\n\n        mstore(add(memPtr, 32), \"ess\")\n\n    }\n\n    function abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 35)\n        store_literal_in_memory_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: transfer amount exceeds b\")\n\n        mstore(add(memPtr, 32), \"alance\")\n\n    }\n\n    function abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: burn from the zero addres\")\n\n        mstore(add(memPtr, 32), \"s\")\n\n    }\n\n    function abi_encode_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20: burn amount exceeds balan\")\n\n        mstore(add(memPtr, 32), \"ce\")\n\n    }\n\n    function abi_encode_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_address_to_t_address_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541(memPtr) {\n\n        mstore(add(memPtr, 0), 0x1901000000000000000000000000000000000000000000000000000000000000)\n\n    }\n\n    function abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 2)\n        store_literal_in_memory_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541(pos)\n        end := add(pos, 2)\n    }\n\n    function leftAlign_t_bytes32(value) -> aligned {\n        aligned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value, pos) {\n        mstore(pos, leftAlign_t_bytes32(cleanup_t_bytes32(value)))\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value0,  pos)\n        pos := add(pos, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value1,  pos)\n        pos := add(pos, 32)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value3,  add(headStart, 96))\n\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be(memPtr) {\n\n        mstore(add(memPtr, 0), \"ECDSA: invalid signature\")\n\n    }\n\n    function abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77(memPtr) {\n\n        mstore(add(memPtr, 0), \"ECDSA: invalid signature length\")\n\n    }\n\n    function abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd(memPtr) {\n\n        mstore(add(memPtr, 0), \"ECDSA: invalid signature 's' val\")\n\n        mstore(add(memPtr, 32), \"ue\")\n\n    }\n\n    function abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n","id":26,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"3638":[{"length":32,"start":3527}],"3640":[{"length":32,"start":3486}],"3642":[{"length":32,"start":3400}],"3644":[{"length":32,"start":3603}],"3646":[{"length":32,"start":3636}],"3648":[{"length":32,"start":3570}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101005760003560e01c806370a0823111610097578063a457c2d711610066578063a457c2d7146102c3578063a9059cbb146102f3578063d505accf14610323578063dd62ed3e1461033f57610100565b806370a082311461022957806379cc6790146102595780637ecebe001461027557806395d89b41146102a557610100565b8063313ce567116100d3578063313ce567146101a15780633644e515146101bf57806339509351146101dd57806342966c681461020d57610100565b806306fdde0314610105578063095ea7b31461012357806318160ddd1461015357806323b872dd14610171575b600080fd5b61010d61036f565b60405161011a9190611454565b60405180910390f35b61013d6004803603810190610138919061150f565b610401565b60405161014a919061156a565b60405180910390f35b61015b610424565b6040516101689190611594565b60405180910390f35b61018b600480360381019061018691906115af565b61042e565b604051610198919061156a565b60405180910390f35b6101a961045d565b6040516101b6919061161e565b60405180910390f35b6101c7610466565b6040516101d49190611652565b60405180910390f35b6101f760048036038101906101f2919061150f565b610475565b604051610204919061156a565b60405180910390f35b6102276004803603810190610222919061166d565b6104ac565b005b610243600480360381019061023e919061169a565b6104c0565b6040516102509190611594565b60405180910390f35b610273600480360381019061026e919061150f565b610508565b005b61028f600480360381019061028a919061169a565b610528565b60405161029c9190611594565b60405180910390f35b6102ad610578565b6040516102ba9190611454565b60405180910390f35b6102dd60048036038101906102d8919061150f565b61060a565b6040516102ea919061156a565b60405180910390f35b61030d6004803603810190610308919061150f565b610681565b60405161031a919061156a565b60405180910390f35b61033d6004803603810190610338919061171f565b6106a4565b005b610359600480360381019061035491906117c1565b6107e6565b6040516103669190611594565b60405180910390f35b60606003805461037e90611830565b80601f01602080910402602001604051908101604052809291908181526020018280546103aa90611830565b80156103f75780601f106103cc576101008083540402835291602001916103f7565b820191906000526020600020905b8154815290600101906020018083116103da57829003601f168201915b5050505050905090565b60008061040c61086d565b9050610419818585610875565b600191505092915050565b6000600254905090565b60008061043961086d565b9050610446858285610a40565b610451858585610acc565b60019150509392505050565b60006012905090565b6000610470610d44565b905090565b60008061048061086d565b90506104a181858561049285896107e6565b61049c9190611891565b610875565b600191505092915050565b6104bd6104b761086d565b82610e5e565b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61051a8261051461086d565b83610a40565b6105248282610e5e565b5050565b6000610571600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061102c565b9050919050565b60606004805461058790611830565b80601f01602080910402602001604051908101604052809291908181526020018280546105b390611830565b80156106005780601f106105d557610100808354040283529160200191610600565b820191906000526020600020905b8154815290600101906020018083116105e357829003601f168201915b5050505050905090565b60008061061561086d565b9050600061062382866107e6565b905083811015610668576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065f90611959565b60405180910390fd5b6106758286868403610875565b60019250505092915050565b60008061068c61086d565b9050610699818585610acc565b600191505092915050565b834211156106e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106de906119c5565b60405180910390fd5b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886107168c61103a565b8960405160200161072c969594939291906119f4565b604051602081830303815290604052805190602001209050600061074f82611098565b9050600061075f828787876110b2565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146107cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c690611aa1565b60405180910390fd5b6107da8a8a8a610875565b50505050505050505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108dc90611b33565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610955576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094c90611bc5565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610a339190611594565b60405180910390a3505050565b6000610a4c84846107e6565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610ac65781811015610ab8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aaf90611c31565b60405180910390fd5b610ac58484848403610875565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3390611cc3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610bac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba390611d55565b60405180910390fd5b610bb78383836110dd565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610c3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3490611de7565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d2b9190611594565b60405180910390a3610d3e8484846110e2565b50505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148015610dc057507f000000000000000000000000000000000000000000000000000000000000000046145b15610ded577f00000000000000000000000000000000000000000000000000000000000000009050610e5b565b610e587f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006110e7565b90505b90565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ece576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec590611e79565b60405180910390fd5b610eda826000836110dd565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610f60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5790611f0b565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516110139190611594565b60405180910390a3611027836000846110e2565b505050565b600081600001549050919050565b600080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506110878161102c565b915061109281611121565b50919050565b60006110ab6110a5610d44565b83611137565b9050919050565b60008060006110c38787878761116a565b915091506110d08161124d565b8192505050949350505050565b505050565b505050565b60008383834630604051602001611102959493929190611f2b565b6040516020818303038152906040528051906020012090509392505050565b6001816000016000828254019250508190555050565b6000828260405160200161114c929190611ff6565b60405160208183030381529060405280519060200120905092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156111a5576000600391509150611244565b6000600187878787604051600081526020016040526040516111ca949392919061202d565b6020604051602081039080840390855afa1580156111ec573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561123b57600060019250925050611244565b80600092509250505b94509492505050565b6000600481111561126157611260612072565b5b81600481111561127457611273612072565b5b141561127f576113b8565b6001600481111561129357611292612072565b5b8160048111156112a6576112a5612072565b5b14156112e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112de906120ed565b60405180910390fd5b600260048111156112fb576112fa612072565b5b81600481111561130e5761130d612072565b5b141561134f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134690612159565b60405180910390fd5b6003600481111561136357611362612072565b5b81600481111561137657611375612072565b5b14156113b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ae906121eb565b60405180910390fd5b5b50565b600081519050919050565b600082825260208201905092915050565b60005b838110156113f55780820151818401526020810190506113da565b83811115611404576000848401525b50505050565b6000601f19601f8301169050919050565b6000611426826113bb565b61143081856113c6565b93506114408185602086016113d7565b6114498161140a565b840191505092915050565b6000602082019050818103600083015261146e818461141b565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114a68261147b565b9050919050565b6114b68161149b565b81146114c157600080fd5b50565b6000813590506114d3816114ad565b92915050565b6000819050919050565b6114ec816114d9565b81146114f757600080fd5b50565b600081359050611509816114e3565b92915050565b6000806040838503121561152657611525611476565b5b6000611534858286016114c4565b9250506020611545858286016114fa565b9150509250929050565b60008115159050919050565b6115648161154f565b82525050565b600060208201905061157f600083018461155b565b92915050565b61158e816114d9565b82525050565b60006020820190506115a96000830184611585565b92915050565b6000806000606084860312156115c8576115c7611476565b5b60006115d6868287016114c4565b93505060206115e7868287016114c4565b92505060406115f8868287016114fa565b9150509250925092565b600060ff82169050919050565b61161881611602565b82525050565b6000602082019050611633600083018461160f565b92915050565b6000819050919050565b61164c81611639565b82525050565b60006020820190506116676000830184611643565b92915050565b60006020828403121561168357611682611476565b5b6000611691848285016114fa565b91505092915050565b6000602082840312156116b0576116af611476565b5b60006116be848285016114c4565b91505092915050565b6116d081611602565b81146116db57600080fd5b50565b6000813590506116ed816116c7565b92915050565b6116fc81611639565b811461170757600080fd5b50565b600081359050611719816116f3565b92915050565b600080600080600080600060e0888a03121561173e5761173d611476565b5b600061174c8a828b016114c4565b975050602061175d8a828b016114c4565b965050604061176e8a828b016114fa565b955050606061177f8a828b016114fa565b94505060806117908a828b016116de565b93505060a06117a18a828b0161170a565b92505060c06117b28a828b0161170a565b91505092959891949750929550565b600080604083850312156117d8576117d7611476565b5b60006117e6858286016114c4565b92505060206117f7858286016114c4565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061184857607f821691505b6020821081141561185c5761185b611801565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061189c826114d9565b91506118a7836114d9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156118dc576118db611862565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006119436025836113c6565b915061194e826118e7565b604082019050919050565b6000602082019050818103600083015261197281611936565b9050919050565b7f45524332305065726d69743a206578706972656420646561646c696e65000000600082015250565b60006119af601d836113c6565b91506119ba82611979565b602082019050919050565b600060208201905081810360008301526119de816119a2565b9050919050565b6119ee8161149b565b82525050565b600060c082019050611a096000830189611643565b611a1660208301886119e5565b611a2360408301876119e5565b611a306060830186611585565b611a3d6080830185611585565b611a4a60a0830184611585565b979650505050505050565b7f45524332305065726d69743a20696e76616c6964207369676e61747572650000600082015250565b6000611a8b601e836113c6565b9150611a9682611a55565b602082019050919050565b60006020820190508181036000830152611aba81611a7e565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611b1d6024836113c6565b9150611b2882611ac1565b604082019050919050565b60006020820190508181036000830152611b4c81611b10565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000611baf6022836113c6565b9150611bba82611b53565b604082019050919050565b60006020820190508181036000830152611bde81611ba2565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611c1b601d836113c6565b9150611c2682611be5565b602082019050919050565b60006020820190508181036000830152611c4a81611c0e565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000611cad6025836113c6565b9150611cb882611c51565b604082019050919050565b60006020820190508181036000830152611cdc81611ca0565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611d3f6023836113c6565b9150611d4a82611ce3565b604082019050919050565b60006020820190508181036000830152611d6e81611d32565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000611dd16026836113c6565b9150611ddc82611d75565b604082019050919050565b60006020820190508181036000830152611e0081611dc4565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000611e636021836113c6565b9150611e6e82611e07565b604082019050919050565b60006020820190508181036000830152611e9281611e56565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000611ef56022836113c6565b9150611f0082611e99565b604082019050919050565b60006020820190508181036000830152611f2481611ee8565b9050919050565b600060a082019050611f406000830188611643565b611f4d6020830187611643565b611f5a6040830186611643565b611f676060830185611585565b611f7460808301846119e5565b9695505050505050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b6000611fbf600283611f7e565b9150611fca82611f89565b600282019050919050565b6000819050919050565b611ff0611feb82611639565b611fd5565b82525050565b600061200182611fb2565b915061200d8285611fdf565b60208201915061201d8284611fdf565b6020820191508190509392505050565b60006080820190506120426000830187611643565b61204f602083018661160f565b61205c6040830185611643565b6120696060830184611643565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b60006120d76018836113c6565b91506120e2826120a1565b602082019050919050565b60006020820190508181036000830152612106816120ca565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000612143601f836113c6565b915061214e8261210d565b602082019050919050565b6000602082019050818103600083015261217281612136565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006121d56022836113c6565b91506121e082612179565b604082019050919050565b60006020820190508181036000830152612204816121c8565b905091905056fea26469706673582212209e24fb2f0b7313b0399ce8052a1576292abe1bb29060998c6b1d278209b7776d64736f6c63430008090033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x100 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x2C3 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x2F3 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x323 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x33F JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x229 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x259 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x275 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x2A5 JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x1BF JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x1DD JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x20D JUMPI PUSH2 0x100 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x171 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10D PUSH2 0x36F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11A SWAP2 SWAP1 PUSH2 0x1454 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x138 SWAP2 SWAP1 PUSH2 0x150F JUMP JUMPDEST PUSH2 0x401 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x14A SWAP2 SWAP1 PUSH2 0x156A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x15B PUSH2 0x424 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x168 SWAP2 SWAP1 PUSH2 0x1594 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x18B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x186 SWAP2 SWAP1 PUSH2 0x15AF JUMP JUMPDEST PUSH2 0x42E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x198 SWAP2 SWAP1 PUSH2 0x156A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1A9 PUSH2 0x45D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1B6 SWAP2 SWAP1 PUSH2 0x161E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1C7 PUSH2 0x466 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D4 SWAP2 SWAP1 PUSH2 0x1652 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1F2 SWAP2 SWAP1 PUSH2 0x150F JUMP JUMPDEST PUSH2 0x475 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x204 SWAP2 SWAP1 PUSH2 0x156A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x227 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x222 SWAP2 SWAP1 PUSH2 0x166D JUMP JUMPDEST PUSH2 0x4AC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x243 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x23E SWAP2 SWAP1 PUSH2 0x169A JUMP JUMPDEST PUSH2 0x4C0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x250 SWAP2 SWAP1 PUSH2 0x1594 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x273 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x26E SWAP2 SWAP1 PUSH2 0x150F JUMP JUMPDEST PUSH2 0x508 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x28F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x28A SWAP2 SWAP1 PUSH2 0x169A JUMP JUMPDEST PUSH2 0x528 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29C SWAP2 SWAP1 PUSH2 0x1594 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AD PUSH2 0x578 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2BA SWAP2 SWAP1 PUSH2 0x1454 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2DD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2D8 SWAP2 SWAP1 PUSH2 0x150F JUMP JUMPDEST PUSH2 0x60A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2EA SWAP2 SWAP1 PUSH2 0x156A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x30D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x308 SWAP2 SWAP1 PUSH2 0x150F JUMP JUMPDEST PUSH2 0x681 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31A SWAP2 SWAP1 PUSH2 0x156A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x33D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x338 SWAP2 SWAP1 PUSH2 0x171F JUMP JUMPDEST PUSH2 0x6A4 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x359 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x354 SWAP2 SWAP1 PUSH2 0x17C1 JUMP JUMPDEST PUSH2 0x7E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x366 SWAP2 SWAP1 PUSH2 0x1594 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x37E SWAP1 PUSH2 0x1830 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3AA SWAP1 PUSH2 0x1830 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3F7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3CC JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3F7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3DA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x40C PUSH2 0x86D JUMP JUMPDEST SWAP1 POP PUSH2 0x419 DUP2 DUP6 DUP6 PUSH2 0x875 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x439 PUSH2 0x86D JUMP JUMPDEST SWAP1 POP PUSH2 0x446 DUP6 DUP3 DUP6 PUSH2 0xA40 JUMP JUMPDEST PUSH2 0x451 DUP6 DUP6 DUP6 PUSH2 0xACC JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x470 PUSH2 0xD44 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x480 PUSH2 0x86D JUMP JUMPDEST SWAP1 POP PUSH2 0x4A1 DUP2 DUP6 DUP6 PUSH2 0x492 DUP6 DUP10 PUSH2 0x7E6 JUMP JUMPDEST PUSH2 0x49C SWAP2 SWAP1 PUSH2 0x1891 JUMP JUMPDEST PUSH2 0x875 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x4BD PUSH2 0x4B7 PUSH2 0x86D JUMP JUMPDEST DUP3 PUSH2 0xE5E JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x51A DUP3 PUSH2 0x514 PUSH2 0x86D JUMP JUMPDEST DUP4 PUSH2 0xA40 JUMP JUMPDEST PUSH2 0x524 DUP3 DUP3 PUSH2 0xE5E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x571 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH2 0x102C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x587 SWAP1 PUSH2 0x1830 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x5B3 SWAP1 PUSH2 0x1830 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x600 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5D5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x600 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x5E3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x615 PUSH2 0x86D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x623 DUP3 DUP7 PUSH2 0x7E6 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x668 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x65F SWAP1 PUSH2 0x1959 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x675 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x875 JUMP JUMPDEST PUSH1 0x1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x68C PUSH2 0x86D JUMP JUMPDEST SWAP1 POP PUSH2 0x699 DUP2 DUP6 DUP6 PUSH2 0xACC JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x6E7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6DE SWAP1 PUSH2 0x19C5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x716 DUP13 PUSH2 0x103A JUMP JUMPDEST DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x72C SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x19F4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x74F DUP3 PUSH2 0x1098 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x75F DUP3 DUP8 DUP8 DUP8 PUSH2 0x10B2 JUMP JUMPDEST SWAP1 POP DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x7CF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7C6 SWAP1 PUSH2 0x1AA1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x7DA DUP11 DUP11 DUP11 PUSH2 0x875 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x8E5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8DC SWAP1 PUSH2 0x1B33 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x955 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x94C SWAP1 PUSH2 0x1BC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD PUSH2 0xA33 SWAP2 SWAP1 PUSH2 0x1594 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA4C DUP5 DUP5 PUSH2 0x7E6 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0xAC6 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xAB8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAAF SWAP1 PUSH2 0x1C31 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xAC5 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x875 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xB3C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB33 SWAP1 PUSH2 0x1CC3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xBAC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBA3 SWAP1 PUSH2 0x1D55 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xBB7 DUP4 DUP4 DUP4 PUSH2 0x10DD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xC3D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC34 SWAP1 PUSH2 0x1DE7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xD2B SWAP2 SWAP1 PUSH2 0x1594 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0xD3E DUP5 DUP5 DUP5 PUSH2 0x10E2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0xDC0 JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0xDED JUMPI PUSH32 0x0 SWAP1 POP PUSH2 0xE5B JUMP JUMPDEST PUSH2 0xE58 PUSH32 0x0 PUSH32 0x0 PUSH32 0x0 PUSH2 0x10E7 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xECE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEC5 SWAP1 PUSH2 0x1E79 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xEDA DUP3 PUSH1 0x0 DUP4 PUSH2 0x10DD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0xF60 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF57 SWAP1 PUSH2 0x1F0B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x1013 SWAP2 SWAP1 PUSH2 0x1594 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x1027 DUP4 PUSH1 0x0 DUP5 PUSH2 0x10E2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH2 0x1087 DUP2 PUSH2 0x102C JUMP JUMPDEST SWAP2 POP PUSH2 0x1092 DUP2 PUSH2 0x1121 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10AB PUSH2 0x10A5 PUSH2 0xD44 JUMP JUMPDEST DUP4 PUSH2 0x1137 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x10C3 DUP8 DUP8 DUP8 DUP8 PUSH2 0x116A JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x10D0 DUP2 PUSH2 0x124D JUMP JUMPDEST DUP2 SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP4 CHAINID ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1102 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F2B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x114C SWAP3 SWAP2 SWAP1 PUSH2 0x1FF6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 PUSH1 0x0 SHR GT ISZERO PUSH2 0x11A5 JUMPI PUSH1 0x0 PUSH1 0x3 SWAP2 POP SWAP2 POP PUSH2 0x1244 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x11CA SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x202D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11EC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x123B JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x1244 JUMP JUMPDEST DUP1 PUSH1 0x0 SWAP3 POP SWAP3 POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1261 JUMPI PUSH2 0x1260 PUSH2 0x2072 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1274 JUMPI PUSH2 0x1273 PUSH2 0x2072 JUMP JUMPDEST JUMPDEST EQ ISZERO PUSH2 0x127F JUMPI PUSH2 0x13B8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1293 JUMPI PUSH2 0x1292 PUSH2 0x2072 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x12A6 JUMPI PUSH2 0x12A5 PUSH2 0x2072 JUMP JUMPDEST JUMPDEST EQ ISZERO PUSH2 0x12E7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12DE SWAP1 PUSH2 0x20ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x12FB JUMPI PUSH2 0x12FA PUSH2 0x2072 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x130E JUMPI PUSH2 0x130D PUSH2 0x2072 JUMP JUMPDEST JUMPDEST EQ ISZERO PUSH2 0x134F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1346 SWAP1 PUSH2 0x2159 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1363 JUMPI PUSH2 0x1362 PUSH2 0x2072 JUMP JUMPDEST JUMPDEST DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1376 JUMPI PUSH2 0x1375 PUSH2 0x2072 JUMP JUMPDEST JUMPDEST EQ ISZERO PUSH2 0x13B7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13AE SWAP1 PUSH2 0x21EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x13F5 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x13DA JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1404 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1426 DUP3 PUSH2 0x13BB JUMP JUMPDEST PUSH2 0x1430 DUP2 DUP6 PUSH2 0x13C6 JUMP JUMPDEST SWAP4 POP PUSH2 0x1440 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x13D7 JUMP JUMPDEST PUSH2 0x1449 DUP2 PUSH2 0x140A JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x146E DUP2 DUP5 PUSH2 0x141B JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14A6 DUP3 PUSH2 0x147B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x14B6 DUP2 PUSH2 0x149B JUMP JUMPDEST DUP2 EQ PUSH2 0x14C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x14D3 DUP2 PUSH2 0x14AD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x14EC DUP2 PUSH2 0x14D9 JUMP JUMPDEST DUP2 EQ PUSH2 0x14F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1509 DUP2 PUSH2 0x14E3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1526 JUMPI PUSH2 0x1525 PUSH2 0x1476 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1534 DUP6 DUP3 DUP7 ADD PUSH2 0x14C4 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1545 DUP6 DUP3 DUP7 ADD PUSH2 0x14FA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1564 DUP2 PUSH2 0x154F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x157F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x155B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x158E DUP2 PUSH2 0x14D9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x15A9 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1585 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x15C8 JUMPI PUSH2 0x15C7 PUSH2 0x1476 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x15D6 DUP7 DUP3 DUP8 ADD PUSH2 0x14C4 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x15E7 DUP7 DUP3 DUP8 ADD PUSH2 0x14C4 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x15F8 DUP7 DUP3 DUP8 ADD PUSH2 0x14FA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1618 DUP2 PUSH2 0x1602 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1633 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x160F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x164C DUP2 PUSH2 0x1639 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1667 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1643 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1683 JUMPI PUSH2 0x1682 PUSH2 0x1476 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1691 DUP5 DUP3 DUP6 ADD PUSH2 0x14FA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16B0 JUMPI PUSH2 0x16AF PUSH2 0x1476 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x16BE DUP5 DUP3 DUP6 ADD PUSH2 0x14C4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x16D0 DUP2 PUSH2 0x1602 JUMP JUMPDEST DUP2 EQ PUSH2 0x16DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x16ED DUP2 PUSH2 0x16C7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x16FC DUP2 PUSH2 0x1639 JUMP JUMPDEST DUP2 EQ PUSH2 0x1707 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1719 DUP2 PUSH2 0x16F3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x173E JUMPI PUSH2 0x173D PUSH2 0x1476 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x174C DUP11 DUP3 DUP12 ADD PUSH2 0x14C4 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0x175D DUP11 DUP3 DUP12 ADD PUSH2 0x14C4 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0x176E DUP11 DUP3 DUP12 ADD PUSH2 0x14FA JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH2 0x177F DUP11 DUP3 DUP12 ADD PUSH2 0x14FA JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x1790 DUP11 DUP3 DUP12 ADD PUSH2 0x16DE JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x17A1 DUP11 DUP3 DUP12 ADD PUSH2 0x170A JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x17B2 DUP11 DUP3 DUP12 ADD PUSH2 0x170A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x17D8 JUMPI PUSH2 0x17D7 PUSH2 0x1476 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x17E6 DUP6 DUP3 DUP7 ADD PUSH2 0x14C4 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x17F7 DUP6 DUP3 DUP7 ADD PUSH2 0x14C4 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1848 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x185C JUMPI PUSH2 0x185B PUSH2 0x1801 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x189C DUP3 PUSH2 0x14D9 JUMP JUMPDEST SWAP2 POP PUSH2 0x18A7 DUP4 PUSH2 0x14D9 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x18DC JUMPI PUSH2 0x18DB PUSH2 0x1862 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1943 PUSH1 0x25 DUP4 PUSH2 0x13C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x194E DUP3 PUSH2 0x18E7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1972 DUP2 PUSH2 0x1936 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332305065726D69743A206578706972656420646561646C696E65000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19AF PUSH1 0x1D DUP4 PUSH2 0x13C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x19BA DUP3 PUSH2 0x1979 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x19DE DUP2 PUSH2 0x19A2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x19EE DUP2 PUSH2 0x149B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x1A09 PUSH1 0x0 DUP4 ADD DUP10 PUSH2 0x1643 JUMP JUMPDEST PUSH2 0x1A16 PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x19E5 JUMP JUMPDEST PUSH2 0x1A23 PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x19E5 JUMP JUMPDEST PUSH2 0x1A30 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x1585 JUMP JUMPDEST PUSH2 0x1A3D PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x1585 JUMP JUMPDEST PUSH2 0x1A4A PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x1585 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x45524332305065726D69743A20696E76616C6964207369676E61747572650000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A8B PUSH1 0x1E DUP4 PUSH2 0x13C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x1A96 DUP3 PUSH2 0x1A55 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1ABA DUP2 PUSH2 0x1A7E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B1D PUSH1 0x24 DUP4 PUSH2 0x13C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B28 DUP3 PUSH2 0x1AC1 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B4C DUP2 PUSH2 0x1B10 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7373000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BAF PUSH1 0x22 DUP4 PUSH2 0x13C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x1BBA DUP3 PUSH2 0x1B53 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BDE DUP2 PUSH2 0x1BA2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C1B PUSH1 0x1D DUP4 PUSH2 0x13C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C26 DUP3 PUSH2 0x1BE5 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C4A DUP2 PUSH2 0x1C0E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CAD PUSH1 0x25 DUP4 PUSH2 0x13C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x1CB8 DUP3 PUSH2 0x1C51 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CDC DUP2 PUSH2 0x1CA0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6573730000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D3F PUSH1 0x23 DUP4 PUSH2 0x13C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D4A DUP3 PUSH2 0x1CE3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D6E DUP2 PUSH2 0x1D32 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1DD1 PUSH1 0x26 DUP4 PUSH2 0x13C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DDC DUP3 PUSH2 0x1D75 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E00 DUP2 PUSH2 0x1DC4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7300000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E63 PUSH1 0x21 DUP4 PUSH2 0x13C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x1E6E DUP3 PUSH2 0x1E07 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E92 DUP2 PUSH2 0x1E56 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6365000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EF5 PUSH1 0x22 DUP4 PUSH2 0x13C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F00 DUP3 PUSH2 0x1E99 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F24 DUP2 PUSH2 0x1EE8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x1F40 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x1643 JUMP JUMPDEST PUSH2 0x1F4D PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x1643 JUMP JUMPDEST PUSH2 0x1F5A PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x1643 JUMP JUMPDEST PUSH2 0x1F67 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x1585 JUMP JUMPDEST PUSH2 0x1F74 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x19E5 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FBF PUSH1 0x2 DUP4 PUSH2 0x1F7E JUMP JUMPDEST SWAP2 POP PUSH2 0x1FCA DUP3 PUSH2 0x1F89 JUMP JUMPDEST PUSH1 0x2 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1FF0 PUSH2 0x1FEB DUP3 PUSH2 0x1639 JUMP JUMPDEST PUSH2 0x1FD5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2001 DUP3 PUSH2 0x1FB2 JUMP JUMPDEST SWAP2 POP PUSH2 0x200D DUP3 DUP6 PUSH2 0x1FDF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x201D DUP3 DUP5 PUSH2 0x1FDF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2042 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x1643 JUMP JUMPDEST PUSH2 0x204F PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x160F JUMP JUMPDEST PUSH2 0x205C PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1643 JUMP JUMPDEST PUSH2 0x2069 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x1643 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x20D7 PUSH1 0x18 DUP4 PUSH2 0x13C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x20E2 DUP3 PUSH2 0x20A1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2106 DUP2 PUSH2 0x20CA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2143 PUSH1 0x1F DUP4 PUSH2 0x13C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x214E DUP3 PUSH2 0x210D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2172 DUP2 PUSH2 0x2136 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21D5 PUSH1 0x22 DUP4 PUSH2 0x13C6 JUMP JUMPDEST SWAP2 POP PUSH2 0x21E0 DUP3 PUSH2 0x2179 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2204 DUP2 PUSH2 0x21C8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP15 0x24 0xFB 0x2F SIGNEXTEND PUSH20 0x13B0399CE8052A1576292ABE1BB29060998C6B1D 0x27 DUP3 MULMOD 0xB7 PUSH24 0x6D64736F6C63430008090033000000000000000000000000 ","sourceMap":"268:265:24:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4431:197;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3242:106;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5190:286;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3091:91;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2879:113:5;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5871:234:1;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;578:89:3;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3406:125:1;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;973:161:3;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2629:126:5;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2365:102:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6592:427;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3727:189;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1942:626:5;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3974:149:1;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2154:98;2208:13;2240:5;2233:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98;:::o;4431:197::-;4514:4;4530:13;4546:12;:10;:12::i;:::-;4530:28;;4568:32;4577:5;4584:7;4593:6;4568:8;:32::i;:::-;4617:4;4610:11;;;4431:197;;;;:::o;3242:106::-;3303:7;3329:12;;3322:19;;3242:106;:::o;5190:286::-;5317:4;5333:15;5351:12;:10;:12::i;:::-;5333:30;;5373:38;5389:4;5395:7;5404:6;5373:15;:38::i;:::-;5421:27;5431:4;5437:2;5441:6;5421:9;:27::i;:::-;5465:4;5458:11;;;5190:286;;;;;:::o;3091:91::-;3149:5;3173:2;3166:9;;3091:91;:::o;2879:113:5:-;2939:7;2965:20;:18;:20::i;:::-;2958:27;;2879:113;:::o;5871:234:1:-;5959:4;5975:13;5991:12;:10;:12::i;:::-;5975:28;;6013:64;6022:5;6029:7;6066:10;6038:25;6048:5;6055:7;6038:9;:25::i;:::-;:38;;;;:::i;:::-;6013:8;:64::i;:::-;6094:4;6087:11;;;5871:234;;;;:::o;578:89:3:-;633:27;639:12;:10;:12::i;:::-;653:6;633:5;:27::i;:::-;578:89;:::o;3406:125:1:-;3480:7;3506:9;:18;3516:7;3506:18;;;;;;;;;;;;;;;;3499:25;;3406:125;;;:::o;973:161:3:-;1049:46;1065:7;1074:12;:10;:12::i;:::-;1088:6;1049:15;:46::i;:::-;1105:22;1111:7;1120:6;1105:5;:22::i;:::-;973:161;;:::o;2629:126:5:-;2698:7;2724:24;:7;:14;2732:5;2724:14;;;;;;;;;;;;;;;:22;:24::i;:::-;2717:31;;2629:126;;;:::o;2365:102:1:-;2421:13;2453:7;2446:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2365:102;:::o;6592:427::-;6685:4;6701:13;6717:12;:10;:12::i;:::-;6701:28;;6739:24;6766:25;6776:5;6783:7;6766:9;:25::i;:::-;6739:52;;6829:15;6809:16;:35;;6801:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;6920:60;6929:5;6936:7;6964:15;6945:16;:34;6920:8;:60::i;:::-;7008:4;7001:11;;;;6592:427;;;;:::o;3727:189::-;3806:4;3822:13;3838:12;:10;:12::i;:::-;3822:28;;3860;3870:5;3877:2;3881:6;3860:9;:28::i;:::-;3905:4;3898:11;;;3727:189;;;;:::o;1942:626:5:-;2177:8;2158:15;:27;;2150:69;;;;;;;;;;;;:::i;:::-;;;;;;;;;2230:18;1137:95;2290:5;2297:7;2306:5;2313:16;2323:5;2313:9;:16::i;:::-;2331:8;2261:79;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2251:90;;;;;;2230:111;;2352:12;2367:28;2384:10;2367:16;:28::i;:::-;2352:43;;2406:14;2423:28;2437:4;2443:1;2446;2449;2423:13;:28::i;:::-;2406:45;;2479:5;2469:15;;:6;:15;;;2461:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;2530:31;2539:5;2546:7;2555:5;2530:8;:31::i;:::-;2140:428;;;1942:626;;;;;;;:::o;3974:149:1:-;4063:7;4089:11;:18;4101:5;4089:18;;;;;;;;;;;;;;;:27;4108:7;4089:27;;;;;;;;;;;;;;;;4082:34;;3974:149;;;;:::o;640:96:15:-;693:7;719:10;712:17;;640:96;:::o;10504:370:1:-;10652:1;10635:19;;:5;:19;;;;10627:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;10732:1;10713:21;;:7;:21;;;;10705:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;10814:6;10784:11;:18;10796:5;10784:18;;;;;;;;;;;;;;;:27;10803:7;10784:27;;;;;;;;;;;;;;;:36;;;;10851:7;10835:32;;10844:5;10835:32;;;10860:6;10835:32;;;;;;:::i;:::-;;;;;;;;10504:370;;;:::o;11155:441::-;11285:24;11312:25;11322:5;11329:7;11312:9;:25::i;:::-;11285:52;;11371:17;11351:16;:37;11347:243;;11432:6;11412:16;:26;;11404:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;11514:51;11523:5;11530:7;11558:6;11539:16;:25;11514:8;:51::i;:::-;11347:243;11275:321;11155:441;;;:::o;7473:818::-;7615:1;7599:18;;:4;:18;;;;7591:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;7691:1;7677:16;;:2;:16;;;;7669:64;;;;;;;;;;;;:::i;:::-;;;;;;;;;7744:38;7765:4;7771:2;7775:6;7744:20;:38::i;:::-;7793:19;7815:9;:15;7825:4;7815:15;;;;;;;;;;;;;;;;7793:37;;7863:6;7848:11;:21;;7840:72;;;;;;;;;;;;:::i;:::-;;;;;;;;;7978:6;7964:11;:20;7946:9;:15;7956:4;7946:15;;;;;;;;;;;;;;;:38;;;;8178:6;8161:9;:13;8171:2;8161:13;;;;;;;;;;;;;;;;:23;;;;;;;;;;;8225:2;8210:26;;8219:4;8210:26;;;8229:6;8210:26;;;;;;:::i;:::-;;;;;;;;8247:37;8267:4;8273:2;8277:6;8247:19;:37::i;:::-;7581:710;7473:818;;;:::o;3152:308:19:-;3205:7;3245:12;3228:29;;3236:4;3228:29;;;:66;;;;;3278:16;3261:13;:33;3228:66;3224:230;;;3317:24;3310:31;;;;3224:230;3379:64;3401:10;3413:12;3427:15;3379:21;:64::i;:::-;3372:71;;3152:308;;:::o;9422:659:1:-;9524:1;9505:21;;:7;:21;;;;9497:67;;;;;;;;;;;;:::i;:::-;;;;;;;;;9575:49;9596:7;9613:1;9617:6;9575:20;:49::i;:::-;9635:22;9660:9;:18;9670:7;9660:18;;;;;;;;;;;;;;;;9635:43;;9714:6;9696:14;:24;;9688:71;;;;;;;;;;;;:::i;:::-;;;;;;;;;9831:6;9814:14;:23;9793:9;:18;9803:7;9793:18;;;;;;;;;;;;;;;:44;;;;9946:6;9930:12;;:22;;;;;;;;;;;10004:1;9978:37;;9987:7;9978:37;;;10008:6;9978:37;;;;;;:::i;:::-;;;;;;;;10026:48;10046:7;10063:1;10067:6;10026:19;:48::i;:::-;9487:594;9422:659;;:::o;827:112:16:-;892:7;918;:14;;;911:21;;827:112;;;:::o;3123:203:5:-;3183:15;3210:30;3243:7;:14;3251:5;3243:14;;;;;;;;;;;;;;;3210:47;;3277:15;:5;:13;:15::i;:::-;3267:25;;3302:17;:5;:15;:17::i;:::-;3200:126;3123:203;;;:::o;4348:165:19:-;4425:7;4451:55;4473:20;:18;:20::i;:::-;4495:10;4451:21;:55::i;:::-;4444:62;;4348:165;;;:::o;6696:270:18:-;6819:7;6839:17;6858:18;6880:25;6891:4;6897:1;6900;6903;6880:10;:25::i;:::-;6838:67;;;;6915:18;6927:5;6915:11;:18::i;:::-;6950:9;6943:16;;;;6696:270;;;;;;:::o;12180:121:1:-;;;;:::o;12889:120::-;;;;:::o;3466:257:19:-;3606:7;3653:8;3663;3673:11;3686:13;3709:4;3642:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3632:84;;;;;;3625:91;;3466:257;;;;;:::o;945:123:16:-;1050:1;1032:7;:14;;;:19;;;;;;;;;;;945:123;:::o;8341:194:18:-;8434:7;8499:15;8516:10;8470:57;;;;;;;;;:::i;:::-;;;;;;;;;;;;;8460:68;;;;;;8453:75;;8341:194;;;;:::o;5069:1494::-;5195:7;5204:12;6119:66;6114:1;6106:10;;:79;6102:161;;;6217:1;6221:30;6201:51;;;;;;6102:161;6357:14;6374:24;6384:4;6390:1;6393;6396;6374:24;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6357:41;;6430:1;6412:20;;:6;:20;;;6408:101;;;6464:1;6468:29;6448:50;;;;;;;6408:101;6527:6;6535:20;6519:37;;;;;5069:1494;;;;;;;;:::o;570:511::-;647:20;638:29;;;;;;;;:::i;:::-;;:5;:29;;;;;;;;:::i;:::-;;;634:441;;;683:7;;634:441;743:29;734:38;;;;;;;;:::i;:::-;;:5;:38;;;;;;;;:::i;:::-;;;730:345;;;788:34;;;;;;;;;;:::i;:::-;;;;;;;;730:345;852:35;843:44;;;;;;;;:::i;:::-;;:5;:44;;;;;;;;:::i;:::-;;;839:236;;;903:41;;;;;;;;;;:::i;:::-;;;;;;;;839:236;974:30;965:39;;;;;;;;:::i;:::-;;:5;:39;;;;;;;;:::i;:::-;;;961:114;;;1020:44;;;;;;;;;;:::i;:::-;;;;;;;;961:114;570:511;;:::o;7:99:26:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:169::-;196:11;230:6;225:3;218:19;270:4;265:3;261:14;246:29;;112:169;;;;:::o;287:307::-;355:1;365:113;379:6;376:1;373:13;365:113;;;464:1;459:3;455:11;449:18;445:1;440:3;436:11;429:39;401:2;398:1;394:10;389:15;;365:113;;;496:6;493:1;490:13;487:101;;;576:1;567:6;562:3;558:16;551:27;487:101;336:258;287:307;;;:::o;600:102::-;641:6;692:2;688:7;683:2;676:5;672:14;668:28;658:38;;600:102;;;:::o;708:364::-;796:3;824:39;857:5;824:39;:::i;:::-;879:71;943:6;938:3;879:71;:::i;:::-;872:78;;959:52;1004:6;999:3;992:4;985:5;981:16;959:52;:::i;:::-;1036:29;1058:6;1036:29;:::i;:::-;1031:3;1027:39;1020:46;;800:272;708:364;;;;:::o;1078:313::-;1191:4;1229:2;1218:9;1214:18;1206:26;;1278:9;1272:4;1268:20;1264:1;1253:9;1249:17;1242:47;1306:78;1379:4;1370:6;1306:78;:::i;:::-;1298:86;;1078:313;;;;:::o;1478:117::-;1587:1;1584;1577:12;1724:126;1761:7;1801:42;1794:5;1790:54;1779:65;;1724:126;;;:::o;1856:96::-;1893:7;1922:24;1940:5;1922:24;:::i;:::-;1911:35;;1856:96;;;:::o;1958:122::-;2031:24;2049:5;2031:24;:::i;:::-;2024:5;2021:35;2011:63;;2070:1;2067;2060:12;2011:63;1958:122;:::o;2086:139::-;2132:5;2170:6;2157:20;2148:29;;2186:33;2213:5;2186:33;:::i;:::-;2086:139;;;;:::o;2231:77::-;2268:7;2297:5;2286:16;;2231:77;;;:::o;2314:122::-;2387:24;2405:5;2387:24;:::i;:::-;2380:5;2377:35;2367:63;;2426:1;2423;2416:12;2367:63;2314:122;:::o;2442:139::-;2488:5;2526:6;2513:20;2504:29;;2542:33;2569:5;2542:33;:::i;:::-;2442:139;;;;:::o;2587:474::-;2655:6;2663;2712:2;2700:9;2691:7;2687:23;2683:32;2680:119;;;2718:79;;:::i;:::-;2680:119;2838:1;2863:53;2908:7;2899:6;2888:9;2884:22;2863:53;:::i;:::-;2853:63;;2809:117;2965:2;2991:53;3036:7;3027:6;3016:9;3012:22;2991:53;:::i;:::-;2981:63;;2936:118;2587:474;;;;;:::o;3067:90::-;3101:7;3144:5;3137:13;3130:21;3119:32;;3067:90;;;:::o;3163:109::-;3244:21;3259:5;3244:21;:::i;:::-;3239:3;3232:34;3163:109;;:::o;3278:210::-;3365:4;3403:2;3392:9;3388:18;3380:26;;3416:65;3478:1;3467:9;3463:17;3454:6;3416:65;:::i;:::-;3278:210;;;;:::o;3494:118::-;3581:24;3599:5;3581:24;:::i;:::-;3576:3;3569:37;3494:118;;:::o;3618:222::-;3711:4;3749:2;3738:9;3734:18;3726:26;;3762:71;3830:1;3819:9;3815:17;3806:6;3762:71;:::i;:::-;3618:222;;;;:::o;3846:619::-;3923:6;3931;3939;3988:2;3976:9;3967:7;3963:23;3959:32;3956:119;;;3994:79;;:::i;:::-;3956:119;4114:1;4139:53;4184:7;4175:6;4164:9;4160:22;4139:53;:::i;:::-;4129:63;;4085:117;4241:2;4267:53;4312:7;4303:6;4292:9;4288:22;4267:53;:::i;:::-;4257:63;;4212:118;4369:2;4395:53;4440:7;4431:6;4420:9;4416:22;4395:53;:::i;:::-;4385:63;;4340:118;3846:619;;;;;:::o;4471:86::-;4506:7;4546:4;4539:5;4535:16;4524:27;;4471:86;;;:::o;4563:112::-;4646:22;4662:5;4646:22;:::i;:::-;4641:3;4634:35;4563:112;;:::o;4681:214::-;4770:4;4808:2;4797:9;4793:18;4785:26;;4821:67;4885:1;4874:9;4870:17;4861:6;4821:67;:::i;:::-;4681:214;;;;:::o;4901:77::-;4938:7;4967:5;4956:16;;4901:77;;;:::o;4984:118::-;5071:24;5089:5;5071:24;:::i;:::-;5066:3;5059:37;4984:118;;:::o;5108:222::-;5201:4;5239:2;5228:9;5224:18;5216:26;;5252:71;5320:1;5309:9;5305:17;5296:6;5252:71;:::i;:::-;5108:222;;;;:::o;5336:329::-;5395:6;5444:2;5432:9;5423:7;5419:23;5415:32;5412:119;;;5450:79;;:::i;:::-;5412:119;5570:1;5595:53;5640:7;5631:6;5620:9;5616:22;5595:53;:::i;:::-;5585:63;;5541:117;5336:329;;;;:::o;5671:::-;5730:6;5779:2;5767:9;5758:7;5754:23;5750:32;5747:119;;;5785:79;;:::i;:::-;5747:119;5905:1;5930:53;5975:7;5966:6;5955:9;5951:22;5930:53;:::i;:::-;5920:63;;5876:117;5671:329;;;;:::o;6006:118::-;6077:22;6093:5;6077:22;:::i;:::-;6070:5;6067:33;6057:61;;6114:1;6111;6104:12;6057:61;6006:118;:::o;6130:135::-;6174:5;6212:6;6199:20;6190:29;;6228:31;6253:5;6228:31;:::i;:::-;6130:135;;;;:::o;6271:122::-;6344:24;6362:5;6344:24;:::i;:::-;6337:5;6334:35;6324:63;;6383:1;6380;6373:12;6324:63;6271:122;:::o;6399:139::-;6445:5;6483:6;6470:20;6461:29;;6499:33;6526:5;6499:33;:::i;:::-;6399:139;;;;:::o;6544:1199::-;6655:6;6663;6671;6679;6687;6695;6703;6752:3;6740:9;6731:7;6727:23;6723:33;6720:120;;;6759:79;;:::i;:::-;6720:120;6879:1;6904:53;6949:7;6940:6;6929:9;6925:22;6904:53;:::i;:::-;6894:63;;6850:117;7006:2;7032:53;7077:7;7068:6;7057:9;7053:22;7032:53;:::i;:::-;7022:63;;6977:118;7134:2;7160:53;7205:7;7196:6;7185:9;7181:22;7160:53;:::i;:::-;7150:63;;7105:118;7262:2;7288:53;7333:7;7324:6;7313:9;7309:22;7288:53;:::i;:::-;7278:63;;7233:118;7390:3;7417:51;7460:7;7451:6;7440:9;7436:22;7417:51;:::i;:::-;7407:61;;7361:117;7517:3;7544:53;7589:7;7580:6;7569:9;7565:22;7544:53;:::i;:::-;7534:63;;7488:119;7646:3;7673:53;7718:7;7709:6;7698:9;7694:22;7673:53;:::i;:::-;7663:63;;7617:119;6544:1199;;;;;;;;;;:::o;7749:474::-;7817:6;7825;7874:2;7862:9;7853:7;7849:23;7845:32;7842:119;;;7880:79;;:::i;:::-;7842:119;8000:1;8025:53;8070:7;8061:6;8050:9;8046:22;8025:53;:::i;:::-;8015:63;;7971:117;8127:2;8153:53;8198:7;8189:6;8178:9;8174:22;8153:53;:::i;:::-;8143:63;;8098:118;7749:474;;;;;:::o;8229:180::-;8277:77;8274:1;8267:88;8374:4;8371:1;8364:15;8398:4;8395:1;8388:15;8415:320;8459:6;8496:1;8490:4;8486:12;8476:22;;8543:1;8537:4;8533:12;8564:18;8554:81;;8620:4;8612:6;8608:17;8598:27;;8554:81;8682:2;8674:6;8671:14;8651:18;8648:38;8645:84;;;8701:18;;:::i;:::-;8645:84;8466:269;8415:320;;;:::o;8741:180::-;8789:77;8786:1;8779:88;8886:4;8883:1;8876:15;8910:4;8907:1;8900:15;8927:305;8967:3;8986:20;9004:1;8986:20;:::i;:::-;8981:25;;9020:20;9038:1;9020:20;:::i;:::-;9015:25;;9174:1;9106:66;9102:74;9099:1;9096:81;9093:107;;;9180:18;;:::i;:::-;9093:107;9224:1;9221;9217:9;9210:16;;8927:305;;;;:::o;9238:224::-;9378:34;9374:1;9366:6;9362:14;9355:58;9447:7;9442:2;9434:6;9430:15;9423:32;9238:224;:::o;9468:366::-;9610:3;9631:67;9695:2;9690:3;9631:67;:::i;:::-;9624:74;;9707:93;9796:3;9707:93;:::i;:::-;9825:2;9820:3;9816:12;9809:19;;9468:366;;;:::o;9840:419::-;10006:4;10044:2;10033:9;10029:18;10021:26;;10093:9;10087:4;10083:20;10079:1;10068:9;10064:17;10057:47;10121:131;10247:4;10121:131;:::i;:::-;10113:139;;9840:419;;;:::o;10265:179::-;10405:31;10401:1;10393:6;10389:14;10382:55;10265:179;:::o;10450:366::-;10592:3;10613:67;10677:2;10672:3;10613:67;:::i;:::-;10606:74;;10689:93;10778:3;10689:93;:::i;:::-;10807:2;10802:3;10798:12;10791:19;;10450:366;;;:::o;10822:419::-;10988:4;11026:2;11015:9;11011:18;11003:26;;11075:9;11069:4;11065:20;11061:1;11050:9;11046:17;11039:47;11103:131;11229:4;11103:131;:::i;:::-;11095:139;;10822:419;;;:::o;11247:118::-;11334:24;11352:5;11334:24;:::i;:::-;11329:3;11322:37;11247:118;;:::o;11371:775::-;11604:4;11642:3;11631:9;11627:19;11619:27;;11656:71;11724:1;11713:9;11709:17;11700:6;11656:71;:::i;:::-;11737:72;11805:2;11794:9;11790:18;11781:6;11737:72;:::i;:::-;11819;11887:2;11876:9;11872:18;11863:6;11819:72;:::i;:::-;11901;11969:2;11958:9;11954:18;11945:6;11901:72;:::i;:::-;11983:73;12051:3;12040:9;12036:19;12027:6;11983:73;:::i;:::-;12066;12134:3;12123:9;12119:19;12110:6;12066:73;:::i;:::-;11371:775;;;;;;;;;:::o;12152:180::-;12292:32;12288:1;12280:6;12276:14;12269:56;12152:180;:::o;12338:366::-;12480:3;12501:67;12565:2;12560:3;12501:67;:::i;:::-;12494:74;;12577:93;12666:3;12577:93;:::i;:::-;12695:2;12690:3;12686:12;12679:19;;12338:366;;;:::o;12710:419::-;12876:4;12914:2;12903:9;12899:18;12891:26;;12963:9;12957:4;12953:20;12949:1;12938:9;12934:17;12927:47;12991:131;13117:4;12991:131;:::i;:::-;12983:139;;12710:419;;;:::o;13135:223::-;13275:34;13271:1;13263:6;13259:14;13252:58;13344:6;13339:2;13331:6;13327:15;13320:31;13135:223;:::o;13364:366::-;13506:3;13527:67;13591:2;13586:3;13527:67;:::i;:::-;13520:74;;13603:93;13692:3;13603:93;:::i;:::-;13721:2;13716:3;13712:12;13705:19;;13364:366;;;:::o;13736:419::-;13902:4;13940:2;13929:9;13925:18;13917:26;;13989:9;13983:4;13979:20;13975:1;13964:9;13960:17;13953:47;14017:131;14143:4;14017:131;:::i;:::-;14009:139;;13736:419;;;:::o;14161:221::-;14301:34;14297:1;14289:6;14285:14;14278:58;14370:4;14365:2;14357:6;14353:15;14346:29;14161:221;:::o;14388:366::-;14530:3;14551:67;14615:2;14610:3;14551:67;:::i;:::-;14544:74;;14627:93;14716:3;14627:93;:::i;:::-;14745:2;14740:3;14736:12;14729:19;;14388:366;;;:::o;14760:419::-;14926:4;14964:2;14953:9;14949:18;14941:26;;15013:9;15007:4;15003:20;14999:1;14988:9;14984:17;14977:47;15041:131;15167:4;15041:131;:::i;:::-;15033:139;;14760:419;;;:::o;15185:179::-;15325:31;15321:1;15313:6;15309:14;15302:55;15185:179;:::o;15370:366::-;15512:3;15533:67;15597:2;15592:3;15533:67;:::i;:::-;15526:74;;15609:93;15698:3;15609:93;:::i;:::-;15727:2;15722:3;15718:12;15711:19;;15370:366;;;:::o;15742:419::-;15908:4;15946:2;15935:9;15931:18;15923:26;;15995:9;15989:4;15985:20;15981:1;15970:9;15966:17;15959:47;16023:131;16149:4;16023:131;:::i;:::-;16015:139;;15742:419;;;:::o;16167:224::-;16307:34;16303:1;16295:6;16291:14;16284:58;16376:7;16371:2;16363:6;16359:15;16352:32;16167:224;:::o;16397:366::-;16539:3;16560:67;16624:2;16619:3;16560:67;:::i;:::-;16553:74;;16636:93;16725:3;16636:93;:::i;:::-;16754:2;16749:3;16745:12;16738:19;;16397:366;;;:::o;16769:419::-;16935:4;16973:2;16962:9;16958:18;16950:26;;17022:9;17016:4;17012:20;17008:1;16997:9;16993:17;16986:47;17050:131;17176:4;17050:131;:::i;:::-;17042:139;;16769:419;;;:::o;17194:222::-;17334:34;17330:1;17322:6;17318:14;17311:58;17403:5;17398:2;17390:6;17386:15;17379:30;17194:222;:::o;17422:366::-;17564:3;17585:67;17649:2;17644:3;17585:67;:::i;:::-;17578:74;;17661:93;17750:3;17661:93;:::i;:::-;17779:2;17774:3;17770:12;17763:19;;17422:366;;;:::o;17794:419::-;17960:4;17998:2;17987:9;17983:18;17975:26;;18047:9;18041:4;18037:20;18033:1;18022:9;18018:17;18011:47;18075:131;18201:4;18075:131;:::i;:::-;18067:139;;17794:419;;;:::o;18219:225::-;18359:34;18355:1;18347:6;18343:14;18336:58;18428:8;18423:2;18415:6;18411:15;18404:33;18219:225;:::o;18450:366::-;18592:3;18613:67;18677:2;18672:3;18613:67;:::i;:::-;18606:74;;18689:93;18778:3;18689:93;:::i;:::-;18807:2;18802:3;18798:12;18791:19;;18450:366;;;:::o;18822:419::-;18988:4;19026:2;19015:9;19011:18;19003:26;;19075:9;19069:4;19065:20;19061:1;19050:9;19046:17;19039:47;19103:131;19229:4;19103:131;:::i;:::-;19095:139;;18822:419;;;:::o;19247:220::-;19387:34;19383:1;19375:6;19371:14;19364:58;19456:3;19451:2;19443:6;19439:15;19432:28;19247:220;:::o;19473:366::-;19615:3;19636:67;19700:2;19695:3;19636:67;:::i;:::-;19629:74;;19712:93;19801:3;19712:93;:::i;:::-;19830:2;19825:3;19821:12;19814:19;;19473:366;;;:::o;19845:419::-;20011:4;20049:2;20038:9;20034:18;20026:26;;20098:9;20092:4;20088:20;20084:1;20073:9;20069:17;20062:47;20126:131;20252:4;20126:131;:::i;:::-;20118:139;;19845:419;;;:::o;20270:221::-;20410:34;20406:1;20398:6;20394:14;20387:58;20479:4;20474:2;20466:6;20462:15;20455:29;20270:221;:::o;20497:366::-;20639:3;20660:67;20724:2;20719:3;20660:67;:::i;:::-;20653:74;;20736:93;20825:3;20736:93;:::i;:::-;20854:2;20849:3;20845:12;20838:19;;20497:366;;;:::o;20869:419::-;21035:4;21073:2;21062:9;21058:18;21050:26;;21122:9;21116:4;21112:20;21108:1;21097:9;21093:17;21086:47;21150:131;21276:4;21150:131;:::i;:::-;21142:139;;20869:419;;;:::o;21294:664::-;21499:4;21537:3;21526:9;21522:19;21514:27;;21551:71;21619:1;21608:9;21604:17;21595:6;21551:71;:::i;:::-;21632:72;21700:2;21689:9;21685:18;21676:6;21632:72;:::i;:::-;21714;21782:2;21771:9;21767:18;21758:6;21714:72;:::i;:::-;21796;21864:2;21853:9;21849:18;21840:6;21796:72;:::i;:::-;21878:73;21946:3;21935:9;21931:19;21922:6;21878:73;:::i;:::-;21294:664;;;;;;;;:::o;21964:148::-;22066:11;22103:3;22088:18;;21964:148;;;;:::o;22118:214::-;22258:66;22254:1;22246:6;22242:14;22235:90;22118:214;:::o;22338:400::-;22498:3;22519:84;22601:1;22596:3;22519:84;:::i;:::-;22512:91;;22612:93;22701:3;22612:93;:::i;:::-;22730:1;22725:3;22721:11;22714:18;;22338:400;;;:::o;22744:79::-;22783:7;22812:5;22801:16;;22744:79;;;:::o;22829:157::-;22934:45;22954:24;22972:5;22954:24;:::i;:::-;22934:45;:::i;:::-;22929:3;22922:58;22829:157;;:::o;22992:663::-;23233:3;23255:148;23399:3;23255:148;:::i;:::-;23248:155;;23413:75;23484:3;23475:6;23413:75;:::i;:::-;23513:2;23508:3;23504:12;23497:19;;23526:75;23597:3;23588:6;23526:75;:::i;:::-;23626:2;23621:3;23617:12;23610:19;;23646:3;23639:10;;22992:663;;;;;:::o;23661:545::-;23834:4;23872:3;23861:9;23857:19;23849:27;;23886:71;23954:1;23943:9;23939:17;23930:6;23886:71;:::i;:::-;23967:68;24031:2;24020:9;24016:18;24007:6;23967:68;:::i;:::-;24045:72;24113:2;24102:9;24098:18;24089:6;24045:72;:::i;:::-;24127;24195:2;24184:9;24180:18;24171:6;24127:72;:::i;:::-;23661:545;;;;;;;:::o;24212:180::-;24260:77;24257:1;24250:88;24357:4;24354:1;24347:15;24381:4;24378:1;24371:15;24398:174;24538:26;24534:1;24526:6;24522:14;24515:50;24398:174;:::o;24578:366::-;24720:3;24741:67;24805:2;24800:3;24741:67;:::i;:::-;24734:74;;24817:93;24906:3;24817:93;:::i;:::-;24935:2;24930:3;24926:12;24919:19;;24578:366;;;:::o;24950:419::-;25116:4;25154:2;25143:9;25139:18;25131:26;;25203:9;25197:4;25193:20;25189:1;25178:9;25174:17;25167:47;25231:131;25357:4;25231:131;:::i;:::-;25223:139;;24950:419;;;:::o;25375:181::-;25515:33;25511:1;25503:6;25499:14;25492:57;25375:181;:::o;25562:366::-;25704:3;25725:67;25789:2;25784:3;25725:67;:::i;:::-;25718:74;;25801:93;25890:3;25801:93;:::i;:::-;25919:2;25914:3;25910:12;25903:19;;25562:366;;;:::o;25934:419::-;26100:4;26138:2;26127:9;26123:18;26115:26;;26187:9;26181:4;26177:20;26173:1;26162:9;26158:17;26151:47;26215:131;26341:4;26215:131;:::i;:::-;26207:139;;25934:419;;;:::o;26359:221::-;26499:34;26495:1;26487:6;26483:14;26476:58;26568:4;26563:2;26555:6;26551:15;26544:29;26359:221;:::o;26586:366::-;26728:3;26749:67;26813:2;26808:3;26749:67;:::i;:::-;26742:74;;26825:93;26914:3;26825:93;:::i;:::-;26943:2;26938:3;26934:12;26927:19;;26586:366;;;:::o;26958:419::-;27124:4;27162:2;27151:9;27147:18;27139:26;;27211:9;27205:4;27201:20;27197:1;27186:9;27182:17;27175:47;27239:131;27365:4;27239:131;:::i;:::-;27231:139;;26958:419;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1753800","executionCost":"infinite","totalCost":"infinite"},"external":{"DOMAIN_SEPARATOR()":"infinite","allowance(address,address)":"infinite","approve(address,uint256)":"infinite","balanceOf(address)":"2864","burn(uint256)":"infinite","burnFrom(address,uint256)":"infinite","decimals()":"366","decreaseAllowance(address,uint256)":"infinite","increaseAllowance(address,uint256)":"infinite","name()":"infinite","nonces(address)":"2957","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","symbol()":"infinite","totalSupply()":"2505","transfer(address,uint256)":"infinite","transferFrom(address,address,uint256)":"infinite"}},"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(uint256)":"42966c68","burnFrom(address,uint256)":"79cc6790","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"max_supply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20_BASE_PERMIT.sol\":\"Token\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0xd2dd6003a2dc02ab905fd405938322e510429d19ae6c07c2c683d70f13ab2f36\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x948d8b2d18f38141ec78c5229d770d950ebc781ed3f44cc9e3ccbb9fded5846a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/ERC20_BASE_PERMIT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\n\\ncontract Token is ERC20, ERC20Burnable, ERC20Permit {\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint256 max_supply\\n    ) ERC20(name, symbol) ERC20Permit(name) {\\n        _mint(msg.sender, max_supply * 10**decimals());\\n    }\\n}\\n\",\"keccak256\":\"0x5f3453156e7dd283d8463a85bc5594c3c369d4127e8aaf2d729546c625774009\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":128,"contract":"contracts/ERC20_BASE_PERMIT.sol:Token","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":134,"contract":"contracts/ERC20_BASE_PERMIT.sol:Token","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":136,"contract":"contracts/ERC20_BASE_PERMIT.sol:Token","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":138,"contract":"contracts/ERC20_BASE_PERMIT.sol:Token","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":140,"contract":"contracts/ERC20_BASE_PERMIT.sol:Token","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"},{"astId":869,"contract":"contracts/ERC20_BASE_PERMIT.sol:Token","label":"_nonces","offset":0,"slot":"5","type":"t_mapping(t_address,t_struct(Counter)3028_storage)"},{"astId":877,"contract":"contracts/ERC20_BASE_PERMIT.sol:Token","label":"_PERMIT_TYPEHASH_DEPRECATED_SLOT","offset":0,"slot":"6","type":"t_bytes32"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_struct(Counter)3028_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct Counters.Counter)","numberOfBytes":"32","value":"t_struct(Counter)3028_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Counter)3028_storage":{"encoding":"inplace","label":"struct Counters.Counter","members":[{"astId":3027,"contract":"contracts/ERC20_BASE_PERMIT.sol:Token","label":"_value","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ERC721_BASE.sol":{"MyToken":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"},{"internalType":"string","name":"contractURI_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"contractURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"to","type":"address"},{"internalType":"string","name":"tokenURI","type":"string"}],"internalType":"struct MyToken.ItemParam[]","name":"items","type":"tuple[]"}],"name":"multiSafeMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"string","name":"uri","type":"string"}],"name":"safeMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"owner()":{"details":"Returns the address of the current owner."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenByIndex(uint256)":{"details":"See {IERC721Enumerable-tokenByIndex}."},"tokenOfOwnerByIndex(address,uint256)":{"details":"See {IERC721Enumerable-tokenOfOwnerByIndex}."},"totalSupply()":{"details":"See {IERC721Enumerable-totalSupply}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1117":{"entryPoint":null,"id":1117,"parameterSlots":2,"returnSlots":0},"@_23":{"entryPoint":null,"id":23,"parameterSlots":0,"returnSlots":0},"@_4808":{"entryPoint":null,"id":4808,"parameterSlots":3,"returnSlots":0},"@_msgSender_3012":{"entryPoint":175,"id":3012,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_111":{"entryPoint":183,"id":111,"parameterSlots":1,"returnSlots":0},"abi_decode_available_length_t_string_memory_ptr_fromMemory":{"entryPoint":844,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_string_memory_ptr_fromMemory":{"entryPoint":919,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":970,"id":null,"parameterSlots":2,"returnSlots":3},"allocate_memory":{"entryPoint":705,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":557,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":736,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":790,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":1202,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":651,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x22":{"entryPoint":1155,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":604,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":577,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":582,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":572,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":567,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":587,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4422:26","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:26","statements":[{"nodeType":"YulAssignment","src":"57:19:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:26","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:26"},"nodeType":"YulFunctionCall","src":"67:9:26"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:26"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:26","type":""}],"src":"7:75:26"},{"body":{"nodeType":"YulBlock","src":"177:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:26"},"nodeType":"YulFunctionCall","src":"187:12:26"},"nodeType":"YulExpressionStatement","src":"187:12:26"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:26"},{"body":{"nodeType":"YulBlock","src":"300:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:26"},"nodeType":"YulFunctionCall","src":"310:12:26"},"nodeType":"YulExpressionStatement","src":"310:12:26"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:26"},{"body":{"nodeType":"YulBlock","src":"423:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"440:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"443:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"433:6:26"},"nodeType":"YulFunctionCall","src":"433:12:26"},"nodeType":"YulExpressionStatement","src":"433:12:26"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"334:117:26"},{"body":{"nodeType":"YulBlock","src":"546:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"563:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"566:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"556:6:26"},"nodeType":"YulFunctionCall","src":"556:12:26"},"nodeType":"YulExpressionStatement","src":"556:12:26"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"457:117:26"},{"body":{"nodeType":"YulBlock","src":"628:54:26","statements":[{"nodeType":"YulAssignment","src":"638:38:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"656:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"663:2:26","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"652:3:26"},"nodeType":"YulFunctionCall","src":"652:14:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"672:2:26","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"668:3:26"},"nodeType":"YulFunctionCall","src":"668:7:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"648:3:26"},"nodeType":"YulFunctionCall","src":"648:28:26"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"638:6:26"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"611:5:26","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"621:6:26","type":""}],"src":"580:102:26"},{"body":{"nodeType":"YulBlock","src":"716:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"733:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"736:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"726:6:26"},"nodeType":"YulFunctionCall","src":"726:88:26"},"nodeType":"YulExpressionStatement","src":"726:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"830:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"833:4:26","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"823:6:26"},"nodeType":"YulFunctionCall","src":"823:15:26"},"nodeType":"YulExpressionStatement","src":"823:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"854:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"857:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"847:6:26"},"nodeType":"YulFunctionCall","src":"847:15:26"},"nodeType":"YulExpressionStatement","src":"847:15:26"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"688:180:26"},{"body":{"nodeType":"YulBlock","src":"917:238:26","statements":[{"nodeType":"YulVariableDeclaration","src":"927:58:26","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"949:6:26"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"979:4:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"957:21:26"},"nodeType":"YulFunctionCall","src":"957:27:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"945:3:26"},"nodeType":"YulFunctionCall","src":"945:40:26"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"931:10:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"1096:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1098:16:26"},"nodeType":"YulFunctionCall","src":"1098:18:26"},"nodeType":"YulExpressionStatement","src":"1098:18:26"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1039:10:26"},{"kind":"number","nodeType":"YulLiteral","src":"1051:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1036:2:26"},"nodeType":"YulFunctionCall","src":"1036:34:26"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1075:10:26"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1087:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1072:2:26"},"nodeType":"YulFunctionCall","src":"1072:22:26"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1033:2:26"},"nodeType":"YulFunctionCall","src":"1033:62:26"},"nodeType":"YulIf","src":"1030:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1134:2:26","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1138:10:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1127:6:26"},"nodeType":"YulFunctionCall","src":"1127:22:26"},"nodeType":"YulExpressionStatement","src":"1127:22:26"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"903:6:26","type":""},{"name":"size","nodeType":"YulTypedName","src":"911:4:26","type":""}],"src":"874:281:26"},{"body":{"nodeType":"YulBlock","src":"1202:88:26","statements":[{"nodeType":"YulAssignment","src":"1212:30:26","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1222:18:26"},"nodeType":"YulFunctionCall","src":"1222:20:26"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1212:6:26"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1271:6:26"},{"name":"size","nodeType":"YulIdentifier","src":"1279:4:26"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1251:19:26"},"nodeType":"YulFunctionCall","src":"1251:33:26"},"nodeType":"YulExpressionStatement","src":"1251:33:26"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1186:4:26","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1195:6:26","type":""}],"src":"1161:129:26"},{"body":{"nodeType":"YulBlock","src":"1363:241:26","statements":[{"body":{"nodeType":"YulBlock","src":"1468:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1470:16:26"},"nodeType":"YulFunctionCall","src":"1470:18:26"},"nodeType":"YulExpressionStatement","src":"1470:18:26"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1440:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"1448:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1437:2:26"},"nodeType":"YulFunctionCall","src":"1437:30:26"},"nodeType":"YulIf","src":"1434:56:26"},{"nodeType":"YulAssignment","src":"1500:37:26","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1530:6:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1508:21:26"},"nodeType":"YulFunctionCall","src":"1508:29:26"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1500:4:26"}]},{"nodeType":"YulAssignment","src":"1574:23:26","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1586:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"1592:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1582:3:26"},"nodeType":"YulFunctionCall","src":"1582:15:26"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1574:4:26"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1347:6:26","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1358:4:26","type":""}],"src":"1296:308:26"},{"body":{"nodeType":"YulBlock","src":"1659:258:26","statements":[{"nodeType":"YulVariableDeclaration","src":"1669:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"1678:1:26","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1673:1:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"1738:63:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1763:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"1768:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1759:3:26"},"nodeType":"YulFunctionCall","src":"1759:11:26"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1782:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"1787:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1778:3:26"},"nodeType":"YulFunctionCall","src":"1778:11:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1772:5:26"},"nodeType":"YulFunctionCall","src":"1772:18:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1752:6:26"},"nodeType":"YulFunctionCall","src":"1752:39:26"},"nodeType":"YulExpressionStatement","src":"1752:39:26"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1699:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"1702:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1696:2:26"},"nodeType":"YulFunctionCall","src":"1696:13:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1710:19:26","statements":[{"nodeType":"YulAssignment","src":"1712:15:26","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1721:1:26"},{"kind":"number","nodeType":"YulLiteral","src":"1724:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1717:3:26"},"nodeType":"YulFunctionCall","src":"1717:10:26"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1712:1:26"}]}]},"pre":{"nodeType":"YulBlock","src":"1692:3:26","statements":[]},"src":"1688:113:26"},{"body":{"nodeType":"YulBlock","src":"1835:76:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1885:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"1890:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1881:3:26"},"nodeType":"YulFunctionCall","src":"1881:16:26"},{"kind":"number","nodeType":"YulLiteral","src":"1899:1:26","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1874:6:26"},"nodeType":"YulFunctionCall","src":"1874:27:26"},"nodeType":"YulExpressionStatement","src":"1874:27:26"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1816:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"1819:6:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1813:2:26"},"nodeType":"YulFunctionCall","src":"1813:13:26"},"nodeType":"YulIf","src":"1810:101:26"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1641:3:26","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1646:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"1651:6:26","type":""}],"src":"1610:307:26"},{"body":{"nodeType":"YulBlock","src":"2018:326:26","statements":[{"nodeType":"YulAssignment","src":"2028:75:26","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2095:6:26"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2053:41:26"},"nodeType":"YulFunctionCall","src":"2053:49:26"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2037:15:26"},"nodeType":"YulFunctionCall","src":"2037:66:26"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2028:5:26"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2119:5:26"},{"name":"length","nodeType":"YulIdentifier","src":"2126:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2112:6:26"},"nodeType":"YulFunctionCall","src":"2112:21:26"},"nodeType":"YulExpressionStatement","src":"2112:21:26"},{"nodeType":"YulVariableDeclaration","src":"2142:27:26","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2157:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"2164:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2153:3:26"},"nodeType":"YulFunctionCall","src":"2153:16:26"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2146:3:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"2207:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"2209:77:26"},"nodeType":"YulFunctionCall","src":"2209:79:26"},"nodeType":"YulExpressionStatement","src":"2209:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2188:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"2193:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2184:3:26"},"nodeType":"YulFunctionCall","src":"2184:16:26"},{"name":"end","nodeType":"YulIdentifier","src":"2202:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2181:2:26"},"nodeType":"YulFunctionCall","src":"2181:25:26"},"nodeType":"YulIf","src":"2178:112:26"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2321:3:26"},{"name":"dst","nodeType":"YulIdentifier","src":"2326:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"2331:6:26"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"2299:21:26"},"nodeType":"YulFunctionCall","src":"2299:39:26"},"nodeType":"YulExpressionStatement","src":"2299:39:26"}]},"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1991:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"1996:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"2004:3:26","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2012:5:26","type":""}],"src":"1923:421:26"},{"body":{"nodeType":"YulBlock","src":"2437:282:26","statements":[{"body":{"nodeType":"YulBlock","src":"2486:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"2488:77:26"},"nodeType":"YulFunctionCall","src":"2488:79:26"},"nodeType":"YulExpressionStatement","src":"2488:79:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2465:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"2473:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2461:3:26"},"nodeType":"YulFunctionCall","src":"2461:17:26"},{"name":"end","nodeType":"YulIdentifier","src":"2480:3:26"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2457:3:26"},"nodeType":"YulFunctionCall","src":"2457:27:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2450:6:26"},"nodeType":"YulFunctionCall","src":"2450:35:26"},"nodeType":"YulIf","src":"2447:122:26"},{"nodeType":"YulVariableDeclaration","src":"2578:27:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2598:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2592:5:26"},"nodeType":"YulFunctionCall","src":"2592:13:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2582:6:26","type":""}]},{"nodeType":"YulAssignment","src":"2614:99:26","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2686:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"2694:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2682:3:26"},"nodeType":"YulFunctionCall","src":"2682:17:26"},{"name":"length","nodeType":"YulIdentifier","src":"2701:6:26"},{"name":"end","nodeType":"YulIdentifier","src":"2709:3:26"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"2623:58:26"},"nodeType":"YulFunctionCall","src":"2623:90:26"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2614:5:26"}]}]},"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2415:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"2423:3:26","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2431:5:26","type":""}],"src":"2364:355:26"},{"body":{"nodeType":"YulBlock","src":"2866:1041:26","statements":[{"body":{"nodeType":"YulBlock","src":"2912:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2914:77:26"},"nodeType":"YulFunctionCall","src":"2914:79:26"},"nodeType":"YulExpressionStatement","src":"2914:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2887:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"2896:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2883:3:26"},"nodeType":"YulFunctionCall","src":"2883:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"2908:2:26","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2879:3:26"},"nodeType":"YulFunctionCall","src":"2879:32:26"},"nodeType":"YulIf","src":"2876:119:26"},{"nodeType":"YulBlock","src":"3005:291:26","statements":[{"nodeType":"YulVariableDeclaration","src":"3020:38:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3044:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3055:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3040:3:26"},"nodeType":"YulFunctionCall","src":"3040:17:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3034:5:26"},"nodeType":"YulFunctionCall","src":"3034:24:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3024:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"3105:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3107:77:26"},"nodeType":"YulFunctionCall","src":"3107:79:26"},"nodeType":"YulExpressionStatement","src":"3107:79:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3077:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"3085:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3074:2:26"},"nodeType":"YulFunctionCall","src":"3074:30:26"},"nodeType":"YulIf","src":"3071:117:26"},{"nodeType":"YulAssignment","src":"3202:84:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3258:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"3269:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3254:3:26"},"nodeType":"YulFunctionCall","src":"3254:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3278:7:26"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3212:41:26"},"nodeType":"YulFunctionCall","src":"3212:74:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3202:6:26"}]}]},{"nodeType":"YulBlock","src":"3306:292:26","statements":[{"nodeType":"YulVariableDeclaration","src":"3321:39:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3345:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3356:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3341:3:26"},"nodeType":"YulFunctionCall","src":"3341:18:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3335:5:26"},"nodeType":"YulFunctionCall","src":"3335:25:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3325:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"3407:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3409:77:26"},"nodeType":"YulFunctionCall","src":"3409:79:26"},"nodeType":"YulExpressionStatement","src":"3409:79:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3379:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"3387:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3376:2:26"},"nodeType":"YulFunctionCall","src":"3376:30:26"},"nodeType":"YulIf","src":"3373:117:26"},{"nodeType":"YulAssignment","src":"3504:84:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3560:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"3571:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3556:3:26"},"nodeType":"YulFunctionCall","src":"3556:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3580:7:26"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3514:41:26"},"nodeType":"YulFunctionCall","src":"3514:74:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3504:6:26"}]}]},{"nodeType":"YulBlock","src":"3608:292:26","statements":[{"nodeType":"YulVariableDeclaration","src":"3623:39:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3647:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"3658:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3643:3:26"},"nodeType":"YulFunctionCall","src":"3643:18:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3637:5:26"},"nodeType":"YulFunctionCall","src":"3637:25:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3627:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"3709:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3711:77:26"},"nodeType":"YulFunctionCall","src":"3711:79:26"},"nodeType":"YulExpressionStatement","src":"3711:79:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3681:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"3689:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3678:2:26"},"nodeType":"YulFunctionCall","src":"3678:30:26"},"nodeType":"YulIf","src":"3675:117:26"},{"nodeType":"YulAssignment","src":"3806:84:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3862:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"3873:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3858:3:26"},"nodeType":"YulFunctionCall","src":"3858:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3882:7:26"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3816:41:26"},"nodeType":"YulFunctionCall","src":"3816:74:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3806:6:26"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2820:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2831:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2843:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2851:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2859:6:26","type":""}],"src":"2725:1182:26"},{"body":{"nodeType":"YulBlock","src":"3941:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3958:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3961:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3951:6:26"},"nodeType":"YulFunctionCall","src":"3951:88:26"},"nodeType":"YulExpressionStatement","src":"3951:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4055:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4058:4:26","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4048:6:26"},"nodeType":"YulFunctionCall","src":"4048:15:26"},"nodeType":"YulExpressionStatement","src":"4048:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4079:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4082:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4072:6:26"},"nodeType":"YulFunctionCall","src":"4072:15:26"},"nodeType":"YulExpressionStatement","src":"4072:15:26"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"3913:180:26"},{"body":{"nodeType":"YulBlock","src":"4150:269:26","statements":[{"nodeType":"YulAssignment","src":"4160:22:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"4174:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"4180:1:26","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4170:3:26"},"nodeType":"YulFunctionCall","src":"4170:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4160:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"4191:38:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"4221:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"4227:1:26","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4217:3:26"},"nodeType":"YulFunctionCall","src":"4217:12:26"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"4195:18:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"4268:51:26","statements":[{"nodeType":"YulAssignment","src":"4282:27:26","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4296:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"4304:4:26","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4292:3:26"},"nodeType":"YulFunctionCall","src":"4292:17:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4282:6:26"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4248:18:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4241:6:26"},"nodeType":"YulFunctionCall","src":"4241:26:26"},"nodeType":"YulIf","src":"4238:81:26"},{"body":{"nodeType":"YulBlock","src":"4371:42:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"4385:16:26"},"nodeType":"YulFunctionCall","src":"4385:18:26"},"nodeType":"YulExpressionStatement","src":"4385:18:26"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4335:18:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4358:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"4366:2:26","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4355:2:26"},"nodeType":"YulFunctionCall","src":"4355:14:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4332:2:26"},"nodeType":"YulFunctionCall","src":"4332:38:26"},"nodeType":"YulIf","src":"4329:84:26"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"4134:4:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"4143:6:26","type":""}],"src":"4099:320:26"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n}\n","id":26,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b506040516200402a3803806200402a8339818101604052810190620000379190620003ca565b82828160009080519060200190620000519291906200017d565b5080600190805190602001906200006a9291906200017d565b5050506200008d62000081620000af60201b60201c565b620000b760201b60201c565b80600d9080519060200190620000a59291906200017d565b50505050620004e8565b600033905090565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546200018b90620004b2565b90600052602060002090601f016020900481019282620001af5760008555620001fb565b82601f10620001ca57805160ff1916838001178555620001fb565b82800160010185558215620001fb579182015b82811115620001fa578251825591602001919060010190620001dd565b5b5090506200020a91906200020e565b5090565b5b80821115620002295760008160009055506001016200020f565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000296826200024b565b810181811067ffffffffffffffff82111715620002b857620002b76200025c565b5b80604052505050565b6000620002cd6200022d565b9050620002db82826200028b565b919050565b600067ffffffffffffffff821115620002fe57620002fd6200025c565b5b62000309826200024b565b9050602081019050919050565b60005b838110156200033657808201518184015260208101905062000319565b8381111562000346576000848401525b50505050565b6000620003636200035d84620002e0565b620002c1565b90508281526020810184848401111562000382576200038162000246565b5b6200038f84828562000316565b509392505050565b600082601f830112620003af57620003ae62000241565b5b8151620003c18482602086016200034c565b91505092915050565b600080600060608486031215620003e657620003e562000237565b5b600084015167ffffffffffffffff8111156200040757620004066200023c565b5b620004158682870162000397565b935050602084015167ffffffffffffffff8111156200043957620004386200023c565b5b620004478682870162000397565b925050604084015167ffffffffffffffff8111156200046b576200046a6200023c565b5b620004798682870162000397565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620004cb57607f821691505b60208210811415620004e257620004e162000483565b5b50919050565b613b3280620004f86000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806370a08231116100b8578063b88d4fde1161007c578063b88d4fde14610375578063c87b56dd14610391578063d204c45e146103c1578063e8a3d485146103dd578063e985e9c5146103fb578063f2fde38b1461042b57610142565b806370a08231146102e3578063715018a6146103135780638da5cb5b1461031d57806395d89b411461033b578063a22cb4651461035957610142565b80631c02aeaf1161010a5780631c02aeaf146101ff57806323b872dd1461021b5780632f745c591461023757806342842e0e146102675780634f6ccce7146102835780636352211e146102b357610142565b806301ffc9a71461014757806306fdde0314610177578063081812fc14610195578063095ea7b3146101c557806318160ddd146101e1575b600080fd5b610161600480360381019061015c91906125da565b610447565b60405161016e9190612622565b60405180910390f35b61017f610459565b60405161018c91906126d6565b60405180910390f35b6101af60048036038101906101aa919061272e565b6104eb565b6040516101bc919061279c565b60405180910390f35b6101df60048036038101906101da91906127e3565b610531565b005b6101e9610649565b6040516101f69190612832565b60405180910390f35b61021960048036038101906102149190612ade565b610656565b005b61023560048036038101906102309190612b27565b6106c7565b005b610251600480360381019061024c91906127e3565b610727565b60405161025e9190612832565b60405180910390f35b610281600480360381019061027c9190612b27565b6107cc565b005b61029d6004803603810190610298919061272e565b6107ec565b6040516102aa9190612832565b60405180910390f35b6102cd60048036038101906102c8919061272e565b61085d565b6040516102da919061279c565b60405180910390f35b6102fd60048036038101906102f89190612b7a565b6108e4565b60405161030a9190612832565b60405180910390f35b61031b61099c565b005b6103256109b0565b604051610332919061279c565b60405180910390f35b6103436109da565b60405161035091906126d6565b60405180910390f35b610373600480360381019061036e9190612bd3565b610a6c565b005b61038f600480360381019061038a9190612cb4565b610a82565b005b6103ab60048036038101906103a6919061272e565b610ae4565b6040516103b891906126d6565b60405180910390f35b6103db60048036038101906103d69190612d37565b610af6565b005b6103e5610b2f565b6040516103f291906126d6565b60405180910390f35b61041560048036038101906104109190612d93565b610b57565b6040516104229190612622565b60405180910390f35b61044560048036038101906104409190612b7a565b610beb565b005b600061045282610c6f565b9050919050565b60606000805461046890612e02565b80601f016020809104026020016040519081016040528092919081815260200182805461049490612e02565b80156104e15780601f106104b6576101008083540402835291602001916104e1565b820191906000526020600020905b8154815290600101906020018083116104c457829003601f168201915b5050505050905090565b60006104f682610ce9565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061053c8261085d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a490612ea6565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105cc610d34565b73ffffffffffffffffffffffffffffffffffffffff1614806105fb57506105fa816105f5610d34565b610b57565b5b61063a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063190612f38565b60405180910390fd5b6106448383610d3c565b505050565b6000600880549050905090565b61065e610df5565b60005b81518110156106c3576106b08282815181106106805761067f612f58565b5b60200260200101516000015183838151811061069f5761069e612f58565b5b602002602001015160200151610af6565b80806106bb90612fb6565b915050610661565b5050565b6106d86106d2610d34565b82610e73565b610717576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070e90613071565b60405180910390fd5b610722838383610f08565b505050565b6000610732836108e4565b8210610773576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076a90613103565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b6107e783838360405180602001604052806000815250610a82565b505050565b60006107f6610649565b8210610837576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082e90613195565b60405180910390fd5b6008828154811061084b5761084a612f58565b5b90600052602060002001549050919050565b60008061086983611202565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156108db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d290613201565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610955576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094c90613293565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6109a4610df5565b6109ae600061123f565b565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546109e990612e02565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1590612e02565b8015610a625780601f10610a3757610100808354040283529160200191610a62565b820191906000526020600020905b815481529060010190602001808311610a4557829003601f168201915b5050505050905090565b610a7e610a77610d34565b8383611305565b5050565b610a93610a8d610d34565b83610e73565b610ad2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac990613071565b60405180910390fd5b610ade84848484611472565b50505050565b6060610aef826114ce565b9050919050565b610afe610df5565b6000610b0a600c6115e1565b9050610b16600c6115ef565b610b208382611605565b610b2a8183611623565b505050565b6060600d604051602001610b43919061339e565b604051602081830303815290604052905090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610bf3610df5565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5a90613432565b60405180910390fd5b610c6c8161123f565b50565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610ce25750610ce182611697565b5b9050919050565b610cf281611779565b610d31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2890613201565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610daf8361085d565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b610dfd610d34565b73ffffffffffffffffffffffffffffffffffffffff16610e1b6109b0565b73ffffffffffffffffffffffffffffffffffffffff1614610e71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e689061349e565b60405180910390fd5b565b600080610e7f8361085d565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610ec15750610ec08185610b57565b5b80610eff57508373ffffffffffffffffffffffffffffffffffffffff16610ee7846104eb565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610f288261085d565b73ffffffffffffffffffffffffffffffffffffffff1614610f7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7590613530565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610fee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe5906135c2565b60405180910390fd5b610ffb83838360016117ba565b8273ffffffffffffffffffffffffffffffffffffffff1661101b8261085d565b73ffffffffffffffffffffffffffffffffffffffff1614611071576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106890613530565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46111fd83838360016117cc565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136b9061362e565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516114659190612622565b60405180910390a3505050565b61147d848484610f08565b611489848484846117d2565b6114c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114bf906136c0565b60405180910390fd5b50505050565b60606114d982610ce9565b6000600a600084815260200190815260200160002080546114f990612e02565b80601f016020809104026020016040519081016040528092919081815260200182805461152590612e02565b80156115725780601f1061154757610100808354040283529160200191611572565b820191906000526020600020905b81548152906001019060200180831161155557829003601f168201915b505050505090506000611583611969565b90506000815114156115995781925050506115dc565b6000825111156115ce5780826040516020016115b6929190613711565b604051602081830303815290604052925050506115dc565b6115d7846119a6565b925050505b919050565b600081600001549050919050565b6001816000016000828254019250508190555050565b61161f828260405180602001604052806000815250611a0e565b5050565b61162c82611779565b61166b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611662906137a7565b60405180910390fd5b80600a600084815260200190815260200160002090805190602001906116929291906124cb565b505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061176257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611772575061177182611a69565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661179b83611202565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6117c684848484611ad3565b50505050565b50505050565b60006117f38473ffffffffffffffffffffffffffffffffffffffff16611c33565b1561195c578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261181c610d34565b8786866040518563ffffffff1660e01b815260040161183e949392919061381c565b602060405180830381600087803b15801561185857600080fd5b505af192505050801561188957506040513d601f19601f82011682018060405250810190611886919061387d565b60015b61190c573d80600081146118b9576040519150601f19603f3d011682016040523d82523d6000602084013e6118be565b606091505b50600081511415611904576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118fb906136c0565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611961565b600190505b949350505050565b60606040518060400160405280600781526020017f697066733a2f2f00000000000000000000000000000000000000000000000000815250905090565b60606119b182610ce9565b60006119bb611969565b905060008151116119db5760405180602001604052806000815250611a06565b806119e584611c56565b6040516020016119f6929190613711565b6040516020818303038152906040525b915050919050565b611a188383611d2e565b611a2560008484846117d2565b611a64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5b906136c0565b60405180910390fd5b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611adf84848484611f4c565b6001811115611b23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1a9061391c565b60405180910390fd5b6000829050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415611b6b57611b6681612072565b611baa565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611ba957611ba885826120bb565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611bed57611be881612228565b611c2c565b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611c2b57611c2a84826122f9565b5b5b5050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606060006001611c6584612378565b01905060008167ffffffffffffffff811115611c8457611c83612852565b5b6040519080825280601f01601f191660200182016040528015611cb65781602001600182028036833780820191505090505b509050600082602001820190505b600115611d23578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611d0d57611d0c61393c565b5b0494506000851415611d1e57611d23565b611cc4565b819350505050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611d9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d95906139b7565b60405180910390fd5b611da781611779565b15611de7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dde90613a23565b60405180910390fd5b611df56000838360016117ba565b611dfe81611779565b15611e3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3590613a23565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611f486000838360016117cc565b5050565b600181111561206c57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611fe05780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611fd89190613a43565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461206b5780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120639190613a77565b925050819055505b5b50505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b600060016120c8846108e4565b6120d29190613a43565b90506000600760008481526020019081526020016000205490508181146121b7576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b6000600160088054905061223c9190613a43565b905060006009600084815260200190815260200160002054905060006008838154811061226c5761226b612f58565b5b90600052602060002001549050806008838154811061228e5761228d612f58565b5b9060005260206000200181905550816009600083815260200190815260200160002081905550600960008581526020019081526020016000206000905560088054806122dd576122dc613acd565b5b6001900381819060005260206000200160009055905550505050565b6000612304836108e4565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106123d6577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816123cc576123cb61393c565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612413576d04ee2d6d415b85acef810000000083816124095761240861393c565b5b0492506020810190505b662386f26fc10000831061244257662386f26fc1000083816124385761243761393c565b5b0492506010810190505b6305f5e100831061246b576305f5e10083816124615761246061393c565b5b0492506008810190505b61271083106124905761271083816124865761248561393c565b5b0492506004810190505b606483106124b357606483816124a9576124a861393c565b5b0492506002810190505b600a83106124c2576001810190505b80915050919050565b8280546124d790612e02565b90600052602060002090601f0160209004810192826124f95760008555612540565b82601f1061251257805160ff1916838001178555612540565b82800160010185558215612540579182015b8281111561253f578251825591602001919060010190612524565b5b50905061254d9190612551565b5090565b5b8082111561256a576000816000905550600101612552565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6125b781612582565b81146125c257600080fd5b50565b6000813590506125d4816125ae565b92915050565b6000602082840312156125f0576125ef612578565b5b60006125fe848285016125c5565b91505092915050565b60008115159050919050565b61261c81612607565b82525050565b60006020820190506126376000830184612613565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561267757808201518184015260208101905061265c565b83811115612686576000848401525b50505050565b6000601f19601f8301169050919050565b60006126a88261263d565b6126b28185612648565b93506126c2818560208601612659565b6126cb8161268c565b840191505092915050565b600060208201905081810360008301526126f0818461269d565b905092915050565b6000819050919050565b61270b816126f8565b811461271657600080fd5b50565b60008135905061272881612702565b92915050565b60006020828403121561274457612743612578565b5b600061275284828501612719565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006127868261275b565b9050919050565b6127968161277b565b82525050565b60006020820190506127b1600083018461278d565b92915050565b6127c08161277b565b81146127cb57600080fd5b50565b6000813590506127dd816127b7565b92915050565b600080604083850312156127fa576127f9612578565b5b6000612808858286016127ce565b925050602061281985828601612719565b9150509250929050565b61282c816126f8565b82525050565b60006020820190506128476000830184612823565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61288a8261268c565b810181811067ffffffffffffffff821117156128a9576128a8612852565b5b80604052505050565b60006128bc61256e565b90506128c88282612881565b919050565b600067ffffffffffffffff8211156128e8576128e7612852565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff82111561292857612927612852565b5b6129318261268c565b9050602081019050919050565b82818337600083830152505050565b600061296061295b8461290d565b6128b2565b90508281526020810184848401111561297c5761297b612908565b5b61298784828561293e565b509392505050565b600082601f8301126129a4576129a361284d565b5b81356129b484826020860161294d565b91505092915050565b6000604082840312156129d3576129d26128fe565b5b6129dd60406128b2565b905060006129ed848285016127ce565b600083015250602082013567ffffffffffffffff811115612a1157612a10612903565b5b612a1d8482850161298f565b60208301525092915050565b6000612a3c612a37846128cd565b6128b2565b90508083825260208201905060208402830185811115612a5f57612a5e6128f9565b5b835b81811015612aa657803567ffffffffffffffff811115612a8457612a8361284d565b5b808601612a9189826129bd565b85526020850194505050602081019050612a61565b5050509392505050565b600082601f830112612ac557612ac461284d565b5b8135612ad5848260208601612a29565b91505092915050565b600060208284031215612af457612af3612578565b5b600082013567ffffffffffffffff811115612b1257612b1161257d565b5b612b1e84828501612ab0565b91505092915050565b600080600060608486031215612b4057612b3f612578565b5b6000612b4e868287016127ce565b9350506020612b5f868287016127ce565b9250506040612b7086828701612719565b9150509250925092565b600060208284031215612b9057612b8f612578565b5b6000612b9e848285016127ce565b91505092915050565b612bb081612607565b8114612bbb57600080fd5b50565b600081359050612bcd81612ba7565b92915050565b60008060408385031215612bea57612be9612578565b5b6000612bf8858286016127ce565b9250506020612c0985828601612bbe565b9150509250929050565b600067ffffffffffffffff821115612c2e57612c2d612852565b5b612c378261268c565b9050602081019050919050565b6000612c57612c5284612c13565b6128b2565b905082815260208101848484011115612c7357612c72612908565b5b612c7e84828561293e565b509392505050565b600082601f830112612c9b57612c9a61284d565b5b8135612cab848260208601612c44565b91505092915050565b60008060008060808587031215612cce57612ccd612578565b5b6000612cdc878288016127ce565b9450506020612ced878288016127ce565b9350506040612cfe87828801612719565b925050606085013567ffffffffffffffff811115612d1f57612d1e61257d565b5b612d2b87828801612c86565b91505092959194509250565b60008060408385031215612d4e57612d4d612578565b5b6000612d5c858286016127ce565b925050602083013567ffffffffffffffff811115612d7d57612d7c61257d565b5b612d898582860161298f565b9150509250929050565b60008060408385031215612daa57612da9612578565b5b6000612db8858286016127ce565b9250506020612dc9858286016127ce565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612e1a57607f821691505b60208210811415612e2e57612e2d612dd3565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612e90602183612648565b9150612e9b82612e34565b604082019050919050565b60006020820190508181036000830152612ebf81612e83565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000612f22603d83612648565b9150612f2d82612ec6565b604082019050919050565b60006020820190508181036000830152612f5181612f15565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612fc1826126f8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612ff457612ff3612f87565b5b600182019050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b600061305b602d83612648565b915061306682612fff565b604082019050919050565b6000602082019050818103600083015261308a8161304e565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b60006130ed602b83612648565b91506130f882613091565b604082019050919050565b6000602082019050818103600083015261311c816130e0565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b600061317f602c83612648565b915061318a82613123565b604082019050919050565b600060208201905081810360008301526131ae81613172565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006131eb601883612648565b91506131f6826131b5565b602082019050919050565b6000602082019050818103600083015261321a816131de565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061327d602983612648565b915061328882613221565b604082019050919050565b600060208201905081810360008301526132ac81613270565b9050919050565b600081905092915050565b7f697066733a2f2f00000000000000000000000000000000000000000000000000600082015250565b60006132f46007836132b3565b91506132ff826132be565b600782019050919050565b60008190508160005260206000209050919050565b6000815461332c81612e02565b61333681866132b3565b94506001821660008114613351576001811461336257613395565b60ff19831686528186019350613395565b61336b8561330a565b60005b8381101561338d5781548189015260018201915060208101905061336e565b838801955050505b50505092915050565b60006133a9826132e7565b91506133b5828461331f565b915081905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061341c602683612648565b9150613427826133c0565b604082019050919050565b6000602082019050818103600083015261344b8161340f565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613488602083612648565b915061349382613452565b602082019050919050565b600060208201905081810360008301526134b78161347b565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b600061351a602583612648565b9150613525826134be565b604082019050919050565b600060208201905081810360008301526135498161350d565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006135ac602483612648565b91506135b782613550565b604082019050919050565b600060208201905081810360008301526135db8161359f565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000613618601983612648565b9150613623826135e2565b602082019050919050565b600060208201905081810360008301526136478161360b565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006136aa603283612648565b91506136b58261364e565b604082019050919050565b600060208201905081810360008301526136d98161369d565b9050919050565b60006136eb8261263d565b6136f581856132b3565b9350613705818560208601612659565b80840191505092915050565b600061371d82856136e0565b915061372982846136e0565b91508190509392505050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000613791602e83612648565b915061379c82613735565b604082019050919050565b600060208201905081810360008301526137c081613784565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006137ee826137c7565b6137f881856137d2565b9350613808818560208601612659565b6138118161268c565b840191505092915050565b6000608082019050613831600083018761278d565b61383e602083018661278d565b61384b6040830185612823565b818103606083015261385d81846137e3565b905095945050505050565b600081519050613877816125ae565b92915050565b60006020828403121561389357613892612578565b5b60006138a184828501613868565b91505092915050565b7f455243373231456e756d657261626c653a20636f6e736563757469766520747260008201527f616e7366657273206e6f7420737570706f727465640000000000000000000000602082015250565b6000613906603583612648565b9150613911826138aa565b604082019050919050565b60006020820190508181036000830152613935816138f9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006139a1602083612648565b91506139ac8261396b565b602082019050919050565b600060208201905081810360008301526139d081613994565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613a0d601c83612648565b9150613a18826139d7565b602082019050919050565b60006020820190508181036000830152613a3c81613a00565b9050919050565b6000613a4e826126f8565b9150613a59836126f8565b925082821015613a6c57613a6b612f87565b5b828203905092915050565b6000613a82826126f8565b9150613a8d836126f8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613ac257613ac1612f87565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220af859ece001088f420a09a857ea50dc65b7bea89db02905e624d8854ebb9671964736f6c63430008090033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x402A CODESIZE SUB DUP1 PUSH3 0x402A DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x3CA JUMP JUMPDEST DUP3 DUP3 DUP2 PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x51 SWAP3 SWAP2 SWAP1 PUSH3 0x17D JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0x6A SWAP3 SWAP2 SWAP1 PUSH3 0x17D JUMP JUMPDEST POP POP POP PUSH3 0x8D PUSH3 0x81 PUSH3 0xAF PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0xB7 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST DUP1 PUSH1 0xD SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0xA5 SWAP3 SWAP2 SWAP1 PUSH3 0x17D JUMP JUMPDEST POP POP POP POP PUSH3 0x4E8 JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0xB PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x18B SWAP1 PUSH3 0x4B2 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x1AF JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x1FB JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x1CA JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x1FB JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x1FB JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x1FA JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x1DD JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 0x20A SWAP2 SWAP1 PUSH3 0x20E JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x229 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0x20F JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0x296 DUP3 PUSH3 0x24B JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0x2B8 JUMPI PUSH3 0x2B7 PUSH3 0x25C JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2CD PUSH3 0x22D JUMP JUMPDEST SWAP1 POP PUSH3 0x2DB DUP3 DUP3 PUSH3 0x28B JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x2FE JUMPI PUSH3 0x2FD PUSH3 0x25C JUMP JUMPDEST JUMPDEST PUSH3 0x309 DUP3 PUSH3 0x24B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x336 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x319 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x346 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x363 PUSH3 0x35D DUP5 PUSH3 0x2E0 JUMP JUMPDEST PUSH3 0x2C1 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x382 JUMPI PUSH3 0x381 PUSH3 0x246 JUMP JUMPDEST JUMPDEST PUSH3 0x38F DUP5 DUP3 DUP6 PUSH3 0x316 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x3AF JUMPI PUSH3 0x3AE PUSH3 0x241 JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x3C1 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x34C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x3E6 JUMPI PUSH3 0x3E5 PUSH3 0x237 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP5 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x407 JUMPI PUSH3 0x406 PUSH3 0x23C JUMP JUMPDEST JUMPDEST PUSH3 0x415 DUP7 DUP3 DUP8 ADD PUSH3 0x397 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x439 JUMPI PUSH3 0x438 PUSH3 0x23C JUMP JUMPDEST JUMPDEST PUSH3 0x447 DUP7 DUP3 DUP8 ADD PUSH3 0x397 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x46B JUMPI PUSH3 0x46A PUSH3 0x23C JUMP JUMPDEST JUMPDEST PUSH3 0x479 DUP7 DUP3 DUP8 ADD PUSH3 0x397 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x4CB JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x4E2 JUMPI PUSH3 0x4E1 PUSH3 0x483 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3B32 DUP1 PUSH3 0x4F8 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x142 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x375 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x391 JUMPI DUP1 PUSH4 0xD204C45E EQ PUSH2 0x3C1 JUMPI DUP1 PUSH4 0xE8A3D485 EQ PUSH2 0x3DD JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x3FB JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x42B JUMPI PUSH2 0x142 JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2E3 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x313 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x31D JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x33B JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x359 JUMPI PUSH2 0x142 JUMP JUMPDEST DUP1 PUSH4 0x1C02AEAF GT PUSH2 0x10A JUMPI DUP1 PUSH4 0x1C02AEAF EQ PUSH2 0x1FF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x21B JUMPI DUP1 PUSH4 0x2F745C59 EQ PUSH2 0x237 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x267 JUMPI DUP1 PUSH4 0x4F6CCCE7 EQ PUSH2 0x283 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x2B3 JUMPI PUSH2 0x142 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x195 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1E1 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x161 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x15C SWAP2 SWAP1 PUSH2 0x25DA JUMP JUMPDEST PUSH2 0x447 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16E SWAP2 SWAP1 PUSH2 0x2622 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17F PUSH2 0x459 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18C SWAP2 SWAP1 PUSH2 0x26D6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1AF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AA SWAP2 SWAP1 PUSH2 0x272E JUMP JUMPDEST PUSH2 0x4EB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BC SWAP2 SWAP1 PUSH2 0x279C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1DF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DA SWAP2 SWAP1 PUSH2 0x27E3 JUMP JUMPDEST PUSH2 0x531 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1E9 PUSH2 0x649 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F6 SWAP2 SWAP1 PUSH2 0x2832 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x219 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x214 SWAP2 SWAP1 PUSH2 0x2ADE JUMP JUMPDEST PUSH2 0x656 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x235 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x230 SWAP2 SWAP1 PUSH2 0x2B27 JUMP JUMPDEST PUSH2 0x6C7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x251 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x24C SWAP2 SWAP1 PUSH2 0x27E3 JUMP JUMPDEST PUSH2 0x727 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x25E SWAP2 SWAP1 PUSH2 0x2832 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x281 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x27C SWAP2 SWAP1 PUSH2 0x2B27 JUMP JUMPDEST PUSH2 0x7CC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x29D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x298 SWAP2 SWAP1 PUSH2 0x272E JUMP JUMPDEST PUSH2 0x7EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2AA SWAP2 SWAP1 PUSH2 0x2832 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2CD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C8 SWAP2 SWAP1 PUSH2 0x272E JUMP JUMPDEST PUSH2 0x85D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2DA SWAP2 SWAP1 PUSH2 0x279C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2FD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2F8 SWAP2 SWAP1 PUSH2 0x2B7A JUMP JUMPDEST PUSH2 0x8E4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30A SWAP2 SWAP1 PUSH2 0x2832 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31B PUSH2 0x99C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x325 PUSH2 0x9B0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x332 SWAP2 SWAP1 PUSH2 0x279C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x343 PUSH2 0x9DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x350 SWAP2 SWAP1 PUSH2 0x26D6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x373 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x36E SWAP2 SWAP1 PUSH2 0x2BD3 JUMP JUMPDEST PUSH2 0xA6C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x38F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x38A SWAP2 SWAP1 PUSH2 0x2CB4 JUMP JUMPDEST PUSH2 0xA82 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3AB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3A6 SWAP2 SWAP1 PUSH2 0x272E JUMP JUMPDEST PUSH2 0xAE4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3B8 SWAP2 SWAP1 PUSH2 0x26D6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3DB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3D6 SWAP2 SWAP1 PUSH2 0x2D37 JUMP JUMPDEST PUSH2 0xAF6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3E5 PUSH2 0xB2F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F2 SWAP2 SWAP1 PUSH2 0x26D6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x415 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x410 SWAP2 SWAP1 PUSH2 0x2D93 JUMP JUMPDEST PUSH2 0xB57 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x422 SWAP2 SWAP1 PUSH2 0x2622 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x445 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x440 SWAP2 SWAP1 PUSH2 0x2B7A JUMP JUMPDEST PUSH2 0xBEB JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH2 0x452 DUP3 PUSH2 0xC6F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x468 SWAP1 PUSH2 0x2E02 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x494 SWAP1 PUSH2 0x2E02 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4E1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4B6 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4E1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4C4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4F6 DUP3 PUSH2 0xCE9 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x53C DUP3 PUSH2 0x85D JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x5AD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5A4 SWAP1 PUSH2 0x2EA6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x5CC PUSH2 0xD34 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x5FB JUMPI POP PUSH2 0x5FA DUP2 PUSH2 0x5F5 PUSH2 0xD34 JUMP JUMPDEST PUSH2 0xB57 JUMP JUMPDEST JUMPDEST PUSH2 0x63A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x631 SWAP1 PUSH2 0x2F38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x644 DUP4 DUP4 PUSH2 0xD3C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x65E PUSH2 0xDF5 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x6C3 JUMPI PUSH2 0x6B0 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x680 JUMPI PUSH2 0x67F PUSH2 0x2F58 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x69F JUMPI PUSH2 0x69E PUSH2 0x2F58 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0xAF6 JUMP JUMPDEST DUP1 DUP1 PUSH2 0x6BB SWAP1 PUSH2 0x2FB6 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x661 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x6D8 PUSH2 0x6D2 PUSH2 0xD34 JUMP JUMPDEST DUP3 PUSH2 0xE73 JUMP JUMPDEST PUSH2 0x717 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x70E SWAP1 PUSH2 0x3071 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x722 DUP4 DUP4 DUP4 PUSH2 0xF08 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x732 DUP4 PUSH2 0x8E4 JUMP JUMPDEST DUP3 LT PUSH2 0x773 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x76A SWAP1 PUSH2 0x3103 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x7E7 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xA82 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7F6 PUSH2 0x649 JUMP JUMPDEST DUP3 LT PUSH2 0x837 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x82E SWAP1 PUSH2 0x3195 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x8 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x84B JUMPI PUSH2 0x84A PUSH2 0x2F58 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x869 DUP4 PUSH2 0x1202 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x8DB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D2 SWAP1 PUSH2 0x3201 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x955 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x94C SWAP1 PUSH2 0x3293 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9A4 PUSH2 0xDF5 JUMP JUMPDEST PUSH2 0x9AE PUSH1 0x0 PUSH2 0x123F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0xB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x9E9 SWAP1 PUSH2 0x2E02 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xA15 SWAP1 PUSH2 0x2E02 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA62 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA37 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA62 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA45 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xA7E PUSH2 0xA77 PUSH2 0xD34 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x1305 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xA93 PUSH2 0xA8D PUSH2 0xD34 JUMP JUMPDEST DUP4 PUSH2 0xE73 JUMP JUMPDEST PUSH2 0xAD2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAC9 SWAP1 PUSH2 0x3071 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xADE DUP5 DUP5 DUP5 DUP5 PUSH2 0x1472 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xAEF DUP3 PUSH2 0x14CE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xAFE PUSH2 0xDF5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB0A PUSH1 0xC PUSH2 0x15E1 JUMP JUMPDEST SWAP1 POP PUSH2 0xB16 PUSH1 0xC PUSH2 0x15EF JUMP JUMPDEST PUSH2 0xB20 DUP4 DUP3 PUSH2 0x1605 JUMP JUMPDEST PUSH2 0xB2A DUP2 DUP4 PUSH2 0x1623 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB43 SWAP2 SWAP1 PUSH2 0x339E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xBF3 PUSH2 0xDF5 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC63 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC5A SWAP1 PUSH2 0x3432 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC6C DUP2 PUSH2 0x123F JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x780E9D6300000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0xCE2 JUMPI POP PUSH2 0xCE1 DUP3 PUSH2 0x1697 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCF2 DUP2 PUSH2 0x1779 JUMP JUMPDEST PUSH2 0xD31 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD28 SWAP1 PUSH2 0x3201 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xDAF DUP4 PUSH2 0x85D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0xDFD PUSH2 0xD34 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE1B PUSH2 0x9B0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xE71 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE68 SWAP1 PUSH2 0x349E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xE7F DUP4 PUSH2 0x85D JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xEC1 JUMPI POP PUSH2 0xEC0 DUP2 DUP6 PUSH2 0xB57 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xEFF JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xEE7 DUP5 PUSH2 0x4EB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xF28 DUP3 PUSH2 0x85D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xF7E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF75 SWAP1 PUSH2 0x3530 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xFEE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFE5 SWAP1 PUSH2 0x35C2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xFFB DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x17BA JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x101B DUP3 PUSH2 0x85D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1071 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1068 SWAP1 PUSH2 0x3530 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x11FD DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x17CC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0xB PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1374 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x136B SWAP1 PUSH2 0x362E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1465 SWAP2 SWAP1 PUSH2 0x2622 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x147D DUP5 DUP5 DUP5 PUSH2 0xF08 JUMP JUMPDEST PUSH2 0x1489 DUP5 DUP5 DUP5 DUP5 PUSH2 0x17D2 JUMP JUMPDEST PUSH2 0x14C8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14BF SWAP1 PUSH2 0x36C0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x14D9 DUP3 PUSH2 0xCE9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0x14F9 SWAP1 PUSH2 0x2E02 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1525 SWAP1 PUSH2 0x2E02 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1572 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1547 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1572 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1555 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x1583 PUSH2 0x1969 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x1599 JUMPI DUP2 SWAP3 POP POP POP PUSH2 0x15DC JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x15CE JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x15B6 SWAP3 SWAP2 SWAP1 PUSH2 0x3711 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP PUSH2 0x15DC JUMP JUMPDEST PUSH2 0x15D7 DUP5 PUSH2 0x19A6 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x161F DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1A0E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x162C DUP3 PUSH2 0x1779 JUMP JUMPDEST PUSH2 0x166B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1662 SWAP1 PUSH2 0x37A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0xA PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1692 SWAP3 SWAP2 SWAP1 PUSH2 0x24CB JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x1762 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x1772 JUMPI POP PUSH2 0x1771 DUP3 PUSH2 0x1A69 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x179B DUP4 PUSH2 0x1202 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x17C6 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1AD3 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17F3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1C33 JUMP JUMPDEST ISZERO PUSH2 0x195C JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x181C PUSH2 0xD34 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x183E SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x381C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1858 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1889 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1886 SWAP2 SWAP1 PUSH2 0x387D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x190C JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x18B9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x18BE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x1904 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x18FB SWAP1 PUSH2 0x36C0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x1961 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x697066733A2F2F00000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x19B1 DUP3 PUSH2 0xCE9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19BB PUSH2 0x1969 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x19DB JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1A06 JUMP JUMPDEST DUP1 PUSH2 0x19E5 DUP5 PUSH2 0x1C56 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x19F6 SWAP3 SWAP2 SWAP1 PUSH2 0x3711 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A18 DUP4 DUP4 PUSH2 0x1D2E JUMP JUMPDEST PUSH2 0x1A25 PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x17D2 JUMP JUMPDEST PUSH2 0x1A64 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5B SWAP1 PUSH2 0x36C0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1ADF DUP5 DUP5 DUP5 DUP5 PUSH2 0x1F4C JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1B23 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B1A SWAP1 PUSH2 0x391C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1B6B JUMPI PUSH2 0x1B66 DUP2 PUSH2 0x2072 JUMP JUMPDEST PUSH2 0x1BAA JUMP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1BA9 JUMPI PUSH2 0x1BA8 DUP6 DUP3 PUSH2 0x20BB JUMP JUMPDEST JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1BED JUMPI PUSH2 0x1BE8 DUP2 PUSH2 0x2228 JUMP JUMPDEST PUSH2 0x1C2C JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1C2B JUMPI PUSH2 0x1C2A DUP5 DUP3 PUSH2 0x22F9 JUMP JUMPDEST JUMPDEST JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1C65 DUP5 PUSH2 0x2378 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C84 JUMPI PUSH2 0x1C83 PUSH2 0x2852 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1CB6 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1D23 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1D0D JUMPI PUSH2 0x1D0C PUSH2 0x393C JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 EQ ISZERO PUSH2 0x1D1E JUMPI PUSH2 0x1D23 JUMP JUMPDEST PUSH2 0x1CC4 JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1D9E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D95 SWAP1 PUSH2 0x39B7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1DA7 DUP2 PUSH2 0x1779 JUMP JUMPDEST ISZERO PUSH2 0x1DE7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DDE SWAP1 PUSH2 0x3A23 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1DF5 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x17BA JUMP JUMPDEST PUSH2 0x1DFE DUP2 PUSH2 0x1779 JUMP JUMPDEST ISZERO PUSH2 0x1E3E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E35 SWAP1 PUSH2 0x3A23 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1F48 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x17CC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x206C JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1FE0 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1FD8 SWAP2 SWAP1 PUSH2 0x3A43 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x206B JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2063 SWAP2 SWAP1 PUSH2 0x3A77 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD SWAP1 POP PUSH1 0x9 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x8 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x20C8 DUP5 PUSH2 0x8E4 JUMP JUMPDEST PUSH2 0x20D2 SWAP2 SWAP1 PUSH2 0x3A43 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 EQ PUSH2 0x21B7 JUMPI PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP1 PUSH1 0x6 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x7 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH1 0x7 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x6 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x8 DUP1 SLOAD SWAP1 POP PUSH2 0x223C SWAP2 SWAP1 PUSH2 0x3A43 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x9 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x8 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x226C JUMPI PUSH2 0x226B PUSH2 0x2F58 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 PUSH1 0x8 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x228E JUMPI PUSH2 0x228D PUSH2 0x2F58 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x9 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x9 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x8 DUP1 SLOAD DUP1 PUSH2 0x22DD JUMPI PUSH2 0x22DC PUSH2 0x3ACD JUMP JUMPDEST JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2304 DUP4 PUSH2 0x8E4 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x6 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x7 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x23D6 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x23CC JUMPI PUSH2 0x23CB PUSH2 0x393C JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x2413 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x2409 JUMPI PUSH2 0x2408 PUSH2 0x393C JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x2442 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x2438 JUMPI PUSH2 0x2437 PUSH2 0x393C JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x246B JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x2461 JUMPI PUSH2 0x2460 PUSH2 0x393C JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x2490 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x2486 JUMPI PUSH2 0x2485 PUSH2 0x393C JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x24B3 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x24A9 JUMPI PUSH2 0x24A8 PUSH2 0x393C JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x24C2 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x24D7 SWAP1 PUSH2 0x2E02 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x24F9 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x2540 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x2512 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x2540 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x2540 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x253F JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x2524 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x254D SWAP2 SWAP1 PUSH2 0x2551 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x256A JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x2552 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x25B7 DUP2 PUSH2 0x2582 JUMP JUMPDEST DUP2 EQ PUSH2 0x25C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x25D4 DUP2 PUSH2 0x25AE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25F0 JUMPI PUSH2 0x25EF PUSH2 0x2578 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x25FE DUP5 DUP3 DUP6 ADD PUSH2 0x25C5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x261C DUP2 PUSH2 0x2607 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2637 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2613 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2677 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x265C JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x2686 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26A8 DUP3 PUSH2 0x263D JUMP JUMPDEST PUSH2 0x26B2 DUP2 DUP6 PUSH2 0x2648 JUMP JUMPDEST SWAP4 POP PUSH2 0x26C2 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2659 JUMP JUMPDEST PUSH2 0x26CB DUP2 PUSH2 0x268C JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x26F0 DUP2 DUP5 PUSH2 0x269D JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x270B DUP2 PUSH2 0x26F8 JUMP JUMPDEST DUP2 EQ PUSH2 0x2716 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2728 DUP2 PUSH2 0x2702 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2744 JUMPI PUSH2 0x2743 PUSH2 0x2578 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2752 DUP5 DUP3 DUP6 ADD PUSH2 0x2719 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2786 DUP3 PUSH2 0x275B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2796 DUP2 PUSH2 0x277B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x27B1 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x278D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x27C0 DUP2 PUSH2 0x277B JUMP JUMPDEST DUP2 EQ PUSH2 0x27CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x27DD DUP2 PUSH2 0x27B7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x27FA JUMPI PUSH2 0x27F9 PUSH2 0x2578 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2808 DUP6 DUP3 DUP7 ADD PUSH2 0x27CE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2819 DUP6 DUP3 DUP7 ADD PUSH2 0x2719 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x282C DUP2 PUSH2 0x26F8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2847 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2823 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x288A DUP3 PUSH2 0x268C JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x28A9 JUMPI PUSH2 0x28A8 PUSH2 0x2852 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28BC PUSH2 0x256E JUMP JUMPDEST SWAP1 POP PUSH2 0x28C8 DUP3 DUP3 PUSH2 0x2881 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x28E8 JUMPI PUSH2 0x28E7 PUSH2 0x2852 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2928 JUMPI PUSH2 0x2927 PUSH2 0x2852 JUMP JUMPDEST JUMPDEST PUSH2 0x2931 DUP3 PUSH2 0x268C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2960 PUSH2 0x295B DUP5 PUSH2 0x290D JUMP JUMPDEST PUSH2 0x28B2 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x297C JUMPI PUSH2 0x297B PUSH2 0x2908 JUMP JUMPDEST JUMPDEST PUSH2 0x2987 DUP5 DUP3 DUP6 PUSH2 0x293E JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x29A4 JUMPI PUSH2 0x29A3 PUSH2 0x284D JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x29B4 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x294D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x29D3 JUMPI PUSH2 0x29D2 PUSH2 0x28FE JUMP JUMPDEST JUMPDEST PUSH2 0x29DD PUSH1 0x40 PUSH2 0x28B2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x29ED DUP5 DUP3 DUP6 ADD PUSH2 0x27CE JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2A11 JUMPI PUSH2 0x2A10 PUSH2 0x2903 JUMP JUMPDEST JUMPDEST PUSH2 0x2A1D DUP5 DUP3 DUP6 ADD PUSH2 0x298F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A3C PUSH2 0x2A37 DUP5 PUSH2 0x28CD JUMP JUMPDEST PUSH2 0x28B2 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x2A5F JUMPI PUSH2 0x2A5E PUSH2 0x28F9 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2AA6 JUMPI DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2A84 JUMPI PUSH2 0x2A83 PUSH2 0x284D JUMP JUMPDEST JUMPDEST DUP1 DUP7 ADD PUSH2 0x2A91 DUP10 DUP3 PUSH2 0x29BD JUMP JUMPDEST DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP5 POP POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2A61 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2AC5 JUMPI PUSH2 0x2AC4 PUSH2 0x284D JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2AD5 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2A29 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2AF4 JUMPI PUSH2 0x2AF3 PUSH2 0x2578 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2B12 JUMPI PUSH2 0x2B11 PUSH2 0x257D JUMP JUMPDEST JUMPDEST PUSH2 0x2B1E DUP5 DUP3 DUP6 ADD PUSH2 0x2AB0 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2B40 JUMPI PUSH2 0x2B3F PUSH2 0x2578 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2B4E DUP7 DUP3 DUP8 ADD PUSH2 0x27CE JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2B5F DUP7 DUP3 DUP8 ADD PUSH2 0x27CE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2B70 DUP7 DUP3 DUP8 ADD PUSH2 0x2719 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2B90 JUMPI PUSH2 0x2B8F PUSH2 0x2578 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2B9E DUP5 DUP3 DUP6 ADD PUSH2 0x27CE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2BB0 DUP2 PUSH2 0x2607 JUMP JUMPDEST DUP2 EQ PUSH2 0x2BBB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2BCD DUP2 PUSH2 0x2BA7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2BEA JUMPI PUSH2 0x2BE9 PUSH2 0x2578 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2BF8 DUP6 DUP3 DUP7 ADD PUSH2 0x27CE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2C09 DUP6 DUP3 DUP7 ADD PUSH2 0x2BBE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2C2E JUMPI PUSH2 0x2C2D PUSH2 0x2852 JUMP JUMPDEST JUMPDEST PUSH2 0x2C37 DUP3 PUSH2 0x268C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C57 PUSH2 0x2C52 DUP5 PUSH2 0x2C13 JUMP JUMPDEST PUSH2 0x28B2 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x2C73 JUMPI PUSH2 0x2C72 PUSH2 0x2908 JUMP JUMPDEST JUMPDEST PUSH2 0x2C7E DUP5 DUP3 DUP6 PUSH2 0x293E JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2C9B JUMPI PUSH2 0x2C9A PUSH2 0x284D JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2CAB DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2C44 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2CCE JUMPI PUSH2 0x2CCD PUSH2 0x2578 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2CDC DUP8 DUP3 DUP9 ADD PUSH2 0x27CE JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x2CED DUP8 DUP3 DUP9 ADD PUSH2 0x27CE JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x2CFE DUP8 DUP3 DUP9 ADD PUSH2 0x2719 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2D1F JUMPI PUSH2 0x2D1E PUSH2 0x257D JUMP JUMPDEST JUMPDEST PUSH2 0x2D2B DUP8 DUP3 DUP9 ADD PUSH2 0x2C86 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2D4E JUMPI PUSH2 0x2D4D PUSH2 0x2578 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2D5C DUP6 DUP3 DUP7 ADD PUSH2 0x27CE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2D7D JUMPI PUSH2 0x2D7C PUSH2 0x257D JUMP JUMPDEST JUMPDEST PUSH2 0x2D89 DUP6 DUP3 DUP7 ADD PUSH2 0x298F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2DAA JUMPI PUSH2 0x2DA9 PUSH2 0x2578 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2DB8 DUP6 DUP3 DUP7 ADD PUSH2 0x27CE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2DC9 DUP6 DUP3 DUP7 ADD PUSH2 0x27CE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2E1A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x2E2E JUMPI PUSH2 0x2E2D PUSH2 0x2DD3 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E90 PUSH1 0x21 DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x2E9B DUP3 PUSH2 0x2E34 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2EBF DUP2 PUSH2 0x2E83 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F22 PUSH1 0x3D DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x2F2D DUP3 PUSH2 0x2EC6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2F51 DUP2 PUSH2 0x2F15 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2FC1 DUP3 PUSH2 0x26F8 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x2FF4 JUMPI PUSH2 0x2FF3 PUSH2 0x2F87 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x305B PUSH1 0x2D DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x3066 DUP3 PUSH2 0x2FFF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x308A DUP2 PUSH2 0x304E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x455243373231456E756D657261626C653A206F776E657220696E646578206F75 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x74206F6620626F756E6473000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30ED PUSH1 0x2B DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x30F8 DUP3 PUSH2 0x3091 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x311C DUP2 PUSH2 0x30E0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x455243373231456E756D657261626C653A20676C6F62616C20696E646578206F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7574206F6620626F756E64730000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x317F PUSH1 0x2C DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x318A DUP3 PUSH2 0x3123 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x31AE DUP2 PUSH2 0x3172 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x31EB PUSH1 0x18 DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x31F6 DUP3 PUSH2 0x31B5 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x321A DUP2 PUSH2 0x31DE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x327D PUSH1 0x29 DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x3288 DUP3 PUSH2 0x3221 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x32AC DUP2 PUSH2 0x3270 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x697066733A2F2F00000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32F4 PUSH1 0x7 DUP4 PUSH2 0x32B3 JUMP JUMPDEST SWAP2 POP PUSH2 0x32FF DUP3 PUSH2 0x32BE JUMP JUMPDEST PUSH1 0x7 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SLOAD PUSH2 0x332C DUP2 PUSH2 0x2E02 JUMP JUMPDEST PUSH2 0x3336 DUP2 DUP7 PUSH2 0x32B3 JUMP JUMPDEST SWAP5 POP PUSH1 0x1 DUP3 AND PUSH1 0x0 DUP2 EQ PUSH2 0x3351 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x3362 JUMPI PUSH2 0x3395 JUMP JUMPDEST PUSH1 0xFF NOT DUP4 AND DUP7 MSTORE DUP2 DUP7 ADD SWAP4 POP PUSH2 0x3395 JUMP JUMPDEST PUSH2 0x336B DUP6 PUSH2 0x330A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x338D JUMPI DUP2 SLOAD DUP2 DUP10 ADD MSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x336E JUMP JUMPDEST DUP4 DUP9 ADD SWAP6 POP POP POP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33A9 DUP3 PUSH2 0x32E7 JUMP JUMPDEST SWAP2 POP PUSH2 0x33B5 DUP3 DUP5 PUSH2 0x331F JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x341C PUSH1 0x26 DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x3427 DUP3 PUSH2 0x33C0 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x344B DUP2 PUSH2 0x340F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3488 PUSH1 0x20 DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x3493 DUP3 PUSH2 0x3452 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x34B7 DUP2 PUSH2 0x347B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x351A PUSH1 0x25 DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x3525 DUP3 PUSH2 0x34BE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3549 DUP2 PUSH2 0x350D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x35AC PUSH1 0x24 DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x35B7 DUP3 PUSH2 0x3550 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x35DB DUP2 PUSH2 0x359F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3618 PUSH1 0x19 DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x3623 DUP3 PUSH2 0x35E2 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3647 DUP2 PUSH2 0x360B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36AA PUSH1 0x32 DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x36B5 DUP3 PUSH2 0x364E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x36D9 DUP2 PUSH2 0x369D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36EB DUP3 PUSH2 0x263D JUMP JUMPDEST PUSH2 0x36F5 DUP2 DUP6 PUSH2 0x32B3 JUMP JUMPDEST SWAP4 POP PUSH2 0x3705 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2659 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x371D DUP3 DUP6 PUSH2 0x36E0 JUMP JUMPDEST SWAP2 POP PUSH2 0x3729 DUP3 DUP5 PUSH2 0x36E0 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x45524337323155524953746F726167653A2055524920736574206F66206E6F6E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6578697374656E7420746F6B656E000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3791 PUSH1 0x2E DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x379C DUP3 PUSH2 0x3735 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x37C0 DUP2 PUSH2 0x3784 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37EE DUP3 PUSH2 0x37C7 JUMP JUMPDEST PUSH2 0x37F8 DUP2 DUP6 PUSH2 0x37D2 JUMP JUMPDEST SWAP4 POP PUSH2 0x3808 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2659 JUMP JUMPDEST PUSH2 0x3811 DUP2 PUSH2 0x268C JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x3831 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x278D JUMP JUMPDEST PUSH2 0x383E PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x278D JUMP JUMPDEST PUSH2 0x384B PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2823 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x385D DUP2 DUP5 PUSH2 0x37E3 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3877 DUP2 PUSH2 0x25AE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3893 JUMPI PUSH2 0x3892 PUSH2 0x2578 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x38A1 DUP5 DUP3 DUP6 ADD PUSH2 0x3868 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x455243373231456E756D657261626C653A20636F6E7365637574697665207472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616E7366657273206E6F7420737570706F727465640000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3906 PUSH1 0x35 DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x3911 DUP3 PUSH2 0x38AA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3935 DUP2 PUSH2 0x38F9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x39A1 PUSH1 0x20 DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x39AC DUP3 PUSH2 0x396B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x39D0 DUP2 PUSH2 0x3994 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A0D PUSH1 0x1C DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x3A18 DUP3 PUSH2 0x39D7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A3C DUP2 PUSH2 0x3A00 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A4E DUP3 PUSH2 0x26F8 JUMP JUMPDEST SWAP2 POP PUSH2 0x3A59 DUP4 PUSH2 0x26F8 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x3A6C JUMPI PUSH2 0x3A6B PUSH2 0x2F87 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A82 DUP3 PUSH2 0x26F8 JUMP JUMPDEST SWAP2 POP PUSH2 0x3A8D DUP4 PUSH2 0x26F8 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x3AC2 JUMPI PUSH2 0x3AC1 PUSH2 0x2F87 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAF DUP6 SWAP15 0xCE STOP LT DUP9 DELEGATECALL KECCAK256 LOG0 SWAP11 DUP6 PUSH31 0xA50DC65B7BEA89DB02905E624D8854EBB9671964736F6C6343000809003300 ","sourceMap":"380:2002:25:-:0;;;656:181;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;777:5;784:7;1464:5:7;1456;:13;;;;;;;;;;;;:::i;:::-;;1489:7;1479;:17;;;;;;;;;;;;:::i;:::-;;1390:113;;936:32:0;955:12;:10;;;:12;;:::i;:::-;936:18;;;:32;;:::i;:::-;818:12:25::1;803;:27;;;;;;;;;;;;:::i;:::-;;656:181:::0;;;380:2002;;640:96:15;693:7;719:10;712:17;;640:96;:::o;2433:187:0:-;2506:16;2525:6;;;;;;;;;;;2506:25;;2550:8;2541:6;;:17;;;;;;;;;;;;;;;;;;2604:8;2573:40;;2594:8;2573:40;;;;;;;;;;;;2496:124;2433:187;:::o;380:2002:25:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:75:26:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:117;566:1;563;556:12;580:102;621:6;672:2;668:7;663:2;656:5;652:14;648:28;638:38;;580:102;;;:::o;688:180::-;736:77;733:1;726:88;833:4;830:1;823:15;857:4;854:1;847:15;874:281;957:27;979:4;957:27;:::i;:::-;949:6;945:40;1087:6;1075:10;1072:22;1051:18;1039:10;1036:34;1033:62;1030:88;;;1098:18;;:::i;:::-;1030:88;1138:10;1134:2;1127:22;917:238;874:281;;:::o;1161:129::-;1195:6;1222:20;;:::i;:::-;1212:30;;1251:33;1279:4;1271:6;1251:33;:::i;:::-;1161:129;;;:::o;1296:308::-;1358:4;1448:18;1440:6;1437:30;1434:56;;;1470:18;;:::i;:::-;1434:56;1508:29;1530:6;1508:29;:::i;:::-;1500:37;;1592:4;1586;1582:15;1574:23;;1296:308;;;:::o;1610:307::-;1678:1;1688:113;1702:6;1699:1;1696:13;1688:113;;;1787:1;1782:3;1778:11;1772:18;1768:1;1763:3;1759:11;1752:39;1724:2;1721:1;1717:10;1712:15;;1688:113;;;1819:6;1816:1;1813:13;1810:101;;;1899:1;1890:6;1885:3;1881:16;1874:27;1810:101;1659:258;1610:307;;;:::o;1923:421::-;2012:5;2037:66;2053:49;2095:6;2053:49;:::i;:::-;2037:66;:::i;:::-;2028:75;;2126:6;2119:5;2112:21;2164:4;2157:5;2153:16;2202:3;2193:6;2188:3;2184:16;2181:25;2178:112;;;2209:79;;:::i;:::-;2178:112;2299:39;2331:6;2326:3;2321;2299:39;:::i;:::-;2018:326;1923:421;;;;;:::o;2364:355::-;2431:5;2480:3;2473:4;2465:6;2461:17;2457:27;2447:122;;2488:79;;:::i;:::-;2447:122;2598:6;2592:13;2623:90;2709:3;2701:6;2694:4;2686:6;2682:17;2623:90;:::i;:::-;2614:99;;2437:282;2364:355;;;;:::o;2725:1182::-;2843:6;2851;2859;2908:2;2896:9;2887:7;2883:23;2879:32;2876:119;;;2914:79;;:::i;:::-;2876:119;3055:1;3044:9;3040:17;3034:24;3085:18;3077:6;3074:30;3071:117;;;3107:79;;:::i;:::-;3071:117;3212:74;3278:7;3269:6;3258:9;3254:22;3212:74;:::i;:::-;3202:84;;3005:291;3356:2;3345:9;3341:18;3335:25;3387:18;3379:6;3376:30;3373:117;;;3409:79;;:::i;:::-;3373:117;3514:74;3580:7;3571:6;3560:9;3556:22;3514:74;:::i;:::-;3504:84;;3306:292;3658:2;3647:9;3643:18;3637:25;3689:18;3681:6;3678:30;3675:117;;;3711:79;;:::i;:::-;3675:117;3816:74;3882:7;3873:6;3862:9;3858:22;3816:74;:::i;:::-;3806:84;;3608:292;2725:1182;;;;;:::o;3913:180::-;3961:77;3958:1;3951:88;4058:4;4055:1;4048:15;4082:4;4079:1;4072:15;4099:320;4143:6;4180:1;4174:4;4170:12;4160:22;;4227:1;4221:4;4217:12;4248:18;4238:81;;4304:4;4296:6;4292:17;4282:27;;4238:81;4366:2;4358:6;4355:14;4335:18;4332:38;4329:84;;;4385:18;;:::i;:::-;4329:84;4150:269;4099:320;;;:::o;380:2002:25:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_addTokenToAllTokensEnumeration_2375":{"entryPoint":8306,"id":2375,"parameterSlots":1,"returnSlots":0},"@_addTokenToOwnerEnumeration_2355":{"entryPoint":8953,"id":2355,"parameterSlots":2,"returnSlots":0},"@_afterTokenTransfer_1998":{"entryPoint":6092,"id":1998,"parameterSlots":4,"returnSlots":0},"@_approve_1831":{"entryPoint":3388,"id":1831,"parameterSlots":2,"returnSlots":0},"@_baseURI_4817":{"entryPoint":6505,"id":4817,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_1985":{"entryPoint":8012,"id":1985,"parameterSlots":4,"returnSlots":0},"@_beforeTokenTransfer_2325":{"entryPoint":6867,"id":2325,"parameterSlots":4,"returnSlots":0},"@_beforeTokenTransfer_4921":{"entryPoint":6074,"id":4921,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_1939":{"entryPoint":6098,"id":1939,"parameterSlots":4,"returnSlots":1},"@_checkOwner_54":{"entryPoint":3573,"id":54,"parameterSlots":0,"returnSlots":0},"@_exists_1500":{"entryPoint":6009,"id":1500,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_1534":{"entryPoint":3699,"id":1534,"parameterSlots":2,"returnSlots":1},"@_mint_1655":{"entryPoint":7470,"id":1655,"parameterSlots":2,"returnSlots":0},"@_msgSender_3012":{"entryPoint":3380,"id":3012,"parameterSlots":0,"returnSlots":1},"@_ownerOf_1482":{"entryPoint":4610,"id":1482,"parameterSlots":1,"returnSlots":1},"@_removeTokenFromAllTokensEnumeration_2486":{"entryPoint":8744,"id":2486,"parameterSlots":1,"returnSlots":0},"@_removeTokenFromOwnerEnumeration_2438":{"entryPoint":8379,"id":2438,"parameterSlots":2,"returnSlots":0},"@_requireMinted_1877":{"entryPoint":3305,"id":1877,"parameterSlots":1,"returnSlots":0},"@_safeMint_1549":{"entryPoint":5637,"id":1549,"parameterSlots":2,"returnSlots":0},"@_safeMint_1578":{"entryPoint":6670,"id":1578,"parameterSlots":3,"returnSlots":0},"@_safeTransfer_1469":{"entryPoint":5234,"id":1469,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_1863":{"entryPoint":4869,"id":1863,"parameterSlots":3,"returnSlots":0},"@_setTokenURI_2581":{"entryPoint":5667,"id":2581,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_111":{"entryPoint":4671,"id":111,"parameterSlots":1,"returnSlots":0},"@_transfer_1807":{"entryPoint":3848,"id":1807,"parameterSlots":3,"returnSlots":0},"@approve_1311":{"entryPoint":1329,"id":1311,"parameterSlots":2,"returnSlots":0},"@balanceOf_1172":{"entryPoint":2276,"id":1172,"parameterSlots":1,"returnSlots":1},"@contractURI_4832":{"entryPoint":2863,"id":4832,"parameterSlots":0,"returnSlots":1},"@current_3040":{"entryPoint":5601,"id":3040,"parameterSlots":1,"returnSlots":1},"@getApproved_1329":{"entryPoint":1259,"id":1329,"parameterSlots":1,"returnSlots":1},"@increment_3054":{"entryPoint":5615,"id":3054,"parameterSlots":1,"returnSlots":0},"@isApprovedForAll_1364":{"entryPoint":2903,"id":1364,"parameterSlots":2,"returnSlots":1},"@isContract_2688":{"entryPoint":7219,"id":2688,"parameterSlots":1,"returnSlots":1},"@log10_4524":{"entryPoint":9080,"id":4524,"parameterSlots":1,"returnSlots":1},"@multiSafeMint_4897":{"entryPoint":1622,"id":4897,"parameterSlots":1,"returnSlots":0},"@name_1210":{"entryPoint":1113,"id":1210,"parameterSlots":0,"returnSlots":1},"@ownerOf_1200":{"entryPoint":2141,"id":1200,"parameterSlots":1,"returnSlots":1},"@owner_40":{"entryPoint":2480,"id":40,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_68":{"entryPoint":2460,"id":68,"parameterSlots":0,"returnSlots":0},"@safeMint_4863":{"entryPoint":2806,"id":4863,"parameterSlots":2,"returnSlots":0},"@safeTransferFrom_1410":{"entryPoint":1996,"id":1410,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_1440":{"entryPoint":2690,"id":1440,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_1346":{"entryPoint":2668,"id":1346,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1148":{"entryPoint":5783,"id":1148,"parameterSlots":1,"returnSlots":1},"@supportsInterface_2183":{"entryPoint":3183,"id":2183,"parameterSlots":1,"returnSlots":1},"@supportsInterface_3809":{"entryPoint":6761,"id":3809,"parameterSlots":1,"returnSlots":1},"@supportsInterface_4968":{"entryPoint":1095,"id":4968,"parameterSlots":1,"returnSlots":1},"@symbol_1220":{"entryPoint":2522,"id":1220,"parameterSlots":0,"returnSlots":1},"@toString_3154":{"entryPoint":7254,"id":3154,"parameterSlots":1,"returnSlots":1},"@tokenByIndex_2245":{"entryPoint":2028,"id":2245,"parameterSlots":1,"returnSlots":1},"@tokenOfOwnerByIndex_2211":{"entryPoint":1831,"id":2211,"parameterSlots":2,"returnSlots":1},"@tokenURI_1259":{"entryPoint":6566,"id":1259,"parameterSlots":1,"returnSlots":1},"@tokenURI_2559":{"entryPoint":5326,"id":2559,"parameterSlots":1,"returnSlots":1},"@tokenURI_4952":{"entryPoint":2788,"id":4952,"parameterSlots":1,"returnSlots":1},"@totalSupply_2222":{"entryPoint":1609,"id":2222,"parameterSlots":0,"returnSlots":1},"@transferFrom_1391":{"entryPoint":1735,"id":1391,"parameterSlots":3,"returnSlots":0},"@transferOwnership_91":{"entryPoint":3051,"id":91,"parameterSlots":1,"returnSlots":0},"abi_decode_available_length_t_array$_t_struct$_ItemParam_$4790_memory_ptr_$dyn_memory_ptr":{"entryPoint":10793,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":11332,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_string_memory_ptr":{"entryPoint":10573,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":10190,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_struct$_ItemParam_$4790_memory_ptr_$dyn_memory_ptr":{"entryPoint":10928,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":11198,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":9669,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":14440,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":11398,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_string_memory_ptr":{"entryPoint":10639,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_struct$_ItemParam_$4790_memory_ptr":{"entryPoint":10685,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":10009,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":11130,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":11667,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":11047,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":11444,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":11219,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_string_memory_ptr":{"entryPoint":11575,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":10211,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_struct$_ItemParam_$4790_memory_ptr_$dyn_memory_ptr":{"entryPoint":10974,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":9690,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":14461,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":10030,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":10125,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":9747,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":14307,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":9885,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":14048,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":13087,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack":{"entryPoint":12366,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c_to_t_string_memory_ptr_fromStack":{"entryPoint":12512,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack":{"entryPoint":13981,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack":{"entryPoint":13327,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack":{"entryPoint":13581,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack":{"entryPoint":14848,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack":{"entryPoint":13727,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack":{"entryPoint":13835,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_66f0790b1cbe0dcac007f07341b00cafe2bda254914729058b5209e04b702afe_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":13031,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack":{"entryPoint":12912,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4_to_t_string_memory_ptr_fromStack":{"entryPoint":14212,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack":{"entryPoint":14740,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack":{"entryPoint":13435,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack":{"entryPoint":12766,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack":{"entryPoint":11907,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack":{"entryPoint":12053,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc_to_t_string_memory_ptr_fromStack":{"entryPoint":12658,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314_to_t_string_memory_ptr_fromStack":{"entryPoint":14585,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":10275,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":14097,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_66f0790b1cbe0dcac007f07341b00cafe2bda254914729058b5209e04b702afe_t_string_storage__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":13214,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":10140,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":14364,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":9762,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9942,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12401,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12547,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14016,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13362,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13616,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14883,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13762,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13870,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12947,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14247,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14775,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":13470,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12801,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11942,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12088,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":12693,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":14620,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":10290,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":10418,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":9582,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_struct$_ItemParam_$4790_memory_ptr_$dyn_memory_ptr":{"entryPoint":10445,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":11283,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":10509,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":13066,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":14279,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":9789,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":14290,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":9800,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":12979,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":14967,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":14915,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":10107,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":9735,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":9602,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":10075,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":9976,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory":{"entryPoint":10558,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory":{"entryPoint":9817,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":11778,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":10369,"id":null,"parameterSlots":2,"returnSlots":0},"increment_t_uint256":{"entryPoint":12214,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":12167,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":14652,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":11731,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x31":{"entryPoint":15053,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":12120,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":10322,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":10317,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f":{"entryPoint":10494,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421":{"entryPoint":10499,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":10489,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":10504,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":9597,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":9592,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":9868,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af":{"entryPoint":12287,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c":{"entryPoint":12433,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e":{"entryPoint":13902,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe":{"entryPoint":13248,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48":{"entryPoint":13502,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57":{"entryPoint":14807,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4":{"entryPoint":13648,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05":{"entryPoint":13794,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_66f0790b1cbe0dcac007f07341b00cafe2bda254914729058b5209e04b702afe":{"entryPoint":12990,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159":{"entryPoint":12833,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4":{"entryPoint":14133,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6":{"entryPoint":14699,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe":{"entryPoint":13394,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f":{"entryPoint":12725,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942":{"entryPoint":11828,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83":{"entryPoint":11974,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc":{"entryPoint":12579,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314":{"entryPoint":14506,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":10167,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":11175,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":9646,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":9986,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:41043:26","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:26","statements":[{"nodeType":"YulAssignment","src":"57:19:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:26","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:26"},"nodeType":"YulFunctionCall","src":"67:9:26"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:26"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:26","type":""}],"src":"7:75:26"},{"body":{"nodeType":"YulBlock","src":"177:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:26"},"nodeType":"YulFunctionCall","src":"187:12:26"},"nodeType":"YulExpressionStatement","src":"187:12:26"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:26"},{"body":{"nodeType":"YulBlock","src":"300:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:26"},"nodeType":"YulFunctionCall","src":"310:12:26"},"nodeType":"YulExpressionStatement","src":"310:12:26"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:26"},{"body":{"nodeType":"YulBlock","src":"378:105:26","statements":[{"nodeType":"YulAssignment","src":"388:89:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:26","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:26"},"nodeType":"YulFunctionCall","src":"399:78:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:26"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:26","type":""}],"src":"334:149:26"},{"body":{"nodeType":"YulBlock","src":"531:78:26","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:26"},"nodeType":"YulFunctionCall","src":"589:12:26"},"nodeType":"YulExpressionStatement","src":"589:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:26"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:26"},"nodeType":"YulFunctionCall","src":"561:23:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:26"},"nodeType":"YulFunctionCall","src":"551:34:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:26"},"nodeType":"YulFunctionCall","src":"544:42:26"},"nodeType":"YulIf","src":"541:62:26"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:26","type":""}],"src":"489:120:26"},{"body":{"nodeType":"YulBlock","src":"666:86:26","statements":[{"nodeType":"YulAssignment","src":"676:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:26"},"nodeType":"YulFunctionCall","src":"685:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:26"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:26"},"nodeType":"YulFunctionCall","src":"714:32:26"},"nodeType":"YulExpressionStatement","src":"714:32:26"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:26","type":""}],"src":"615:137:26"},{"body":{"nodeType":"YulBlock","src":"823:262:26","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:26"},"nodeType":"YulFunctionCall","src":"871:79:26"},"nodeType":"YulExpressionStatement","src":"871:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:26"},"nodeType":"YulFunctionCall","src":"840:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:26"},"nodeType":"YulFunctionCall","src":"836:32:26"},"nodeType":"YulIf","src":"833:119:26"},{"nodeType":"YulBlock","src":"962:116:26","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:26","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:26"},"nodeType":"YulFunctionCall","src":"1036:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:26"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:26"},"nodeType":"YulFunctionCall","src":"1016:52:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:26"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:26","type":""}],"src":"758:327:26"},{"body":{"nodeType":"YulBlock","src":"1133:48:26","statements":[{"nodeType":"YulAssignment","src":"1143:32:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:26"},"nodeType":"YulFunctionCall","src":"1161:13:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:26"},"nodeType":"YulFunctionCall","src":"1154:21:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:26"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:26","type":""}],"src":"1091:90:26"},{"body":{"nodeType":"YulBlock","src":"1246:50:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:26"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:26"},"nodeType":"YulFunctionCall","src":"1268:21:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:26"},"nodeType":"YulFunctionCall","src":"1256:34:26"},"nodeType":"YulExpressionStatement","src":"1256:34:26"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:26","type":""}],"src":"1187:109:26"},{"body":{"nodeType":"YulBlock","src":"1394:118:26","statements":[{"nodeType":"YulAssignment","src":"1404:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:26"},"nodeType":"YulFunctionCall","src":"1412:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:26"},"nodeType":"YulFunctionCall","src":"1487:17:26"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:26"},"nodeType":"YulFunctionCall","src":"1440:65:26"},"nodeType":"YulExpressionStatement","src":"1440:65:26"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:26","type":""}],"src":"1302:210:26"},{"body":{"nodeType":"YulBlock","src":"1577:40:26","statements":[{"nodeType":"YulAssignment","src":"1588:22:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1604:5:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1598:5:26"},"nodeType":"YulFunctionCall","src":"1598:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1588:6:26"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1560:5:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1570:6:26","type":""}],"src":"1518:99:26"},{"body":{"nodeType":"YulBlock","src":"1719:73:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1736:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"1741:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1729:6:26"},"nodeType":"YulFunctionCall","src":"1729:19:26"},"nodeType":"YulExpressionStatement","src":"1729:19:26"},{"nodeType":"YulAssignment","src":"1757:29:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1776:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"1781:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1772:3:26"},"nodeType":"YulFunctionCall","src":"1772:14:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1757:11:26"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1691:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"1696:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1707:11:26","type":""}],"src":"1623:169:26"},{"body":{"nodeType":"YulBlock","src":"1847:258:26","statements":[{"nodeType":"YulVariableDeclaration","src":"1857:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"1866:1:26","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1861:1:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"1926:63:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1951:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"1956:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1947:3:26"},"nodeType":"YulFunctionCall","src":"1947:11:26"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1970:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"1975:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1966:3:26"},"nodeType":"YulFunctionCall","src":"1966:11:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1960:5:26"},"nodeType":"YulFunctionCall","src":"1960:18:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1940:6:26"},"nodeType":"YulFunctionCall","src":"1940:39:26"},"nodeType":"YulExpressionStatement","src":"1940:39:26"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1887:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"1890:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1884:2:26"},"nodeType":"YulFunctionCall","src":"1884:13:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1898:19:26","statements":[{"nodeType":"YulAssignment","src":"1900:15:26","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1909:1:26"},{"kind":"number","nodeType":"YulLiteral","src":"1912:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1905:3:26"},"nodeType":"YulFunctionCall","src":"1905:10:26"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1900:1:26"}]}]},"pre":{"nodeType":"YulBlock","src":"1880:3:26","statements":[]},"src":"1876:113:26"},{"body":{"nodeType":"YulBlock","src":"2023:76:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2073:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"2078:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2069:3:26"},"nodeType":"YulFunctionCall","src":"2069:16:26"},{"kind":"number","nodeType":"YulLiteral","src":"2087:1:26","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2062:6:26"},"nodeType":"YulFunctionCall","src":"2062:27:26"},"nodeType":"YulExpressionStatement","src":"2062:27:26"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2004:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"2007:6:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2001:2:26"},"nodeType":"YulFunctionCall","src":"2001:13:26"},"nodeType":"YulIf","src":"1998:101:26"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1829:3:26","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1834:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"1839:6:26","type":""}],"src":"1798:307:26"},{"body":{"nodeType":"YulBlock","src":"2159:54:26","statements":[{"nodeType":"YulAssignment","src":"2169:38:26","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2187:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"2194:2:26","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2183:3:26"},"nodeType":"YulFunctionCall","src":"2183:14:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2203:2:26","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2199:3:26"},"nodeType":"YulFunctionCall","src":"2199:7:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2179:3:26"},"nodeType":"YulFunctionCall","src":"2179:28:26"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"2169:6:26"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2142:5:26","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"2152:6:26","type":""}],"src":"2111:102:26"},{"body":{"nodeType":"YulBlock","src":"2311:272:26","statements":[{"nodeType":"YulVariableDeclaration","src":"2321:53:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2368:5:26"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2335:32:26"},"nodeType":"YulFunctionCall","src":"2335:39:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2325:6:26","type":""}]},{"nodeType":"YulAssignment","src":"2383:78:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2449:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"2454:6:26"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2390:58:26"},"nodeType":"YulFunctionCall","src":"2390:71:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2383:3:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2496:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"2503:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2492:3:26"},"nodeType":"YulFunctionCall","src":"2492:16:26"},{"name":"pos","nodeType":"YulIdentifier","src":"2510:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"2515:6:26"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"2470:21:26"},"nodeType":"YulFunctionCall","src":"2470:52:26"},"nodeType":"YulExpressionStatement","src":"2470:52:26"},{"nodeType":"YulAssignment","src":"2531:46:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2542:3:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2569:6:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2547:21:26"},"nodeType":"YulFunctionCall","src":"2547:29:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2538:3:26"},"nodeType":"YulFunctionCall","src":"2538:39:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2531:3:26"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2292:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2299:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2307:3:26","type":""}],"src":"2219:364:26"},{"body":{"nodeType":"YulBlock","src":"2707:195:26","statements":[{"nodeType":"YulAssignment","src":"2717:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2729:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2740:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2725:3:26"},"nodeType":"YulFunctionCall","src":"2725:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2717:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2764:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"2775:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2760:3:26"},"nodeType":"YulFunctionCall","src":"2760:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2783:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"2789:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2779:3:26"},"nodeType":"YulFunctionCall","src":"2779:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2753:6:26"},"nodeType":"YulFunctionCall","src":"2753:47:26"},"nodeType":"YulExpressionStatement","src":"2753:47:26"},{"nodeType":"YulAssignment","src":"2809:86:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2881:6:26"},{"name":"tail","nodeType":"YulIdentifier","src":"2890:4:26"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2817:63:26"},"nodeType":"YulFunctionCall","src":"2817:78:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2809:4:26"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2679:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2691:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2702:4:26","type":""}],"src":"2589:313:26"},{"body":{"nodeType":"YulBlock","src":"2953:32:26","statements":[{"nodeType":"YulAssignment","src":"2963:16:26","value":{"name":"value","nodeType":"YulIdentifier","src":"2974:5:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2963:7:26"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2935:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2945:7:26","type":""}],"src":"2908:77:26"},{"body":{"nodeType":"YulBlock","src":"3034:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"3091:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3100:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3103:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3093:6:26"},"nodeType":"YulFunctionCall","src":"3093:12:26"},"nodeType":"YulExpressionStatement","src":"3093:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3057:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3082:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3064:17:26"},"nodeType":"YulFunctionCall","src":"3064:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3054:2:26"},"nodeType":"YulFunctionCall","src":"3054:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3047:6:26"},"nodeType":"YulFunctionCall","src":"3047:43:26"},"nodeType":"YulIf","src":"3044:63:26"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3027:5:26","type":""}],"src":"2991:122:26"},{"body":{"nodeType":"YulBlock","src":"3171:87:26","statements":[{"nodeType":"YulAssignment","src":"3181:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3203:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3190:12:26"},"nodeType":"YulFunctionCall","src":"3190:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3181:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3246:5:26"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"3219:26:26"},"nodeType":"YulFunctionCall","src":"3219:33:26"},"nodeType":"YulExpressionStatement","src":"3219:33:26"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3149:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"3157:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3165:5:26","type":""}],"src":"3119:139:26"},{"body":{"nodeType":"YulBlock","src":"3330:263:26","statements":[{"body":{"nodeType":"YulBlock","src":"3376:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3378:77:26"},"nodeType":"YulFunctionCall","src":"3378:79:26"},"nodeType":"YulExpressionStatement","src":"3378:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3351:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"3360:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3347:3:26"},"nodeType":"YulFunctionCall","src":"3347:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"3372:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3343:3:26"},"nodeType":"YulFunctionCall","src":"3343:32:26"},"nodeType":"YulIf","src":"3340:119:26"},{"nodeType":"YulBlock","src":"3469:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"3484:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"3498:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3488:6:26","type":""}]},{"nodeType":"YulAssignment","src":"3513:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3548:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"3559:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3544:3:26"},"nodeType":"YulFunctionCall","src":"3544:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3568:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3523:20:26"},"nodeType":"YulFunctionCall","src":"3523:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3513:6:26"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3300:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3311:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3323:6:26","type":""}],"src":"3264:329:26"},{"body":{"nodeType":"YulBlock","src":"3644:81:26","statements":[{"nodeType":"YulAssignment","src":"3654:65:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3669:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"3676:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3665:3:26"},"nodeType":"YulFunctionCall","src":"3665:54:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3654:7:26"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3626:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3636:7:26","type":""}],"src":"3599:126:26"},{"body":{"nodeType":"YulBlock","src":"3776:51:26","statements":[{"nodeType":"YulAssignment","src":"3786:35:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3815:5:26"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"3797:17:26"},"nodeType":"YulFunctionCall","src":"3797:24:26"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3786:7:26"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3758:5:26","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3768:7:26","type":""}],"src":"3731:96:26"},{"body":{"nodeType":"YulBlock","src":"3898:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3915:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3938:5:26"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"3920:17:26"},"nodeType":"YulFunctionCall","src":"3920:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3908:6:26"},"nodeType":"YulFunctionCall","src":"3908:37:26"},"nodeType":"YulExpressionStatement","src":"3908:37:26"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3886:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3893:3:26","type":""}],"src":"3833:118:26"},{"body":{"nodeType":"YulBlock","src":"4055:124:26","statements":[{"nodeType":"YulAssignment","src":"4065:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4077:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4088:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4073:3:26"},"nodeType":"YulFunctionCall","src":"4073:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4065:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4145:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4158:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"4169:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4154:3:26"},"nodeType":"YulFunctionCall","src":"4154:17:26"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4101:43:26"},"nodeType":"YulFunctionCall","src":"4101:71:26"},"nodeType":"YulExpressionStatement","src":"4101:71:26"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4027:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4039:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4050:4:26","type":""}],"src":"3957:222:26"},{"body":{"nodeType":"YulBlock","src":"4228:79:26","statements":[{"body":{"nodeType":"YulBlock","src":"4285:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4294:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4297:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4287:6:26"},"nodeType":"YulFunctionCall","src":"4287:12:26"},"nodeType":"YulExpressionStatement","src":"4287:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4251:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4276:5:26"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4258:17:26"},"nodeType":"YulFunctionCall","src":"4258:24:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4248:2:26"},"nodeType":"YulFunctionCall","src":"4248:35:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4241:6:26"},"nodeType":"YulFunctionCall","src":"4241:43:26"},"nodeType":"YulIf","src":"4238:63:26"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4221:5:26","type":""}],"src":"4185:122:26"},{"body":{"nodeType":"YulBlock","src":"4365:87:26","statements":[{"nodeType":"YulAssignment","src":"4375:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4397:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4384:12:26"},"nodeType":"YulFunctionCall","src":"4384:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4375:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4440:5:26"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"4413:26:26"},"nodeType":"YulFunctionCall","src":"4413:33:26"},"nodeType":"YulExpressionStatement","src":"4413:33:26"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4343:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"4351:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4359:5:26","type":""}],"src":"4313:139:26"},{"body":{"nodeType":"YulBlock","src":"4541:391:26","statements":[{"body":{"nodeType":"YulBlock","src":"4587:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4589:77:26"},"nodeType":"YulFunctionCall","src":"4589:79:26"},"nodeType":"YulExpressionStatement","src":"4589:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4562:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"4571:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4558:3:26"},"nodeType":"YulFunctionCall","src":"4558:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"4583:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4554:3:26"},"nodeType":"YulFunctionCall","src":"4554:32:26"},"nodeType":"YulIf","src":"4551:119:26"},{"nodeType":"YulBlock","src":"4680:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"4695:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"4709:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4699:6:26","type":""}]},{"nodeType":"YulAssignment","src":"4724:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4759:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"4770:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4755:3:26"},"nodeType":"YulFunctionCall","src":"4755:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4779:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4734:20:26"},"nodeType":"YulFunctionCall","src":"4734:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4724:6:26"}]}]},{"nodeType":"YulBlock","src":"4807:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"4822:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"4836:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4826:6:26","type":""}]},{"nodeType":"YulAssignment","src":"4852:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4887:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"4898:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4883:3:26"},"nodeType":"YulFunctionCall","src":"4883:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4907:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4862:20:26"},"nodeType":"YulFunctionCall","src":"4862:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4852:6:26"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4503:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4514:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4526:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4534:6:26","type":""}],"src":"4458:474:26"},{"body":{"nodeType":"YulBlock","src":"5003:53:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5020:3:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5043:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5025:17:26"},"nodeType":"YulFunctionCall","src":"5025:24:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5013:6:26"},"nodeType":"YulFunctionCall","src":"5013:37:26"},"nodeType":"YulExpressionStatement","src":"5013:37:26"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4991:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4998:3:26","type":""}],"src":"4938:118:26"},{"body":{"nodeType":"YulBlock","src":"5160:124:26","statements":[{"nodeType":"YulAssignment","src":"5170:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5182:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"5193:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5178:3:26"},"nodeType":"YulFunctionCall","src":"5178:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5170:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5250:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5263:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"5274:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5259:3:26"},"nodeType":"YulFunctionCall","src":"5259:17:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"5206:43:26"},"nodeType":"YulFunctionCall","src":"5206:71:26"},"nodeType":"YulExpressionStatement","src":"5206:71:26"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5132:9:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5144:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5155:4:26","type":""}],"src":"5062:222:26"},{"body":{"nodeType":"YulBlock","src":"5379:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5396:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5399:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5389:6:26"},"nodeType":"YulFunctionCall","src":"5389:12:26"},"nodeType":"YulExpressionStatement","src":"5389:12:26"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"5290:117:26"},{"body":{"nodeType":"YulBlock","src":"5441:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5458:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5461:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5451:6:26"},"nodeType":"YulFunctionCall","src":"5451:88:26"},"nodeType":"YulExpressionStatement","src":"5451:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5555:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5558:4:26","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5548:6:26"},"nodeType":"YulFunctionCall","src":"5548:15:26"},"nodeType":"YulExpressionStatement","src":"5548:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5579:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5582:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5572:6:26"},"nodeType":"YulFunctionCall","src":"5572:15:26"},"nodeType":"YulExpressionStatement","src":"5572:15:26"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"5413:180:26"},{"body":{"nodeType":"YulBlock","src":"5642:238:26","statements":[{"nodeType":"YulVariableDeclaration","src":"5652:58:26","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5674:6:26"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"5704:4:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"5682:21:26"},"nodeType":"YulFunctionCall","src":"5682:27:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5670:3:26"},"nodeType":"YulFunctionCall","src":"5670:40:26"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"5656:10:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"5821:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"5823:16:26"},"nodeType":"YulFunctionCall","src":"5823:18:26"},"nodeType":"YulExpressionStatement","src":"5823:18:26"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5764:10:26"},{"kind":"number","nodeType":"YulLiteral","src":"5776:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5761:2:26"},"nodeType":"YulFunctionCall","src":"5761:34:26"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5800:10:26"},{"name":"memPtr","nodeType":"YulIdentifier","src":"5812:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5797:2:26"},"nodeType":"YulFunctionCall","src":"5797:22:26"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"5758:2:26"},"nodeType":"YulFunctionCall","src":"5758:62:26"},"nodeType":"YulIf","src":"5755:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5859:2:26","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"5863:10:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5852:6:26"},"nodeType":"YulFunctionCall","src":"5852:22:26"},"nodeType":"YulExpressionStatement","src":"5852:22:26"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"5628:6:26","type":""},{"name":"size","nodeType":"YulTypedName","src":"5636:4:26","type":""}],"src":"5599:281:26"},{"body":{"nodeType":"YulBlock","src":"5927:88:26","statements":[{"nodeType":"YulAssignment","src":"5937:30:26","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"5947:18:26"},"nodeType":"YulFunctionCall","src":"5947:20:26"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5937:6:26"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5996:6:26"},{"name":"size","nodeType":"YulIdentifier","src":"6004:4:26"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"5976:19:26"},"nodeType":"YulFunctionCall","src":"5976:33:26"},"nodeType":"YulExpressionStatement","src":"5976:33:26"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"5911:4:26","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"5920:6:26","type":""}],"src":"5886:129:26"},{"body":{"nodeType":"YulBlock","src":"6130:229:26","statements":[{"body":{"nodeType":"YulBlock","src":"6235:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"6237:16:26"},"nodeType":"YulFunctionCall","src":"6237:18:26"},"nodeType":"YulExpressionStatement","src":"6237:18:26"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6207:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"6215:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6204:2:26"},"nodeType":"YulFunctionCall","src":"6204:30:26"},"nodeType":"YulIf","src":"6201:56:26"},{"nodeType":"YulAssignment","src":"6267:25:26","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6279:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"6287:4:26","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6275:3:26"},"nodeType":"YulFunctionCall","src":"6275:17:26"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"6267:4:26"}]},{"nodeType":"YulAssignment","src":"6329:23:26","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"6341:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"6347:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6337:3:26"},"nodeType":"YulFunctionCall","src":"6337:15:26"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"6329:4:26"}]}]},"name":"array_allocation_size_t_array$_t_struct$_ItemParam_$4790_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"6114:6:26","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"6125:4:26","type":""}],"src":"6021:338:26"},{"body":{"nodeType":"YulBlock","src":"6454:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6471:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6474:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6464:6:26"},"nodeType":"YulFunctionCall","src":"6464:12:26"},"nodeType":"YulExpressionStatement","src":"6464:12:26"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"6365:117:26"},{"body":{"nodeType":"YulBlock","src":"6577:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6594:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6597:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6587:6:26"},"nodeType":"YulFunctionCall","src":"6587:12:26"},"nodeType":"YulExpressionStatement","src":"6587:12:26"}]},"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulFunctionDefinition","src":"6488:117:26"},{"body":{"nodeType":"YulBlock","src":"6700:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6717:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6720:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6710:6:26"},"nodeType":"YulFunctionCall","src":"6710:12:26"},"nodeType":"YulExpressionStatement","src":"6710:12:26"}]},"name":"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421","nodeType":"YulFunctionDefinition","src":"6611:117:26"},{"body":{"nodeType":"YulBlock","src":"6823:28:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6840:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6843:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6833:6:26"},"nodeType":"YulFunctionCall","src":"6833:12:26"},"nodeType":"YulExpressionStatement","src":"6833:12:26"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"6734:117:26"},{"body":{"nodeType":"YulBlock","src":"6924:241:26","statements":[{"body":{"nodeType":"YulBlock","src":"7029:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7031:16:26"},"nodeType":"YulFunctionCall","src":"7031:18:26"},"nodeType":"YulExpressionStatement","src":"7031:18:26"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7001:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"7009:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6998:2:26"},"nodeType":"YulFunctionCall","src":"6998:30:26"},"nodeType":"YulIf","src":"6995:56:26"},{"nodeType":"YulAssignment","src":"7061:37:26","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7091:6:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"7069:21:26"},"nodeType":"YulFunctionCall","src":"7069:29:26"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"7061:4:26"}]},{"nodeType":"YulAssignment","src":"7135:23:26","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"7147:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"7153:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7143:3:26"},"nodeType":"YulFunctionCall","src":"7143:15:26"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"7135:4:26"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"6908:6:26","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"6919:4:26","type":""}],"src":"6857:308:26"},{"body":{"nodeType":"YulBlock","src":"7222:103:26","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7245:3:26"},{"name":"src","nodeType":"YulIdentifier","src":"7250:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"7255:6:26"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"7232:12:26"},"nodeType":"YulFunctionCall","src":"7232:30:26"},"nodeType":"YulExpressionStatement","src":"7232:30:26"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"7303:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"7308:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7299:3:26"},"nodeType":"YulFunctionCall","src":"7299:16:26"},{"kind":"number","nodeType":"YulLiteral","src":"7317:1:26","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7292:6:26"},"nodeType":"YulFunctionCall","src":"7292:27:26"},"nodeType":"YulExpressionStatement","src":"7292:27:26"}]},"name":"copy_calldata_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"7204:3:26","type":""},{"name":"dst","nodeType":"YulTypedName","src":"7209:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"7214:6:26","type":""}],"src":"7171:154:26"},{"body":{"nodeType":"YulBlock","src":"7415:328:26","statements":[{"nodeType":"YulAssignment","src":"7425:75:26","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7492:6:26"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"7450:41:26"},"nodeType":"YulFunctionCall","src":"7450:49:26"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"7434:15:26"},"nodeType":"YulFunctionCall","src":"7434:66:26"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"7425:5:26"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"7516:5:26"},{"name":"length","nodeType":"YulIdentifier","src":"7523:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7509:6:26"},"nodeType":"YulFunctionCall","src":"7509:21:26"},"nodeType":"YulExpressionStatement","src":"7509:21:26"},{"nodeType":"YulVariableDeclaration","src":"7539:27:26","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"7554:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"7561:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7550:3:26"},"nodeType":"YulFunctionCall","src":"7550:16:26"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"7543:3:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"7604:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"7606:77:26"},"nodeType":"YulFunctionCall","src":"7606:79:26"},"nodeType":"YulExpressionStatement","src":"7606:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7585:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"7590:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7581:3:26"},"nodeType":"YulFunctionCall","src":"7581:16:26"},{"name":"end","nodeType":"YulIdentifier","src":"7599:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7578:2:26"},"nodeType":"YulFunctionCall","src":"7578:25:26"},"nodeType":"YulIf","src":"7575:112:26"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7720:3:26"},{"name":"dst","nodeType":"YulIdentifier","src":"7725:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"7730:6:26"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"7696:23:26"},"nodeType":"YulFunctionCall","src":"7696:41:26"},"nodeType":"YulExpressionStatement","src":"7696:41:26"}]},"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"7388:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"7393:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"7401:3:26","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"7409:5:26","type":""}],"src":"7331:412:26"},{"body":{"nodeType":"YulBlock","src":"7825:278:26","statements":[{"body":{"nodeType":"YulBlock","src":"7874:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"7876:77:26"},"nodeType":"YulFunctionCall","src":"7876:79:26"},"nodeType":"YulExpressionStatement","src":"7876:79:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7853:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"7861:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7849:3:26"},"nodeType":"YulFunctionCall","src":"7849:17:26"},{"name":"end","nodeType":"YulIdentifier","src":"7868:3:26"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7845:3:26"},"nodeType":"YulFunctionCall","src":"7845:27:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7838:6:26"},"nodeType":"YulFunctionCall","src":"7838:35:26"},"nodeType":"YulIf","src":"7835:122:26"},{"nodeType":"YulVariableDeclaration","src":"7966:34:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7993:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7980:12:26"},"nodeType":"YulFunctionCall","src":"7980:20:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7970:6:26","type":""}]},{"nodeType":"YulAssignment","src":"8009:88:26","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8070:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"8078:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8066:3:26"},"nodeType":"YulFunctionCall","src":"8066:17:26"},{"name":"length","nodeType":"YulIdentifier","src":"8085:6:26"},{"name":"end","nodeType":"YulIdentifier","src":"8093:3:26"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"8018:47:26"},"nodeType":"YulFunctionCall","src":"8018:79:26"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8009:5:26"}]}]},"name":"abi_decode_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"7803:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"7811:3:26","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"7819:5:26","type":""}],"src":"7763:340:26"},{"body":{"nodeType":"YulBlock","src":"8223:666:26","statements":[{"body":{"nodeType":"YulBlock","src":"8267:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f","nodeType":"YulIdentifier","src":"8269:77:26"},"nodeType":"YulFunctionCall","src":"8269:79:26"},"nodeType":"YulExpressionStatement","src":"8269:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"8244:3:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"8249:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8240:3:26"},"nodeType":"YulFunctionCall","src":"8240:19:26"},{"kind":"number","nodeType":"YulLiteral","src":"8261:4:26","type":"","value":"0x40"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8236:3:26"},"nodeType":"YulFunctionCall","src":"8236:30:26"},"nodeType":"YulIf","src":"8233:117:26"},{"nodeType":"YulAssignment","src":"8359:30:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8384:4:26","type":"","value":"0x40"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"8368:15:26"},"nodeType":"YulFunctionCall","src":"8368:21:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"8359:5:26"}]},{"nodeType":"YulBlock","src":"8399:148:26","statements":[{"nodeType":"YulVariableDeclaration","src":"8432:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"8446:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8436:6:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8472:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"8479:4:26","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8468:3:26"},"nodeType":"YulFunctionCall","src":"8468:16:26"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8511:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"8522:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8507:3:26"},"nodeType":"YulFunctionCall","src":"8507:22:26"},{"name":"end","nodeType":"YulIdentifier","src":"8531:3:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"8486:20:26"},"nodeType":"YulFunctionCall","src":"8486:49:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8461:6:26"},"nodeType":"YulFunctionCall","src":"8461:75:26"},"nodeType":"YulExpressionStatement","src":"8461:75:26"}]},{"nodeType":"YulBlock","src":"8557:325:26","statements":[{"nodeType":"YulVariableDeclaration","src":"8596:46:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8627:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"8638:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8623:3:26"},"nodeType":"YulFunctionCall","src":"8623:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8610:12:26"},"nodeType":"YulFunctionCall","src":"8610:32:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"8600:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"8689:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421","nodeType":"YulIdentifier","src":"8691:77:26"},"nodeType":"YulFunctionCall","src":"8691:79:26"},"nodeType":"YulExpressionStatement","src":"8691:79:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8661:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"8669:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8658:2:26"},"nodeType":"YulFunctionCall","src":"8658:30:26"},"nodeType":"YulIf","src":"8655:117:26"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8797:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"8804:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8793:3:26"},"nodeType":"YulFunctionCall","src":"8793:16:26"},{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8846:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"8857:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8842:3:26"},"nodeType":"YulFunctionCall","src":"8842:22:26"},{"name":"end","nodeType":"YulIdentifier","src":"8866:3:26"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"8811:30:26"},"nodeType":"YulFunctionCall","src":"8811:59:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8786:6:26"},"nodeType":"YulFunctionCall","src":"8786:85:26"},"nodeType":"YulExpressionStatement","src":"8786:85:26"}]}]},"name":"abi_decode_t_struct$_ItemParam_$4790_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8198:9:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"8209:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"8217:5:26","type":""}],"src":"8141:748:26"},{"body":{"nodeType":"YulBlock","src":"9058:867:26","statements":[{"nodeType":"YulAssignment","src":"9068:117:26","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9177:6:26"}],"functionName":{"name":"array_allocation_size_t_array$_t_struct$_ItemParam_$4790_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"9093:83:26"},"nodeType":"YulFunctionCall","src":"9093:91:26"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"9077:15:26"},"nodeType":"YulFunctionCall","src":"9077:108:26"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"9068:5:26"}]},{"nodeType":"YulVariableDeclaration","src":"9194:16:26","value":{"name":"array","nodeType":"YulIdentifier","src":"9205:5:26"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"9198:3:26","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"9227:5:26"},{"name":"length","nodeType":"YulIdentifier","src":"9234:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9220:6:26"},"nodeType":"YulFunctionCall","src":"9220:21:26"},"nodeType":"YulExpressionStatement","src":"9220:21:26"},{"nodeType":"YulAssignment","src":"9250:23:26","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"9261:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"9268:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9257:3:26"},"nodeType":"YulFunctionCall","src":"9257:16:26"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"9250:3:26"}]},{"nodeType":"YulVariableDeclaration","src":"9283:44:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9301:6:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9313:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"9321:4:26","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"9309:3:26"},"nodeType":"YulFunctionCall","src":"9309:17:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9297:3:26"},"nodeType":"YulFunctionCall","src":"9297:30:26"},"variables":[{"name":"srcEnd","nodeType":"YulTypedName","src":"9287:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"9355:103:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"9369:77:26"},"nodeType":"YulFunctionCall","src":"9369:79:26"},"nodeType":"YulExpressionStatement","src":"9369:79:26"}]},"condition":{"arguments":[{"name":"srcEnd","nodeType":"YulIdentifier","src":"9342:6:26"},{"name":"end","nodeType":"YulIdentifier","src":"9350:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9339:2:26"},"nodeType":"YulFunctionCall","src":"9339:15:26"},"nodeType":"YulIf","src":"9336:122:26"},{"body":{"nodeType":"YulBlock","src":"9543:376:26","statements":[{"nodeType":"YulVariableDeclaration","src":"9558:36:26","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"9590:3:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9577:12:26"},"nodeType":"YulFunctionCall","src":"9577:17:26"},"variables":[{"name":"innerOffset","nodeType":"YulTypedName","src":"9562:11:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"9646:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"9648:77:26"},"nodeType":"YulFunctionCall","src":"9648:79:26"},"nodeType":"YulExpressionStatement","src":"9648:79:26"}]},"condition":{"arguments":[{"name":"innerOffset","nodeType":"YulIdentifier","src":"9613:11:26"},{"kind":"number","nodeType":"YulLiteral","src":"9626:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9610:2:26"},"nodeType":"YulFunctionCall","src":"9610:35:26"},"nodeType":"YulIf","src":"9607:122:26"},{"nodeType":"YulVariableDeclaration","src":"9742:42:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9764:6:26"},{"name":"innerOffset","nodeType":"YulIdentifier","src":"9772:11:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9760:3:26"},"nodeType":"YulFunctionCall","src":"9760:24:26"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"9746:10:26","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"9805:3:26"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"9858:10:26"},{"name":"end","nodeType":"YulIdentifier","src":"9870:3:26"}],"functionName":{"name":"abi_decode_t_struct$_ItemParam_$4790_memory_ptr","nodeType":"YulIdentifier","src":"9810:47:26"},"nodeType":"YulFunctionCall","src":"9810:64:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9798:6:26"},"nodeType":"YulFunctionCall","src":"9798:77:26"},"nodeType":"YulExpressionStatement","src":"9798:77:26"},{"nodeType":"YulAssignment","src":"9888:21:26","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"9899:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"9904:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9895:3:26"},"nodeType":"YulFunctionCall","src":"9895:14:26"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"9888:3:26"}]}]},"condition":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"9496:3:26"},{"name":"srcEnd","nodeType":"YulIdentifier","src":"9501:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9493:2:26"},"nodeType":"YulFunctionCall","src":"9493:15:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"9509:25:26","statements":[{"nodeType":"YulAssignment","src":"9511:21:26","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"9522:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"9527:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9518:3:26"},"nodeType":"YulFunctionCall","src":"9518:14:26"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"9511:3:26"}]}]},"pre":{"nodeType":"YulBlock","src":"9471:21:26","statements":[{"nodeType":"YulVariableDeclaration","src":"9473:17:26","value":{"name":"offset","nodeType":"YulIdentifier","src":"9484:6:26"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"9477:3:26","type":""}]}]},"src":"9467:452:26"}]},"name":"abi_decode_available_length_t_array$_t_struct$_ItemParam_$4790_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"9028:6:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"9036:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"9044:3:26","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"9052:5:26","type":""}],"src":"8929:996:26"},{"body":{"nodeType":"YulBlock","src":"10069:320:26","statements":[{"body":{"nodeType":"YulBlock","src":"10118:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"10120:77:26"},"nodeType":"YulFunctionCall","src":"10120:79:26"},"nodeType":"YulExpressionStatement","src":"10120:79:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10097:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"10105:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10093:3:26"},"nodeType":"YulFunctionCall","src":"10093:17:26"},{"name":"end","nodeType":"YulIdentifier","src":"10112:3:26"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10089:3:26"},"nodeType":"YulFunctionCall","src":"10089:27:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10082:6:26"},"nodeType":"YulFunctionCall","src":"10082:35:26"},"nodeType":"YulIf","src":"10079:122:26"},{"nodeType":"YulVariableDeclaration","src":"10210:34:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10237:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10224:12:26"},"nodeType":"YulFunctionCall","src":"10224:20:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"10214:6:26","type":""}]},{"nodeType":"YulAssignment","src":"10253:130:26","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10356:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"10364:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10352:3:26"},"nodeType":"YulFunctionCall","src":"10352:17:26"},{"name":"length","nodeType":"YulIdentifier","src":"10371:6:26"},{"name":"end","nodeType":"YulIdentifier","src":"10379:3:26"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_struct$_ItemParam_$4790_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"10262:89:26"},"nodeType":"YulFunctionCall","src":"10262:121:26"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"10253:5:26"}]}]},"name":"abi_decode_t_array$_t_struct$_ItemParam_$4790_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"10047:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"10055:3:26","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"10063:5:26","type":""}],"src":"9965:424:26"},{"body":{"nodeType":"YulBlock","src":"10513:475:26","statements":[{"body":{"nodeType":"YulBlock","src":"10559:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10561:77:26"},"nodeType":"YulFunctionCall","src":"10561:79:26"},"nodeType":"YulExpressionStatement","src":"10561:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10534:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"10543:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10530:3:26"},"nodeType":"YulFunctionCall","src":"10530:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"10555:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10526:3:26"},"nodeType":"YulFunctionCall","src":"10526:32:26"},"nodeType":"YulIf","src":"10523:119:26"},{"nodeType":"YulBlock","src":"10652:329:26","statements":[{"nodeType":"YulVariableDeclaration","src":"10667:45:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10698:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"10709:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10694:3:26"},"nodeType":"YulFunctionCall","src":"10694:17:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10681:12:26"},"nodeType":"YulFunctionCall","src":"10681:31:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10671:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"10759:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"10761:77:26"},"nodeType":"YulFunctionCall","src":"10761:79:26"},"nodeType":"YulExpressionStatement","src":"10761:79:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"10731:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"10739:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10728:2:26"},"nodeType":"YulFunctionCall","src":"10728:30:26"},"nodeType":"YulIf","src":"10725:117:26"},{"nodeType":"YulAssignment","src":"10856:115:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10943:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"10954:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10939:3:26"},"nodeType":"YulFunctionCall","src":"10939:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10963:7:26"}],"functionName":{"name":"abi_decode_t_array$_t_struct$_ItemParam_$4790_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"10866:72:26"},"nodeType":"YulFunctionCall","src":"10866:105:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10856:6:26"}]}]}]},"name":"abi_decode_tuple_t_array$_t_struct$_ItemParam_$4790_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10483:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10494:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10506:6:26","type":""}],"src":"10395:593:26"},{"body":{"nodeType":"YulBlock","src":"11094:519:26","statements":[{"body":{"nodeType":"YulBlock","src":"11140:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"11142:77:26"},"nodeType":"YulFunctionCall","src":"11142:79:26"},"nodeType":"YulExpressionStatement","src":"11142:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11115:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"11124:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11111:3:26"},"nodeType":"YulFunctionCall","src":"11111:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"11136:2:26","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11107:3:26"},"nodeType":"YulFunctionCall","src":"11107:32:26"},"nodeType":"YulIf","src":"11104:119:26"},{"nodeType":"YulBlock","src":"11233:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"11248:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"11262:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11252:6:26","type":""}]},{"nodeType":"YulAssignment","src":"11277:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11312:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"11323:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11308:3:26"},"nodeType":"YulFunctionCall","src":"11308:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11332:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"11287:20:26"},"nodeType":"YulFunctionCall","src":"11287:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11277:6:26"}]}]},{"nodeType":"YulBlock","src":"11360:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"11375:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"11389:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11379:6:26","type":""}]},{"nodeType":"YulAssignment","src":"11405:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11440:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"11451:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11436:3:26"},"nodeType":"YulFunctionCall","src":"11436:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11460:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"11415:20:26"},"nodeType":"YulFunctionCall","src":"11415:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11405:6:26"}]}]},{"nodeType":"YulBlock","src":"11488:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"11503:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"11517:2:26","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11507:6:26","type":""}]},{"nodeType":"YulAssignment","src":"11533:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11568:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"11579:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11564:3:26"},"nodeType":"YulFunctionCall","src":"11564:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11588:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"11543:20:26"},"nodeType":"YulFunctionCall","src":"11543:53:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"11533:6:26"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11048:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11059:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11071:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11079:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11087:6:26","type":""}],"src":"10994:619:26"},{"body":{"nodeType":"YulBlock","src":"11685:263:26","statements":[{"body":{"nodeType":"YulBlock","src":"11731:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"11733:77:26"},"nodeType":"YulFunctionCall","src":"11733:79:26"},"nodeType":"YulExpressionStatement","src":"11733:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11706:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"11715:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11702:3:26"},"nodeType":"YulFunctionCall","src":"11702:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"11727:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11698:3:26"},"nodeType":"YulFunctionCall","src":"11698:32:26"},"nodeType":"YulIf","src":"11695:119:26"},{"nodeType":"YulBlock","src":"11824:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"11839:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"11853:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"11843:6:26","type":""}]},{"nodeType":"YulAssignment","src":"11868:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11903:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"11914:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11899:3:26"},"nodeType":"YulFunctionCall","src":"11899:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"11923:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"11878:20:26"},"nodeType":"YulFunctionCall","src":"11878:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11868:6:26"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11655:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11666:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11678:6:26","type":""}],"src":"11619:329:26"},{"body":{"nodeType":"YulBlock","src":"11994:76:26","statements":[{"body":{"nodeType":"YulBlock","src":"12048:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12057:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12060:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12050:6:26"},"nodeType":"YulFunctionCall","src":"12050:12:26"},"nodeType":"YulExpressionStatement","src":"12050:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12017:5:26"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12039:5:26"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"12024:14:26"},"nodeType":"YulFunctionCall","src":"12024:21:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"12014:2:26"},"nodeType":"YulFunctionCall","src":"12014:32:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12007:6:26"},"nodeType":"YulFunctionCall","src":"12007:40:26"},"nodeType":"YulIf","src":"12004:60:26"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11987:5:26","type":""}],"src":"11954:116:26"},{"body":{"nodeType":"YulBlock","src":"12125:84:26","statements":[{"nodeType":"YulAssignment","src":"12135:29:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"12157:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"12144:12:26"},"nodeType":"YulFunctionCall","src":"12144:20:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"12135:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12197:5:26"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"12173:23:26"},"nodeType":"YulFunctionCall","src":"12173:30:26"},"nodeType":"YulExpressionStatement","src":"12173:30:26"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"12103:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"12111:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"12119:5:26","type":""}],"src":"12076:133:26"},{"body":{"nodeType":"YulBlock","src":"12295:388:26","statements":[{"body":{"nodeType":"YulBlock","src":"12341:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"12343:77:26"},"nodeType":"YulFunctionCall","src":"12343:79:26"},"nodeType":"YulExpressionStatement","src":"12343:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"12316:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"12325:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12312:3:26"},"nodeType":"YulFunctionCall","src":"12312:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"12337:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"12308:3:26"},"nodeType":"YulFunctionCall","src":"12308:32:26"},"nodeType":"YulIf","src":"12305:119:26"},{"nodeType":"YulBlock","src":"12434:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"12449:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"12463:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12453:6:26","type":""}]},{"nodeType":"YulAssignment","src":"12478:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12513:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"12524:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12509:3:26"},"nodeType":"YulFunctionCall","src":"12509:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12533:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"12488:20:26"},"nodeType":"YulFunctionCall","src":"12488:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"12478:6:26"}]}]},{"nodeType":"YulBlock","src":"12561:115:26","statements":[{"nodeType":"YulVariableDeclaration","src":"12576:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"12590:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"12580:6:26","type":""}]},{"nodeType":"YulAssignment","src":"12606:60:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12638:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"12649:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12634:3:26"},"nodeType":"YulFunctionCall","src":"12634:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"12658:7:26"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"12616:17:26"},"nodeType":"YulFunctionCall","src":"12616:50:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"12606:6:26"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12257:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"12268:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"12280:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12288:6:26","type":""}],"src":"12215:468:26"},{"body":{"nodeType":"YulBlock","src":"12755:241:26","statements":[{"body":{"nodeType":"YulBlock","src":"12860:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"12862:16:26"},"nodeType":"YulFunctionCall","src":"12862:18:26"},"nodeType":"YulExpressionStatement","src":"12862:18:26"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12832:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"12840:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12829:2:26"},"nodeType":"YulFunctionCall","src":"12829:30:26"},"nodeType":"YulIf","src":"12826:56:26"},{"nodeType":"YulAssignment","src":"12892:37:26","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"12922:6:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"12900:21:26"},"nodeType":"YulFunctionCall","src":"12900:29:26"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"12892:4:26"}]},{"nodeType":"YulAssignment","src":"12966:23:26","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"12978:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"12984:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12974:3:26"},"nodeType":"YulFunctionCall","src":"12974:15:26"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"12966:4:26"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"12739:6:26","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"12750:4:26","type":""}],"src":"12689:307:26"},{"body":{"nodeType":"YulBlock","src":"13085:327:26","statements":[{"nodeType":"YulAssignment","src":"13095:74:26","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"13161:6:26"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"13120:40:26"},"nodeType":"YulFunctionCall","src":"13120:48:26"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"13104:15:26"},"nodeType":"YulFunctionCall","src":"13104:65:26"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"13095:5:26"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"13185:5:26"},{"name":"length","nodeType":"YulIdentifier","src":"13192:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13178:6:26"},"nodeType":"YulFunctionCall","src":"13178:21:26"},"nodeType":"YulExpressionStatement","src":"13178:21:26"},{"nodeType":"YulVariableDeclaration","src":"13208:27:26","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"13223:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"13230:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13219:3:26"},"nodeType":"YulFunctionCall","src":"13219:16:26"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"13212:3:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"13273:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"13275:77:26"},"nodeType":"YulFunctionCall","src":"13275:79:26"},"nodeType":"YulExpressionStatement","src":"13275:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"13254:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"13259:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13250:3:26"},"nodeType":"YulFunctionCall","src":"13250:16:26"},{"name":"end","nodeType":"YulIdentifier","src":"13268:3:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13247:2:26"},"nodeType":"YulFunctionCall","src":"13247:25:26"},"nodeType":"YulIf","src":"13244:112:26"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"13389:3:26"},{"name":"dst","nodeType":"YulIdentifier","src":"13394:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"13399:6:26"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"13365:23:26"},"nodeType":"YulFunctionCall","src":"13365:41:26"},"nodeType":"YulExpressionStatement","src":"13365:41:26"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"13058:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"13063:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"13071:3:26","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"13079:5:26","type":""}],"src":"13002:410:26"},{"body":{"nodeType":"YulBlock","src":"13492:277:26","statements":[{"body":{"nodeType":"YulBlock","src":"13541:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"13543:77:26"},"nodeType":"YulFunctionCall","src":"13543:79:26"},"nodeType":"YulExpressionStatement","src":"13543:79:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13520:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"13528:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13516:3:26"},"nodeType":"YulFunctionCall","src":"13516:17:26"},{"name":"end","nodeType":"YulIdentifier","src":"13535:3:26"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13512:3:26"},"nodeType":"YulFunctionCall","src":"13512:27:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13505:6:26"},"nodeType":"YulFunctionCall","src":"13505:35:26"},"nodeType":"YulIf","src":"13502:122:26"},{"nodeType":"YulVariableDeclaration","src":"13633:34:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13660:6:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"13647:12:26"},"nodeType":"YulFunctionCall","src":"13647:20:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"13637:6:26","type":""}]},{"nodeType":"YulAssignment","src":"13676:87:26","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"13736:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"13744:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13732:3:26"},"nodeType":"YulFunctionCall","src":"13732:17:26"},{"name":"length","nodeType":"YulIdentifier","src":"13751:6:26"},{"name":"end","nodeType":"YulIdentifier","src":"13759:3:26"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"13685:46:26"},"nodeType":"YulFunctionCall","src":"13685:78:26"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"13676:5:26"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"13470:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"13478:3:26","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"13486:5:26","type":""}],"src":"13431:338:26"},{"body":{"nodeType":"YulBlock","src":"13901:817:26","statements":[{"body":{"nodeType":"YulBlock","src":"13948:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"13950:77:26"},"nodeType":"YulFunctionCall","src":"13950:79:26"},"nodeType":"YulExpressionStatement","src":"13950:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"13922:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"13931:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13918:3:26"},"nodeType":"YulFunctionCall","src":"13918:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"13943:3:26","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"13914:3:26"},"nodeType":"YulFunctionCall","src":"13914:33:26"},"nodeType":"YulIf","src":"13911:120:26"},{"nodeType":"YulBlock","src":"14041:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"14056:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"14070:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14060:6:26","type":""}]},{"nodeType":"YulAssignment","src":"14085:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14120:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"14131:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14116:3:26"},"nodeType":"YulFunctionCall","src":"14116:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14140:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"14095:20:26"},"nodeType":"YulFunctionCall","src":"14095:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14085:6:26"}]}]},{"nodeType":"YulBlock","src":"14168:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"14183:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"14197:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14187:6:26","type":""}]},{"nodeType":"YulAssignment","src":"14213:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14248:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"14259:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14244:3:26"},"nodeType":"YulFunctionCall","src":"14244:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14268:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"14223:20:26"},"nodeType":"YulFunctionCall","src":"14223:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"14213:6:26"}]}]},{"nodeType":"YulBlock","src":"14296:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"14311:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"14325:2:26","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14315:6:26","type":""}]},{"nodeType":"YulAssignment","src":"14341:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14376:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"14387:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14372:3:26"},"nodeType":"YulFunctionCall","src":"14372:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14396:7:26"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"14351:20:26"},"nodeType":"YulFunctionCall","src":"14351:53:26"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"14341:6:26"}]}]},{"nodeType":"YulBlock","src":"14424:287:26","statements":[{"nodeType":"YulVariableDeclaration","src":"14439:46:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14470:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"14481:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14466:3:26"},"nodeType":"YulFunctionCall","src":"14466:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"14453:12:26"},"nodeType":"YulFunctionCall","src":"14453:32:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14443:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"14532:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"14534:77:26"},"nodeType":"YulFunctionCall","src":"14534:79:26"},"nodeType":"YulExpressionStatement","src":"14534:79:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"14504:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"14512:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"14501:2:26"},"nodeType":"YulFunctionCall","src":"14501:30:26"},"nodeType":"YulIf","src":"14498:117:26"},{"nodeType":"YulAssignment","src":"14629:72:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14673:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"14684:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14669:3:26"},"nodeType":"YulFunctionCall","src":"14669:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"14693:7:26"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"14639:29:26"},"nodeType":"YulFunctionCall","src":"14639:62:26"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"14629:6:26"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13847:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"13858:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"13870:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13878:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"13886:6:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"13894:6:26","type":""}],"src":"13775:943:26"},{"body":{"nodeType":"YulBlock","src":"14817:561:26","statements":[{"body":{"nodeType":"YulBlock","src":"14863:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"14865:77:26"},"nodeType":"YulFunctionCall","src":"14865:79:26"},"nodeType":"YulExpressionStatement","src":"14865:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14838:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"14847:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14834:3:26"},"nodeType":"YulFunctionCall","src":"14834:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"14859:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14830:3:26"},"nodeType":"YulFunctionCall","src":"14830:32:26"},"nodeType":"YulIf","src":"14827:119:26"},{"nodeType":"YulBlock","src":"14956:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"14971:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"14985:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"14975:6:26","type":""}]},{"nodeType":"YulAssignment","src":"15000:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15035:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"15046:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15031:3:26"},"nodeType":"YulFunctionCall","src":"15031:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15055:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"15010:20:26"},"nodeType":"YulFunctionCall","src":"15010:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"15000:6:26"}]}]},{"nodeType":"YulBlock","src":"15083:288:26","statements":[{"nodeType":"YulVariableDeclaration","src":"15098:46:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15129:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"15140:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15125:3:26"},"nodeType":"YulFunctionCall","src":"15125:18:26"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"15112:12:26"},"nodeType":"YulFunctionCall","src":"15112:32:26"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15102:6:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"15191:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"15193:77:26"},"nodeType":"YulFunctionCall","src":"15193:79:26"},"nodeType":"YulExpressionStatement","src":"15193:79:26"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"15163:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"15171:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15160:2:26"},"nodeType":"YulFunctionCall","src":"15160:30:26"},"nodeType":"YulIf","src":"15157:117:26"},{"nodeType":"YulAssignment","src":"15288:73:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15333:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"15344:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15329:3:26"},"nodeType":"YulFunctionCall","src":"15329:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15353:7:26"}],"functionName":{"name":"abi_decode_t_string_memory_ptr","nodeType":"YulIdentifier","src":"15298:30:26"},"nodeType":"YulFunctionCall","src":"15298:63:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"15288:6:26"}]}]}]},"name":"abi_decode_tuple_t_addresst_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14779:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14790:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14802:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14810:6:26","type":""}],"src":"14724:654:26"},{"body":{"nodeType":"YulBlock","src":"15467:391:26","statements":[{"body":{"nodeType":"YulBlock","src":"15513:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"15515:77:26"},"nodeType":"YulFunctionCall","src":"15515:79:26"},"nodeType":"YulExpressionStatement","src":"15515:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"15488:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"15497:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15484:3:26"},"nodeType":"YulFunctionCall","src":"15484:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"15509:2:26","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"15480:3:26"},"nodeType":"YulFunctionCall","src":"15480:32:26"},"nodeType":"YulIf","src":"15477:119:26"},{"nodeType":"YulBlock","src":"15606:117:26","statements":[{"nodeType":"YulVariableDeclaration","src":"15621:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"15635:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15625:6:26","type":""}]},{"nodeType":"YulAssignment","src":"15650:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15685:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"15696:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15681:3:26"},"nodeType":"YulFunctionCall","src":"15681:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15705:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"15660:20:26"},"nodeType":"YulFunctionCall","src":"15660:53:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"15650:6:26"}]}]},{"nodeType":"YulBlock","src":"15733:118:26","statements":[{"nodeType":"YulVariableDeclaration","src":"15748:16:26","value":{"kind":"number","nodeType":"YulLiteral","src":"15762:2:26","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"15752:6:26","type":""}]},{"nodeType":"YulAssignment","src":"15778:63:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15813:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"15824:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15809:3:26"},"nodeType":"YulFunctionCall","src":"15809:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"15833:7:26"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"15788:20:26"},"nodeType":"YulFunctionCall","src":"15788:53:26"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"15778:6:26"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15429:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"15440:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"15452:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15460:6:26","type":""}],"src":"15384:474:26"},{"body":{"nodeType":"YulBlock","src":"15892:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15909:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15912:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15902:6:26"},"nodeType":"YulFunctionCall","src":"15902:88:26"},"nodeType":"YulExpressionStatement","src":"15902:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16006:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"16009:4:26","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15999:6:26"},"nodeType":"YulFunctionCall","src":"15999:15:26"},"nodeType":"YulExpressionStatement","src":"15999:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16030:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16033:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16023:6:26"},"nodeType":"YulFunctionCall","src":"16023:15:26"},"nodeType":"YulExpressionStatement","src":"16023:15:26"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"15864:180:26"},{"body":{"nodeType":"YulBlock","src":"16101:269:26","statements":[{"nodeType":"YulAssignment","src":"16111:22:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"16125:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"16131:1:26","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"16121:3:26"},"nodeType":"YulFunctionCall","src":"16121:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"16111:6:26"}]},{"nodeType":"YulVariableDeclaration","src":"16142:38:26","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"16172:4:26"},{"kind":"number","nodeType":"YulLiteral","src":"16178:1:26","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16168:3:26"},"nodeType":"YulFunctionCall","src":"16168:12:26"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"16146:18:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"16219:51:26","statements":[{"nodeType":"YulAssignment","src":"16233:27:26","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"16247:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"16255:4:26","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16243:3:26"},"nodeType":"YulFunctionCall","src":"16243:17:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"16233:6:26"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"16199:18:26"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"16192:6:26"},"nodeType":"YulFunctionCall","src":"16192:26:26"},"nodeType":"YulIf","src":"16189:81:26"},{"body":{"nodeType":"YulBlock","src":"16322:42:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"16336:16:26"},"nodeType":"YulFunctionCall","src":"16336:18:26"},"nodeType":"YulExpressionStatement","src":"16336:18:26"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"16286:18:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"16309:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"16317:2:26","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"16306:2:26"},"nodeType":"YulFunctionCall","src":"16306:14:26"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"16283:2:26"},"nodeType":"YulFunctionCall","src":"16283:38:26"},"nodeType":"YulIf","src":"16280:84:26"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"16085:4:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"16094:6:26","type":""}],"src":"16050:320:26"},{"body":{"nodeType":"YulBlock","src":"16482:114:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16504:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"16512:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16500:3:26"},"nodeType":"YulFunctionCall","src":"16500:14:26"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"16516:34:26","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16493:6:26"},"nodeType":"YulFunctionCall","src":"16493:58:26"},"nodeType":"YulExpressionStatement","src":"16493:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16572:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"16580:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16568:3:26"},"nodeType":"YulFunctionCall","src":"16568:15:26"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"16585:3:26","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16561:6:26"},"nodeType":"YulFunctionCall","src":"16561:28:26"},"nodeType":"YulExpressionStatement","src":"16561:28:26"}]},"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"16474:6:26","type":""}],"src":"16376:220:26"},{"body":{"nodeType":"YulBlock","src":"16748:220:26","statements":[{"nodeType":"YulAssignment","src":"16758:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16824:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"16829:2:26","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16765:58:26"},"nodeType":"YulFunctionCall","src":"16765:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16758:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16930:3:26"}],"functionName":{"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulIdentifier","src":"16841:88:26"},"nodeType":"YulFunctionCall","src":"16841:93:26"},"nodeType":"YulExpressionStatement","src":"16841:93:26"},{"nodeType":"YulAssignment","src":"16943:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16954:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"16959:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16950:3:26"},"nodeType":"YulFunctionCall","src":"16950:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16943:3:26"}]}]},"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16736:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16744:3:26","type":""}],"src":"16602:366:26"},{"body":{"nodeType":"YulBlock","src":"17145:248:26","statements":[{"nodeType":"YulAssignment","src":"17155:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17167:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"17178:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17163:3:26"},"nodeType":"YulFunctionCall","src":"17163:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17155:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17202:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"17213:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17198:3:26"},"nodeType":"YulFunctionCall","src":"17198:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17221:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"17227:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17217:3:26"},"nodeType":"YulFunctionCall","src":"17217:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17191:6:26"},"nodeType":"YulFunctionCall","src":"17191:47:26"},"nodeType":"YulExpressionStatement","src":"17191:47:26"},{"nodeType":"YulAssignment","src":"17247:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17381:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17255:124:26"},"nodeType":"YulFunctionCall","src":"17255:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17247:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17125:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17140:4:26","type":""}],"src":"16974:419:26"},{"body":{"nodeType":"YulBlock","src":"17505:142:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17527:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"17535:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17523:3:26"},"nodeType":"YulFunctionCall","src":"17523:14:26"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"17539:34:26","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17516:6:26"},"nodeType":"YulFunctionCall","src":"17516:58:26"},"nodeType":"YulExpressionStatement","src":"17516:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17595:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"17603:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17591:3:26"},"nodeType":"YulFunctionCall","src":"17591:15:26"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"17608:31:26","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17584:6:26"},"nodeType":"YulFunctionCall","src":"17584:56:26"},"nodeType":"YulExpressionStatement","src":"17584:56:26"}]},"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17497:6:26","type":""}],"src":"17399:248:26"},{"body":{"nodeType":"YulBlock","src":"17799:220:26","statements":[{"nodeType":"YulAssignment","src":"17809:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17875:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"17880:2:26","type":"","value":"61"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17816:58:26"},"nodeType":"YulFunctionCall","src":"17816:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17809:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17981:3:26"}],"functionName":{"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulIdentifier","src":"17892:88:26"},"nodeType":"YulFunctionCall","src":"17892:93:26"},"nodeType":"YulExpressionStatement","src":"17892:93:26"},{"nodeType":"YulAssignment","src":"17994:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18005:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"18010:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18001:3:26"},"nodeType":"YulFunctionCall","src":"18001:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17994:3:26"}]}]},"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17787:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17795:3:26","type":""}],"src":"17653:366:26"},{"body":{"nodeType":"YulBlock","src":"18196:248:26","statements":[{"nodeType":"YulAssignment","src":"18206:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18218:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"18229:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18214:3:26"},"nodeType":"YulFunctionCall","src":"18214:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18206:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18253:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"18264:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18249:3:26"},"nodeType":"YulFunctionCall","src":"18249:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18272:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"18278:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18268:3:26"},"nodeType":"YulFunctionCall","src":"18268:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18242:6:26"},"nodeType":"YulFunctionCall","src":"18242:47:26"},"nodeType":"YulExpressionStatement","src":"18242:47:26"},{"nodeType":"YulAssignment","src":"18298:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18432:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18306:124:26"},"nodeType":"YulFunctionCall","src":"18306:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18298:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18176:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18191:4:26","type":""}],"src":"18025:419:26"},{"body":{"nodeType":"YulBlock","src":"18478:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18495:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18498:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18488:6:26"},"nodeType":"YulFunctionCall","src":"18488:88:26"},"nodeType":"YulExpressionStatement","src":"18488:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18592:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"18595:4:26","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18585:6:26"},"nodeType":"YulFunctionCall","src":"18585:15:26"},"nodeType":"YulExpressionStatement","src":"18585:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18616:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18619:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18609:6:26"},"nodeType":"YulFunctionCall","src":"18609:15:26"},"nodeType":"YulExpressionStatement","src":"18609:15:26"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"18450:180:26"},{"body":{"nodeType":"YulBlock","src":"18664:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18681:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18684:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18674:6:26"},"nodeType":"YulFunctionCall","src":"18674:88:26"},"nodeType":"YulExpressionStatement","src":"18674:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18778:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"18781:4:26","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18771:6:26"},"nodeType":"YulFunctionCall","src":"18771:15:26"},"nodeType":"YulExpressionStatement","src":"18771:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18802:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18805:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18795:6:26"},"nodeType":"YulFunctionCall","src":"18795:15:26"},"nodeType":"YulExpressionStatement","src":"18795:15:26"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"18636:180:26"},{"body":{"nodeType":"YulBlock","src":"18865:190:26","statements":[{"nodeType":"YulAssignment","src":"18875:33:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18902:5:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"18884:17:26"},"nodeType":"YulFunctionCall","src":"18884:24:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"18875:5:26"}]},{"body":{"nodeType":"YulBlock","src":"18998:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"19000:16:26"},"nodeType":"YulFunctionCall","src":"19000:18:26"},"nodeType":"YulExpressionStatement","src":"19000:18:26"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18923:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"18930:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"18920:2:26"},"nodeType":"YulFunctionCall","src":"18920:77:26"},"nodeType":"YulIf","src":"18917:103:26"},{"nodeType":"YulAssignment","src":"19029:20:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19040:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"19047:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19036:3:26"},"nodeType":"YulFunctionCall","src":"19036:13:26"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"19029:3:26"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18851:5:26","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"18861:3:26","type":""}],"src":"18822:233:26"},{"body":{"nodeType":"YulBlock","src":"19167:126:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19189:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"19197:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19185:3:26"},"nodeType":"YulFunctionCall","src":"19185:14:26"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"19201:34:26","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19178:6:26"},"nodeType":"YulFunctionCall","src":"19178:58:26"},"nodeType":"YulExpressionStatement","src":"19178:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19257:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"19265:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19253:3:26"},"nodeType":"YulFunctionCall","src":"19253:15:26"},{"hexValue":"72206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"19270:15:26","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19246:6:26"},"nodeType":"YulFunctionCall","src":"19246:40:26"},"nodeType":"YulExpressionStatement","src":"19246:40:26"}]},"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19159:6:26","type":""}],"src":"19061:232:26"},{"body":{"nodeType":"YulBlock","src":"19445:220:26","statements":[{"nodeType":"YulAssignment","src":"19455:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19521:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"19526:2:26","type":"","value":"45"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19462:58:26"},"nodeType":"YulFunctionCall","src":"19462:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19455:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19627:3:26"}],"functionName":{"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulIdentifier","src":"19538:88:26"},"nodeType":"YulFunctionCall","src":"19538:93:26"},"nodeType":"YulExpressionStatement","src":"19538:93:26"},{"nodeType":"YulAssignment","src":"19640:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19651:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"19656:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19647:3:26"},"nodeType":"YulFunctionCall","src":"19647:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19640:3:26"}]}]},"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19433:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19441:3:26","type":""}],"src":"19299:366:26"},{"body":{"nodeType":"YulBlock","src":"19842:248:26","statements":[{"nodeType":"YulAssignment","src":"19852:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19864:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"19875:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19860:3:26"},"nodeType":"YulFunctionCall","src":"19860:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19852:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19899:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"19910:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19895:3:26"},"nodeType":"YulFunctionCall","src":"19895:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19918:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"19924:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19914:3:26"},"nodeType":"YulFunctionCall","src":"19914:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19888:6:26"},"nodeType":"YulFunctionCall","src":"19888:47:26"},"nodeType":"YulExpressionStatement","src":"19888:47:26"},{"nodeType":"YulAssignment","src":"19944:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20078:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19952:124:26"},"nodeType":"YulFunctionCall","src":"19952:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19944:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19822:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19837:4:26","type":""}],"src":"19671:419:26"},{"body":{"nodeType":"YulBlock","src":"20202:124:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20224:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"20232:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20220:3:26"},"nodeType":"YulFunctionCall","src":"20220:14:26"},{"hexValue":"455243373231456e756d657261626c653a206f776e657220696e646578206f75","kind":"string","nodeType":"YulLiteral","src":"20236:34:26","type":"","value":"ERC721Enumerable: owner index ou"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20213:6:26"},"nodeType":"YulFunctionCall","src":"20213:58:26"},"nodeType":"YulExpressionStatement","src":"20213:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20292:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"20300:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20288:3:26"},"nodeType":"YulFunctionCall","src":"20288:15:26"},{"hexValue":"74206f6620626f756e6473","kind":"string","nodeType":"YulLiteral","src":"20305:13:26","type":"","value":"t of bounds"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20281:6:26"},"nodeType":"YulFunctionCall","src":"20281:38:26"},"nodeType":"YulExpressionStatement","src":"20281:38:26"}]},"name":"store_literal_in_memory_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20194:6:26","type":""}],"src":"20096:230:26"},{"body":{"nodeType":"YulBlock","src":"20478:220:26","statements":[{"nodeType":"YulAssignment","src":"20488:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20554:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"20559:2:26","type":"","value":"43"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20495:58:26"},"nodeType":"YulFunctionCall","src":"20495:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20488:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20660:3:26"}],"functionName":{"name":"store_literal_in_memory_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c","nodeType":"YulIdentifier","src":"20571:88:26"},"nodeType":"YulFunctionCall","src":"20571:93:26"},"nodeType":"YulExpressionStatement","src":"20571:93:26"},{"nodeType":"YulAssignment","src":"20673:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20684:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"20689:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20680:3:26"},"nodeType":"YulFunctionCall","src":"20680:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20673:3:26"}]}]},"name":"abi_encode_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20466:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20474:3:26","type":""}],"src":"20332:366:26"},{"body":{"nodeType":"YulBlock","src":"20875:248:26","statements":[{"nodeType":"YulAssignment","src":"20885:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20897:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"20908:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20893:3:26"},"nodeType":"YulFunctionCall","src":"20893:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20885:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20932:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"20943:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20928:3:26"},"nodeType":"YulFunctionCall","src":"20928:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20951:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"20957:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20947:3:26"},"nodeType":"YulFunctionCall","src":"20947:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20921:6:26"},"nodeType":"YulFunctionCall","src":"20921:47:26"},"nodeType":"YulExpressionStatement","src":"20921:47:26"},{"nodeType":"YulAssignment","src":"20977:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21111:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20985:124:26"},"nodeType":"YulFunctionCall","src":"20985:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20977:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20855:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20870:4:26","type":""}],"src":"20704:419:26"},{"body":{"nodeType":"YulBlock","src":"21235:125:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21257:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"21265:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21253:3:26"},"nodeType":"YulFunctionCall","src":"21253:14:26"},{"hexValue":"455243373231456e756d657261626c653a20676c6f62616c20696e646578206f","kind":"string","nodeType":"YulLiteral","src":"21269:34:26","type":"","value":"ERC721Enumerable: global index o"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21246:6:26"},"nodeType":"YulFunctionCall","src":"21246:58:26"},"nodeType":"YulExpressionStatement","src":"21246:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21325:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"21333:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21321:3:26"},"nodeType":"YulFunctionCall","src":"21321:15:26"},{"hexValue":"7574206f6620626f756e6473","kind":"string","nodeType":"YulLiteral","src":"21338:14:26","type":"","value":"ut of bounds"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21314:6:26"},"nodeType":"YulFunctionCall","src":"21314:39:26"},"nodeType":"YulExpressionStatement","src":"21314:39:26"}]},"name":"store_literal_in_memory_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"21227:6:26","type":""}],"src":"21129:231:26"},{"body":{"nodeType":"YulBlock","src":"21512:220:26","statements":[{"nodeType":"YulAssignment","src":"21522:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21588:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"21593:2:26","type":"","value":"44"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21529:58:26"},"nodeType":"YulFunctionCall","src":"21529:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21522:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21694:3:26"}],"functionName":{"name":"store_literal_in_memory_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc","nodeType":"YulIdentifier","src":"21605:88:26"},"nodeType":"YulFunctionCall","src":"21605:93:26"},"nodeType":"YulExpressionStatement","src":"21605:93:26"},{"nodeType":"YulAssignment","src":"21707:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21718:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"21723:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21714:3:26"},"nodeType":"YulFunctionCall","src":"21714:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"21707:3:26"}]}]},"name":"abi_encode_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"21500:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"21508:3:26","type":""}],"src":"21366:366:26"},{"body":{"nodeType":"YulBlock","src":"21909:248:26","statements":[{"nodeType":"YulAssignment","src":"21919:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21931:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21942:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21927:3:26"},"nodeType":"YulFunctionCall","src":"21927:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21919:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21966:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"21977:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21962:3:26"},"nodeType":"YulFunctionCall","src":"21962:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21985:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"21991:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21981:3:26"},"nodeType":"YulFunctionCall","src":"21981:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21955:6:26"},"nodeType":"YulFunctionCall","src":"21955:47:26"},"nodeType":"YulExpressionStatement","src":"21955:47:26"},{"nodeType":"YulAssignment","src":"22011:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22145:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22019:124:26"},"nodeType":"YulFunctionCall","src":"22019:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22011:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21889:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21904:4:26","type":""}],"src":"21738:419:26"},{"body":{"nodeType":"YulBlock","src":"22269:68:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22291:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"22299:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22287:3:26"},"nodeType":"YulFunctionCall","src":"22287:14:26"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"22303:26:26","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22280:6:26"},"nodeType":"YulFunctionCall","src":"22280:50:26"},"nodeType":"YulExpressionStatement","src":"22280:50:26"}]},"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22261:6:26","type":""}],"src":"22163:174:26"},{"body":{"nodeType":"YulBlock","src":"22489:220:26","statements":[{"nodeType":"YulAssignment","src":"22499:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22565:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"22570:2:26","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22506:58:26"},"nodeType":"YulFunctionCall","src":"22506:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22499:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22671:3:26"}],"functionName":{"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulIdentifier","src":"22582:88:26"},"nodeType":"YulFunctionCall","src":"22582:93:26"},"nodeType":"YulExpressionStatement","src":"22582:93:26"},{"nodeType":"YulAssignment","src":"22684:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22695:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"22700:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22691:3:26"},"nodeType":"YulFunctionCall","src":"22691:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22684:3:26"}]}]},"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22477:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22485:3:26","type":""}],"src":"22343:366:26"},{"body":{"nodeType":"YulBlock","src":"22886:248:26","statements":[{"nodeType":"YulAssignment","src":"22896:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22908:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"22919:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22904:3:26"},"nodeType":"YulFunctionCall","src":"22904:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22896:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22943:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"22954:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22939:3:26"},"nodeType":"YulFunctionCall","src":"22939:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22962:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"22968:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22958:3:26"},"nodeType":"YulFunctionCall","src":"22958:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22932:6:26"},"nodeType":"YulFunctionCall","src":"22932:47:26"},"nodeType":"YulExpressionStatement","src":"22932:47:26"},{"nodeType":"YulAssignment","src":"22988:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23122:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22996:124:26"},"nodeType":"YulFunctionCall","src":"22996:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22988:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22866:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22881:4:26","type":""}],"src":"22715:419:26"},{"body":{"nodeType":"YulBlock","src":"23246:122:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23268:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"23276:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23264:3:26"},"nodeType":"YulFunctionCall","src":"23264:14:26"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"23280:34:26","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23257:6:26"},"nodeType":"YulFunctionCall","src":"23257:58:26"},"nodeType":"YulExpressionStatement","src":"23257:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"23336:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"23344:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23332:3:26"},"nodeType":"YulFunctionCall","src":"23332:15:26"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"23349:11:26","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23325:6:26"},"nodeType":"YulFunctionCall","src":"23325:36:26"},"nodeType":"YulExpressionStatement","src":"23325:36:26"}]},"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"23238:6:26","type":""}],"src":"23140:228:26"},{"body":{"nodeType":"YulBlock","src":"23520:220:26","statements":[{"nodeType":"YulAssignment","src":"23530:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23596:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"23601:2:26","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23537:58:26"},"nodeType":"YulFunctionCall","src":"23537:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23530:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23702:3:26"}],"functionName":{"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulIdentifier","src":"23613:88:26"},"nodeType":"YulFunctionCall","src":"23613:93:26"},"nodeType":"YulExpressionStatement","src":"23613:93:26"},{"nodeType":"YulAssignment","src":"23715:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23726:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"23731:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23722:3:26"},"nodeType":"YulFunctionCall","src":"23722:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"23715:3:26"}]}]},"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"23508:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"23516:3:26","type":""}],"src":"23374:366:26"},{"body":{"nodeType":"YulBlock","src":"23917:248:26","statements":[{"nodeType":"YulAssignment","src":"23927:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23939:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"23950:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23935:3:26"},"nodeType":"YulFunctionCall","src":"23935:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23927:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23974:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"23985:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23970:3:26"},"nodeType":"YulFunctionCall","src":"23970:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23993:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"23999:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"23989:3:26"},"nodeType":"YulFunctionCall","src":"23989:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23963:6:26"},"nodeType":"YulFunctionCall","src":"23963:47:26"},"nodeType":"YulExpressionStatement","src":"23963:47:26"},{"nodeType":"YulAssignment","src":"24019:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24153:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24027:124:26"},"nodeType":"YulFunctionCall","src":"24027:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24019:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23897:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23912:4:26","type":""}],"src":"23746:419:26"},{"body":{"nodeType":"YulBlock","src":"24285:34:26","statements":[{"nodeType":"YulAssignment","src":"24295:18:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"24310:3:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"24295:11:26"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24257:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"24262:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"24273:11:26","type":""}],"src":"24171:148:26"},{"body":{"nodeType":"YulBlock","src":"24431:55:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"24453:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"24461:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24449:3:26"},"nodeType":"YulFunctionCall","src":"24449:14:26"},{"hexValue":"697066733a2f2f","kind":"string","nodeType":"YulLiteral","src":"24465:9:26","type":"","value":"ipfs://"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24442:6:26"},"nodeType":"YulFunctionCall","src":"24442:33:26"},"nodeType":"YulExpressionStatement","src":"24442:33:26"}]},"name":"store_literal_in_memory_66f0790b1cbe0dcac007f07341b00cafe2bda254914729058b5209e04b702afe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"24423:6:26","type":""}],"src":"24325:161:26"},{"body":{"nodeType":"YulBlock","src":"24660:252:26","statements":[{"nodeType":"YulAssignment","src":"24674:91:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24758:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"24763:1:26","type":"","value":"7"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"24681:76:26"},"nodeType":"YulFunctionCall","src":"24681:84:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"24674:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24867:3:26"}],"functionName":{"name":"store_literal_in_memory_66f0790b1cbe0dcac007f07341b00cafe2bda254914729058b5209e04b702afe","nodeType":"YulIdentifier","src":"24778:88:26"},"nodeType":"YulFunctionCall","src":"24778:93:26"},"nodeType":"YulExpressionStatement","src":"24778:93:26"},{"nodeType":"YulAssignment","src":"24884:18:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"24895:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"24900:1:26","type":"","value":"7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24891:3:26"},"nodeType":"YulFunctionCall","src":"24891:11:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"24884:3:26"}]}]},"name":"abi_encode_t_stringliteral_66f0790b1cbe0dcac007f07341b00cafe2bda254914729058b5209e04b702afe_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"24648:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"24656:3:26","type":""}],"src":"24496:416:26"},{"body":{"nodeType":"YulBlock","src":"24976:103:26","statements":[{"nodeType":"YulAssignment","src":"24990:11:26","value":{"name":"ptr","nodeType":"YulIdentifier","src":"24998:3:26"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"24990:4:26"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25022:1:26","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"25025:3:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25015:6:26"},"nodeType":"YulFunctionCall","src":"25015:14:26"},"nodeType":"YulExpressionStatement","src":"25015:14:26"},{"nodeType":"YulAssignment","src":"25042:26:26","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25060:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25063:4:26","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"25050:9:26"},"nodeType":"YulFunctionCall","src":"25050:18:26"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"25042:4:26"}]}]},"name":"array_dataslot_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"24963:3:26","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"24971:4:26","type":""}],"src":"24922:157:26"},{"body":{"nodeType":"YulBlock","src":"25224:818:26","statements":[{"nodeType":"YulVariableDeclaration","src":"25238:29:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25261:5:26"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"25255:5:26"},"nodeType":"YulFunctionCall","src":"25255:12:26"},"variables":[{"name":"slotValue","nodeType":"YulTypedName","src":"25242:9:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"25280:50:26","value":{"arguments":[{"name":"slotValue","nodeType":"YulIdentifier","src":"25320:9:26"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"25294:25:26"},"nodeType":"YulFunctionCall","src":"25294:36:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"25284:6:26","type":""}]},{"nodeType":"YulAssignment","src":"25343:96:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25427:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"25432:6:26"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"25350:76:26"},"nodeType":"YulFunctionCall","src":"25350:89:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"25343:3:26"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"25496:146:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25557:3:26"},{"arguments":[{"name":"slotValue","nodeType":"YulIdentifier","src":"25566:9:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25581:4:26","type":"","value":"0xff"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"25577:3:26"},"nodeType":"YulFunctionCall","src":"25577:9:26"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"25562:3:26"},"nodeType":"YulFunctionCall","src":"25562:25:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25550:6:26"},"nodeType":"YulFunctionCall","src":"25550:38:26"},"nodeType":"YulExpressionStatement","src":"25550:38:26"},{"nodeType":"YulAssignment","src":"25605:23:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25616:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"25621:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25612:3:26"},"nodeType":"YulFunctionCall","src":"25612:16:26"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"25605:3:26"}]}]},"nodeType":"YulCase","src":"25489:153:26","value":{"kind":"number","nodeType":"YulLiteral","src":"25494:1:26","type":"","value":"0"}},{"body":{"nodeType":"YulBlock","src":"25662:370:26","statements":[{"nodeType":"YulVariableDeclaration","src":"25715:53:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"25762:5:26"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"25730:31:26"},"nodeType":"YulFunctionCall","src":"25730:38:26"},"variables":[{"name":"dataPos","nodeType":"YulTypedName","src":"25719:7:26","type":""}]},{"nodeType":"YulVariableDeclaration","src":"25785:10:26","value":{"kind":"number","nodeType":"YulLiteral","src":"25794:1:26","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"25789:1:26","type":""}]},{"body":{"nodeType":"YulBlock","src":"25856:122:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"25889:3:26"},{"name":"i","nodeType":"YulIdentifier","src":"25894:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25885:3:26"},"nodeType":"YulFunctionCall","src":"25885:11:26"},{"arguments":[{"name":"dataPos","nodeType":"YulIdentifier","src":"25904:7:26"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"25898:5:26"},"nodeType":"YulFunctionCall","src":"25898:14:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25878:6:26"},"nodeType":"YulFunctionCall","src":"25878:35:26"},"nodeType":"YulExpressionStatement","src":"25878:35:26"},{"nodeType":"YulAssignment","src":"25934:26:26","value":{"arguments":[{"name":"dataPos","nodeType":"YulIdentifier","src":"25949:7:26"},{"kind":"number","nodeType":"YulLiteral","src":"25958:1:26","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25945:3:26"},"nodeType":"YulFunctionCall","src":"25945:15:26"},"variableNames":[{"name":"dataPos","nodeType":"YulIdentifier","src":"25934:7:26"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"25823:1:26"},{"name":"length","nodeType":"YulIdentifier","src":"25826:6:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"25820:2:26"},"nodeType":"YulFunctionCall","src":"25820:13:26"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"25834:21:26","statements":[{"nodeType":"YulAssignment","src":"25836:17:26","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"25845:1:26"},{"kind":"number","nodeType":"YulLiteral","src":"25848:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25841:3:26"},"nodeType":"YulFunctionCall","src":"25841:12:26"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"25836:1:26"}]}]},"pre":{"nodeType":"YulBlock","src":"25816:3:26","statements":[]},"src":"25812:166:26"},{"nodeType":"YulAssignment","src":"25995:23:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26006:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"26011:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26002:3:26"},"nodeType":"YulFunctionCall","src":"26002:16:26"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"25995:3:26"}]}]},"nodeType":"YulCase","src":"25655:377:26","value":{"kind":"number","nodeType":"YulLiteral","src":"25660:1:26","type":"","value":"1"}}],"expression":{"arguments":[{"name":"slotValue","nodeType":"YulIdentifier","src":"25463:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"25474:1:26","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"25459:3:26"},"nodeType":"YulFunctionCall","src":"25459:17:26"},"nodeType":"YulSwitch","src":"25452:580:26"}]},"name":"abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"25205:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"25212:3:26","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"25220:3:26","type":""}],"src":"25117:925:26"},{"body":{"nodeType":"YulBlock","src":"26286:317:26","statements":[{"nodeType":"YulAssignment","src":"26301:155:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"26452:3:26"}],"functionName":{"name":"abi_encode_t_stringliteral_66f0790b1cbe0dcac007f07341b00cafe2bda254914729058b5209e04b702afe_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"26308:142:26"},"nodeType":"YulFunctionCall","src":"26308:148:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"26301:3:26"}]},{"nodeType":"YulAssignment","src":"26470:99:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"26556:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"26565:3:26"}],"functionName":{"name":"abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"26477:78:26"},"nodeType":"YulFunctionCall","src":"26477:92:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"26470:3:26"}]},{"nodeType":"YulAssignment","src":"26583:10:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"26590:3:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"26583:3:26"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_66f0790b1cbe0dcac007f07341b00cafe2bda254914729058b5209e04b702afe_t_string_storage__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26265:3:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"26271:6:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"26282:3:26","type":""}],"src":"26052:551:26"},{"body":{"nodeType":"YulBlock","src":"26719:131:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"26745:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"26753:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26741:3:26"},"nodeType":"YulFunctionCall","src":"26741:14:26"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"26757:34:26","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26734:6:26"},"nodeType":"YulFunctionCall","src":"26734:58:26"},"nodeType":"YulExpressionStatement","src":"26734:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"26817:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"26825:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26813:3:26"},"nodeType":"YulFunctionCall","src":"26813:15:26"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"26830:8:26","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26806:6:26"},"nodeType":"YulFunctionCall","src":"26806:33:26"},"nodeType":"YulExpressionStatement","src":"26806:33:26"}]},"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"26711:6:26","type":""}],"src":"26613:237:26"},{"body":{"nodeType":"YulBlock","src":"27006:236:26","statements":[{"nodeType":"YulAssignment","src":"27020:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27086:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"27091:2:26","type":"","value":"38"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27027:58:26"},"nodeType":"YulFunctionCall","src":"27027:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"27020:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27196:3:26"}],"functionName":{"name":"store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","nodeType":"YulIdentifier","src":"27107:88:26"},"nodeType":"YulFunctionCall","src":"27107:93:26"},"nodeType":"YulExpressionStatement","src":"27107:93:26"},{"nodeType":"YulAssignment","src":"27213:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"27224:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"27229:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27220:3:26"},"nodeType":"YulFunctionCall","src":"27220:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"27213:3:26"}]}]},"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"26994:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"27002:3:26","type":""}],"src":"26860:382:26"},{"body":{"nodeType":"YulBlock","src":"27423:264:26","statements":[{"nodeType":"YulAssignment","src":"27437:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27449:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"27460:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27445:3:26"},"nodeType":"YulFunctionCall","src":"27445:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27437:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27488:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"27499:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27484:3:26"},"nodeType":"YulFunctionCall","src":"27484:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27507:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"27513:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"27503:3:26"},"nodeType":"YulFunctionCall","src":"27503:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27477:6:26"},"nodeType":"YulFunctionCall","src":"27477:47:26"},"nodeType":"YulExpressionStatement","src":"27477:47:26"},{"nodeType":"YulAssignment","src":"27537:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"27671:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"27545:124:26"},"nodeType":"YulFunctionCall","src":"27545:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27537:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27403:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27418:4:26","type":""}],"src":"27252:435:26"},{"body":{"nodeType":"YulBlock","src":"27803:84:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"27829:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"27837:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27825:3:26"},"nodeType":"YulFunctionCall","src":"27825:14:26"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"27841:34:26","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27818:6:26"},"nodeType":"YulFunctionCall","src":"27818:58:26"},"nodeType":"YulExpressionStatement","src":"27818:58:26"}]},"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"27795:6:26","type":""}],"src":"27697:190:26"},{"body":{"nodeType":"YulBlock","src":"28043:236:26","statements":[{"nodeType":"YulAssignment","src":"28057:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28123:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"28128:2:26","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28064:58:26"},"nodeType":"YulFunctionCall","src":"28064:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"28057:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28233:3:26"}],"functionName":{"name":"store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","nodeType":"YulIdentifier","src":"28144:88:26"},"nodeType":"YulFunctionCall","src":"28144:93:26"},"nodeType":"YulExpressionStatement","src":"28144:93:26"},{"nodeType":"YulAssignment","src":"28250:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"28261:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"28266:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28257:3:26"},"nodeType":"YulFunctionCall","src":"28257:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"28250:3:26"}]}]},"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"28031:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"28039:3:26","type":""}],"src":"27897:382:26"},{"body":{"nodeType":"YulBlock","src":"28460:264:26","statements":[{"nodeType":"YulAssignment","src":"28474:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28486:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"28497:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28482:3:26"},"nodeType":"YulFunctionCall","src":"28482:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28474:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28525:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"28536:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28521:3:26"},"nodeType":"YulFunctionCall","src":"28521:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"28544:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"28550:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"28540:3:26"},"nodeType":"YulFunctionCall","src":"28540:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28514:6:26"},"nodeType":"YulFunctionCall","src":"28514:47:26"},"nodeType":"YulExpressionStatement","src":"28514:47:26"},{"nodeType":"YulAssignment","src":"28574:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"28708:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"28582:124:26"},"nodeType":"YulFunctionCall","src":"28582:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28574:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28440:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28455:4:26","type":""}],"src":"28289:435:26"},{"body":{"nodeType":"YulBlock","src":"28840:130:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"28866:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"28874:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28862:3:26"},"nodeType":"YulFunctionCall","src":"28862:14:26"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"28878:34:26","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28855:6:26"},"nodeType":"YulFunctionCall","src":"28855:58:26"},"nodeType":"YulExpressionStatement","src":"28855:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"28938:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"28946:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28934:3:26"},"nodeType":"YulFunctionCall","src":"28934:15:26"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"28951:7:26","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28927:6:26"},"nodeType":"YulFunctionCall","src":"28927:32:26"},"nodeType":"YulExpressionStatement","src":"28927:32:26"}]},"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"28832:6:26","type":""}],"src":"28734:236:26"},{"body":{"nodeType":"YulBlock","src":"29126:236:26","statements":[{"nodeType":"YulAssignment","src":"29140:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29206:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"29211:2:26","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29147:58:26"},"nodeType":"YulFunctionCall","src":"29147:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"29140:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29316:3:26"}],"functionName":{"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulIdentifier","src":"29227:88:26"},"nodeType":"YulFunctionCall","src":"29227:93:26"},"nodeType":"YulExpressionStatement","src":"29227:93:26"},{"nodeType":"YulAssignment","src":"29333:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"29344:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"29349:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29340:3:26"},"nodeType":"YulFunctionCall","src":"29340:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"29333:3:26"}]}]},"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"29114:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"29122:3:26","type":""}],"src":"28980:382:26"},{"body":{"nodeType":"YulBlock","src":"29543:264:26","statements":[{"nodeType":"YulAssignment","src":"29557:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29569:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"29580:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29565:3:26"},"nodeType":"YulFunctionCall","src":"29565:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29557:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29608:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"29619:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29604:3:26"},"nodeType":"YulFunctionCall","src":"29604:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29627:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"29633:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"29623:3:26"},"nodeType":"YulFunctionCall","src":"29623:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29597:6:26"},"nodeType":"YulFunctionCall","src":"29597:47:26"},"nodeType":"YulExpressionStatement","src":"29597:47:26"},{"nodeType":"YulAssignment","src":"29657:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"29791:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"29665:124:26"},"nodeType":"YulFunctionCall","src":"29665:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29657:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29523:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29538:4:26","type":""}],"src":"29372:435:26"},{"body":{"nodeType":"YulBlock","src":"29923:129:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"29949:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"29957:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29945:3:26"},"nodeType":"YulFunctionCall","src":"29945:14:26"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"29961:34:26","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29938:6:26"},"nodeType":"YulFunctionCall","src":"29938:58:26"},"nodeType":"YulExpressionStatement","src":"29938:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"30021:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"30029:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30017:3:26"},"nodeType":"YulFunctionCall","src":"30017:15:26"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"30034:6:26","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30010:6:26"},"nodeType":"YulFunctionCall","src":"30010:31:26"},"nodeType":"YulExpressionStatement","src":"30010:31:26"}]},"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"29915:6:26","type":""}],"src":"29817:235:26"},{"body":{"nodeType":"YulBlock","src":"30208:236:26","statements":[{"nodeType":"YulAssignment","src":"30222:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30288:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"30293:2:26","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30229:58:26"},"nodeType":"YulFunctionCall","src":"30229:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"30222:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30398:3:26"}],"functionName":{"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulIdentifier","src":"30309:88:26"},"nodeType":"YulFunctionCall","src":"30309:93:26"},"nodeType":"YulExpressionStatement","src":"30309:93:26"},{"nodeType":"YulAssignment","src":"30415:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"30426:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"30431:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30422:3:26"},"nodeType":"YulFunctionCall","src":"30422:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"30415:3:26"}]}]},"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"30196:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"30204:3:26","type":""}],"src":"30062:382:26"},{"body":{"nodeType":"YulBlock","src":"30625:264:26","statements":[{"nodeType":"YulAssignment","src":"30639:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30651:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"30662:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30647:3:26"},"nodeType":"YulFunctionCall","src":"30647:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30639:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30690:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"30701:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30686:3:26"},"nodeType":"YulFunctionCall","src":"30686:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30709:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"30715:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"30705:3:26"},"nodeType":"YulFunctionCall","src":"30705:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30679:6:26"},"nodeType":"YulFunctionCall","src":"30679:47:26"},"nodeType":"YulExpressionStatement","src":"30679:47:26"},{"nodeType":"YulAssignment","src":"30739:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"30873:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"30747:124:26"},"nodeType":"YulFunctionCall","src":"30747:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30739:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30605:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30620:4:26","type":""}],"src":"30454:435:26"},{"body":{"nodeType":"YulBlock","src":"31005:77:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"31031:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"31039:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31027:3:26"},"nodeType":"YulFunctionCall","src":"31027:14:26"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"31043:27:26","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31020:6:26"},"nodeType":"YulFunctionCall","src":"31020:51:26"},"nodeType":"YulExpressionStatement","src":"31020:51:26"}]},"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"30997:6:26","type":""}],"src":"30899:183:26"},{"body":{"nodeType":"YulBlock","src":"31238:236:26","statements":[{"nodeType":"YulAssignment","src":"31252:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31318:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"31323:2:26","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31259:58:26"},"nodeType":"YulFunctionCall","src":"31259:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"31252:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31428:3:26"}],"functionName":{"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulIdentifier","src":"31339:88:26"},"nodeType":"YulFunctionCall","src":"31339:93:26"},"nodeType":"YulExpressionStatement","src":"31339:93:26"},{"nodeType":"YulAssignment","src":"31445:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"31456:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"31461:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31452:3:26"},"nodeType":"YulFunctionCall","src":"31452:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"31445:3:26"}]}]},"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"31226:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"31234:3:26","type":""}],"src":"31092:382:26"},{"body":{"nodeType":"YulBlock","src":"31655:264:26","statements":[{"nodeType":"YulAssignment","src":"31669:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31681:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"31692:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31677:3:26"},"nodeType":"YulFunctionCall","src":"31677:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31669:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"31720:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"31731:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31716:3:26"},"nodeType":"YulFunctionCall","src":"31716:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31739:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"31745:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31735:3:26"},"nodeType":"YulFunctionCall","src":"31735:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31709:6:26"},"nodeType":"YulFunctionCall","src":"31709:47:26"},"nodeType":"YulExpressionStatement","src":"31709:47:26"},{"nodeType":"YulAssignment","src":"31769:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"31903:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"31777:124:26"},"nodeType":"YulFunctionCall","src":"31777:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"31769:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"31635:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"31650:4:26","type":""}],"src":"31484:435:26"},{"body":{"nodeType":"YulBlock","src":"32035:143:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"32061:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"32069:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32057:3:26"},"nodeType":"YulFunctionCall","src":"32057:14:26"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"32073:34:26","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32050:6:26"},"nodeType":"YulFunctionCall","src":"32050:58:26"},"nodeType":"YulExpressionStatement","src":"32050:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"32133:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"32141:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32129:3:26"},"nodeType":"YulFunctionCall","src":"32129:15:26"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"32146:20:26","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32122:6:26"},"nodeType":"YulFunctionCall","src":"32122:45:26"},"nodeType":"YulExpressionStatement","src":"32122:45:26"}]},"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"32027:6:26","type":""}],"src":"31929:249:26"},{"body":{"nodeType":"YulBlock","src":"32334:236:26","statements":[{"nodeType":"YulAssignment","src":"32348:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32414:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"32419:2:26","type":"","value":"50"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32355:58:26"},"nodeType":"YulFunctionCall","src":"32355:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"32348:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32524:3:26"}],"functionName":{"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulIdentifier","src":"32435:88:26"},"nodeType":"YulFunctionCall","src":"32435:93:26"},"nodeType":"YulExpressionStatement","src":"32435:93:26"},{"nodeType":"YulAssignment","src":"32541:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"32552:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"32557:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32548:3:26"},"nodeType":"YulFunctionCall","src":"32548:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"32541:3:26"}]}]},"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"32322:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"32330:3:26","type":""}],"src":"32188:382:26"},{"body":{"nodeType":"YulBlock","src":"32751:264:26","statements":[{"nodeType":"YulAssignment","src":"32765:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32777:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"32788:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32773:3:26"},"nodeType":"YulFunctionCall","src":"32773:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32765:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"32816:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"32827:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"32812:3:26"},"nodeType":"YulFunctionCall","src":"32812:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32835:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"32841:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"32831:3:26"},"nodeType":"YulFunctionCall","src":"32831:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32805:6:26"},"nodeType":"YulFunctionCall","src":"32805:47:26"},"nodeType":"YulExpressionStatement","src":"32805:47:26"},{"nodeType":"YulAssignment","src":"32865:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"32999:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"32873:124:26"},"nodeType":"YulFunctionCall","src":"32873:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"32865:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"32731:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"32746:4:26","type":""}],"src":"32580:435:26"},{"body":{"nodeType":"YulBlock","src":"33135:287:26","statements":[{"nodeType":"YulVariableDeclaration","src":"33149:53:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33196:5:26"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"33163:32:26"},"nodeType":"YulFunctionCall","src":"33163:39:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"33153:6:26","type":""}]},{"nodeType":"YulAssignment","src":"33215:96:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33299:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"33304:6:26"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"33222:76:26"},"nodeType":"YulFunctionCall","src":"33222:89:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"33215:3:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"33350:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"33357:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33346:3:26"},"nodeType":"YulFunctionCall","src":"33346:16:26"},{"name":"pos","nodeType":"YulIdentifier","src":"33364:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"33369:6:26"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"33324:21:26"},"nodeType":"YulFunctionCall","src":"33324:52:26"},"nodeType":"YulExpressionStatement","src":"33324:52:26"},{"nodeType":"YulAssignment","src":"33389:23:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"33400:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"33405:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"33396:3:26"},"nodeType":"YulFunctionCall","src":"33396:16:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"33389:3:26"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"33116:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"33123:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"33131:3:26","type":""}],"src":"33025:397:26"},{"body":{"nodeType":"YulBlock","src":"33616:267:26","statements":[{"nodeType":"YulAssignment","src":"33631:102:26","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"33720:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"33729:3:26"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"33638:81:26"},"nodeType":"YulFunctionCall","src":"33638:95:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"33631:3:26"}]},{"nodeType":"YulAssignment","src":"33747:102:26","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"33836:6:26"},{"name":"pos","nodeType":"YulIdentifier","src":"33845:3:26"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"33754:81:26"},"nodeType":"YulFunctionCall","src":"33754:95:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"33747:3:26"}]},{"nodeType":"YulAssignment","src":"33863:10:26","value":{"name":"pos","nodeType":"YulIdentifier","src":"33870:3:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"33863:3:26"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"33587:3:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"33593:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"33601:6:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"33612:3:26","type":""}],"src":"33432:451:26"},{"body":{"nodeType":"YulBlock","src":"33999:139:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"34025:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"34033:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34021:3:26"},"nodeType":"YulFunctionCall","src":"34021:14:26"},{"hexValue":"45524337323155524953746f726167653a2055524920736574206f66206e6f6e","kind":"string","nodeType":"YulLiteral","src":"34037:34:26","type":"","value":"ERC721URIStorage: URI set of non"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34014:6:26"},"nodeType":"YulFunctionCall","src":"34014:58:26"},"nodeType":"YulExpressionStatement","src":"34014:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"34097:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"34105:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34093:3:26"},"nodeType":"YulFunctionCall","src":"34093:15:26"},{"hexValue":"6578697374656e7420746f6b656e","kind":"string","nodeType":"YulLiteral","src":"34110:16:26","type":"","value":"existent token"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34086:6:26"},"nodeType":"YulFunctionCall","src":"34086:41:26"},"nodeType":"YulExpressionStatement","src":"34086:41:26"}]},"name":"store_literal_in_memory_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"33991:6:26","type":""}],"src":"33893:245:26"},{"body":{"nodeType":"YulBlock","src":"34294:236:26","statements":[{"nodeType":"YulAssignment","src":"34308:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"34374:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"34379:2:26","type":"","value":"46"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"34315:58:26"},"nodeType":"YulFunctionCall","src":"34315:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"34308:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"34484:3:26"}],"functionName":{"name":"store_literal_in_memory_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4","nodeType":"YulIdentifier","src":"34395:88:26"},"nodeType":"YulFunctionCall","src":"34395:93:26"},"nodeType":"YulExpressionStatement","src":"34395:93:26"},{"nodeType":"YulAssignment","src":"34501:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"34512:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"34517:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34508:3:26"},"nodeType":"YulFunctionCall","src":"34508:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"34501:3:26"}]}]},"name":"abi_encode_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"34282:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"34290:3:26","type":""}],"src":"34148:382:26"},{"body":{"nodeType":"YulBlock","src":"34711:264:26","statements":[{"nodeType":"YulAssignment","src":"34725:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34737:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"34748:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34733:3:26"},"nodeType":"YulFunctionCall","src":"34733:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34725:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"34776:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"34787:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"34772:3:26"},"nodeType":"YulFunctionCall","src":"34772:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"34795:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"34801:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"34791:3:26"},"nodeType":"YulFunctionCall","src":"34791:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"34765:6:26"},"nodeType":"YulFunctionCall","src":"34765:47:26"},"nodeType":"YulExpressionStatement","src":"34765:47:26"},{"nodeType":"YulAssignment","src":"34825:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"34959:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"34833:124:26"},"nodeType":"YulFunctionCall","src":"34833:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"34825:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"34691:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"34706:4:26","type":""}],"src":"34540:435:26"},{"body":{"nodeType":"YulBlock","src":"35043:48:26","statements":[{"nodeType":"YulAssignment","src":"35058:22:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"35074:5:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"35068:5:26"},"nodeType":"YulFunctionCall","src":"35068:12:26"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"35058:6:26"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"35026:5:26","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"35036:6:26","type":""}],"src":"34985:106:26"},{"body":{"nodeType":"YulBlock","src":"35196:85:26","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35217:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"35222:6:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"35210:6:26"},"nodeType":"YulFunctionCall","src":"35210:19:26"},"nodeType":"YulExpressionStatement","src":"35210:19:26"},{"nodeType":"YulAssignment","src":"35242:29:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35261:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"35266:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35257:3:26"},"nodeType":"YulFunctionCall","src":"35257:14:26"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"35242:11:26"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"35168:3:26","type":""},{"name":"length","nodeType":"YulTypedName","src":"35173:6:26","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"35184:11:26","type":""}],"src":"35101:180:26"},{"body":{"nodeType":"YulBlock","src":"35381:290:26","statements":[{"nodeType":"YulVariableDeclaration","src":"35395:52:26","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"35441:5:26"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"35409:31:26"},"nodeType":"YulFunctionCall","src":"35409:38:26"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"35399:6:26","type":""}]},{"nodeType":"YulAssignment","src":"35460:77:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35525:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"35530:6:26"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"35467:57:26"},"nodeType":"YulFunctionCall","src":"35467:70:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"35460:3:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"35576:5:26"},{"kind":"number","nodeType":"YulLiteral","src":"35583:4:26","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35572:3:26"},"nodeType":"YulFunctionCall","src":"35572:16:26"},{"name":"pos","nodeType":"YulIdentifier","src":"35590:3:26"},{"name":"length","nodeType":"YulIdentifier","src":"35595:6:26"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"35550:21:26"},"nodeType":"YulFunctionCall","src":"35550:52:26"},"nodeType":"YulExpressionStatement","src":"35550:52:26"},{"nodeType":"YulAssignment","src":"35615:46:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"35626:3:26"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"35653:6:26"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"35631:21:26"},"nodeType":"YulFunctionCall","src":"35631:29:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35622:3:26"},"nodeType":"YulFunctionCall","src":"35622:39:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"35615:3:26"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"35362:5:26","type":""},{"name":"pos","nodeType":"YulTypedName","src":"35369:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"35377:3:26","type":""}],"src":"35291:380:26"},{"body":{"nodeType":"YulBlock","src":"35881:468:26","statements":[{"nodeType":"YulAssignment","src":"35895:27:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35907:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"35918:3:26","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35903:3:26"},"nodeType":"YulFunctionCall","src":"35903:19:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"35895:4:26"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"35980:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"35993:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"36004:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"35989:3:26"},"nodeType":"YulFunctionCall","src":"35989:17:26"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"35936:43:26"},"nodeType":"YulFunctionCall","src":"35936:71:26"},"nodeType":"YulExpressionStatement","src":"35936:71:26"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"36065:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36078:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"36089:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36074:3:26"},"nodeType":"YulFunctionCall","src":"36074:18:26"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"36021:43:26"},"nodeType":"YulFunctionCall","src":"36021:72:26"},"nodeType":"YulExpressionStatement","src":"36021:72:26"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"36151:6:26"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36164:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"36175:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36160:3:26"},"nodeType":"YulFunctionCall","src":"36160:18:26"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"36107:43:26"},"nodeType":"YulFunctionCall","src":"36107:72:26"},"nodeType":"YulExpressionStatement","src":"36107:72:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36204:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"36215:2:26","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36200:3:26"},"nodeType":"YulFunctionCall","src":"36200:18:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"36224:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"36230:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"36220:3:26"},"nodeType":"YulFunctionCall","src":"36220:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"36193:6:26"},"nodeType":"YulFunctionCall","src":"36193:48:26"},"nodeType":"YulExpressionStatement","src":"36193:48:26"},{"nodeType":"YulAssignment","src":"36254:84:26","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"36324:6:26"},{"name":"tail","nodeType":"YulIdentifier","src":"36333:4:26"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"36262:61:26"},"nodeType":"YulFunctionCall","src":"36262:76:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"36254:4:26"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"35829:9:26","type":""},{"name":"value3","nodeType":"YulTypedName","src":"35841:6:26","type":""},{"name":"value2","nodeType":"YulTypedName","src":"35849:6:26","type":""},{"name":"value1","nodeType":"YulTypedName","src":"35857:6:26","type":""},{"name":"value0","nodeType":"YulTypedName","src":"35865:6:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"35876:4:26","type":""}],"src":"35681:668:26"},{"body":{"nodeType":"YulBlock","src":"36421:91:26","statements":[{"nodeType":"YulAssignment","src":"36435:22:26","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"36450:6:26"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"36444:5:26"},"nodeType":"YulFunctionCall","src":"36444:13:26"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"36435:5:26"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"36496:5:26"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"36470:25:26"},"nodeType":"YulFunctionCall","src":"36470:32:26"},"nodeType":"YulExpressionStatement","src":"36470:32:26"}]},"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"36399:6:26","type":""},{"name":"end","nodeType":"YulTypedName","src":"36407:3:26","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"36415:5:26","type":""}],"src":"36359:153:26"},{"body":{"nodeType":"YulBlock","src":"36598:297:26","statements":[{"body":{"nodeType":"YulBlock","src":"36648:83:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"36650:77:26"},"nodeType":"YulFunctionCall","src":"36650:79:26"},"nodeType":"YulExpressionStatement","src":"36650:79:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"36623:7:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"36632:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"36619:3:26"},"nodeType":"YulFunctionCall","src":"36619:23:26"},{"kind":"number","nodeType":"YulLiteral","src":"36644:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"36615:3:26"},"nodeType":"YulFunctionCall","src":"36615:32:26"},"nodeType":"YulIf","src":"36612:119:26"},{"nodeType":"YulBlock","src":"36745:139:26","statements":[{"nodeType":"YulVariableDeclaration","src":"36764:15:26","value":{"kind":"number","nodeType":"YulLiteral","src":"36778:1:26","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"36768:6:26","type":""}]},{"nodeType":"YulAssignment","src":"36797:73:26","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"36842:9:26"},{"name":"offset","nodeType":"YulIdentifier","src":"36853:6:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"36838:3:26"},"nodeType":"YulFunctionCall","src":"36838:22:26"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"36862:7:26"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulIdentifier","src":"36807:30:26"},"nodeType":"YulFunctionCall","src":"36807:63:26"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"36797:6:26"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"36568:9:26","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"36579:7:26","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"36591:6:26","type":""}],"src":"36522:373:26"},{"body":{"nodeType":"YulBlock","src":"37011:146:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"37037:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"37045:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37033:3:26"},"nodeType":"YulFunctionCall","src":"37033:14:26"},{"hexValue":"455243373231456e756d657261626c653a20636f6e7365637574697665207472","kind":"string","nodeType":"YulLiteral","src":"37049:34:26","type":"","value":"ERC721Enumerable: consecutive tr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37026:6:26"},"nodeType":"YulFunctionCall","src":"37026:58:26"},"nodeType":"YulExpressionStatement","src":"37026:58:26"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"37109:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"37117:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37105:3:26"},"nodeType":"YulFunctionCall","src":"37105:15:26"},{"hexValue":"616e7366657273206e6f7420737570706f72746564","kind":"string","nodeType":"YulLiteral","src":"37122:23:26","type":"","value":"ansfers not supported"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37098:6:26"},"nodeType":"YulFunctionCall","src":"37098:48:26"},"nodeType":"YulExpressionStatement","src":"37098:48:26"}]},"name":"store_literal_in_memory_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"37003:6:26","type":""}],"src":"36905:252:26"},{"body":{"nodeType":"YulBlock","src":"37313:236:26","statements":[{"nodeType":"YulAssignment","src":"37327:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37393:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"37398:2:26","type":"","value":"53"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"37334:58:26"},"nodeType":"YulFunctionCall","src":"37334:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"37327:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37503:3:26"}],"functionName":{"name":"store_literal_in_memory_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314","nodeType":"YulIdentifier","src":"37414:88:26"},"nodeType":"YulFunctionCall","src":"37414:93:26"},"nodeType":"YulExpressionStatement","src":"37414:93:26"},{"nodeType":"YulAssignment","src":"37520:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"37531:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"37536:2:26","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37527:3:26"},"nodeType":"YulFunctionCall","src":"37527:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"37520:3:26"}]}]},"name":"abi_encode_t_stringliteral_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"37301:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"37309:3:26","type":""}],"src":"37167:382:26"},{"body":{"nodeType":"YulBlock","src":"37730:264:26","statements":[{"nodeType":"YulAssignment","src":"37744:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37756:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"37767:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37752:3:26"},"nodeType":"YulFunctionCall","src":"37752:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"37744:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"37795:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"37806:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"37791:3:26"},"nodeType":"YulFunctionCall","src":"37791:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"37814:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"37820:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"37810:3:26"},"nodeType":"YulFunctionCall","src":"37810:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"37784:6:26"},"nodeType":"YulFunctionCall","src":"37784:47:26"},"nodeType":"YulExpressionStatement","src":"37784:47:26"},{"nodeType":"YulAssignment","src":"37844:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"37978:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"37852:124:26"},"nodeType":"YulFunctionCall","src":"37852:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"37844:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"37710:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"37725:4:26","type":""}],"src":"37559:435:26"},{"body":{"nodeType":"YulBlock","src":"38032:168:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"38053:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"38056:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38046:6:26"},"nodeType":"YulFunctionCall","src":"38046:88:26"},"nodeType":"YulExpressionStatement","src":"38046:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"38154:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"38157:4:26","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38147:6:26"},"nodeType":"YulFunctionCall","src":"38147:15:26"},"nodeType":"YulExpressionStatement","src":"38147:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"38182:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"38185:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"38175:6:26"},"nodeType":"YulFunctionCall","src":"38175:15:26"},"nodeType":"YulExpressionStatement","src":"38175:15:26"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"38004:196:26"},{"body":{"nodeType":"YulBlock","src":"38316:84:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"38342:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"38350:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38338:3:26"},"nodeType":"YulFunctionCall","src":"38338:14:26"},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"38354:34:26","type":"","value":"ERC721: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"38331:6:26"},"nodeType":"YulFunctionCall","src":"38331:58:26"},"nodeType":"YulExpressionStatement","src":"38331:58:26"}]},"name":"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"38308:6:26","type":""}],"src":"38210:190:26"},{"body":{"nodeType":"YulBlock","src":"38556:236:26","statements":[{"nodeType":"YulAssignment","src":"38570:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38636:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"38641:2:26","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"38577:58:26"},"nodeType":"YulFunctionCall","src":"38577:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"38570:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38746:3:26"}],"functionName":{"name":"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","nodeType":"YulIdentifier","src":"38657:88:26"},"nodeType":"YulFunctionCall","src":"38657:93:26"},"nodeType":"YulExpressionStatement","src":"38657:93:26"},{"nodeType":"YulAssignment","src":"38763:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"38774:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"38779:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38770:3:26"},"nodeType":"YulFunctionCall","src":"38770:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"38763:3:26"}]}]},"name":"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"38544:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"38552:3:26","type":""}],"src":"38410:382:26"},{"body":{"nodeType":"YulBlock","src":"38973:264:26","statements":[{"nodeType":"YulAssignment","src":"38987:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"38999:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"39010:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"38995:3:26"},"nodeType":"YulFunctionCall","src":"38995:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"38987:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"39038:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"39049:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39034:3:26"},"nodeType":"YulFunctionCall","src":"39034:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"39057:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"39063:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"39053:3:26"},"nodeType":"YulFunctionCall","src":"39053:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39027:6:26"},"nodeType":"YulFunctionCall","src":"39027:47:26"},"nodeType":"YulExpressionStatement","src":"39027:47:26"},{"nodeType":"YulAssignment","src":"39087:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"39221:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"39095:124:26"},"nodeType":"YulFunctionCall","src":"39095:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"39087:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"38953:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"38968:4:26","type":""}],"src":"38802:435:26"},{"body":{"nodeType":"YulBlock","src":"39353:80:26","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"39379:6:26"},{"kind":"number","nodeType":"YulLiteral","src":"39387:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39375:3:26"},"nodeType":"YulFunctionCall","src":"39375:14:26"},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","kind":"string","nodeType":"YulLiteral","src":"39391:30:26","type":"","value":"ERC721: token already minted"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"39368:6:26"},"nodeType":"YulFunctionCall","src":"39368:54:26"},"nodeType":"YulExpressionStatement","src":"39368:54:26"}]},"name":"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"39345:6:26","type":""}],"src":"39247:186:26"},{"body":{"nodeType":"YulBlock","src":"39589:236:26","statements":[{"nodeType":"YulAssignment","src":"39603:74:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"39669:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"39674:2:26","type":"","value":"28"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"39610:58:26"},"nodeType":"YulFunctionCall","src":"39610:67:26"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"39603:3:26"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"39779:3:26"}],"functionName":{"name":"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","nodeType":"YulIdentifier","src":"39690:88:26"},"nodeType":"YulFunctionCall","src":"39690:93:26"},"nodeType":"YulExpressionStatement","src":"39690:93:26"},{"nodeType":"YulAssignment","src":"39796:19:26","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"39807:3:26"},{"kind":"number","nodeType":"YulLiteral","src":"39812:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"39803:3:26"},"nodeType":"YulFunctionCall","src":"39803:12:26"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"39796:3:26"}]}]},"name":"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"39577:3:26","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"39585:3:26","type":""}],"src":"39443:382:26"},{"body":{"nodeType":"YulBlock","src":"40006:264:26","statements":[{"nodeType":"YulAssignment","src":"40020:26:26","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40032:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"40043:2:26","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40028:3:26"},"nodeType":"YulFunctionCall","src":"40028:18:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"40020:4:26"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"40071:9:26"},{"kind":"number","nodeType":"YulLiteral","src":"40082:1:26","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40067:3:26"},"nodeType":"YulFunctionCall","src":"40067:17:26"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"40090:4:26"},{"name":"headStart","nodeType":"YulIdentifier","src":"40096:9:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"40086:3:26"},"nodeType":"YulFunctionCall","src":"40086:20:26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40060:6:26"},"nodeType":"YulFunctionCall","src":"40060:47:26"},"nodeType":"YulExpressionStatement","src":"40060:47:26"},{"nodeType":"YulAssignment","src":"40120:139:26","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"40254:4:26"}],"functionName":{"name":"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"40128:124:26"},"nodeType":"YulFunctionCall","src":"40128:131:26"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"40120:4:26"}]}]},"name":"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"39986:9:26","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"40001:4:26","type":""}],"src":"39835:435:26"},{"body":{"nodeType":"YulBlock","src":"40325:166:26","statements":[{"nodeType":"YulAssignment","src":"40339:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"40362:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"40344:17:26"},"nodeType":"YulFunctionCall","src":"40344:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"40339:1:26"}]},{"nodeType":"YulAssignment","src":"40377:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"40400:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"40382:17:26"},"nodeType":"YulFunctionCall","src":"40382:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"40377:1:26"}]},{"body":{"nodeType":"YulBlock","src":"40428:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"40430:16:26"},"nodeType":"YulFunctionCall","src":"40430:18:26"},"nodeType":"YulExpressionStatement","src":"40430:18:26"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"40422:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"40425:1:26"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"40419:2:26"},"nodeType":"YulFunctionCall","src":"40419:8:26"},"nodeType":"YulIf","src":"40416:34:26"},{"nodeType":"YulAssignment","src":"40464:17:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"40476:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"40479:1:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"40472:3:26"},"nodeType":"YulFunctionCall","src":"40472:9:26"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"40464:4:26"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"40311:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"40314:1:26","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"40320:4:26","type":""}],"src":"40280:211:26"},{"body":{"nodeType":"YulBlock","src":"40545:285:26","statements":[{"nodeType":"YulAssignment","src":"40559:25:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"40582:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"40564:17:26"},"nodeType":"YulFunctionCall","src":"40564:20:26"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"40559:1:26"}]},{"nodeType":"YulAssignment","src":"40597:25:26","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"40620:1:26"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"40602:17:26"},"nodeType":"YulFunctionCall","src":"40602:20:26"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"40597:1:26"}]},{"body":{"nodeType":"YulBlock","src":"40768:22:26","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"40770:16:26"},"nodeType":"YulFunctionCall","src":"40770:18:26"},"nodeType":"YulExpressionStatement","src":"40770:18:26"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"40689:1:26"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"40696:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},{"name":"y","nodeType":"YulIdentifier","src":"40764:1:26"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"40692:3:26"},"nodeType":"YulFunctionCall","src":"40692:74:26"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"40686:2:26"},"nodeType":"YulFunctionCall","src":"40686:81:26"},"nodeType":"YulIf","src":"40683:107:26"},{"nodeType":"YulAssignment","src":"40804:16:26","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"40815:1:26"},{"name":"y","nodeType":"YulIdentifier","src":"40818:1:26"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"40811:3:26"},"nodeType":"YulFunctionCall","src":"40811:9:26"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"40804:3:26"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"40532:1:26","type":""},{"name":"y","nodeType":"YulTypedName","src":"40535:1:26","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"40541:3:26","type":""}],"src":"40501:329:26"},{"body":{"nodeType":"YulBlock","src":"40868:168:26","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"40889:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"40892:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40882:6:26"},"nodeType":"YulFunctionCall","src":"40882:88:26"},"nodeType":"YulExpressionStatement","src":"40882:88:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"40990:1:26","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"40993:4:26","type":"","value":"0x31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"40983:6:26"},"nodeType":"YulFunctionCall","src":"40983:15:26"},"nodeType":"YulExpressionStatement","src":"40983:15:26"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"41018:1:26","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"41021:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"41011:6:26"},"nodeType":"YulFunctionCall","src":"41011:15:26"},"nodeType":"YulExpressionStatement","src":"41011:15:26"}]},"name":"panic_error_0x31","nodeType":"YulFunctionDefinition","src":"40840:196:26"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_array$_t_struct$_ItemParam_$4790_memory_ptr_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    function revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() {\n        revert(0, 0)\n    }\n\n    function revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    // struct MyToken.ItemParam\n    function abi_decode_t_struct$_ItemParam_$4790_memory_ptr(headStart, end) -> value {\n        if slt(sub(end, headStart), 0x40) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }\n        value := allocate_memory(0x40)\n\n        {\n            // to\n\n            let offset := 0\n\n            mstore(add(value, 0x00), abi_decode_t_address(add(headStart, offset), end))\n\n        }\n\n        {\n            // tokenURI\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() }\n\n            mstore(add(value, 0x20), abi_decode_t_string_memory_ptr(add(headStart, offset), end))\n\n        }\n\n    }\n\n    // struct MyToken.ItemParam[]\n    function abi_decode_available_length_t_array$_t_struct$_ItemParam_$4790_memory_ptr_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_struct$_ItemParam_$4790_memory_ptr_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x20))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n\n            let innerOffset := calldataload(src)\n            if gt(innerOffset, 0xffffffffffffffff) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n            let elementPos := add(offset, innerOffset)\n\n            mstore(dst, abi_decode_t_struct$_ItemParam_$4790_memory_ptr(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // struct MyToken.ItemParam[]\n    function abi_decode_t_array$_t_struct$_ItemParam_$4790_memory_ptr_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_struct$_ItemParam_$4790_memory_ptr_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_array$_t_struct$_ItemParam_$4790_memory_ptr_$dyn_memory_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_array$_t_struct$_ItemParam_$4790_memory_ptr_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_string_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approval to current owne\")\n\n        mstore(add(memPtr, 32), \"r\")\n\n    }\n\n    function abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve caller is not to\")\n\n        mstore(add(memPtr, 32), \"ken owner or approved for all\")\n\n    }\n\n    function abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 61)\n        store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: caller is not token owne\")\n\n        mstore(add(memPtr, 32), \"r or approved\")\n\n    }\n\n    function abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n        store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721Enumerable: owner index ou\")\n\n        mstore(add(memPtr, 32), \"t of bounds\")\n\n    }\n\n    function abi_encode_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721Enumerable: global index o\")\n\n        mstore(add(memPtr, 32), \"ut of bounds\")\n\n    }\n\n    function abi_encode_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 44)\n        store_literal_in_memory_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: invalid token ID\")\n\n    }\n\n    function abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: address zero is not a va\")\n\n        mstore(add(memPtr, 32), \"lid owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_66f0790b1cbe0dcac007f07341b00cafe2bda254914729058b5209e04b702afe(memPtr) {\n\n        mstore(add(memPtr, 0), \"ipfs://\")\n\n        }\n\n        function abi_encode_t_stringliteral_66f0790b1cbe0dcac007f07341b00cafe2bda254914729058b5209e04b702afe_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n            pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 7)\n            store_literal_in_memory_66f0790b1cbe0dcac007f07341b00cafe2bda254914729058b5209e04b702afe(pos)\n            end := add(pos, 7)\n        }\n\n        function array_dataslot_t_string_storage(ptr) -> data {\n            data := ptr\n\n            mstore(0, ptr)\n            data := keccak256(0, 0x20)\n\n        }\n\n        // string -> string\n        function abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> ret {\n            let slotValue := sload(value)\n            let length := extract_byte_array_length(slotValue)\n            pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n            switch and(slotValue, 1)\n            case 0 {\n                // short byte array\n                mstore(pos, and(slotValue, not(0xff)))\n                ret := add(pos, length)\n            }\n            case 1 {\n                // long byte array\n                let dataPos := array_dataslot_t_string_storage(value)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 0x20) } {\n                    mstore(add(pos, i), sload(dataPos))\n                    dataPos := add(dataPos, 1)\n                }\n                ret := add(pos, length)\n            }\n        }\n\n        function abi_encode_tuple_packed_t_stringliteral_66f0790b1cbe0dcac007f07341b00cafe2bda254914729058b5209e04b702afe_t_string_storage__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n            pos := abi_encode_t_stringliteral_66f0790b1cbe0dcac007f07341b00cafe2bda254914729058b5209e04b702afe_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n            pos := abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n            end := pos\n        }\n\n        function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n            mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n            mstore(add(memPtr, 32), \"ddress\")\n\n        }\n\n        function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n            store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n            end := add(pos, 64)\n        }\n\n        function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n            tail := add(headStart, 32)\n\n            mstore(add(headStart, 0), sub(tail, headStart))\n            tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n        }\n\n        function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n            mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n        }\n\n        function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n            store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n            end := add(pos, 32)\n        }\n\n        function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n            tail := add(headStart, 32)\n\n            mstore(add(headStart, 0), sub(tail, headStart))\n            tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n        }\n\n        function store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(memPtr) {\n\n            mstore(add(memPtr, 0), \"ERC721: transfer from incorrect \")\n\n            mstore(add(memPtr, 32), \"owner\")\n\n        }\n\n        function abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack(pos) -> end {\n            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n            store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(pos)\n            end := add(pos, 64)\n        }\n\n        function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n            tail := add(headStart, 32)\n\n            mstore(add(headStart, 0), sub(tail, headStart))\n            tail := abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack( tail)\n\n        }\n\n        function store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(memPtr) {\n\n            mstore(add(memPtr, 0), \"ERC721: transfer to the zero add\")\n\n            mstore(add(memPtr, 32), \"ress\")\n\n        }\n\n        function abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n            store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(pos)\n            end := add(pos, 64)\n        }\n\n        function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n            tail := add(headStart, 32)\n\n            mstore(add(headStart, 0), sub(tail, headStart))\n            tail := abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack( tail)\n\n        }\n\n        function store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(memPtr) {\n\n            mstore(add(memPtr, 0), \"ERC721: approve to caller\")\n\n        }\n\n        function abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack(pos) -> end {\n            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n            store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(pos)\n            end := add(pos, 32)\n        }\n\n        function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n            tail := add(headStart, 32)\n\n            mstore(add(headStart, 0), sub(tail, headStart))\n            tail := abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack( tail)\n\n        }\n\n        function store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(memPtr) {\n\n            mstore(add(memPtr, 0), \"ERC721: transfer to non ERC721Re\")\n\n            mstore(add(memPtr, 32), \"ceiver implementer\")\n\n        }\n\n        function abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack(pos) -> end {\n            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)\n            store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(pos)\n            end := add(pos, 64)\n        }\n\n        function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n            tail := add(headStart, 32)\n\n            mstore(add(headStart, 0), sub(tail, headStart))\n            tail := abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack( tail)\n\n        }\n\n        function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n            let length := array_length_t_string_memory_ptr(value)\n            pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n            copy_memory_to_memory(add(value, 0x20), pos, length)\n            end := add(pos, length)\n        }\n\n        function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n            pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n            pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n            end := pos\n        }\n\n        function store_literal_in_memory_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4(memPtr) {\n\n            mstore(add(memPtr, 0), \"ERC721URIStorage: URI set of non\")\n\n            mstore(add(memPtr, 32), \"existent token\")\n\n        }\n\n        function abi_encode_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4_to_t_string_memory_ptr_fromStack(pos) -> end {\n            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 46)\n            store_literal_in_memory_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4(pos)\n            end := add(pos, 64)\n        }\n\n        function abi_encode_tuple_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n            tail := add(headStart, 32)\n\n            mstore(add(headStart, 0), sub(tail, headStart))\n            tail := abi_encode_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4_to_t_string_memory_ptr_fromStack( tail)\n\n        }\n\n        function array_length_t_bytes_memory_ptr(value) -> length {\n\n            length := mload(value)\n\n        }\n\n        function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n            mstore(pos, length)\n            updated_pos := add(pos, 0x20)\n        }\n\n        function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n            let length := array_length_t_bytes_memory_ptr(value)\n            pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n            copy_memory_to_memory(add(value, 0x20), pos, length)\n            end := add(pos, round_up_to_mul_of_32(length))\n        }\n\n        function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n            tail := add(headStart, 128)\n\n            abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n            abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n            abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n            mstore(add(headStart, 96), sub(tail, headStart))\n            tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n        }\n\n        function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n            value := mload(offset)\n            validator_revert_t_bytes4(value)\n        }\n\n        function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n            if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n            {\n\n                let offset := 0\n\n                value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n            }\n\n        }\n\n        function store_literal_in_memory_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314(memPtr) {\n\n            mstore(add(memPtr, 0), \"ERC721Enumerable: consecutive tr\")\n\n            mstore(add(memPtr, 32), \"ansfers not supported\")\n\n        }\n\n        function abi_encode_t_stringliteral_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314_to_t_string_memory_ptr_fromStack(pos) -> end {\n            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 53)\n            store_literal_in_memory_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314(pos)\n            end := add(pos, 64)\n        }\n\n        function abi_encode_tuple_t_stringliteral_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n            tail := add(headStart, 32)\n\n            mstore(add(headStart, 0), sub(tail, headStart))\n            tail := abi_encode_t_stringliteral_da49291af84b6a1e37ed9eacd9a67360593e4a0e561cb261a6a738f621783314_to_t_string_memory_ptr_fromStack( tail)\n\n        }\n\n        function panic_error_0x12() {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n\n        function store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6(memPtr) {\n\n            mstore(add(memPtr, 0), \"ERC721: mint to the zero address\")\n\n        }\n\n        function abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack(pos) -> end {\n            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n            store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6(pos)\n            end := add(pos, 32)\n        }\n\n        function abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n            tail := add(headStart, 32)\n\n            mstore(add(headStart, 0), sub(tail, headStart))\n            tail := abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack( tail)\n\n        }\n\n        function store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57(memPtr) {\n\n            mstore(add(memPtr, 0), \"ERC721: token already minted\")\n\n        }\n\n        function abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack(pos) -> end {\n            pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 28)\n            store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57(pos)\n            end := add(pos, 32)\n        }\n\n        function abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n            tail := add(headStart, 32)\n\n            mstore(add(headStart, 0), sub(tail, headStart))\n            tail := abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack( tail)\n\n        }\n\n        function checked_sub_t_uint256(x, y) -> diff {\n            x := cleanup_t_uint256(x)\n            y := cleanup_t_uint256(y)\n\n            if lt(x, y) { panic_error_0x11() }\n\n            diff := sub(x, y)\n        }\n\n        function checked_add_t_uint256(x, y) -> sum {\n            x := cleanup_t_uint256(x)\n            y := cleanup_t_uint256(y)\n\n            // overflow, if x > (maxValue - y)\n            if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n            sum := add(x, y)\n        }\n\n        function panic_error_0x31() {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x31)\n            revert(0, 0x24)\n        }\n\n    }\n","id":26,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101425760003560e01c806370a08231116100b8578063b88d4fde1161007c578063b88d4fde14610375578063c87b56dd14610391578063d204c45e146103c1578063e8a3d485146103dd578063e985e9c5146103fb578063f2fde38b1461042b57610142565b806370a08231146102e3578063715018a6146103135780638da5cb5b1461031d57806395d89b411461033b578063a22cb4651461035957610142565b80631c02aeaf1161010a5780631c02aeaf146101ff57806323b872dd1461021b5780632f745c591461023757806342842e0e146102675780634f6ccce7146102835780636352211e146102b357610142565b806301ffc9a71461014757806306fdde0314610177578063081812fc14610195578063095ea7b3146101c557806318160ddd146101e1575b600080fd5b610161600480360381019061015c91906125da565b610447565b60405161016e9190612622565b60405180910390f35b61017f610459565b60405161018c91906126d6565b60405180910390f35b6101af60048036038101906101aa919061272e565b6104eb565b6040516101bc919061279c565b60405180910390f35b6101df60048036038101906101da91906127e3565b610531565b005b6101e9610649565b6040516101f69190612832565b60405180910390f35b61021960048036038101906102149190612ade565b610656565b005b61023560048036038101906102309190612b27565b6106c7565b005b610251600480360381019061024c91906127e3565b610727565b60405161025e9190612832565b60405180910390f35b610281600480360381019061027c9190612b27565b6107cc565b005b61029d6004803603810190610298919061272e565b6107ec565b6040516102aa9190612832565b60405180910390f35b6102cd60048036038101906102c8919061272e565b61085d565b6040516102da919061279c565b60405180910390f35b6102fd60048036038101906102f89190612b7a565b6108e4565b60405161030a9190612832565b60405180910390f35b61031b61099c565b005b6103256109b0565b604051610332919061279c565b60405180910390f35b6103436109da565b60405161035091906126d6565b60405180910390f35b610373600480360381019061036e9190612bd3565b610a6c565b005b61038f600480360381019061038a9190612cb4565b610a82565b005b6103ab60048036038101906103a6919061272e565b610ae4565b6040516103b891906126d6565b60405180910390f35b6103db60048036038101906103d69190612d37565b610af6565b005b6103e5610b2f565b6040516103f291906126d6565b60405180910390f35b61041560048036038101906104109190612d93565b610b57565b6040516104229190612622565b60405180910390f35b61044560048036038101906104409190612b7a565b610beb565b005b600061045282610c6f565b9050919050565b60606000805461046890612e02565b80601f016020809104026020016040519081016040528092919081815260200182805461049490612e02565b80156104e15780601f106104b6576101008083540402835291602001916104e1565b820191906000526020600020905b8154815290600101906020018083116104c457829003601f168201915b5050505050905090565b60006104f682610ce9565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061053c8261085d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a490612ea6565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105cc610d34565b73ffffffffffffffffffffffffffffffffffffffff1614806105fb57506105fa816105f5610d34565b610b57565b5b61063a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063190612f38565b60405180910390fd5b6106448383610d3c565b505050565b6000600880549050905090565b61065e610df5565b60005b81518110156106c3576106b08282815181106106805761067f612f58565b5b60200260200101516000015183838151811061069f5761069e612f58565b5b602002602001015160200151610af6565b80806106bb90612fb6565b915050610661565b5050565b6106d86106d2610d34565b82610e73565b610717576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070e90613071565b60405180910390fd5b610722838383610f08565b505050565b6000610732836108e4565b8210610773576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076a90613103565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b6107e783838360405180602001604052806000815250610a82565b505050565b60006107f6610649565b8210610837576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082e90613195565b60405180910390fd5b6008828154811061084b5761084a612f58565b5b90600052602060002001549050919050565b60008061086983611202565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156108db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d290613201565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610955576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094c90613293565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6109a4610df5565b6109ae600061123f565b565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546109e990612e02565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1590612e02565b8015610a625780601f10610a3757610100808354040283529160200191610a62565b820191906000526020600020905b815481529060010190602001808311610a4557829003601f168201915b5050505050905090565b610a7e610a77610d34565b8383611305565b5050565b610a93610a8d610d34565b83610e73565b610ad2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac990613071565b60405180910390fd5b610ade84848484611472565b50505050565b6060610aef826114ce565b9050919050565b610afe610df5565b6000610b0a600c6115e1565b9050610b16600c6115ef565b610b208382611605565b610b2a8183611623565b505050565b6060600d604051602001610b43919061339e565b604051602081830303815290604052905090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610bf3610df5565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5a90613432565b60405180910390fd5b610c6c8161123f565b50565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610ce25750610ce182611697565b5b9050919050565b610cf281611779565b610d31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2890613201565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610daf8361085d565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b610dfd610d34565b73ffffffffffffffffffffffffffffffffffffffff16610e1b6109b0565b73ffffffffffffffffffffffffffffffffffffffff1614610e71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e689061349e565b60405180910390fd5b565b600080610e7f8361085d565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610ec15750610ec08185610b57565b5b80610eff57508373ffffffffffffffffffffffffffffffffffffffff16610ee7846104eb565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610f288261085d565b73ffffffffffffffffffffffffffffffffffffffff1614610f7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7590613530565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610fee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe5906135c2565b60405180910390fd5b610ffb83838360016117ba565b8273ffffffffffffffffffffffffffffffffffffffff1661101b8261085d565b73ffffffffffffffffffffffffffffffffffffffff1614611071576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106890613530565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46111fd83838360016117cc565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136b9061362e565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516114659190612622565b60405180910390a3505050565b61147d848484610f08565b611489848484846117d2565b6114c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114bf906136c0565b60405180910390fd5b50505050565b60606114d982610ce9565b6000600a600084815260200190815260200160002080546114f990612e02565b80601f016020809104026020016040519081016040528092919081815260200182805461152590612e02565b80156115725780601f1061154757610100808354040283529160200191611572565b820191906000526020600020905b81548152906001019060200180831161155557829003601f168201915b505050505090506000611583611969565b90506000815114156115995781925050506115dc565b6000825111156115ce5780826040516020016115b6929190613711565b604051602081830303815290604052925050506115dc565b6115d7846119a6565b925050505b919050565b600081600001549050919050565b6001816000016000828254019250508190555050565b61161f828260405180602001604052806000815250611a0e565b5050565b61162c82611779565b61166b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611662906137a7565b60405180910390fd5b80600a600084815260200190815260200160002090805190602001906116929291906124cb565b505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061176257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611772575061177182611a69565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661179b83611202565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6117c684848484611ad3565b50505050565b50505050565b60006117f38473ffffffffffffffffffffffffffffffffffffffff16611c33565b1561195c578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261181c610d34565b8786866040518563ffffffff1660e01b815260040161183e949392919061381c565b602060405180830381600087803b15801561185857600080fd5b505af192505050801561188957506040513d601f19601f82011682018060405250810190611886919061387d565b60015b61190c573d80600081146118b9576040519150601f19603f3d011682016040523d82523d6000602084013e6118be565b606091505b50600081511415611904576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118fb906136c0565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611961565b600190505b949350505050565b60606040518060400160405280600781526020017f697066733a2f2f00000000000000000000000000000000000000000000000000815250905090565b60606119b182610ce9565b60006119bb611969565b905060008151116119db5760405180602001604052806000815250611a06565b806119e584611c56565b6040516020016119f6929190613711565b6040516020818303038152906040525b915050919050565b611a188383611d2e565b611a2560008484846117d2565b611a64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5b906136c0565b60405180910390fd5b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611adf84848484611f4c565b6001811115611b23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1a9061391c565b60405180910390fd5b6000829050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415611b6b57611b6681612072565b611baa565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611ba957611ba885826120bb565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611bed57611be881612228565b611c2c565b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611c2b57611c2a84826122f9565b5b5b5050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b606060006001611c6584612378565b01905060008167ffffffffffffffff811115611c8457611c83612852565b5b6040519080825280601f01601f191660200182016040528015611cb65781602001600182028036833780820191505090505b509050600082602001820190505b600115611d23578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611d0d57611d0c61393c565b5b0494506000851415611d1e57611d23565b611cc4565b819350505050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611d9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d95906139b7565b60405180910390fd5b611da781611779565b15611de7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dde90613a23565b60405180910390fd5b611df56000838360016117ba565b611dfe81611779565b15611e3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3590613a23565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611f486000838360016117cc565b5050565b600181111561206c57600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611fe05780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611fd89190613a43565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461206b5780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120639190613a77565b925050819055505b5b50505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b600060016120c8846108e4565b6120d29190613a43565b90506000600760008481526020019081526020016000205490508181146121b7576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b6000600160088054905061223c9190613a43565b905060006009600084815260200190815260200160002054905060006008838154811061226c5761226b612f58565b5b90600052602060002001549050806008838154811061228e5761228d612f58565b5b9060005260206000200181905550816009600083815260200190815260200160002081905550600960008581526020019081526020016000206000905560088054806122dd576122dc613acd565b5b6001900381819060005260206000200160009055905550505050565b6000612304836108e4565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106123d6577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816123cc576123cb61393c565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310612413576d04ee2d6d415b85acef810000000083816124095761240861393c565b5b0492506020810190505b662386f26fc10000831061244257662386f26fc1000083816124385761243761393c565b5b0492506010810190505b6305f5e100831061246b576305f5e10083816124615761246061393c565b5b0492506008810190505b61271083106124905761271083816124865761248561393c565b5b0492506004810190505b606483106124b357606483816124a9576124a861393c565b5b0492506002810190505b600a83106124c2576001810190505b80915050919050565b8280546124d790612e02565b90600052602060002090601f0160209004810192826124f95760008555612540565b82601f1061251257805160ff1916838001178555612540565b82800160010185558215612540579182015b8281111561253f578251825591602001919060010190612524565b5b50905061254d9190612551565b5090565b5b8082111561256a576000816000905550600101612552565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6125b781612582565b81146125c257600080fd5b50565b6000813590506125d4816125ae565b92915050565b6000602082840312156125f0576125ef612578565b5b60006125fe848285016125c5565b91505092915050565b60008115159050919050565b61261c81612607565b82525050565b60006020820190506126376000830184612613565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561267757808201518184015260208101905061265c565b83811115612686576000848401525b50505050565b6000601f19601f8301169050919050565b60006126a88261263d565b6126b28185612648565b93506126c2818560208601612659565b6126cb8161268c565b840191505092915050565b600060208201905081810360008301526126f0818461269d565b905092915050565b6000819050919050565b61270b816126f8565b811461271657600080fd5b50565b60008135905061272881612702565b92915050565b60006020828403121561274457612743612578565b5b600061275284828501612719565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006127868261275b565b9050919050565b6127968161277b565b82525050565b60006020820190506127b1600083018461278d565b92915050565b6127c08161277b565b81146127cb57600080fd5b50565b6000813590506127dd816127b7565b92915050565b600080604083850312156127fa576127f9612578565b5b6000612808858286016127ce565b925050602061281985828601612719565b9150509250929050565b61282c816126f8565b82525050565b60006020820190506128476000830184612823565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61288a8261268c565b810181811067ffffffffffffffff821117156128a9576128a8612852565b5b80604052505050565b60006128bc61256e565b90506128c88282612881565b919050565b600067ffffffffffffffff8211156128e8576128e7612852565b5b602082029050602081019050919050565b600080fd5b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff82111561292857612927612852565b5b6129318261268c565b9050602081019050919050565b82818337600083830152505050565b600061296061295b8461290d565b6128b2565b90508281526020810184848401111561297c5761297b612908565b5b61298784828561293e565b509392505050565b600082601f8301126129a4576129a361284d565b5b81356129b484826020860161294d565b91505092915050565b6000604082840312156129d3576129d26128fe565b5b6129dd60406128b2565b905060006129ed848285016127ce565b600083015250602082013567ffffffffffffffff811115612a1157612a10612903565b5b612a1d8482850161298f565b60208301525092915050565b6000612a3c612a37846128cd565b6128b2565b90508083825260208201905060208402830185811115612a5f57612a5e6128f9565b5b835b81811015612aa657803567ffffffffffffffff811115612a8457612a8361284d565b5b808601612a9189826129bd565b85526020850194505050602081019050612a61565b5050509392505050565b600082601f830112612ac557612ac461284d565b5b8135612ad5848260208601612a29565b91505092915050565b600060208284031215612af457612af3612578565b5b600082013567ffffffffffffffff811115612b1257612b1161257d565b5b612b1e84828501612ab0565b91505092915050565b600080600060608486031215612b4057612b3f612578565b5b6000612b4e868287016127ce565b9350506020612b5f868287016127ce565b9250506040612b7086828701612719565b9150509250925092565b600060208284031215612b9057612b8f612578565b5b6000612b9e848285016127ce565b91505092915050565b612bb081612607565b8114612bbb57600080fd5b50565b600081359050612bcd81612ba7565b92915050565b60008060408385031215612bea57612be9612578565b5b6000612bf8858286016127ce565b9250506020612c0985828601612bbe565b9150509250929050565b600067ffffffffffffffff821115612c2e57612c2d612852565b5b612c378261268c565b9050602081019050919050565b6000612c57612c5284612c13565b6128b2565b905082815260208101848484011115612c7357612c72612908565b5b612c7e84828561293e565b509392505050565b600082601f830112612c9b57612c9a61284d565b5b8135612cab848260208601612c44565b91505092915050565b60008060008060808587031215612cce57612ccd612578565b5b6000612cdc878288016127ce565b9450506020612ced878288016127ce565b9350506040612cfe87828801612719565b925050606085013567ffffffffffffffff811115612d1f57612d1e61257d565b5b612d2b87828801612c86565b91505092959194509250565b60008060408385031215612d4e57612d4d612578565b5b6000612d5c858286016127ce565b925050602083013567ffffffffffffffff811115612d7d57612d7c61257d565b5b612d898582860161298f565b9150509250929050565b60008060408385031215612daa57612da9612578565b5b6000612db8858286016127ce565b9250506020612dc9858286016127ce565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612e1a57607f821691505b60208210811415612e2e57612e2d612dd3565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612e90602183612648565b9150612e9b82612e34565b604082019050919050565b60006020820190508181036000830152612ebf81612e83565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000612f22603d83612648565b9150612f2d82612ec6565b604082019050919050565b60006020820190508181036000830152612f5181612f15565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612fc1826126f8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612ff457612ff3612f87565b5b600182019050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b600061305b602d83612648565b915061306682612fff565b604082019050919050565b6000602082019050818103600083015261308a8161304e565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b60006130ed602b83612648565b91506130f882613091565b604082019050919050565b6000602082019050818103600083015261311c816130e0565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b600061317f602c83612648565b915061318a82613123565b604082019050919050565b600060208201905081810360008301526131ae81613172565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006131eb601883612648565b91506131f6826131b5565b602082019050919050565b6000602082019050818103600083015261321a816131de565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061327d602983612648565b915061328882613221565b604082019050919050565b600060208201905081810360008301526132ac81613270565b9050919050565b600081905092915050565b7f697066733a2f2f00000000000000000000000000000000000000000000000000600082015250565b60006132f46007836132b3565b91506132ff826132be565b600782019050919050565b60008190508160005260206000209050919050565b6000815461332c81612e02565b61333681866132b3565b94506001821660008114613351576001811461336257613395565b60ff19831686528186019350613395565b61336b8561330a565b60005b8381101561338d5781548189015260018201915060208101905061336e565b838801955050505b50505092915050565b60006133a9826132e7565b91506133b5828461331f565b915081905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061341c602683612648565b9150613427826133c0565b604082019050919050565b6000602082019050818103600083015261344b8161340f565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613488602083612648565b915061349382613452565b602082019050919050565b600060208201905081810360008301526134b78161347b565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b600061351a602583612648565b9150613525826134be565b604082019050919050565b600060208201905081810360008301526135498161350d565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006135ac602483612648565b91506135b782613550565b604082019050919050565b600060208201905081810360008301526135db8161359f565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000613618601983612648565b9150613623826135e2565b602082019050919050565b600060208201905081810360008301526136478161360b565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006136aa603283612648565b91506136b58261364e565b604082019050919050565b600060208201905081810360008301526136d98161369d565b9050919050565b60006136eb8261263d565b6136f581856132b3565b9350613705818560208601612659565b80840191505092915050565b600061371d82856136e0565b915061372982846136e0565b91508190509392505050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000613791602e83612648565b915061379c82613735565b604082019050919050565b600060208201905081810360008301526137c081613784565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006137ee826137c7565b6137f881856137d2565b9350613808818560208601612659565b6138118161268c565b840191505092915050565b6000608082019050613831600083018761278d565b61383e602083018661278d565b61384b6040830185612823565b818103606083015261385d81846137e3565b905095945050505050565b600081519050613877816125ae565b92915050565b60006020828403121561389357613892612578565b5b60006138a184828501613868565b91505092915050565b7f455243373231456e756d657261626c653a20636f6e736563757469766520747260008201527f616e7366657273206e6f7420737570706f727465640000000000000000000000602082015250565b6000613906603583612648565b9150613911826138aa565b604082019050919050565b60006020820190508181036000830152613935816138f9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006139a1602083612648565b91506139ac8261396b565b602082019050919050565b600060208201905081810360008301526139d081613994565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613a0d601c83612648565b9150613a18826139d7565b602082019050919050565b60006020820190508181036000830152613a3c81613a00565b9050919050565b6000613a4e826126f8565b9150613a59836126f8565b925082821015613a6c57613a6b612f87565b5b828203905092915050565b6000613a82826126f8565b9150613a8d836126f8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613ac257613ac1612f87565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220af859ece001088f420a09a857ea50dc65b7bea89db02905e624d8854ebb9671964736f6c63430008090033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x142 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x375 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x391 JUMPI DUP1 PUSH4 0xD204C45E EQ PUSH2 0x3C1 JUMPI DUP1 PUSH4 0xE8A3D485 EQ PUSH2 0x3DD JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x3FB JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x42B JUMPI PUSH2 0x142 JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2E3 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x313 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x31D JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x33B JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x359 JUMPI PUSH2 0x142 JUMP JUMPDEST DUP1 PUSH4 0x1C02AEAF GT PUSH2 0x10A JUMPI DUP1 PUSH4 0x1C02AEAF EQ PUSH2 0x1FF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x21B JUMPI DUP1 PUSH4 0x2F745C59 EQ PUSH2 0x237 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x267 JUMPI DUP1 PUSH4 0x4F6CCCE7 EQ PUSH2 0x283 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x2B3 JUMPI PUSH2 0x142 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x195 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1E1 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x161 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x15C SWAP2 SWAP1 PUSH2 0x25DA JUMP JUMPDEST PUSH2 0x447 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16E SWAP2 SWAP1 PUSH2 0x2622 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17F PUSH2 0x459 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18C SWAP2 SWAP1 PUSH2 0x26D6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1AF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AA SWAP2 SWAP1 PUSH2 0x272E JUMP JUMPDEST PUSH2 0x4EB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BC SWAP2 SWAP1 PUSH2 0x279C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1DF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DA SWAP2 SWAP1 PUSH2 0x27E3 JUMP JUMPDEST PUSH2 0x531 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1E9 PUSH2 0x649 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F6 SWAP2 SWAP1 PUSH2 0x2832 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x219 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x214 SWAP2 SWAP1 PUSH2 0x2ADE JUMP JUMPDEST PUSH2 0x656 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x235 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x230 SWAP2 SWAP1 PUSH2 0x2B27 JUMP JUMPDEST PUSH2 0x6C7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x251 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x24C SWAP2 SWAP1 PUSH2 0x27E3 JUMP JUMPDEST PUSH2 0x727 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x25E SWAP2 SWAP1 PUSH2 0x2832 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x281 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x27C SWAP2 SWAP1 PUSH2 0x2B27 JUMP JUMPDEST PUSH2 0x7CC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x29D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x298 SWAP2 SWAP1 PUSH2 0x272E JUMP JUMPDEST PUSH2 0x7EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2AA SWAP2 SWAP1 PUSH2 0x2832 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2CD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C8 SWAP2 SWAP1 PUSH2 0x272E JUMP JUMPDEST PUSH2 0x85D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2DA SWAP2 SWAP1 PUSH2 0x279C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2FD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2F8 SWAP2 SWAP1 PUSH2 0x2B7A JUMP JUMPDEST PUSH2 0x8E4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30A SWAP2 SWAP1 PUSH2 0x2832 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31B PUSH2 0x99C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x325 PUSH2 0x9B0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x332 SWAP2 SWAP1 PUSH2 0x279C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x343 PUSH2 0x9DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x350 SWAP2 SWAP1 PUSH2 0x26D6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x373 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x36E SWAP2 SWAP1 PUSH2 0x2BD3 JUMP JUMPDEST PUSH2 0xA6C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x38F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x38A SWAP2 SWAP1 PUSH2 0x2CB4 JUMP JUMPDEST PUSH2 0xA82 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3AB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3A6 SWAP2 SWAP1 PUSH2 0x272E JUMP JUMPDEST PUSH2 0xAE4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3B8 SWAP2 SWAP1 PUSH2 0x26D6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3DB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3D6 SWAP2 SWAP1 PUSH2 0x2D37 JUMP JUMPDEST PUSH2 0xAF6 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3E5 PUSH2 0xB2F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F2 SWAP2 SWAP1 PUSH2 0x26D6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x415 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x410 SWAP2 SWAP1 PUSH2 0x2D93 JUMP JUMPDEST PUSH2 0xB57 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x422 SWAP2 SWAP1 PUSH2 0x2622 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x445 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x440 SWAP2 SWAP1 PUSH2 0x2B7A JUMP JUMPDEST PUSH2 0xBEB JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH2 0x452 DUP3 PUSH2 0xC6F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x468 SWAP1 PUSH2 0x2E02 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x494 SWAP1 PUSH2 0x2E02 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4E1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4B6 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4E1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4C4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4F6 DUP3 PUSH2 0xCE9 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x53C DUP3 PUSH2 0x85D JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x5AD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5A4 SWAP1 PUSH2 0x2EA6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x5CC PUSH2 0xD34 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x5FB JUMPI POP PUSH2 0x5FA DUP2 PUSH2 0x5F5 PUSH2 0xD34 JUMP JUMPDEST PUSH2 0xB57 JUMP JUMPDEST JUMPDEST PUSH2 0x63A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x631 SWAP1 PUSH2 0x2F38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x644 DUP4 DUP4 PUSH2 0xD3C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x65E PUSH2 0xDF5 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x6C3 JUMPI PUSH2 0x6B0 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x680 JUMPI PUSH2 0x67F PUSH2 0x2F58 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x69F JUMPI PUSH2 0x69E PUSH2 0x2F58 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD PUSH2 0xAF6 JUMP JUMPDEST DUP1 DUP1 PUSH2 0x6BB SWAP1 PUSH2 0x2FB6 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x661 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x6D8 PUSH2 0x6D2 PUSH2 0xD34 JUMP JUMPDEST DUP3 PUSH2 0xE73 JUMP JUMPDEST PUSH2 0x717 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x70E SWAP1 PUSH2 0x3071 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x722 DUP4 DUP4 DUP4 PUSH2 0xF08 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x732 DUP4 PUSH2 0x8E4 JUMP JUMPDEST DUP3 LT PUSH2 0x773 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x76A SWAP1 PUSH2 0x3103 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x7E7 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xA82 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7F6 PUSH2 0x649 JUMP JUMPDEST DUP3 LT PUSH2 0x837 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x82E SWAP1 PUSH2 0x3195 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x8 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x84B JUMPI PUSH2 0x84A PUSH2 0x2F58 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x869 DUP4 PUSH2 0x1202 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x8DB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8D2 SWAP1 PUSH2 0x3201 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x955 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x94C SWAP1 PUSH2 0x3293 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9A4 PUSH2 0xDF5 JUMP JUMPDEST PUSH2 0x9AE PUSH1 0x0 PUSH2 0x123F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0xB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x9E9 SWAP1 PUSH2 0x2E02 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xA15 SWAP1 PUSH2 0x2E02 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA62 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA37 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA62 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xA45 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xA7E PUSH2 0xA77 PUSH2 0xD34 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x1305 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xA93 PUSH2 0xA8D PUSH2 0xD34 JUMP JUMPDEST DUP4 PUSH2 0xE73 JUMP JUMPDEST PUSH2 0xAD2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAC9 SWAP1 PUSH2 0x3071 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xADE DUP5 DUP5 DUP5 DUP5 PUSH2 0x1472 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xAEF DUP3 PUSH2 0x14CE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xAFE PUSH2 0xDF5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB0A PUSH1 0xC PUSH2 0x15E1 JUMP JUMPDEST SWAP1 POP PUSH2 0xB16 PUSH1 0xC PUSH2 0x15EF JUMP JUMPDEST PUSH2 0xB20 DUP4 DUP3 PUSH2 0x1605 JUMP JUMPDEST PUSH2 0xB2A DUP2 DUP4 PUSH2 0x1623 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB43 SWAP2 SWAP1 PUSH2 0x339E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xBF3 PUSH2 0xDF5 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC63 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC5A SWAP1 PUSH2 0x3432 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC6C DUP2 PUSH2 0x123F JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x780E9D6300000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0xCE2 JUMPI POP PUSH2 0xCE1 DUP3 PUSH2 0x1697 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCF2 DUP2 PUSH2 0x1779 JUMP JUMPDEST PUSH2 0xD31 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD28 SWAP1 PUSH2 0x3201 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xDAF DUP4 PUSH2 0x85D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0xDFD PUSH2 0xD34 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xE1B PUSH2 0x9B0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xE71 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE68 SWAP1 PUSH2 0x349E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xE7F DUP4 PUSH2 0x85D JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xEC1 JUMPI POP PUSH2 0xEC0 DUP2 DUP6 PUSH2 0xB57 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xEFF JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xEE7 DUP5 PUSH2 0x4EB JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xF28 DUP3 PUSH2 0x85D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xF7E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF75 SWAP1 PUSH2 0x3530 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xFEE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFE5 SWAP1 PUSH2 0x35C2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xFFB DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x17BA JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x101B DUP3 PUSH2 0x85D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1071 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1068 SWAP1 PUSH2 0x3530 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x11FD DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x17CC JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0xB PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1374 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x136B SWAP1 PUSH2 0x362E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1465 SWAP2 SWAP1 PUSH2 0x2622 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x147D DUP5 DUP5 DUP5 PUSH2 0xF08 JUMP JUMPDEST PUSH2 0x1489 DUP5 DUP5 DUP5 DUP5 PUSH2 0x17D2 JUMP JUMPDEST PUSH2 0x14C8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14BF SWAP1 PUSH2 0x36C0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x14D9 DUP3 PUSH2 0xCE9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0x14F9 SWAP1 PUSH2 0x2E02 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1525 SWAP1 PUSH2 0x2E02 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1572 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1547 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1572 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1555 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x1583 PUSH2 0x1969 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x1599 JUMPI DUP2 SWAP3 POP POP POP PUSH2 0x15DC JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x15CE JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x15B6 SWAP3 SWAP2 SWAP1 PUSH2 0x3711 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP PUSH2 0x15DC JUMP JUMPDEST PUSH2 0x15D7 DUP5 PUSH2 0x19A6 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 0x161F DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1A0E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x162C DUP3 PUSH2 0x1779 JUMP JUMPDEST PUSH2 0x166B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1662 SWAP1 PUSH2 0x37A7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0xA PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1692 SWAP3 SWAP2 SWAP1 PUSH2 0x24CB JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x1762 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x1772 JUMPI POP PUSH2 0x1771 DUP3 PUSH2 0x1A69 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x179B DUP4 PUSH2 0x1202 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x17C6 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1AD3 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17F3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1C33 JUMP JUMPDEST ISZERO PUSH2 0x195C JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x181C PUSH2 0xD34 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x183E SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x381C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1858 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1889 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1886 SWAP2 SWAP1 PUSH2 0x387D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x190C JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x18B9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x18BE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD EQ ISZERO PUSH2 0x1904 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x18FB SWAP1 PUSH2 0x36C0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x1961 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x697066733A2F2F00000000000000000000000000000000000000000000000000 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x19B1 DUP3 PUSH2 0xCE9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19BB PUSH2 0x1969 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x19DB JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1A06 JUMP JUMPDEST DUP1 PUSH2 0x19E5 DUP5 PUSH2 0x1C56 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x19F6 SWAP3 SWAP2 SWAP1 PUSH2 0x3711 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A18 DUP4 DUP4 PUSH2 0x1D2E JUMP JUMPDEST PUSH2 0x1A25 PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x17D2 JUMP JUMPDEST PUSH2 0x1A64 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1A5B SWAP1 PUSH2 0x36C0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1ADF DUP5 DUP5 DUP5 DUP5 PUSH2 0x1F4C JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x1B23 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B1A SWAP1 PUSH2 0x391C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1B6B JUMPI PUSH2 0x1B66 DUP2 PUSH2 0x2072 JUMP JUMPDEST PUSH2 0x1BAA JUMP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1BA9 JUMPI PUSH2 0x1BA8 DUP6 DUP3 PUSH2 0x20BB JUMP JUMPDEST JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1BED JUMPI PUSH2 0x1BE8 DUP2 PUSH2 0x2228 JUMP JUMPDEST PUSH2 0x1C2C JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1C2B JUMPI PUSH2 0x1C2A DUP5 DUP3 PUSH2 0x22F9 JUMP JUMPDEST JUMPDEST JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1C65 DUP5 PUSH2 0x2378 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C84 JUMPI PUSH2 0x1C83 PUSH2 0x2852 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1CB6 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1D23 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1D0D JUMPI PUSH2 0x1D0C PUSH2 0x393C JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 EQ ISZERO PUSH2 0x1D1E JUMPI PUSH2 0x1D23 JUMP JUMPDEST PUSH2 0x1CC4 JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x1D9E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D95 SWAP1 PUSH2 0x39B7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1DA7 DUP2 PUSH2 0x1779 JUMP JUMPDEST ISZERO PUSH2 0x1DE7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1DDE SWAP1 PUSH2 0x3A23 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1DF5 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x17BA JUMP JUMPDEST PUSH2 0x1DFE DUP2 PUSH2 0x1779 JUMP JUMPDEST ISZERO PUSH2 0x1E3E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E35 SWAP1 PUSH2 0x3A23 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x1F48 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x17CC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x206C JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1FE0 JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1FD8 SWAP2 SWAP1 PUSH2 0x3A43 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x206B JUMPI DUP1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2063 SWAP2 SWAP1 PUSH2 0x3A77 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD SWAP1 POP PUSH1 0x9 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x8 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x20C8 DUP5 PUSH2 0x8E4 JUMP JUMPDEST PUSH2 0x20D2 SWAP2 SWAP1 PUSH2 0x3A43 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 EQ PUSH2 0x21B7 JUMPI PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP1 PUSH1 0x6 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x7 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH1 0x7 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x6 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x8 DUP1 SLOAD SWAP1 POP PUSH2 0x223C SWAP2 SWAP1 PUSH2 0x3A43 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x9 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x8 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x226C JUMPI PUSH2 0x226B PUSH2 0x2F58 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 PUSH1 0x8 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x228E JUMPI PUSH2 0x228D PUSH2 0x2F58 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x9 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x9 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x8 DUP1 SLOAD DUP1 PUSH2 0x22DD JUMPI PUSH2 0x22DC PUSH2 0x3ACD JUMP JUMPDEST JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2304 DUP4 PUSH2 0x8E4 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x6 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x7 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x23D6 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x23CC JUMPI PUSH2 0x23CB PUSH2 0x393C JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x2413 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x2409 JUMPI PUSH2 0x2408 PUSH2 0x393C JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x2442 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x2438 JUMPI PUSH2 0x2437 PUSH2 0x393C JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x246B JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x2461 JUMPI PUSH2 0x2460 PUSH2 0x393C JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x2490 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x2486 JUMPI PUSH2 0x2485 PUSH2 0x393C JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x24B3 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x24A9 JUMPI PUSH2 0x24A8 PUSH2 0x393C JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x24C2 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x24D7 SWAP1 PUSH2 0x2E02 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x24F9 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x2540 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x2512 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x2540 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x2540 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x253F JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x2524 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x254D SWAP2 SWAP1 PUSH2 0x2551 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x256A JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x2552 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x25B7 DUP2 PUSH2 0x2582 JUMP JUMPDEST DUP2 EQ PUSH2 0x25C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x25D4 DUP2 PUSH2 0x25AE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25F0 JUMPI PUSH2 0x25EF PUSH2 0x2578 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x25FE DUP5 DUP3 DUP6 ADD PUSH2 0x25C5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x261C DUP2 PUSH2 0x2607 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2637 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2613 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2677 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x265C JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x2686 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26A8 DUP3 PUSH2 0x263D JUMP JUMPDEST PUSH2 0x26B2 DUP2 DUP6 PUSH2 0x2648 JUMP JUMPDEST SWAP4 POP PUSH2 0x26C2 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2659 JUMP JUMPDEST PUSH2 0x26CB DUP2 PUSH2 0x268C JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x26F0 DUP2 DUP5 PUSH2 0x269D JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x270B DUP2 PUSH2 0x26F8 JUMP JUMPDEST DUP2 EQ PUSH2 0x2716 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2728 DUP2 PUSH2 0x2702 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2744 JUMPI PUSH2 0x2743 PUSH2 0x2578 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2752 DUP5 DUP3 DUP6 ADD PUSH2 0x2719 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2786 DUP3 PUSH2 0x275B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2796 DUP2 PUSH2 0x277B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x27B1 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x278D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x27C0 DUP2 PUSH2 0x277B JUMP JUMPDEST DUP2 EQ PUSH2 0x27CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x27DD DUP2 PUSH2 0x27B7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x27FA JUMPI PUSH2 0x27F9 PUSH2 0x2578 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2808 DUP6 DUP3 DUP7 ADD PUSH2 0x27CE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2819 DUP6 DUP3 DUP7 ADD PUSH2 0x2719 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x282C DUP2 PUSH2 0x26F8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2847 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2823 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x288A DUP3 PUSH2 0x268C JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x28A9 JUMPI PUSH2 0x28A8 PUSH2 0x2852 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28BC PUSH2 0x256E JUMP JUMPDEST SWAP1 POP PUSH2 0x28C8 DUP3 DUP3 PUSH2 0x2881 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x28E8 JUMPI PUSH2 0x28E7 PUSH2 0x2852 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2928 JUMPI PUSH2 0x2927 PUSH2 0x2852 JUMP JUMPDEST JUMPDEST PUSH2 0x2931 DUP3 PUSH2 0x268C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2960 PUSH2 0x295B DUP5 PUSH2 0x290D JUMP JUMPDEST PUSH2 0x28B2 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x297C JUMPI PUSH2 0x297B PUSH2 0x2908 JUMP JUMPDEST JUMPDEST PUSH2 0x2987 DUP5 DUP3 DUP6 PUSH2 0x293E JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x29A4 JUMPI PUSH2 0x29A3 PUSH2 0x284D JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x29B4 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x294D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x29D3 JUMPI PUSH2 0x29D2 PUSH2 0x28FE JUMP JUMPDEST JUMPDEST PUSH2 0x29DD PUSH1 0x40 PUSH2 0x28B2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x29ED DUP5 DUP3 DUP6 ADD PUSH2 0x27CE JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2A11 JUMPI PUSH2 0x2A10 PUSH2 0x2903 JUMP JUMPDEST JUMPDEST PUSH2 0x2A1D DUP5 DUP3 DUP6 ADD PUSH2 0x298F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A3C PUSH2 0x2A37 DUP5 PUSH2 0x28CD JUMP JUMPDEST PUSH2 0x28B2 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x20 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x2A5F JUMPI PUSH2 0x2A5E PUSH2 0x28F9 JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2AA6 JUMPI DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2A84 JUMPI PUSH2 0x2A83 PUSH2 0x284D JUMP JUMPDEST JUMPDEST DUP1 DUP7 ADD PUSH2 0x2A91 DUP10 DUP3 PUSH2 0x29BD JUMP JUMPDEST DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP5 POP POP POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2A61 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2AC5 JUMPI PUSH2 0x2AC4 PUSH2 0x284D JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2AD5 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2A29 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2AF4 JUMPI PUSH2 0x2AF3 PUSH2 0x2578 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2B12 JUMPI PUSH2 0x2B11 PUSH2 0x257D JUMP JUMPDEST JUMPDEST PUSH2 0x2B1E DUP5 DUP3 DUP6 ADD PUSH2 0x2AB0 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2B40 JUMPI PUSH2 0x2B3F PUSH2 0x2578 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2B4E DUP7 DUP3 DUP8 ADD PUSH2 0x27CE JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x2B5F DUP7 DUP3 DUP8 ADD PUSH2 0x27CE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2B70 DUP7 DUP3 DUP8 ADD PUSH2 0x2719 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2B90 JUMPI PUSH2 0x2B8F PUSH2 0x2578 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2B9E DUP5 DUP3 DUP6 ADD PUSH2 0x27CE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2BB0 DUP2 PUSH2 0x2607 JUMP JUMPDEST DUP2 EQ PUSH2 0x2BBB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2BCD DUP2 PUSH2 0x2BA7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2BEA JUMPI PUSH2 0x2BE9 PUSH2 0x2578 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2BF8 DUP6 DUP3 DUP7 ADD PUSH2 0x27CE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2C09 DUP6 DUP3 DUP7 ADD PUSH2 0x2BBE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2C2E JUMPI PUSH2 0x2C2D PUSH2 0x2852 JUMP JUMPDEST JUMPDEST PUSH2 0x2C37 DUP3 PUSH2 0x268C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C57 PUSH2 0x2C52 DUP5 PUSH2 0x2C13 JUMP JUMPDEST PUSH2 0x28B2 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x2C73 JUMPI PUSH2 0x2C72 PUSH2 0x2908 JUMP JUMPDEST JUMPDEST PUSH2 0x2C7E DUP5 DUP3 DUP6 PUSH2 0x293E JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2C9B JUMPI PUSH2 0x2C9A PUSH2 0x284D JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2CAB DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2C44 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2CCE JUMPI PUSH2 0x2CCD PUSH2 0x2578 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2CDC DUP8 DUP3 DUP9 ADD PUSH2 0x27CE JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x2CED DUP8 DUP3 DUP9 ADD PUSH2 0x27CE JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x2CFE DUP8 DUP3 DUP9 ADD PUSH2 0x2719 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2D1F JUMPI PUSH2 0x2D1E PUSH2 0x257D JUMP JUMPDEST JUMPDEST PUSH2 0x2D2B DUP8 DUP3 DUP9 ADD PUSH2 0x2C86 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2D4E JUMPI PUSH2 0x2D4D PUSH2 0x2578 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2D5C DUP6 DUP3 DUP7 ADD PUSH2 0x27CE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2D7D JUMPI PUSH2 0x2D7C PUSH2 0x257D JUMP JUMPDEST JUMPDEST PUSH2 0x2D89 DUP6 DUP3 DUP7 ADD PUSH2 0x298F JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2DAA JUMPI PUSH2 0x2DA9 PUSH2 0x2578 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2DB8 DUP6 DUP3 DUP7 ADD PUSH2 0x27CE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x2DC9 DUP6 DUP3 DUP7 ADD PUSH2 0x27CE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2E1A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x2E2E JUMPI PUSH2 0x2E2D PUSH2 0x2DD3 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2E90 PUSH1 0x21 DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x2E9B DUP3 PUSH2 0x2E34 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2EBF DUP2 PUSH2 0x2E83 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F22 PUSH1 0x3D DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x2F2D DUP3 PUSH2 0x2EC6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2F51 DUP2 PUSH2 0x2F15 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x2FC1 DUP3 PUSH2 0x26F8 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x2FF4 JUMPI PUSH2 0x2FF3 PUSH2 0x2F87 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x305B PUSH1 0x2D DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x3066 DUP3 PUSH2 0x2FFF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x308A DUP2 PUSH2 0x304E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x455243373231456E756D657261626C653A206F776E657220696E646578206F75 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x74206F6620626F756E6473000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x30ED PUSH1 0x2B DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x30F8 DUP3 PUSH2 0x3091 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x311C DUP2 PUSH2 0x30E0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x455243373231456E756D657261626C653A20676C6F62616C20696E646578206F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7574206F6620626F756E64730000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x317F PUSH1 0x2C DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x318A DUP3 PUSH2 0x3123 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x31AE DUP2 PUSH2 0x3172 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x31EB PUSH1 0x18 DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x31F6 DUP3 PUSH2 0x31B5 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x321A DUP2 PUSH2 0x31DE JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x327D PUSH1 0x29 DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x3288 DUP3 PUSH2 0x3221 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x32AC DUP2 PUSH2 0x3270 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x697066733A2F2F00000000000000000000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x32F4 PUSH1 0x7 DUP4 PUSH2 0x32B3 JUMP JUMPDEST SWAP2 POP PUSH2 0x32FF DUP3 PUSH2 0x32BE JUMP JUMPDEST PUSH1 0x7 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SLOAD PUSH2 0x332C DUP2 PUSH2 0x2E02 JUMP JUMPDEST PUSH2 0x3336 DUP2 DUP7 PUSH2 0x32B3 JUMP JUMPDEST SWAP5 POP PUSH1 0x1 DUP3 AND PUSH1 0x0 DUP2 EQ PUSH2 0x3351 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x3362 JUMPI PUSH2 0x3395 JUMP JUMPDEST PUSH1 0xFF NOT DUP4 AND DUP7 MSTORE DUP2 DUP7 ADD SWAP4 POP PUSH2 0x3395 JUMP JUMPDEST PUSH2 0x336B DUP6 PUSH2 0x330A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x338D JUMPI DUP2 SLOAD DUP2 DUP10 ADD MSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x336E JUMP JUMPDEST DUP4 DUP9 ADD SWAP6 POP POP POP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33A9 DUP3 PUSH2 0x32E7 JUMP JUMPDEST SWAP2 POP PUSH2 0x33B5 DUP3 DUP5 PUSH2 0x331F JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x341C PUSH1 0x26 DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x3427 DUP3 PUSH2 0x33C0 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x344B DUP2 PUSH2 0x340F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3488 PUSH1 0x20 DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x3493 DUP3 PUSH2 0x3452 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x34B7 DUP2 PUSH2 0x347B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x351A PUSH1 0x25 DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x3525 DUP3 PUSH2 0x34BE JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3549 DUP2 PUSH2 0x350D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x35AC PUSH1 0x24 DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x35B7 DUP3 PUSH2 0x3550 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x35DB DUP2 PUSH2 0x359F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3618 PUSH1 0x19 DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x3623 DUP3 PUSH2 0x35E2 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3647 DUP2 PUSH2 0x360B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36AA PUSH1 0x32 DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x36B5 DUP3 PUSH2 0x364E JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x36D9 DUP2 PUSH2 0x369D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36EB DUP3 PUSH2 0x263D JUMP JUMPDEST PUSH2 0x36F5 DUP2 DUP6 PUSH2 0x32B3 JUMP JUMPDEST SWAP4 POP PUSH2 0x3705 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2659 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x371D DUP3 DUP6 PUSH2 0x36E0 JUMP JUMPDEST SWAP2 POP PUSH2 0x3729 DUP3 DUP5 PUSH2 0x36E0 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x45524337323155524953746F726167653A2055524920736574206F66206E6F6E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6578697374656E7420746F6B656E000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3791 PUSH1 0x2E DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x379C DUP3 PUSH2 0x3735 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x37C0 DUP2 PUSH2 0x3784 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37EE DUP3 PUSH2 0x37C7 JUMP JUMPDEST PUSH2 0x37F8 DUP2 DUP6 PUSH2 0x37D2 JUMP JUMPDEST SWAP4 POP PUSH2 0x3808 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x2659 JUMP JUMPDEST PUSH2 0x3811 DUP2 PUSH2 0x268C JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x3831 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x278D JUMP JUMPDEST PUSH2 0x383E PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x278D JUMP JUMPDEST PUSH2 0x384B PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2823 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x385D DUP2 DUP5 PUSH2 0x37E3 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3877 DUP2 PUSH2 0x25AE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3893 JUMPI PUSH2 0x3892 PUSH2 0x2578 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x38A1 DUP5 DUP3 DUP6 ADD PUSH2 0x3868 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x455243373231456E756D657261626C653A20636F6E7365637574697665207472 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x616E7366657273206E6F7420737570706F727465640000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3906 PUSH1 0x35 DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x3911 DUP3 PUSH2 0x38AA JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3935 DUP2 PUSH2 0x38F9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x39A1 PUSH1 0x20 DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x39AC DUP3 PUSH2 0x396B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x39D0 DUP2 PUSH2 0x3994 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A0D PUSH1 0x1C DUP4 PUSH2 0x2648 JUMP JUMPDEST SWAP2 POP PUSH2 0x3A18 DUP3 PUSH2 0x39D7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x3A3C DUP2 PUSH2 0x3A00 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A4E DUP3 PUSH2 0x26F8 JUMP JUMPDEST SWAP2 POP PUSH2 0x3A59 DUP4 PUSH2 0x26F8 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x3A6C JUMPI PUSH2 0x3A6B PUSH2 0x2F87 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A82 DUP3 PUSH2 0x26F8 JUMP JUMPDEST SWAP2 POP PUSH2 0x3A8D DUP4 PUSH2 0x26F8 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x3AC2 JUMPI PUSH2 0x3AC1 PUSH2 0x2F87 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAF DUP6 SWAP15 0xCE STOP LT DUP9 DELEGATECALL KECCAK256 LOG0 SWAP11 DUP6 PUSH31 0xA50DC65B7BEA89DB02905E624D8854EBB9671964736F6C6343000809003300 ","sourceMap":"380:2002:25:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2175:205;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2471:98:7;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3935:167;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3468:406;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1630:111:10;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1324:190:25;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4612:326:7;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1306:253:10;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5004:179:7;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1813:230:10;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2190:219:7;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1929:204;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1831:101:0;;;:::i;:::-;;1201:85;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2633:102:7;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4169:153;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5249:314;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1980:189:25;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1087:231;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;949:132;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4388:162:7;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2081:198:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2175:205:25;2310:4;2337:36;2361:11;2337:23;:36::i;:::-;2330:43;;2175:205;;;:::o;2471:98:7:-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;4071:15;:24;4087:7;4071:24;;;;;;;;;;;;;;;;;;;;;4064:31;;3935:167;;;:::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;3605:11;;:2;:11;;;;3597:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;3702:5;3686:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;3711:37;3728:5;3735:12;:10;:12::i;:::-;3711:16;:37::i;:::-;3686:62;3665:170;;;;;;;;;;;;:::i;:::-;;;;;;;;;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;1630:111:10:-;1691:7;1717:10;:17;;;;1710:24;;1630:111;:::o;1324:190:25:-;1094:13:0;:11;:13::i;:::-;1405:9:25::1;1400:108;1424:5;:12;1420:1;:16;1400:108;;;1457:40;1466:5;1472:1;1466:8;;;;;;;;:::i;:::-;;;;;;;;:11;;;1479:5;1485:1;1479:8;;;;;;;;:::i;:::-;;;;;;;;:17;;;1457:8;:40::i;:::-;1438:3;;;;;:::i;:::-;;;;1400:108;;;;1324:190:::0;:::o;4612:326:7:-;4801:41;4820:12;:10;:12::i;:::-;4834:7;4801:18;:41::i;:::-;4793:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;4903:28;4913:4;4919:2;4923:7;4903:9;:28::i;:::-;4612:326;;;:::o;1306:253:10:-;1403:7;1438:23;1455:5;1438:16;:23::i;:::-;1430:5;:31;1422:87;;;;;;;;;;;;:::i;:::-;;;;;;;;;1526:12;:19;1539:5;1526:19;;;;;;;;;;;;;;;:26;1546:5;1526:26;;;;;;;;;;;;1519:33;;1306:253;;;;:::o;5004:179:7:-;5137:39;5154:4;5160:2;5164:7;5137:39;;;;;;;;;;;;:16;:39::i;:::-;5004:179;;;:::o;1813:230:10:-;1888:7;1923:30;:28;:30::i;:::-;1915:5;:38;1907:95;;;;;;;;;;;;:::i;:::-;;;;;;;;;2019:10;2030:5;2019:17;;;;;;;;:::i;:::-;;;;;;;;;;2012:24;;1813:230;;;:::o;2190:219:7:-;2262:7;2281:13;2297:17;2306:7;2297:8;:17::i;:::-;2281:33;;2349:1;2332:19;;:5;:19;;;;2324:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;2397:5;2390:12;;;2190:219;;;:::o;1929:204::-;2001:7;2045:1;2028:19;;:5;:19;;;;2020:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2110:9;:16;2120:5;2110:16;;;;;;;;;;;;;;;;2103:23;;1929:204;;;:::o;1831:101:0:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;1201:85::-;1247:7;1273:6;;;;;;;;;;;1266:13;;1201:85;:::o;2633:102:7:-;2689:13;2721:7;2714:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2633:102;:::o;4169:153::-;4263:52;4282:12;:10;:12::i;:::-;4296:8;4306;4263:18;:52::i;:::-;4169:153;;:::o;5249:314::-;5417:41;5436:12;:10;:12::i;:::-;5450:7;5417:18;:41::i;:::-;5409:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;5518:38;5532:4;5538:2;5542:7;5551:4;5518:13;:38::i;:::-;5249:314;;;;:::o;1980:189:25:-;2103:13;2139:23;2154:7;2139:14;:23::i;:::-;2132:30;;1980:189;;;:::o;1087:231::-;1094:13:0;:11;:13::i;:::-;1163:15:25::1;1181:25;:15;:23;:25::i;:::-;1163:43;;1216:27;:15;:25;:27::i;:::-;1253:22;1263:2;1267:7;1253:9;:22::i;:::-;1285:26;1298:7;1307:3;1285:12;:26::i;:::-;1153:165;1087:231:::0;;:::o;949:132::-;993:13;1060:12;1032:41;;;;;;;;:::i;:::-;;;;;;;;;;;;;1018:56;;949:132;:::o;4388:162:7:-;4485:4;4508:18;:25;4527:5;4508:25;;;;;;;;;;;;;;;:35;4534:8;4508:35;;;;;;;;;;;;;;;;;;;;;;;;;4501:42;;4388:162;;;;:::o;2081:198:0:-;1094:13;:11;:13::i;:::-;2189:1:::1;2169:22;;:8;:22;;;;2161:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2244:28;2263:8;2244:18;:28::i;:::-;2081:198:::0;:::o;1005:222:10:-;1107:4;1145:35;1130:50;;;:11;:50;;;;:90;;;;1184:36;1208:11;1184:23;:36::i;:::-;1130:90;1123:97;;1005:222;;;:::o;13466:133:7:-;13547:16;13555:7;13547;:16::i;:::-;13539:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;13466:133;:::o;640:96:15:-;693:7;719:10;712:17;;640:96;:::o;12768:171:7:-;12869:2;12842:15;:24;12858:7;12842:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;12924:7;12920:2;12886:46;;12895:23;12910:7;12895:14;:23::i;:::-;12886:46;;;;;;;;;;;;12768:171;;:::o;1359:130:0:-;1433:12;:10;:12::i;:::-;1422:23;;:7;:5;:7::i;:::-;:23;;;1414:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;1359:130::o;7540:261:7:-;7633:4;7649:13;7665:23;7680:7;7665:14;:23::i;:::-;7649:39;;7717:5;7706:16;;:7;:16;;;:52;;;;7726:32;7743:5;7750:7;7726:16;:32::i;:::-;7706:52;:87;;;;7786:7;7762:31;;:20;7774:7;7762:11;:20::i;:::-;:31;;;7706:87;7698:96;;;7540:261;;;;:::o;11423:1233::-;11577:4;11550:31;;:23;11565:7;11550:14;:23::i;:::-;:31;;;11542:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11655:1;11641:16;;:2;:16;;;;11633:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;11709:42;11730:4;11736:2;11740:7;11749:1;11709:20;:42::i;:::-;11878:4;11851:31;;:23;11866:7;11851:14;:23::i;:::-;:31;;;11843:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11993:15;:24;12009:7;11993:24;;;;;;;;;;;;11986:31;;;;;;;;;;;12480:1;12461:9;:15;12471:4;12461:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;12512:1;12495:9;:13;12505:2;12495:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;12552:2;12533:7;:16;12541:7;12533:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;12589:7;12585:2;12570:27;;12579:4;12570:27;;;;;;;;;;;;12608:41;12628:4;12634:2;12638:7;12647:1;12608:19;:41::i;:::-;11423:1233;;;:::o;6838:115::-;6904:7;6930;:16;6938:7;6930:16;;;;;;;;;;;;;;;;;;;;;6923:23;;6838:115;;;:::o;2433:187:0:-;2506:16;2525:6;;;;;;;;;;;2506:25;;2550:8;2541:6;;:17;;;;;;;;;;;;;;;;;;2604:8;2573:40;;2594:8;2573:40;;;;;;;;;;;;2496:124;2433:187;:::o;13075:307:7:-;13225:8;13216:17;;:5;:17;;;;13208:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;13311:8;13273:18;:25;13292:5;13273:25;;;;;;;;;;;;;;;:35;13299:8;13273:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;13356:8;13334:41;;13349:5;13334:41;;;13366:8;13334:41;;;;;;:::i;:::-;;;;;;;;13075:307;;;:::o;6424:305::-;6574:28;6584:4;6590:2;6594:7;6574:9;:28::i;:::-;6620:47;6643:4;6649:2;6653:7;6662:4;6620:22;:47::i;:::-;6612:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;6424:305;;;;:::o;482:608:11:-;555:13;580:23;595:7;580:14;:23::i;:::-;614;640:10;:19;651:7;640:19;;;;;;;;;;;614:45;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;669:18;690:10;:8;:10::i;:::-;669:31;;795:1;779:4;773:18;:23;769:70;;;819:9;812:16;;;;;;769:70;967:1;947:9;941:23;:27;937:106;;;1015:4;1021:9;998:33;;;;;;;;;:::i;:::-;;;;;;;;;;;;;984:48;;;;;;937:106;1060:23;1075:7;1060:14;:23::i;:::-;1053:30;;;;482:608;;;;:::o;827:112:16:-;892:7;918;:14;;;911:21;;827:112;;;:::o;945:123::-;1050:1;1032:7;:14;;;:19;;;;;;;;;;;945:123;:::o;8131:108:7:-;8206:26;8216:2;8220:7;8206:26;;;;;;;;;;;;:9;:26::i;:::-;8131:108;;:::o;1237:214:11:-;1336:16;1344:7;1336;:16::i;:::-;1328:75;;;;;;;;;;;;:::i;:::-;;;;;;;;;1435:9;1413:10;:19;1424:7;1413:19;;;;;;;;;;;:31;;;;;;;;;;;;:::i;:::-;;1237:214;;:::o;1570:300:7:-;1672:4;1722:25;1707:40;;;:11;:40;;;;:104;;;;1778:33;1763:48;;;:11;:48;;;;1707:104;:156;;;;1827:36;1851:11;1827:23;:36::i;:::-;1707:156;1688:175;;1570:300;;;:::o;7256:126::-;7321:4;7373:1;7344:31;;:17;7353:7;7344:8;:17::i;:::-;:31;;;;7337:38;;7256:126;;;:::o;1588:247:25:-;1772:56;1799:4;1805:2;1809:7;1818:9;1772:26;:56::i;:::-;1588:247;;;;:::o;16800:153:7:-;;;;;:::o;14151:831::-;14300:4;14320:15;:2;:13;;;:15::i;:::-;14316:660;;;14371:2;14355:36;;;14392:12;:10;:12::i;:::-;14406:4;14412:7;14421:4;14355:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14351:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14610:1;14593:6;:13;:18;14589:321;;;14635:60;;;;;;;;;;:::i;:::-;;;;;;;;14589:321;14862:6;14856:13;14847:6;14843:2;14839:15;14832:38;14351:573;14486:41;;;14476:51;;;:6;:51;;;;14469:58;;;;;14316:660;14961:4;14954:11;;14151:831;;;;;;;:::o;843:100:25:-;895:13;920:16;;;;;;;;;;;;;;;;;;;843:100;:::o;2801:276:7:-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;:8;:10::i;:::-;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;;;2801:276;;;:::o;8460:309::-;8584:18;8590:2;8594:7;8584:5;:18::i;:::-;8633:53;8664:1;8668:2;8672:7;8681:4;8633:22;:53::i;:::-;8612:150;;;;;;;;;;;;:::i;:::-;;;;;;;;;8460:309;;;:::o;829:155:20:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;2112:890:10:-;2283:61;2310:4;2316:2;2320:12;2334:9;2283:26;:61::i;:::-;2371:1;2359:9;:13;2355:219;;;2500:63;;;;;;;;;;:::i;:::-;;;;;;;;2355:219;2584:15;2602:12;2584:30;;2645:1;2629:18;;:4;:18;;;2625:183;;;2663:40;2695:7;2663:31;:40::i;:::-;2625:183;;;2732:2;2724:10;;:4;:10;;;2720:88;;2750:47;2783:4;2789:7;2750:32;:47::i;:::-;2720:88;2625:183;2835:1;2821:16;;:2;:16;;;2817:179;;;2853:45;2890:7;2853:36;:45::i;:::-;2817:179;;;2925:4;2919:10;;:2;:10;;;2915:81;;2945:40;2973:2;2977:7;2945:27;:40::i;:::-;2915:81;2817:179;2273:729;2112:890;;;;:::o;1175:320:14:-;1235:4;1487:1;1465:7;:19;;;:23;1458:30;;1175:320;;;:::o;415:696:17:-;471:13;520:14;557:1;537:17;548:5;537:10;:17::i;:::-;:21;520:38;;572:20;606:6;595:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;572:41;;627:11;753:6;749:2;745:15;737:6;733:28;726:35;;788:280;795:4;788:280;;;819:5;;;;;;;;958:8;953:2;946:5;942:14;937:30;932:3;924:44;1012:2;1003:11;;;;;;:::i;:::-;;;;;1045:1;1036:5;:10;1032:21;;;1048:5;;1032:21;788:280;;;1088:6;1081:13;;;;;415:696;;;:::o;9091:920:7:-;9184:1;9170:16;;:2;:16;;;;9162:61;;;;;;;;;;;;:::i;:::-;;;;;;;;;9242:16;9250:7;9242;:16::i;:::-;9241:17;9233:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;9302:48;9331:1;9335:2;9339:7;9348:1;9302:20;:48::i;:::-;9446:16;9454:7;9446;:16::i;:::-;9445:17;9437:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;9854:1;9837:9;:13;9847:2;9837:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;9895:2;9876:7;:16;9884:7;9876:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;9938:7;9934:2;9913:33;;9930:1;9913:33;;;;;;;;;;;;9957:47;9985:1;9989:2;9993:7;10002:1;9957:19;:47::i;:::-;9091:920;;:::o;15698:396::-;15882:1;15870:9;:13;15866:222;;;15919:1;15903:18;;:4;:18;;;15899:85;;15960:9;15941;:15;15951:4;15941:15;;;;;;;;;;;;;;;;:28;;;;;;;:::i;:::-;;;;;;;;15899:85;16015:1;16001:16;;:2;:16;;;15997:81;;16054:9;16037;:13;16047:2;16037:13;;;;;;;;;;;;;;;;:26;;;;;;;:::i;:::-;;;;;;;;15997:81;15866:222;15698:396;;;;:::o;3708:161:10:-;3811:10;:17;;;;3784:15;:24;3800:7;3784:24;;;;;;;;;;;:44;;;;3838:10;3854:7;3838:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3708:161;:::o;4486:970::-;4748:22;4798:1;4773:22;4790:4;4773:16;:22::i;:::-;:26;;;;:::i;:::-;4748:51;;4809:18;4830:17;:26;4848:7;4830:26;;;;;;;;;;;;4809:47;;4974:14;4960:10;:28;4956:323;;5004:19;5026:12;:18;5039:4;5026:18;;;;;;;;;;;;;;;:34;5045:14;5026:34;;;;;;;;;;;;5004:56;;5108:11;5075:12;:18;5088:4;5075:18;;;;;;;;;;;;;;;:30;5094:10;5075:30;;;;;;;;;;;:44;;;;5224:10;5191:17;:30;5209:11;5191:30;;;;;;;;;;;:43;;;;4990:289;4956:323;5372:17;:26;5390:7;5372:26;;;;;;;;;;;5365:33;;;5415:12;:18;5428:4;5415:18;;;;;;;;;;;;;;;:34;5434:14;5415:34;;;;;;;;;;;5408:41;;;4567:889;;4486:970;;:::o;5744:1061::-;5993:22;6038:1;6018:10;:17;;;;:21;;;;:::i;:::-;5993:46;;6049:18;6070:15;:24;6086:7;6070:24;;;;;;;;;;;;6049:45;;6416:19;6438:10;6449:14;6438:26;;;;;;;;:::i;:::-;;;;;;;;;;6416:48;;6500:11;6475:10;6486;6475:22;;;;;;;;:::i;:::-;;;;;;;;;:36;;;;6610:10;6579:15;:28;6595:11;6579:28;;;;;;;;;;;:41;;;;6748:15;:24;6764:7;6748:24;;;;;;;;;;;6741:31;;;6782:10;:16;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5815:990;;;5744:1061;:::o;3296:217::-;3380:14;3397:20;3414:2;3397:16;:20::i;:::-;3380:37;;3454:7;3427:12;:16;3440:2;3427:16;;;;;;;;;;;;;;;:24;3444:6;3427:24;;;;;;;;;;;:34;;;;3500:6;3471:17;:26;3489:7;3471:26;;;;;;;;;;;:35;;;;3370:143;3296:217;;:::o;9889:890:22:-;9942:7;9961:14;9978:1;9961:18;;10026:6;10017:5;:15;10013:99;;10061:6;10052:15;;;;;;:::i;:::-;;;;;10095:2;10085:12;;;;10013:99;10138:6;10129:5;:15;10125:99;;10173:6;10164:15;;;;;;:::i;:::-;;;;;10207:2;10197:12;;;;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;;;;:::i;:::-;;;;;10319:2;10309:12;;;;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;;;;:::i;:::-;;;;;10429:1;10419:11;;;;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;;;;:::i;:::-;;;;;10538:1;10528:11;;;;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;;;;:::i;:::-;;;;;10647:1;10637:11;;;;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;;;;10676:64;10766:6;10759:13;;;9889:890;;;:::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:75:26:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:99::-;1570:6;1604:5;1598:12;1588:22;;1518:99;;;:::o;1623:169::-;1707:11;1741:6;1736:3;1729:19;1781:4;1776:3;1772:14;1757:29;;1623:169;;;;:::o;1798:307::-;1866:1;1876:113;1890:6;1887:1;1884:13;1876:113;;;1975:1;1970:3;1966:11;1960:18;1956:1;1951:3;1947:11;1940:39;1912:2;1909:1;1905:10;1900:15;;1876:113;;;2007:6;2004:1;2001:13;1998:101;;;2087:1;2078:6;2073:3;2069:16;2062:27;1998:101;1847:258;1798:307;;;:::o;2111:102::-;2152:6;2203:2;2199:7;2194:2;2187:5;2183:14;2179:28;2169:38;;2111:102;;;:::o;2219:364::-;2307:3;2335:39;2368:5;2335:39;:::i;:::-;2390:71;2454:6;2449:3;2390:71;:::i;:::-;2383:78;;2470:52;2515:6;2510:3;2503:4;2496:5;2492:16;2470:52;:::i;:::-;2547:29;2569:6;2547:29;:::i;:::-;2542:3;2538:39;2531:46;;2311:272;2219:364;;;;:::o;2589:313::-;2702:4;2740:2;2729:9;2725:18;2717:26;;2789:9;2783:4;2779:20;2775:1;2764:9;2760:17;2753:47;2817:78;2890:4;2881:6;2817:78;:::i;:::-;2809:86;;2589:313;;;;:::o;2908:77::-;2945:7;2974:5;2963:16;;2908:77;;;:::o;2991:122::-;3064:24;3082:5;3064:24;:::i;:::-;3057:5;3054:35;3044:63;;3103:1;3100;3093:12;3044:63;2991:122;:::o;3119:139::-;3165:5;3203:6;3190:20;3181:29;;3219:33;3246:5;3219:33;:::i;:::-;3119:139;;;;:::o;3264:329::-;3323:6;3372:2;3360:9;3351:7;3347:23;3343:32;3340:119;;;3378:79;;:::i;:::-;3340:119;3498:1;3523:53;3568:7;3559:6;3548:9;3544:22;3523:53;:::i;:::-;3513:63;;3469:117;3264:329;;;;:::o;3599:126::-;3636:7;3676:42;3669:5;3665:54;3654:65;;3599:126;;;:::o;3731:96::-;3768:7;3797:24;3815:5;3797:24;:::i;:::-;3786:35;;3731:96;;;:::o;3833:118::-;3920:24;3938:5;3920:24;:::i;:::-;3915:3;3908:37;3833:118;;:::o;3957:222::-;4050:4;4088:2;4077:9;4073:18;4065:26;;4101:71;4169:1;4158:9;4154:17;4145:6;4101:71;:::i;:::-;3957:222;;;;:::o;4185:122::-;4258:24;4276:5;4258:24;:::i;:::-;4251:5;4248:35;4238:63;;4297:1;4294;4287:12;4238:63;4185:122;:::o;4313:139::-;4359:5;4397:6;4384:20;4375:29;;4413:33;4440:5;4413:33;:::i;:::-;4313:139;;;;:::o;4458:474::-;4526:6;4534;4583:2;4571:9;4562:7;4558:23;4554:32;4551:119;;;4589:79;;:::i;:::-;4551:119;4709:1;4734:53;4779:7;4770:6;4759:9;4755:22;4734:53;:::i;:::-;4724:63;;4680:117;4836:2;4862:53;4907:7;4898:6;4887:9;4883:22;4862:53;:::i;:::-;4852:63;;4807:118;4458:474;;;;;:::o;4938:118::-;5025:24;5043:5;5025:24;:::i;:::-;5020:3;5013:37;4938:118;;:::o;5062:222::-;5155:4;5193:2;5182:9;5178:18;5170:26;;5206:71;5274:1;5263:9;5259:17;5250:6;5206:71;:::i;:::-;5062:222;;;;:::o;5290:117::-;5399:1;5396;5389:12;5413:180;5461:77;5458:1;5451:88;5558:4;5555:1;5548:15;5582:4;5579:1;5572:15;5599:281;5682:27;5704:4;5682:27;:::i;:::-;5674:6;5670:40;5812:6;5800:10;5797:22;5776:18;5764:10;5761:34;5758:62;5755:88;;;5823:18;;:::i;:::-;5755:88;5863:10;5859:2;5852:22;5642:238;5599:281;;:::o;5886:129::-;5920:6;5947:20;;:::i;:::-;5937:30;;5976:33;6004:4;5996:6;5976:33;:::i;:::-;5886:129;;;:::o;6021:338::-;6125:4;6215:18;6207:6;6204:30;6201:56;;;6237:18;;:::i;:::-;6201:56;6287:4;6279:6;6275:17;6267:25;;6347:4;6341;6337:15;6329:23;;6021:338;;;:::o;6365:117::-;6474:1;6471;6464:12;6488:117;6597:1;6594;6587:12;6611:117;6720:1;6717;6710:12;6734:117;6843:1;6840;6833:12;6857:308;6919:4;7009:18;7001:6;6998:30;6995:56;;;7031:18;;:::i;:::-;6995:56;7069:29;7091:6;7069:29;:::i;:::-;7061:37;;7153:4;7147;7143:15;7135:23;;6857:308;;;:::o;7171:154::-;7255:6;7250:3;7245;7232:30;7317:1;7308:6;7303:3;7299:16;7292:27;7171:154;;;:::o;7331:412::-;7409:5;7434:66;7450:49;7492:6;7450:49;:::i;:::-;7434:66;:::i;:::-;7425:75;;7523:6;7516:5;7509:21;7561:4;7554:5;7550:16;7599:3;7590:6;7585:3;7581:16;7578:25;7575:112;;;7606:79;;:::i;:::-;7575:112;7696:41;7730:6;7725:3;7720;7696:41;:::i;:::-;7415:328;7331:412;;;;;:::o;7763:340::-;7819:5;7868:3;7861:4;7853:6;7849:17;7845:27;7835:122;;7876:79;;:::i;:::-;7835:122;7993:6;7980:20;8018:79;8093:3;8085:6;8078:4;8070:6;8066:17;8018:79;:::i;:::-;8009:88;;7825:278;7763:340;;;;:::o;8141:748::-;8217:5;8261:4;8249:9;8244:3;8240:19;8236:30;8233:117;;;8269:79;;:::i;:::-;8233:117;8368:21;8384:4;8368:21;:::i;:::-;8359:30;;8446:1;8486:49;8531:3;8522:6;8511:9;8507:22;8486:49;:::i;:::-;8479:4;8472:5;8468:16;8461:75;8399:148;8638:2;8627:9;8623:18;8610:32;8669:18;8661:6;8658:30;8655:117;;;8691:79;;:::i;:::-;8655:117;8811:59;8866:3;8857:6;8846:9;8842:22;8811:59;:::i;:::-;8804:4;8797:5;8793:16;8786:85;8557:325;8141:748;;;;:::o;8929:996::-;9052:5;9077:108;9093:91;9177:6;9093:91;:::i;:::-;9077:108;:::i;:::-;9068:117;;9205:5;9234:6;9227:5;9220:21;9268:4;9261:5;9257:16;9250:23;;9321:4;9313:6;9309:17;9301:6;9297:30;9350:3;9342:6;9339:15;9336:122;;;9369:79;;:::i;:::-;9336:122;9484:6;9467:452;9501:6;9496:3;9493:15;9467:452;;;9590:3;9577:17;9626:18;9613:11;9610:35;9607:122;;;9648:79;;:::i;:::-;9607:122;9772:11;9764:6;9760:24;9810:64;9870:3;9858:10;9810:64;:::i;:::-;9805:3;9798:77;9904:4;9899:3;9895:14;9888:21;;9543:376;;9527:4;9522:3;9518:14;9511:21;;9467:452;;;9471:21;9058:867;;8929:996;;;;;:::o;9965:424::-;10063:5;10112:3;10105:4;10097:6;10093:17;10089:27;10079:122;;10120:79;;:::i;:::-;10079:122;10237:6;10224:20;10262:121;10379:3;10371:6;10364:4;10356:6;10352:17;10262:121;:::i;:::-;10253:130;;10069:320;9965:424;;;;:::o;10395:593::-;10506:6;10555:2;10543:9;10534:7;10530:23;10526:32;10523:119;;;10561:79;;:::i;:::-;10523:119;10709:1;10698:9;10694:17;10681:31;10739:18;10731:6;10728:30;10725:117;;;10761:79;;:::i;:::-;10725:117;10866:105;10963:7;10954:6;10943:9;10939:22;10866:105;:::i;:::-;10856:115;;10652:329;10395:593;;;;:::o;10994:619::-;11071:6;11079;11087;11136:2;11124:9;11115:7;11111:23;11107:32;11104:119;;;11142:79;;:::i;:::-;11104:119;11262:1;11287:53;11332:7;11323:6;11312:9;11308:22;11287:53;:::i;:::-;11277:63;;11233:117;11389:2;11415:53;11460:7;11451:6;11440:9;11436:22;11415:53;:::i;:::-;11405:63;;11360:118;11517:2;11543:53;11588:7;11579:6;11568:9;11564:22;11543:53;:::i;:::-;11533:63;;11488:118;10994:619;;;;;:::o;11619:329::-;11678:6;11727:2;11715:9;11706:7;11702:23;11698:32;11695:119;;;11733:79;;:::i;:::-;11695:119;11853:1;11878:53;11923:7;11914:6;11903:9;11899:22;11878:53;:::i;:::-;11868:63;;11824:117;11619:329;;;;:::o;11954:116::-;12024:21;12039:5;12024:21;:::i;:::-;12017:5;12014:32;12004:60;;12060:1;12057;12050:12;12004:60;11954:116;:::o;12076:133::-;12119:5;12157:6;12144:20;12135:29;;12173:30;12197:5;12173:30;:::i;:::-;12076:133;;;;:::o;12215:468::-;12280:6;12288;12337:2;12325:9;12316:7;12312:23;12308:32;12305:119;;;12343:79;;:::i;:::-;12305:119;12463:1;12488:53;12533:7;12524:6;12513:9;12509:22;12488:53;:::i;:::-;12478:63;;12434:117;12590:2;12616:50;12658:7;12649:6;12638:9;12634:22;12616:50;:::i;:::-;12606:60;;12561:115;12215:468;;;;;:::o;12689:307::-;12750:4;12840:18;12832:6;12829:30;12826:56;;;12862:18;;:::i;:::-;12826:56;12900:29;12922:6;12900:29;:::i;:::-;12892:37;;12984:4;12978;12974:15;12966:23;;12689:307;;;:::o;13002:410::-;13079:5;13104:65;13120:48;13161:6;13120:48;:::i;:::-;13104:65;:::i;:::-;13095:74;;13192:6;13185:5;13178:21;13230:4;13223:5;13219:16;13268:3;13259:6;13254:3;13250:16;13247:25;13244:112;;;13275:79;;:::i;:::-;13244:112;13365:41;13399:6;13394:3;13389;13365:41;:::i;:::-;13085:327;13002:410;;;;;:::o;13431:338::-;13486:5;13535:3;13528:4;13520:6;13516:17;13512:27;13502:122;;13543:79;;:::i;:::-;13502:122;13660:6;13647:20;13685:78;13759:3;13751:6;13744:4;13736:6;13732:17;13685:78;:::i;:::-;13676:87;;13492:277;13431:338;;;;:::o;13775:943::-;13870:6;13878;13886;13894;13943:3;13931:9;13922:7;13918:23;13914:33;13911:120;;;13950:79;;:::i;:::-;13911:120;14070:1;14095:53;14140:7;14131:6;14120:9;14116:22;14095:53;:::i;:::-;14085:63;;14041:117;14197:2;14223:53;14268:7;14259:6;14248:9;14244:22;14223:53;:::i;:::-;14213:63;;14168:118;14325:2;14351:53;14396:7;14387:6;14376:9;14372:22;14351:53;:::i;:::-;14341:63;;14296:118;14481:2;14470:9;14466:18;14453:32;14512:18;14504:6;14501:30;14498:117;;;14534:79;;:::i;:::-;14498:117;14639:62;14693:7;14684:6;14673:9;14669:22;14639:62;:::i;:::-;14629:72;;14424:287;13775:943;;;;;;;:::o;14724:654::-;14802:6;14810;14859:2;14847:9;14838:7;14834:23;14830:32;14827:119;;;14865:79;;:::i;:::-;14827:119;14985:1;15010:53;15055:7;15046:6;15035:9;15031:22;15010:53;:::i;:::-;15000:63;;14956:117;15140:2;15129:9;15125:18;15112:32;15171:18;15163:6;15160:30;15157:117;;;15193:79;;:::i;:::-;15157:117;15298:63;15353:7;15344:6;15333:9;15329:22;15298:63;:::i;:::-;15288:73;;15083:288;14724:654;;;;;:::o;15384:474::-;15452:6;15460;15509:2;15497:9;15488:7;15484:23;15480:32;15477:119;;;15515:79;;:::i;:::-;15477:119;15635:1;15660:53;15705:7;15696:6;15685:9;15681:22;15660:53;:::i;:::-;15650:63;;15606:117;15762:2;15788:53;15833:7;15824:6;15813:9;15809:22;15788:53;:::i;:::-;15778:63;;15733:118;15384:474;;;;;:::o;15864:180::-;15912:77;15909:1;15902:88;16009:4;16006:1;15999:15;16033:4;16030:1;16023:15;16050:320;16094:6;16131:1;16125:4;16121:12;16111:22;;16178:1;16172:4;16168:12;16199:18;16189:81;;16255:4;16247:6;16243:17;16233:27;;16189:81;16317:2;16309:6;16306:14;16286:18;16283:38;16280:84;;;16336:18;;:::i;:::-;16280:84;16101:269;16050:320;;;:::o;16376:220::-;16516:34;16512:1;16504:6;16500:14;16493:58;16585:3;16580:2;16572:6;16568:15;16561:28;16376:220;:::o;16602:366::-;16744:3;16765:67;16829:2;16824:3;16765:67;:::i;:::-;16758:74;;16841:93;16930:3;16841:93;:::i;:::-;16959:2;16954:3;16950:12;16943:19;;16602:366;;;:::o;16974:419::-;17140:4;17178:2;17167:9;17163:18;17155:26;;17227:9;17221:4;17217:20;17213:1;17202:9;17198:17;17191:47;17255:131;17381:4;17255:131;:::i;:::-;17247:139;;16974:419;;;:::o;17399:248::-;17539:34;17535:1;17527:6;17523:14;17516:58;17608:31;17603:2;17595:6;17591:15;17584:56;17399:248;:::o;17653:366::-;17795:3;17816:67;17880:2;17875:3;17816:67;:::i;:::-;17809:74;;17892:93;17981:3;17892:93;:::i;:::-;18010:2;18005:3;18001:12;17994:19;;17653:366;;;:::o;18025:419::-;18191:4;18229:2;18218:9;18214:18;18206:26;;18278:9;18272:4;18268:20;18264:1;18253:9;18249:17;18242:47;18306:131;18432:4;18306:131;:::i;:::-;18298:139;;18025:419;;;:::o;18450:180::-;18498:77;18495:1;18488:88;18595:4;18592:1;18585:15;18619:4;18616:1;18609:15;18636:180;18684:77;18681:1;18674:88;18781:4;18778:1;18771:15;18805:4;18802:1;18795:15;18822:233;18861:3;18884:24;18902:5;18884:24;:::i;:::-;18875:33;;18930:66;18923:5;18920:77;18917:103;;;19000:18;;:::i;:::-;18917:103;19047:1;19040:5;19036:13;19029:20;;18822:233;;;:::o;19061:232::-;19201:34;19197:1;19189:6;19185:14;19178:58;19270:15;19265:2;19257:6;19253:15;19246:40;19061:232;:::o;19299:366::-;19441:3;19462:67;19526:2;19521:3;19462:67;:::i;:::-;19455:74;;19538:93;19627:3;19538:93;:::i;:::-;19656:2;19651:3;19647:12;19640:19;;19299:366;;;:::o;19671:419::-;19837:4;19875:2;19864:9;19860:18;19852:26;;19924:9;19918:4;19914:20;19910:1;19899:9;19895:17;19888:47;19952:131;20078:4;19952:131;:::i;:::-;19944:139;;19671:419;;;:::o;20096:230::-;20236:34;20232:1;20224:6;20220:14;20213:58;20305:13;20300:2;20292:6;20288:15;20281:38;20096:230;:::o;20332:366::-;20474:3;20495:67;20559:2;20554:3;20495:67;:::i;:::-;20488:74;;20571:93;20660:3;20571:93;:::i;:::-;20689:2;20684:3;20680:12;20673:19;;20332:366;;;:::o;20704:419::-;20870:4;20908:2;20897:9;20893:18;20885:26;;20957:9;20951:4;20947:20;20943:1;20932:9;20928:17;20921:47;20985:131;21111:4;20985:131;:::i;:::-;20977:139;;20704:419;;;:::o;21129:231::-;21269:34;21265:1;21257:6;21253:14;21246:58;21338:14;21333:2;21325:6;21321:15;21314:39;21129:231;:::o;21366:366::-;21508:3;21529:67;21593:2;21588:3;21529:67;:::i;:::-;21522:74;;21605:93;21694:3;21605:93;:::i;:::-;21723:2;21718:3;21714:12;21707:19;;21366:366;;;:::o;21738:419::-;21904:4;21942:2;21931:9;21927:18;21919:26;;21991:9;21985:4;21981:20;21977:1;21966:9;21962:17;21955:47;22019:131;22145:4;22019:131;:::i;:::-;22011:139;;21738:419;;;:::o;22163:174::-;22303:26;22299:1;22291:6;22287:14;22280:50;22163:174;:::o;22343:366::-;22485:3;22506:67;22570:2;22565:3;22506:67;:::i;:::-;22499:74;;22582:93;22671:3;22582:93;:::i;:::-;22700:2;22695:3;22691:12;22684:19;;22343:366;;;:::o;22715:419::-;22881:4;22919:2;22908:9;22904:18;22896:26;;22968:9;22962:4;22958:20;22954:1;22943:9;22939:17;22932:47;22996:131;23122:4;22996:131;:::i;:::-;22988:139;;22715:419;;;:::o;23140:228::-;23280:34;23276:1;23268:6;23264:14;23257:58;23349:11;23344:2;23336:6;23332:15;23325:36;23140:228;:::o;23374:366::-;23516:3;23537:67;23601:2;23596:3;23537:67;:::i;:::-;23530:74;;23613:93;23702:3;23613:93;:::i;:::-;23731:2;23726:3;23722:12;23715:19;;23374:366;;;:::o;23746:419::-;23912:4;23950:2;23939:9;23935:18;23927:26;;23999:9;23993:4;23989:20;23985:1;23974:9;23970:17;23963:47;24027:131;24153:4;24027:131;:::i;:::-;24019:139;;23746:419;;;:::o;24171:148::-;24273:11;24310:3;24295:18;;24171:148;;;;:::o;24325:161::-;24465:9;24461:1;24453:6;24449:14;24442:33;24325:161;:::o;24496:416::-;24656:3;24681:84;24763:1;24758:3;24681:84;:::i;:::-;24674:91;;24778:93;24867:3;24778:93;:::i;:::-;24900:1;24895:3;24891:11;24884:18;;24496:416;;;:::o;24922:157::-;24971:4;24998:3;24990:11;;25025:3;25022:1;25015:14;25063:4;25060:1;25050:18;25042:26;;24922:157;;;:::o;25117:925::-;25220:3;25261:5;25255:12;25294:36;25320:9;25294:36;:::i;:::-;25350:89;25432:6;25427:3;25350:89;:::i;:::-;25343:96;;25474:1;25463:9;25459:17;25494:1;25489:153;;;;25660:1;25655:377;;;;25452:580;;25489:153;25581:4;25577:9;25566;25562:25;25557:3;25550:38;25621:6;25616:3;25612:16;25605:23;;25489:153;;25655:377;25730:38;25762:5;25730:38;:::i;:::-;25794:1;25812:166;25826:6;25823:1;25820:13;25812:166;;;25904:7;25898:14;25894:1;25889:3;25885:11;25878:35;25958:1;25949:7;25945:15;25934:26;;25848:4;25845:1;25841:12;25836:17;;25812:166;;;26011:6;26006:3;26002:16;25995:23;;25662:370;;25452:580;;25224:818;;25117:925;;;;:::o;26052:551::-;26282:3;26308:148;26452:3;26308:148;:::i;:::-;26301:155;;26477:92;26565:3;26556:6;26477:92;:::i;:::-;26470:99;;26590:3;26583:10;;26052:551;;;;:::o;26613:237::-;26757:34;26753:1;26745:6;26741:14;26734:58;26830:8;26825:2;26817:6;26813:15;26806:33;26613:237;:::o;26860:382::-;27002:3;27027:67;27091:2;27086:3;27027:67;:::i;:::-;27020:74;;27107:93;27196:3;27107:93;:::i;:::-;27229:2;27224:3;27220:12;27213:19;;26860:382;;;:::o;27252:435::-;27418:4;27460:2;27449:9;27445:18;27437:26;;27513:9;27507:4;27503:20;27499:1;27488:9;27484:17;27477:47;27545:131;27671:4;27545:131;:::i;:::-;27537:139;;27252:435;;;:::o;27697:190::-;27841:34;27837:1;27829:6;27825:14;27818:58;27697:190;:::o;27897:382::-;28039:3;28064:67;28128:2;28123:3;28064:67;:::i;:::-;28057:74;;28144:93;28233:3;28144:93;:::i;:::-;28266:2;28261:3;28257:12;28250:19;;27897:382;;;:::o;28289:435::-;28455:4;28497:2;28486:9;28482:18;28474:26;;28550:9;28544:4;28540:20;28536:1;28525:9;28521:17;28514:47;28582:131;28708:4;28582:131;:::i;:::-;28574:139;;28289:435;;;:::o;28734:236::-;28878:34;28874:1;28866:6;28862:14;28855:58;28951:7;28946:2;28938:6;28934:15;28927:32;28734:236;:::o;28980:382::-;29122:3;29147:67;29211:2;29206:3;29147:67;:::i;:::-;29140:74;;29227:93;29316:3;29227:93;:::i;:::-;29349:2;29344:3;29340:12;29333:19;;28980:382;;;:::o;29372:435::-;29538:4;29580:2;29569:9;29565:18;29557:26;;29633:9;29627:4;29623:20;29619:1;29608:9;29604:17;29597:47;29665:131;29791:4;29665:131;:::i;:::-;29657:139;;29372:435;;;:::o;29817:235::-;29961:34;29957:1;29949:6;29945:14;29938:58;30034:6;30029:2;30021:6;30017:15;30010:31;29817:235;:::o;30062:382::-;30204:3;30229:67;30293:2;30288:3;30229:67;:::i;:::-;30222:74;;30309:93;30398:3;30309:93;:::i;:::-;30431:2;30426:3;30422:12;30415:19;;30062:382;;;:::o;30454:435::-;30620:4;30662:2;30651:9;30647:18;30639:26;;30715:9;30709:4;30705:20;30701:1;30690:9;30686:17;30679:47;30747:131;30873:4;30747:131;:::i;:::-;30739:139;;30454:435;;;:::o;30899:183::-;31043:27;31039:1;31031:6;31027:14;31020:51;30899:183;:::o;31092:382::-;31234:3;31259:67;31323:2;31318:3;31259:67;:::i;:::-;31252:74;;31339:93;31428:3;31339:93;:::i;:::-;31461:2;31456:3;31452:12;31445:19;;31092:382;;;:::o;31484:435::-;31650:4;31692:2;31681:9;31677:18;31669:26;;31745:9;31739:4;31735:20;31731:1;31720:9;31716:17;31709:47;31777:131;31903:4;31777:131;:::i;:::-;31769:139;;31484:435;;;:::o;31929:249::-;32073:34;32069:1;32061:6;32057:14;32050:58;32146:20;32141:2;32133:6;32129:15;32122:45;31929:249;:::o;32188:382::-;32330:3;32355:67;32419:2;32414:3;32355:67;:::i;:::-;32348:74;;32435:93;32524:3;32435:93;:::i;:::-;32557:2;32552:3;32548:12;32541:19;;32188:382;;;:::o;32580:435::-;32746:4;32788:2;32777:9;32773:18;32765:26;;32841:9;32835:4;32831:20;32827:1;32816:9;32812:17;32805:47;32873:131;32999:4;32873:131;:::i;:::-;32865:139;;32580:435;;;:::o;33025:397::-;33131:3;33163:39;33196:5;33163:39;:::i;:::-;33222:89;33304:6;33299:3;33222:89;:::i;:::-;33215:96;;33324:52;33369:6;33364:3;33357:4;33350:5;33346:16;33324:52;:::i;:::-;33405:6;33400:3;33396:16;33389:23;;33135:287;33025:397;;;;:::o;33432:451::-;33612:3;33638:95;33729:3;33720:6;33638:95;:::i;:::-;33631:102;;33754:95;33845:3;33836:6;33754:95;:::i;:::-;33747:102;;33870:3;33863:10;;33432:451;;;;;:::o;33893:245::-;34037:34;34033:1;34025:6;34021:14;34014:58;34110:16;34105:2;34097:6;34093:15;34086:41;33893:245;:::o;34148:382::-;34290:3;34315:67;34379:2;34374:3;34315:67;:::i;:::-;34308:74;;34395:93;34484:3;34395:93;:::i;:::-;34517:2;34512:3;34508:12;34501:19;;34148:382;;;:::o;34540:435::-;34706:4;34748:2;34737:9;34733:18;34725:26;;34801:9;34795:4;34791:20;34787:1;34776:9;34772:17;34765:47;34833:131;34959:4;34833:131;:::i;:::-;34825:139;;34540:435;;;:::o;34985:106::-;35036:6;35074:5;35068:12;35058:22;;34985:106;;;:::o;35101:180::-;35184:11;35222:6;35217:3;35210:19;35266:4;35261:3;35257:14;35242:29;;35101:180;;;;:::o;35291:380::-;35377:3;35409:38;35441:5;35409:38;:::i;:::-;35467:70;35530:6;35525:3;35467:70;:::i;:::-;35460:77;;35550:52;35595:6;35590:3;35583:4;35576:5;35572:16;35550:52;:::i;:::-;35631:29;35653:6;35631:29;:::i;:::-;35626:3;35622:39;35615:46;;35381:290;35291:380;;;;:::o;35681:668::-;35876:4;35918:3;35907:9;35903:19;35895:27;;35936:71;36004:1;35993:9;35989:17;35980:6;35936:71;:::i;:::-;36021:72;36089:2;36078:9;36074:18;36065:6;36021:72;:::i;:::-;36107;36175:2;36164:9;36160:18;36151:6;36107:72;:::i;:::-;36230:9;36224:4;36220:20;36215:2;36204:9;36200:18;36193:48;36262:76;36333:4;36324:6;36262:76;:::i;:::-;36254:84;;35681:668;;;;;;;:::o;36359:153::-;36415:5;36450:6;36444:13;36435:22;;36470:32;36496:5;36470:32;:::i;:::-;36359:153;;;;:::o;36522:373::-;36591:6;36644:2;36632:9;36623:7;36619:23;36615:32;36612:119;;;36650:79;;:::i;:::-;36612:119;36778:1;36807:63;36862:7;36853:6;36842:9;36838:22;36807:63;:::i;:::-;36797:73;;36745:139;36522:373;;;;:::o;36905:252::-;37049:34;37045:1;37037:6;37033:14;37026:58;37122:23;37117:2;37109:6;37105:15;37098:48;36905:252;:::o;37167:382::-;37309:3;37334:67;37398:2;37393:3;37334:67;:::i;:::-;37327:74;;37414:93;37503:3;37414:93;:::i;:::-;37536:2;37531:3;37527:12;37520:19;;37167:382;;;:::o;37559:435::-;37725:4;37767:2;37756:9;37752:18;37744:26;;37820:9;37814:4;37810:20;37806:1;37795:9;37791:17;37784:47;37852:131;37978:4;37852:131;:::i;:::-;37844:139;;37559:435;;;:::o;38004:196::-;38056:77;38053:1;38046:88;38157:4;38154:1;38147:15;38185:4;38182:1;38175:15;38210:190;38354:34;38350:1;38342:6;38338:14;38331:58;38210:190;:::o;38410:382::-;38552:3;38577:67;38641:2;38636:3;38577:67;:::i;:::-;38570:74;;38657:93;38746:3;38657:93;:::i;:::-;38779:2;38774:3;38770:12;38763:19;;38410:382;;;:::o;38802:435::-;38968:4;39010:2;38999:9;38995:18;38987:26;;39063:9;39057:4;39053:20;39049:1;39038:9;39034:17;39027:47;39095:131;39221:4;39095:131;:::i;:::-;39087:139;;38802:435;;;:::o;39247:186::-;39391:30;39387:1;39379:6;39375:14;39368:54;39247:186;:::o;39443:382::-;39585:3;39610:67;39674:2;39669:3;39610:67;:::i;:::-;39603:74;;39690:93;39779:3;39690:93;:::i;:::-;39812:2;39807:3;39803:12;39796:19;;39443:382;;;:::o;39835:435::-;40001:4;40043:2;40032:9;40028:18;40020:26;;40096:9;40090:4;40086:20;40082:1;40071:9;40067:17;40060:47;40128:131;40254:4;40128:131;:::i;:::-;40120:139;;39835:435;;;:::o;40280:211::-;40320:4;40344:20;40362:1;40344:20;:::i;:::-;40339:25;;40382:20;40400:1;40382:20;:::i;:::-;40377:25;;40425:1;40422;40419:8;40416:34;;;40430:18;;:::i;:::-;40416:34;40479:1;40476;40472:9;40464:17;;40280:211;;;;:::o;40501:329::-;40541:3;40564:20;40582:1;40564:20;:::i;:::-;40559:25;;40602:20;40620:1;40602:20;:::i;:::-;40597:25;;40764:1;40696:66;40692:74;40689:1;40686:81;40683:107;;;40770:18;;:::i;:::-;40683:107;40818:1;40815;40811:9;40804:16;;40501:329;;;;:::o;40840:196::-;40892:77;40889:1;40882:88;40993:4;40990:1;40983:15;41021:4;41018:1;41011:15"},"gasEstimates":{"creation":{"codeDepositCost":"3030800","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2902","contractURI()":"infinite","getApproved(uint256)":"5300","isApprovedForAll(address,address)":"infinite","multiSafeMint((address,string)[])":"infinite","name()":"infinite","owner()":"2589","ownerOf(uint256)":"3135","renounceOwnership()":"30443","safeMint(address,string)":"infinite","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","supportsInterface(bytes4)":"929","symbol()":"infinite","tokenByIndex(uint256)":"infinite","tokenOfOwnerByIndex(address,uint256)":"infinite","tokenURI(uint256)":"infinite","totalSupply()":"2557","transferFrom(address,address,uint256)":"infinite","transferOwnership(address)":"30879"},"internal":{"_baseURI()":"infinite","_beforeTokenTransfer(address,address,uint256,uint256)":"infinite","_burn(uint256)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","contractURI()":"e8a3d485","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","multiSafeMint((address,string)[])":"1c02aeaf","name()":"06fdde03","owner()":"8da5cb5b","ownerOf(uint256)":"6352211e","renounceOwnership()":"715018a6","safeMint(address,string)":"d204c45e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenByIndex(uint256)":"4f6ccce7","tokenOfOwnerByIndex(address,uint256)":"2f745c59","tokenURI(uint256)":"c87b56dd","totalSupply()":"18160ddd","transferFrom(address,address,uint256)":"23b872dd","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"internalType\":\"struct MyToken.ItemParam[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"multiSafeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC721_BASE.sol\":\"MyToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/ERC721_BASE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ncontract MyToken is ERC721, ERC721Enumerable, ERC721URIStorage, Ownable {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _tokenIdCounter;\\n\\n    string private _contractURI;\\n\\n    struct ItemParam {\\n        address to;\\n        string tokenURI;\\n    }\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_\\n    ) ERC721(name_, symbol_) {\\n        _contractURI = contractURI_;\\n    }\\n\\n    function _baseURI() internal pure override returns (string memory) {\\n        return \\\"ipfs://\\\";\\n    }\\n\\n    function contractURI() public view returns (string memory) {\\n        return string(abi.encodePacked(\\\"ipfs://\\\", _contractURI));\\n    }\\n\\n    function safeMint(address to, string memory uri) public onlyOwner {\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _safeMint(to, tokenId);\\n        _setTokenURI(tokenId, uri);\\n    }\\n\\n    function multiSafeMint(ItemParam[] memory items) public onlyOwner {\\n        for (uint256 i = 0; i < items.length; i++) {\\n            safeMint(items[i].to, items[i].tokenURI);\\n        }\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 batchSize\\n    ) internal override(ERC721, ERC721Enumerable) {\\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\\n    }\\n\\n    function _burn(uint256 tokenId)\\n        internal\\n        override(ERC721, ERC721URIStorage)\\n    {\\n        super._burn(tokenId);\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override(ERC721, ERC721URIStorage)\\n        returns (string memory)\\n    {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721, ERC721Enumerable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x576b8889c96163e40fb028b8cffb6654a7471cf0f4d284d1115478493ca05fc1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1080,"contract":"contracts/ERC721_BASE.sol:MyToken","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":1082,"contract":"contracts/ERC721_BASE.sol:MyToken","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":1086,"contract":"contracts/ERC721_BASE.sol:MyToken","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":1090,"contract":"contracts/ERC721_BASE.sol:MyToken","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":1094,"contract":"contracts/ERC721_BASE.sol:MyToken","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":1100,"contract":"contracts/ERC721_BASE.sol:MyToken","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":2148,"contract":"contracts/ERC721_BASE.sol:MyToken","label":"_ownedTokens","offset":0,"slot":"6","type":"t_mapping(t_address,t_mapping(t_uint256,t_uint256))"},{"astId":2152,"contract":"contracts/ERC721_BASE.sol:MyToken","label":"_ownedTokensIndex","offset":0,"slot":"7","type":"t_mapping(t_uint256,t_uint256)"},{"astId":2155,"contract":"contracts/ERC721_BASE.sol:MyToken","label":"_allTokens","offset":0,"slot":"8","type":"t_array(t_uint256)dyn_storage"},{"astId":2159,"contract":"contracts/ERC721_BASE.sol:MyToken","label":"_allTokensIndex","offset":0,"slot":"9","type":"t_mapping(t_uint256,t_uint256)"},{"astId":2500,"contract":"contracts/ERC721_BASE.sol:MyToken","label":"_tokenURIs","offset":0,"slot":"10","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":7,"contract":"contracts/ERC721_BASE.sol:MyToken","label":"_owner","offset":0,"slot":"11","type":"t_address"},{"astId":4783,"contract":"contracts/ERC721_BASE.sol:MyToken","label":"_tokenIdCounter","offset":0,"slot":"12","type":"t_struct(Counter)3028_storage"},{"astId":4785,"contract":"contracts/ERC721_BASE.sol:MyToken","label":"_contractURI","offset":0,"slot":"13","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)dyn_storage":{"base":"t_uint256","encoding":"dynamic_array","label":"uint256[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_mapping(t_uint256,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Counter)3028_storage":{"encoding":"inplace","label":"struct Counters.Counter","members":[{"astId":3027,"contract":"contracts/ERC721_BASE.sol:MyToken","label":"_value","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}